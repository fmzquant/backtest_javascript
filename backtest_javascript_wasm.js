"undefined"==typeof __ctx&&(__ctx={}),__ctx.INITIAL_MEMORY=335544320,"undefined"!=typeof module&&(__ctx.module=module),"undefined"!=typeof exports&&(__ctx.exports=exports),"undefined"==typeof module&&"undefined"==typeof exports||(module=void 0,exports=void 0,print=console.log),!function(n,r){var t,e;"object"==typeof exports&&"undefined"!=typeof module?module.exports=r():"function"==typeof define&&define.amd?define("underscore",r):(n="undefined"!=typeof globalThis?globalThis:n||self,t=n._,(e=n._=r()).noConflict=function(){return n._=t,e})}(this,function(){var n="1.13.7",r="object"==typeof self&&self.self===self&&self||"object"==typeof global&&global.global===global&&global||Function("return this")()||{},t=Array.prototype,e=Object.prototype,u="undefined"!=typeof Symbol?Symbol.prototype:null,i=t.push,o=t.slice,a=e.toString,f=e.hasOwnProperty,c="undefined"!=typeof ArrayBuffer,l="undefined"!=typeof DataView,s=Array.isArray,p=Object.keys,v=Object.create,h=c&&ArrayBuffer.isView,y=isNaN,d=isFinite,g=!{toString:null}.propertyIsEnumerable("toString"),b=["valueOf","isPrototypeOf","toString","propertyIsEnumerable","hasOwnProperty","toLocaleString"],m=Math.pow(2,53)-1;function j(n,r){return r=null==r?n.length-1:+r,function(){for(var t=Math.max(arguments.length-r,0),e=Array(t),u=0;u<t;u++)e[u]=arguments[u+r];switch(r){case 0:return n.call(this,e);case 1:return n.call(this,arguments[0],e);case 2:return n.call(this,arguments[0],arguments[1],e)}for(var i=Array(r+1),u=0;u<r;u++)i[u]=arguments[u];return i[r]=e,n.apply(this,i)}}function w(n){var r=typeof n;return"function"==r||"object"==r&&!!n}function _(n){return void 0===n}function A(n){return!0===n||!1===n||"[object Boolean]"===a.call(n)}function x(n){var r="[object "+n+"]";return function(n){return a.call(n)===r}}var S=x("String"),O=x("Number"),M=x("Date"),E=x("RegExp"),B=x("Error"),N=x("Symbol"),I=x("ArrayBuffer"),T=x("Function"),r=r.document&&r.document.childNodes,D=T="function"!=typeof/./&&"object"!=typeof Int8Array&&"function"!=typeof r?function(n){return"function"==typeof n||!1}:T,r=x("Object"),V=l&&(!/\[native code\]/.test(String(DataView))||r(new DataView(new ArrayBuffer(8)))),T="undefined"!=typeof Map&&r(new Map),l=x("DataView"),q=V?function(n){return null!=n&&D(n.getInt8)&&I(n.buffer)}:l,U=s||x("Array");function W(n,r){return null!=n&&f.call(n,r)}var z=x("Arguments"),L=(!function(){z(arguments)||(z=function(n){return W(n,"callee")})}(),z);function $(n){return O(n)&&y(n)}function C(n){return function(){return n}}function K(n){return function(r){r=n(r);return"number"==typeof r&&0<=r&&r<=m}}function J(n){return function(r){return null==r?void 0:r[n]}}var G=J("byteLength"),H=K(G),Q=/\[object ((I|Ui)nt(8|16|32)|Float(32|64)|Uint8Clamped|Big(I|Ui)nt64)Array\]/,X=c?function(n){return h?h(n)&&!q(n):H(n)&&Q.test(a.call(n))}:C(!1),Y=J("length");function Z(n,r){r=function(n){for(var r={},t=n.length,e=0;e<t;++e)r[n[e]]=!0;return{contains:function(n){return!0===r[n]},push:function(t){return r[t]=!0,n.push(t)}}}(r);var t=b.length,u=n.constructor,i=D(u)&&u.prototype||e,o="constructor";for(W(n,o)&&!r.contains(o)&&r.push(o);t--;)(o=b[t])in n&&n[o]!==i[o]&&!r.contains(o)&&r.push(o)}function nn(n){if(!w(n))return[];if(p)return p(n);var t,r=[];for(t in n)W(n,t)&&r.push(t);return g&&Z(n,r),r}function rn(n,r){var t=nn(r),e=t.length;if(null==n)return!e;for(var u=Object(n),i=0;i<e;i++){var o=t[i];if(r[o]!==u[o]||!(o in u))return!1}return!0}function tn(n){return n instanceof tn?n:this instanceof tn?void(this._wrapped=n):new tn(n)}function en(n){return new Uint8Array(n.buffer||n,n.byteOffset||0,G(n))}tn.VERSION=n,tn.prototype.valueOf=tn.prototype.toJSON=tn.prototype.value=function(){return this._wrapped},tn.prototype.toString=function(){return String(this._wrapped)};var un="[object DataView]";function an(n){if(!w(n))return[];var t,r=[];for(t in n)r.push(t);return g&&Z(n,r),r}function fn(n){var r=Y(n);return function(t){if(null==t)return!1;var e=an(t);if(Y(e))return!1;for(var u=0;u<r;u++)if(!D(t[n[u]]))return!1;return n!==hn||!D(t[cn])}}var cn="forEach",r=["clear","delete"],l=["get","has","set"],s=r.concat(cn,l),hn=r.concat(l),c=["add"].concat(r,cn,"has"),l=T?fn(s):x("Map"),r=T?fn(hn):x("WeakMap"),s=T?fn(c):x("Set"),T=x("WeakSet");function jn(n){for(var r=nn(n),t=r.length,e=Array(t),u=0;u<t;u++)e[u]=n[r[u]];return e}function wn(n){for(var r={},t=nn(n),e=0,u=t.length;e<u;e++)r[n[t[e]]]=t[e];return r}function _n(n){var t,r=[];for(t in n)D(n[t])&&r.push(t);return r.sort()}function An(n,r){return function(t){var e=arguments.length;if(r&&(t=Object(t)),!(e<2||null==t))for(var u=1;u<e;u++)for(var i=arguments[u],o=n(i),a=o.length,f=0;f<a;f++){var c=o[f];r&&void 0!==t[c]||(t[c]=i[c])}return t}}var xn=An(an),Sn=An(nn),On=An(an,!0);function Mn(n){var r;return w(n)?v?v(n):((r=function(){}).prototype=n,n=new r,r.prototype=null,n):{}}function En(n){return U(n)?n:[n]}function Bn(n){return tn.toPath(n)}function Nn(n,r){for(var t=r.length,e=0;e<t;e++){if(null==n)return;n=n[r[e]]}return t?n:void 0}function In(n,r,t){n=Nn(n,Bn(r));return _(n)?t:n}function Tn(n){return n}function kn(n){return n=Sn({},n),function(r){return rn(r,n)}}function Dn(n){return n=Bn(n),function(r){return Nn(r,n)}}function Rn(n,r,t){if(void 0===r)return n;switch(null==t?3:t){case 1:return function(t){return n.call(r,t)};case 3:return function(t,e,u){return n.call(r,t,e,u)};case 4:return function(t,e,u,i){return n.call(r,t,e,u,i)}}return function(){return n.apply(r,arguments)}}function Vn(n,r,t){return null==n?Tn:D(n)?Rn(n,r,t):(w(n)&&!U(n)?kn:Dn)(n)}function Fn(n,r){return Vn(n,r,1/0)}function Pn(n,r,t){return tn.iteratee!==Fn?tn.iteratee(n,r):Vn(n,r,t)}function qn(){}function Un(n,r){return null==r&&(r=n,n=0),n+Math.floor(Math.random()*(r-n+1))}tn.toPath=En,tn.iteratee=Fn;var Wn=Date.now||function(){return(new Date).getTime()};function zn(n){function r(r){return n[r]}var t="(?:"+nn(n).join("|")+")",e=RegExp(t),u=RegExp(t,"g");return function(n){return e.test(n=null==n?"":""+n)?n.replace(u,r):n}}var c={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","`":"&#x60;"},$n=zn(c),c=zn(wn(c)),Kn=tn.templateSettings={evaluate:/<%([\s\S]+?)%>/g,interpolate:/<%=([\s\S]+?)%>/g,escape:/<%-([\s\S]+?)%>/g},Jn=/(.)^/,Gn={"'":"'","\\":"\\","\r":"r","\n":"n","\u2028":"u2028","\u2029":"u2029"},Hn=/\\|'|\r|\n|\u2028|\u2029/g;function Qn(n){return"\\"+Gn[n]}var Xn=/^\s*(\w|\$)+\s*$/,Yn=0;function Zn(n,r,t,e,u){return e instanceof r?(e=Mn(n.prototype),w(r=n.apply(e,u))?r:e):n.apply(t,u)}var nr=j(function(n,r){function e(){for(var u=0,i=r.length,o=Array(i),a=0;a<i;a++)o[a]=r[a]===t?arguments[u++]:r[a];for(;u<arguments.length;)o.push(arguments[u++]);return Zn(n,e,this,this,o)}var t=nr.placeholder;return e}),rr=(nr.placeholder=tn,j(function(n,r,t){var e;if(D(n))return e=j(function(u){return Zn(n,e,r,this,t.concat(u))});throw new TypeError("Bind must be called on a function")})),tr=K(Y);function er(n,r,t,e){if(e=e||[],r||0===r){if(r<=0)return e.concat(n)}else r=1/0;for(var u=e.length,i=0,o=Y(n);i<o;i++){var a=n[i];if(tr(a)&&(U(a)||L(a)))if(1<r)er(a,r-1,t,e),u=e.length;else for(var f=0,c=a.length;f<c;)e[u++]=a[f++];else t||(e[u++]=a)}return e}var ur=j(function(n,r){var t=(r=er(r,!1,!1)).length;if(t<1)throw new Error("bindAll must be passed function names");for(;t--;){var e=r[t];n[e]=rr(n[e],n)}return n}),ir=j(function(n,r,t){return setTimeout(function(){return n.apply(null,t)},r)}),or=nr(ir,tn,1);function ar(n){return function(){return!n.apply(this,arguments)}}function fr(n,r){var t;return function(){return 0<--n&&(t=r.apply(this,arguments)),n<=1&&(r=null),t}}var cr=nr(fr,2);function lr(n,r,t){r=Pn(r,t);for(var e,u=nn(n),i=0,o=u.length;i<o;i++)if(r(n[e=u[i]],e,n))return e}function sr(n){return function(r,t,e){t=Pn(t,e);for(var u=Y(r),i=0<n?0:u-1;0<=i&&i<u;i+=n)if(t(r[i],i,r))return i;return-1}}var pr=sr(1),vr=sr(-1);function hr(n,r,t,e){for(var u=(t=Pn(t,e,1))(r),i=0,o=Y(n);i<o;){var a=Math.floor((i+o)/2);t(n[a])<u?i=a+1:o=a}return i}function yr(n,r,t){return function(e,u,i){var a=0,f=Y(e);if("number"==typeof i)0<n?a=0<=i?i:Math.max(i+f,a):f=0<=i?Math.min(i+1,f):i+f+1;else if(t&&i&&f)return e[i=t(e,u)]===u?i:-1;if(u!=u)return 0<=(i=r(o.call(e,a,f),$))?i+a:-1;for(i=0<n?a:f-1;0<=i&&i<f;i+=n)if(e[i]===u)return i;return-1}}var dr=yr(1,pr,hr),gr=yr(-1,vr);function br(n,r,t){r=(tr(n)?pr:lr)(n,r,t);if(void 0!==r&&-1!==r)return n[r]}function mr(n,r,t){if(r=Rn(r,t),tr(n))for(e=0,u=n.length;e<u;e++)r(n[e],e,n);else for(var i=nn(n),e=0,u=i.length;e<u;e++)r(n[i[e]],i[e],n);return n}function jr(n,r,t){r=Pn(r,t);for(var e=!tr(n)&&nn(n),u=(e||n).length,i=Array(u),o=0;o<u;o++){var a=e?e[o]:o;i[o]=r(n[a],a,n)}return i}function wr(n){function r(r,t,e,u){var i=!tr(r)&&nn(r),o=(i||r).length,a=0<n?0:o-1;for(u||(e=r[i?i[a]:a],a+=n);0<=a&&a<o;a+=n){var f=i?i[a]:a;e=t(e,r[f],f,r)}return e}return function(n,t,e,u){var i=3<=arguments.length;return r(n,Rn(t,u,4),e,i)}}var _r=wr(1),Ar=wr(-1);function xr(n,r,t){var e=[];return r=Pn(r,t),mr(n,function(n,t,u){r(n,t,u)&&e.push(n)}),e}function Sr(n,r,t){r=Pn(r,t);for(var e=!tr(n)&&nn(n),u=(e||n).length,i=0;i<u;i++){var o=e?e[i]:i;if(!r(n[o],o,n))return!1}return!0}function Or(n,r,t){r=Pn(r,t);for(var e=!tr(n)&&nn(n),u=(e||n).length,i=0;i<u;i++){var o=e?e[i]:i;if(r(n[o],o,n))return!0}return!1}function Mr(n,r,t,e){return tr(n)||(n=jn(n)),0<=dr(n,r,t="number"==typeof t&&!e?t:0)}var Er=j(function(n,r,t){var e,u;return D(r)?u=r:(r=Bn(r),e=r.slice(0,-1),r=r[r.length-1]),jr(n,function(n){var i=u;if(!i){if(null==(n=e&&e.length?Nn(n,e):n))return;i=n[r]}return null==i?i:i.apply(n,t)})});function Br(n,r){return jr(n,Dn(r))}function Nr(n,r,t){var e,u,i=-1/0,o=-1/0;if(null==r||"number"==typeof r&&"object"!=typeof n[0]&&null!=n)for(var a=0,f=(n=tr(n)?n:jn(n)).length;a<f;a++)null!=(e=n[a])&&i<e&&(i=e);else r=Pn(r,t),mr(n,function(n,t,e){((u=r(n,t,e))>o||u===-1/0&&i===-1/0)&&(i=n,o=u)});return i}var Ir=/[^\ud800-\udfff]|[\ud800-\udbff][\udc00-\udfff]|[\ud800-\udfff]/g;function Tr(n){return n?U(n)?o.call(n):S(n)?n.match(Ir):tr(n)?jr(n,Tn):jn(n):[]}function kr(n,r,t){if(null==r||t)return(n=tr(n)?n:jn(n))[Un(n.length-1)];var e=Tr(n),t=Y(e);r=Math.max(Math.min(r,t),0);for(var i=t-1,o=0;o<r;o++){var a=Un(o,i),f=e[o];e[o]=e[a],e[a]=f}return e.slice(0,r)}function Dr(n,r){return function(t,e,u){var i=r?[[],[]]:{};return e=Pn(e,u),mr(t,function(r,u){u=e(r,u,t);n(i,r,u)}),i}}var Rr=Dr(function(n,r,t){W(n,t)?n[t].push(r):n[t]=[r]}),Vr=Dr(function(n,r,t){n[t]=r}),Fr=Dr(function(n,r,t){W(n,t)?n[t]++:n[t]=1}),Pr=Dr(function(n,r,t){n[t?0:1].push(r)},!0);function qr(n,r,t){return r in t}var Ur=j(function(n,r){var t={},e=r[0];if(null!=n){D(e)?(1<r.length&&(e=Rn(e,r[1])),r=an(n)):(e=qr,r=er(r,!1,!1),n=Object(n));for(var u=0,i=r.length;u<i;u++){var o=r[u],a=n[o];e(a,o,n)&&(t[o]=a)}}return t}),Wr=j(function(n,r){var t,e=r[0];return D(e)?(e=ar(e),1<r.length&&(t=r[1])):(r=jr(er(r,!1,!1),String),e=function(n,t){return!Mr(r,t)}),Ur(n,e,t)});function zr(n,r,t){return o.call(n,0,Math.max(0,n.length-(null==r||t?1:r)))}function Lr(n,r,t){return null==n||n.length<1?null==r||t?void 0:[]:null==r||t?n[0]:zr(n,n.length-r)}function $r(n,r,t){return o.call(n,null==r||t?1:r)}var Cr=j(function(n,r){return r=er(r,!0,!0),xr(n,function(n){return!Mr(r,n)})}),Kr=j(function(n,r){return Cr(n,r)});function Jr(n,r,t,e){A(r)||(e=t,t=r,r=!1),null!=t&&(t=Pn(t,e));for(var u=[],i=[],o=0,a=Y(n);o<a;o++){var f=n[o],c=t?t(f,o,n):f;r&&!t?(o&&i===c||u.push(f),i=c):t?Mr(i,c)||(i.push(c),u.push(f)):Mr(u,f)||u.push(f)}return u}var Gr=j(function(n){return Jr(er(n,!0,!0))});function Hr(n){for(var r=n&&Nr(n,Y).length||0,t=Array(r),e=0;e<r;e++)t[e]=Br(n,e);return t}var Qr=j(Hr);function Xr(n,r){return n._chain?tn(r).chain():r}function Yr(n){return mr(_n(n),function(r){var t=tn[r]=n[r];tn.prototype[r]=function(){var n=[this._wrapped];return i.apply(n,arguments),Xr(this,t.apply(tn,n))}}),tn}mr(["pop","push","reverse","shift","sort","splice","unshift"],function(n){var r=t[n];tn.prototype[n]=function(){var t=this._wrapped;return null!=t&&(r.apply(t,arguments),"shift"!==n&&"splice"!==n||0!==t.length||delete t[0]),Xr(this,t)}}),mr(["concat","join","slice"],function(n){var r=t[n];tn.prototype[n]=function(){var n=this._wrapped;return Xr(this,n=null!=n?r.apply(n,arguments):n)}});n=Yr({__proto__:null,VERSION:n,restArguments:j,isObject:w,isNull:function(n){return null===n},isUndefined:_,isBoolean:A,isElement:function(n){return!(!n||1!==n.nodeType)},isString:S,isNumber:O,isDate:M,isRegExp:E,isError:B,isSymbol:N,isArrayBuffer:I,isDataView:q,isArray:U,isFunction:D,isArguments:L,isFinite:function(n){return!N(n)&&d(n)&&!isNaN(parseFloat(n))},isNaN:$,isTypedArray:X,isEmpty:function(n){var r;return null==n||("number"==typeof(r=Y(n))&&(U(n)||S(n)||L(n))?0===r:0===Y(nn(n)))},isMatch:rn,isEqual:function(n,r){return function on(n,r,t,e){var i;return n===r?0!==n||1/n==1/r:null!=n&&null!=r&&(n!=n?r!=r:("function"==(i=typeof n)||"object"==i||"object"==typeof r)&&function n(r,t,e,i){r instanceof tn&&(r=r._wrapped),t instanceof tn&&(t=t._wrapped);var o=a.call(r);if(o!==a.call(t))return!1;if(V&&"[object Object]"==o&&q(r)){if(!q(t))return!1;o=un}switch(o){case"[object RegExp]":case"[object String]":return""+r==""+t;case"[object Number]":return+r!=+r?+t!=+t:0==+r?1/+r==1/t:+r==+t;case"[object Date]":case"[object Boolean]":return+r==+t;case"[object Symbol]":return u.valueOf.call(r)===u.valueOf.call(t);case"[object ArrayBuffer]":case un:return n(en(r),en(t),e,i)}if(!(o="[object Array]"===o)&&X(r)){if(G(r)!==G(t))return!1;if(r.buffer===t.buffer&&r.byteOffset===t.byteOffset)return!0;o=!0}if(!o){if("object"!=typeof r||"object"!=typeof t)return!1;var c=r.constructor,l=t.constructor;if(c!==l&&!(D(c)&&c instanceof c&&D(l)&&l instanceof l)&&"constructor"in r&&"constructor"in t)return!1}i=i||[];for(var s=(e=e||[]).length;s--;)if(e[s]===r)return i[s]===t;if(e.push(r),i.push(t),o){if((s=r.length)!==t.length)return!1;for(;s--;)if(!on(r[s],t[s],e,i))return!1}else{var p,v=nn(r),s=v.length;if(nn(t).length!==s)return!1;for(;s--;)if(!W(t,p=v[s])||!on(r[p],t[p],e,i))return!1}return e.pop(),i.pop(),!0}(n,r,t,e))}(n,r)},isMap:l,isWeakMap:r,isSet:s,isWeakSet:T,keys:nn,allKeys:an,values:jn,pairs:function(n){for(var r=nn(n),t=r.length,e=Array(t),u=0;u<t;u++)e[u]=[r[u],n[r[u]]];return e},invert:wn,functions:_n,methods:_n,extend:xn,extendOwn:Sn,assign:Sn,defaults:On,create:function(n,r){n=Mn(n);return r&&Sn(n,r),n},clone:function(n){return w(n)?U(n)?n.slice():xn({},n):n},tap:function(n,r){return r(n),n},get:In,has:function(n,r){for(var t=(r=Bn(r)).length,e=0;e<t;e++){var u=r[e];if(!W(n,u))return!1;n=n[u]}return!!t},mapObject:function(n,r,t){r=Pn(r,t);for(var e=nn(n),u=e.length,i={},o=0;o<u;o++){var a=e[o];i[a]=r(n[a],a,n)}return i},identity:Tn,constant:C,noop:qn,toPath:En,property:Dn,propertyOf:function(n){return null==n?qn:function(r){return In(n,r)}},matcher:kn,matches:kn,times:function(n,r,t){var e=Array(Math.max(0,n));r=Rn(r,t,1);for(var u=0;u<n;u++)e[u]=r(u);return e},random:Un,now:Wn,escape:$n,unescape:c,templateSettings:Kn,template:function(n,r,t){r=On({},r=!r&&t?t:r,tn.templateSettings);var t=RegExp([(r.escape||Jn).source,(r.interpolate||Jn).source,(r.evaluate||Jn).source].join("|")+"|$","g"),u=0,i="__p+='";n.replace(t,function(r,t,e,o,a){return i+=n.slice(u,a).replace(Hn,Qn),u=a+r.length,t?i+="'+\n((__t=("+t+"))==null?'':_.escape(__t))+\n'":e?i+="'+\n((__t=("+e+"))==null?'':__t)+\n'":o&&(i+="';\n"+o+"\n__p+='"),r}),i+="';\n";var o,t=r.variable;if(t){if(!Xn.test(t))throw new Error("variable is not a bare identifier: "+t)}else i="with(obj||{}){\n"+i+"}\n",t="obj";i="var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};\n"+i+"return __p;\n";try{o=new Function(t,"_",i)}catch(n){throw n.source=i,n}function f(n){return o.call(this,n,tn)}return f.source="function("+t+"){\n"+i+"}",f},result:function(n,r,t){var e=(r=Bn(r)).length;if(!e)return D(t)?t.call(n):t;for(var u=0;u<e;u++){var i=null==n?void 0:n[r[u]];void 0===i&&(i=t,u=e),n=D(i)?i.call(n):i}return n},uniqueId:function(n){var r=++Yn+"";return n?n+r:r},chain:function(n){n=tn(n);return n._chain=!0,n},iteratee:Fn,partial:nr,bind:rr,bindAll:ur,memoize:function(n,r){function t(e){var u=t.cache,i=""+(r?r.apply(this,arguments):e);return W(u,i)||(u[i]=n.apply(this,arguments)),u[i]}return t.cache={},t},delay:ir,defer:or,throttle:function(n,r,t){function f(){a=!1===t.leading?0:Wn(),e=null,o=n.apply(u,i),e||(u=i=null)}function c(){var c=Wn(),l=(a||!1!==t.leading||(a=c),r-(c-a));return u=this,i=arguments,l<=0||r<l?(e&&(clearTimeout(e),e=null),a=c,o=n.apply(u,i),e||(u=i=null)):e||!1===t.trailing||(e=setTimeout(f,l)),o}var e,u,i,o,a=0;t=t||{};return c.cancel=function(){clearTimeout(e),a=0,e=u=i=null},c},debounce:function(n,r,t){function f(){var c=Wn()-u;c<r?e=setTimeout(f,r-c):(e=null,t||(o=n.apply(a,i)),e||(i=a=null))}var e,u,i,o,a,c=j(function(c){return a=this,i=c,u=Wn(),e||(e=setTimeout(f,r),t&&(o=n.apply(a,i))),o});return c.cancel=function(){clearTimeout(e),e=i=a=null},c},wrap:function(n,r){return nr(r,n)},negate:ar,compose:function(){var n=arguments,r=n.length-1;return function(){for(var t=r,e=n[r].apply(this,arguments);t--;)e=n[t].call(this,e);return e}},after:function(n,r){return function(){if(--n<1)return r.apply(this,arguments)}},before:fr,once:cr,findKey:lr,findIndex:pr,findLastIndex:vr,sortedIndex:hr,indexOf:dr,lastIndexOf:gr,find:br,detect:br,findWhere:function(n,r){return br(n,kn(r))},each:mr,forEach:mr,map:jr,collect:jr,reduce:_r,foldl:_r,inject:_r,reduceRight:Ar,foldr:Ar,filter:xr,select:xr,reject:function(n,r,t){return xr(n,ar(Pn(r)),t)},every:Sr,all:Sr,some:Or,any:Or,contains:Mr,includes:Mr,include:Mr,invoke:Er,pluck:Br,where:function(n,r){return xr(n,kn(r))},max:Nr,min:function(n,r,t){var e,u,i=1/0,o=1/0;if(null==r||"number"==typeof r&&"object"!=typeof n[0]&&null!=n)for(var a=0,f=(n=tr(n)?n:jn(n)).length;a<f;a++)null!=(e=n[a])&&e<i&&(i=e);else r=Pn(r,t),mr(n,function(n,t,e){((u=r(n,t,e))<o||u===1/0&&i===1/0)&&(i=n,o=u)});return i},shuffle:function(n){return kr(n,1/0)},sample:kr,sortBy:function(n,r,t){var e=0;return r=Pn(r,t),Br(jr(n,function(n,t,u){return{value:n,index:e++,criteria:r(n,t,u)}}).sort(function(n,r){var t=n.criteria,e=r.criteria;if(t!==e){if(e<t||void 0===t)return 1;if(t<e||void 0===e)return-1}return n.index-r.index}),"value")},groupBy:Rr,indexBy:Vr,countBy:Fr,partition:Pr,toArray:Tr,size:function(n){return null==n?0:(tr(n)?n:nn(n)).length},pick:Ur,omit:Wr,first:Lr,head:Lr,take:Lr,initial:zr,last:function(n,r,t){return null==n||n.length<1?null==r||t?void 0:[]:null==r||t?n[n.length-1]:$r(n,Math.max(0,n.length-r))},rest:$r,tail:$r,drop:$r,compact:function(n){return xr(n,Boolean)},flatten:function(n,r){return er(n,r,!1)},without:Kr,uniq:Jr,unique:Jr,union:Gr,intersection:function(n){for(var r=[],t=arguments.length,e=0,u=Y(n);e<u;e++){var i=n[e];if(!Mr(r,i)){for(var o=1;o<t&&Mr(arguments[o],i);o++);o===t&&r.push(i)}}return r},difference:Cr,unzip:Hr,transpose:Hr,zip:Qr,object:function(n,r){for(var t={},e=0,u=Y(n);e<u;e++)r?t[n[e]]=r[e]:t[n[e][0]]=n[e][1];return t},range:function(n,r,t){null==r&&(r=n||0,n=0),t=t||(r<n?-1:1);for(var e=Math.max(Math.ceil((r-n)/t),0),u=Array(e),i=0;i<e;i++,n+=t)u[i]=n;return u},chunk:function(n,r){if(null==r||r<1)return[];for(var t=[],e=0,u=n.length;e<u;)t.push(o.call(n,e,e+=r));return t},mixin:Yr,default:tn});return n._=n}),!function(globalScope){var Decimal,inexact,noConflict,quadrant,EXP_LIMIT=9e15,MAX_DIGITS=1e9,NUMERALS="0123456789abcdef",LN10="2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058",PI="3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789",DEFAULTS={precision:20,rounding:4,modulo:1,toExpNeg:-7,toExpPos:21,minE:-EXP_LIMIT,maxE:EXP_LIMIT,crypto:!1},external=!0,decimalError="[DecimalError] ",invalidArgument=decimalError+"Invalid argument: ",precisionLimitExceeded=decimalError+"Precision limit exceeded",cryptoUnavailable=decimalError+"crypto unavailable",tag="[object Decimal]",mathfloor=Math.floor,mathpow=Math.pow,isBinary=/^0b([01]+(\.[01]*)?|\.[01]+)(p[+-]?\d+)?$/i,isHex=/^0x([0-9a-f]+(\.[0-9a-f]*)?|\.[0-9a-f]+)(p[+-]?\d+)?$/i,isOctal=/^0o([0-7]+(\.[0-7]*)?|\.[0-7]+)(p[+-]?\d+)?$/i,isDecimal=/^(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,BASE=1e7,LOG_BASE=7,LN10_PRECISION=LN10.length-1,PI_PRECISION=PI.length-1,P={toStringTag:tag};function digitsToString(d){var i,k,ws,indexOfLastWord=d.length-1,str="",w=d[0];if(0<indexOfLastWord){for(str+=w,i=1;i<indexOfLastWord;i++)ws=d[i]+"",(k=LOG_BASE-ws.length)&&(str+=getZeroString(k)),str+=ws;w=d[i],(k=LOG_BASE-(ws=w+"").length)&&(str+=getZeroString(k))}else if(0===w)return"0";for(;w%10==0;)w/=10;return str+w}function checkInt32(i,min,max){if(i!==~~i||i<min||max<i)throw Error(invalidArgument+i)}function checkRoundingDigits(d,i,rm,repeating){for(var di,rd,k=d[0];10<=k;k/=10)--i;return--i<0?(i+=LOG_BASE,di=0):(di=Math.ceil((i+1)/LOG_BASE),i%=LOG_BASE),k=mathpow(10,LOG_BASE-i),rd=d[di]%k|0,null==repeating?i<3?(0==i?rd=rd/100|0:1==i&&(rd=rd/10|0),rm<4&&99999==rd||3<rm&&49999==rd||5e4==rd||0==rd):(rm<4&&rd+1==k||3<rm&&rd+1==k/2)&&(d[di+1]/k/100|0)==mathpow(10,i-2)-1||(rd==k/2||0==rd)&&0==(d[di+1]/k/100|0):i<4?(0==i?rd=rd/1e3|0:1==i?rd=rd/100|0:2==i&&(rd=rd/10|0),(repeating||rm<4)&&9999==rd||!repeating&&3<rm&&4999==rd):((repeating||rm<4)&&rd+1==k||!repeating&&3<rm&&rd+1==k/2)&&(d[di+1]/k/1e3|0)==mathpow(10,i-3)-1}function convertBase(str,baseIn,baseOut){for(var j,arrL,arr=[0],i=0,strL=str.length;i<strL;){for(arrL=arr.length;arrL--;)arr[arrL]*=baseIn;for(arr[0]+=NUMERALS.indexOf(str.charAt(i++)),j=0;j<arr.length;j++)baseOut-1<arr[j]&&(void 0===arr[j+1]&&(arr[j+1]=0),arr[j+1]+=arr[j]/baseOut|0,arr[j]%=baseOut)}return arr.reverse()}P.absoluteValue=P.abs=function(){var x=new this.constructor(this);return x.s<0&&(x.s=1),finalise(x)},P.ceil=function(){return finalise(new this.constructor(this),this.e+1,2)},P.clampedTo=P.clamp=function(min,max){var x=this,Ctor=x.constructor;if(min=new Ctor(min),max=new Ctor(max),!min.s||!max.s)return new Ctor(NaN);if(min.gt(max))throw Error(invalidArgument+max);return x.cmp(min)<0?min:0<x.cmp(max)?max:new Ctor(x)},P.comparedTo=P.cmp=function(y){var i,j,x=this,xd=x.d,yd=(y=new x.constructor(y)).d,xs=x.s,ys=y.s;if(!xd||!yd)return xs&&ys?xs!==ys?xs:xd===yd?0:!xd^xs<0?1:-1:NaN;if(!xd[0]||!yd[0])return xd[0]?xs:yd[0]?-ys:0;if(xs!==ys)return xs;if(x.e!==y.e)return x.e>y.e^xs<0?1:-1;for(i=0,j=(ys=xd.length)<(x=yd.length)?ys:x;i<j;++i)if(xd[i]!==yd[i])return xd[i]>yd[i]^xs<0?1:-1;return ys===x?0:x<ys^xs<0?1:-1},P.cosine=P.cos=function(){var pr,rm,x=this,Ctor=x.constructor;return x.d?x.d[0]?(pr=Ctor.precision,rm=Ctor.rounding,Ctor.precision=pr+Math.max(x.e,x.sd())+LOG_BASE,Ctor.rounding=1,x=function(Ctor,x){var k,len;if(!x.isZero()){len=x.d.length,len=len<32?(1/tinyPow(4,k=Math.ceil(len/3))).toString():(k=16,"2.3283064365386962890625e-10"),Ctor.precision+=k,x=taylorSeries(Ctor,1,x.times(len),new Ctor(1));for(var i=k;i--;){var cos2x=x.times(x);x=cos2x.times(cos2x).minus(cos2x).times(8).plus(1)}Ctor.precision-=k}return x}(Ctor,toLessThanHalfPi(Ctor,x)),Ctor.precision=pr,Ctor.rounding=rm,finalise(2==quadrant||3==quadrant?x.neg():x,pr,rm,!0)):new Ctor(1):new Ctor(NaN)},P.cubeRoot=P.cbrt=function(){var e,m,n,r,rep,s,sd,t,t3,t3plusx,x=this,Ctor=x.constructor;if(!x.isFinite()||x.isZero())return new Ctor(x);for(external=!1,(s=x.s*mathpow(x.s*x,1/3))&&Math.abs(s)!=1/0?r=new Ctor(s.toString()):(n=digitsToString(x.d),(s=((e=x.e)-n.length+1)%3)&&(n+=1==s||-2==s?"0":"00"),s=mathpow(n,1/3),e=mathfloor((e+1)/3)-(e%3==(e<0?-1:2)),(r=new Ctor(n=s==1/0?"5e"+e:(n=s.toExponential()).slice(0,n.indexOf("e")+1)+e)).s=x.s),sd=(e=Ctor.precision)+3;;)if(t3plusx=(t3=(t=r).times(t).times(t)).plus(x),r=divide(t3plusx.plus(x).times(t),t3plusx.plus(t3),sd+2,1),digitsToString(t.d).slice(0,sd)===(n=digitsToString(r.d)).slice(0,sd)){if("9999"!=(n=n.slice(sd-3,sd+1))&&(rep||"4999"!=n)){+n&&(+n.slice(1)||"5"!=n.charAt(0))||(finalise(r,e+1,1),m=!r.times(r).times(r).eq(x));break}if(!rep&&(finalise(t,e+1,0),t.times(t).times(t).eq(x))){r=t;break}sd+=4,rep=1}return external=!0,finalise(r,e,Ctor.rounding,m)},P.decimalPlaces=P.dp=function(){var w,d=this.d,n=NaN;if(d){if(n=((w=d.length-1)-mathfloor(this.e/LOG_BASE))*LOG_BASE,w=d[w])for(;w%10==0;w/=10)n--;n<0&&(n=0)}return n},P.dividedBy=P.div=function(y){return divide(this,new this.constructor(y))},P.dividedToIntegerBy=P.divToInt=function(y){var Ctor=this.constructor;return finalise(divide(this,new Ctor(y),0,1,1),Ctor.precision,Ctor.rounding)},P.equals=P.eq=function(y){return 0===this.cmp(y)},P.floor=function(){return finalise(new this.constructor(this),this.e+1,3)},P.greaterThan=P.gt=function(y){return 0<this.cmp(y)},P.greaterThanOrEqualTo=P.gte=function(y){y=this.cmp(y);return 1==y||0===y},P.hyperbolicCosine=P.cosh=function(){var k,pr,rm,Ctor=(x=this).constructor,one=new Ctor(1);if(!x.isFinite())return new Ctor(x.s?1/0:NaN);if(x.isZero())return one;pr=Ctor.precision,rm=Ctor.rounding,Ctor.precision=pr+Math.max(x.e,x.sd())+4,Ctor.rounding=1;for(var cosh2_x,len=(len=x.d.length)<32?(1/tinyPow(4,k=Math.ceil(len/3))).toString():(k=16,"2.3283064365386962890625e-10"),x=taylorSeries(Ctor,1,x.times(len),new Ctor(1),!0),i=k,d8=new Ctor(8);i--;)cosh2_x=x.times(x),x=one.minus(cosh2_x.times(d8.minus(cosh2_x.times(d8))));return finalise(x,Ctor.precision=pr,Ctor.rounding=rm,!0)},P.hyperbolicSine=P.sinh=function(){var pr,rm,len,Ctor=(x=this).constructor;if(!x.isFinite()||x.isZero())return new Ctor(x);if(pr=Ctor.precision,rm=Ctor.rounding,Ctor.precision=pr+Math.max(x.e,x.sd())+4,Ctor.rounding=1,(len=x.d.length)<3)x=taylorSeries(Ctor,2,x,x,!0);else for(var sinh2_x,k=1.4*Math.sqrt(len),x=taylorSeries(Ctor,2,x=x.times(1/tinyPow(5,k=16<k?16:0|k)),x,!0),d5=new Ctor(5),d16=new Ctor(16),d20=new Ctor(20);k--;)sinh2_x=x.times(x),x=x.times(d5.plus(sinh2_x.times(d16.times(sinh2_x).plus(d20))));return finalise(x,Ctor.precision=pr,Ctor.rounding=rm,!0)},P.hyperbolicTangent=P.tanh=function(){var pr,rm,x=this,Ctor=x.constructor;return x.isFinite()?x.isZero()?new Ctor(x):(pr=Ctor.precision,rm=Ctor.rounding,Ctor.precision=pr+7,Ctor.rounding=1,divide(x.sinh(),x.cosh(),Ctor.precision=pr,Ctor.rounding=rm)):new Ctor(x.s)},P.inverseCosine=P.acos=function(){var x=this,Ctor=x.constructor,k=x.abs().cmp(1),pr=Ctor.precision,rm=Ctor.rounding;return-1!==k?0===k?x.isNeg()?getPi(Ctor,pr,rm):new Ctor(0):new Ctor(NaN):x.isZero()?getPi(Ctor,pr+4,rm).times(.5):(Ctor.precision=pr+6,Ctor.rounding=1,x=x.asin(),k=getPi(Ctor,pr+4,rm).times(.5),Ctor.precision=pr,Ctor.rounding=rm,k.minus(x))},P.inverseHyperbolicCosine=P.acosh=function(){var pr,rm,x=this,Ctor=x.constructor;return x.lte(1)?new Ctor(x.eq(1)?0:NaN):x.isFinite()?(pr=Ctor.precision,rm=Ctor.rounding,Ctor.precision=pr+Math.max(Math.abs(x.e),x.sd())+4,Ctor.rounding=1,external=!1,x=x.times(x).minus(1).sqrt().plus(x),external=!0,Ctor.precision=pr,Ctor.rounding=rm,x.ln()):new Ctor(x)},P.inverseHyperbolicSine=P.asinh=function(){var pr,rm,x=this,Ctor=x.constructor;return!x.isFinite()||x.isZero()?new Ctor(x):(pr=Ctor.precision,rm=Ctor.rounding,Ctor.precision=pr+2*Math.max(Math.abs(x.e),x.sd())+6,Ctor.rounding=1,external=!1,x=x.times(x).plus(1).sqrt().plus(x),external=!0,Ctor.precision=pr,Ctor.rounding=rm,x.ln())},P.inverseHyperbolicTangent=P.atanh=function(){var pr,rm,xsd,x=this,Ctor=x.constructor;return x.isFinite()?0<=x.e?new Ctor(x.abs().eq(1)?x.s/0:x.isZero()?x:NaN):(pr=Ctor.precision,rm=Ctor.rounding,xsd=x.sd(),Math.max(xsd,pr)<2*-x.e-1?finalise(new Ctor(x),pr,rm,!0):(Ctor.precision=xsd=xsd-x.e,x=divide(x.plus(1),new Ctor(1).minus(x),xsd+pr,1),Ctor.precision=pr+4,Ctor.rounding=1,x=x.ln(),Ctor.precision=pr,Ctor.rounding=rm,x.times(.5))):new Ctor(NaN)},P.inverseSine=P.asin=function(){var k,pr,rm,x=this,Ctor=x.constructor;return x.isZero()?new Ctor(x):(k=x.abs().cmp(1),pr=Ctor.precision,rm=Ctor.rounding,-1!==k?0===k?((k=getPi(Ctor,pr+4,rm).times(.5)).s=x.s,k):new Ctor(NaN):(Ctor.precision=pr+6,Ctor.rounding=1,x=x.div(new Ctor(1).minus(x.times(x)).sqrt().plus(1)).atan(),Ctor.precision=pr,Ctor.rounding=rm,x.times(2)))},P.inverseTangent=P.atan=function(){var i,j,k,n,px,t,r,wpr,x2,x=this,Ctor=x.constructor,pr=Ctor.precision,rm=Ctor.rounding;if(x.isFinite()){if(x.isZero())return new Ctor(x);if(x.abs().eq(1)&&pr+4<=PI_PRECISION)return(r=getPi(Ctor,pr+4,rm).times(.25)).s=x.s,r}else{if(!x.s)return new Ctor(NaN);if(pr+4<=PI_PRECISION)return(r=getPi(Ctor,pr+4,rm).times(.5)).s=x.s,r}for(Ctor.precision=wpr=pr+10,Ctor.rounding=1,i=k=Math.min(28,wpr/LOG_BASE+2|0);i;--i)x=x.div(x.times(x).plus(1).sqrt().plus(1));for(external=!1,j=Math.ceil(wpr/LOG_BASE),n=1,x2=x.times(x),r=new Ctor(x),px=x;-1!==i;)if(px=px.times(x2),t=r.minus(px.div(n+=2)),px=px.times(x2),void 0!==(r=t.plus(px.div(n+=2))).d[j])for(i=j;r.d[i]===t.d[i]&&i--;);return k&&(r=r.times(2<<k-1)),external=!0,finalise(r,Ctor.precision=pr,Ctor.rounding=rm,!0)},P.isFinite=function(){return!!this.d},P.isInteger=P.isInt=function(){return!!this.d&&mathfloor(this.e/LOG_BASE)>this.d.length-2},P.isNaN=function(){return!this.s},P.isNegative=P.isNeg=function(){return this.s<0},P.isPositive=P.isPos=function(){return 0<this.s},P.isZero=function(){return!!this.d&&0===this.d[0]},P.lessThan=P.lt=function(y){return this.cmp(y)<0},P.lessThanOrEqualTo=P.lte=function(y){return this.cmp(y)<1},P.logarithm=P.log=function(base){var isBase10,d,denominator,k,inf,num,sd,r,Ctor=this.constructor,pr=Ctor.precision,rm=Ctor.rounding;if(null==base)base=new Ctor(10),isBase10=!0;else{if(d=(base=new Ctor(base)).d,base.s<0||!d||!d[0]||base.eq(1))return new Ctor(NaN);isBase10=base.eq(10)}if(d=this.d,this.s<0||!d||!d[0]||this.eq(1))return new Ctor(d&&!d[0]?-1/0:1!=this.s?NaN:d?0:1/0);if(isBase10)if(1<d.length)inf=!0;else{for(k=d[0];k%10==0;)k/=10;inf=1!==k}if(external=!1,num=naturalLogarithm(this,sd=pr+5),denominator=isBase10?getLn10(Ctor,sd+10):naturalLogarithm(base,sd),checkRoundingDigits((r=divide(num,denominator,sd,1)).d,k=pr,rm))do{if(num=naturalLogarithm(this,sd+=10),denominator=isBase10?getLn10(Ctor,sd+10):naturalLogarithm(base,sd),r=divide(num,denominator,sd,1),!inf){+digitsToString(r.d).slice(k+1,k+15)+1==1e14&&(r=finalise(r,pr+1,0));break}}while(checkRoundingDigits(r.d,k+=10,rm));return external=!0,finalise(r,pr,rm)},P.minus=P.sub=function(y){var d,e,i,j,k,len,pr,rm,xd,xe,xLTy,yd,x=this,Ctor=x.constructor;if(y=new Ctor(y),!x.d||!y.d)return x.s&&y.s?x.d?y.s=-y.s:y=new Ctor(y.d||x.s!==y.s?x:NaN):y=new Ctor(NaN),y;if(x.s!=y.s)return y.s=-y.s,x.plus(y);if(xd=x.d,yd=y.d,pr=Ctor.precision,rm=Ctor.rounding,xd[0]&&yd[0]){if(e=mathfloor(y.e/LOG_BASE),xe=mathfloor(x.e/LOG_BASE),xd=xd.slice(),k=xe-e){for(len=((xLTy=k<0)?(d=xd,k=-k,yd):(d=yd,e=xe,xd)).length,(i=Math.max(Math.ceil(pr/LOG_BASE),len)+2)<k&&(k=i,d.length=1),d.reverse(),i=k;i--;)d.push(0);d.reverse()}else{for((xLTy=(i=xd.length)<(len=yd.length))&&(len=i),i=0;i<len;i++)if(xd[i]!=yd[i]){xLTy=xd[i]<yd[i];break}k=0}for(xLTy&&(d=xd,xd=yd,yd=d,y.s=-y.s),len=xd.length,i=yd.length-len;0<i;--i)xd[len++]=0;for(i=yd.length;k<i;){if(xd[--i]<yd[i]){for(j=i;j&&0===xd[--j];)xd[j]=BASE-1;--xd[j],xd[i]+=BASE}xd[i]-=yd[i]}for(;0===xd[--len];)xd.pop();for(;0===xd[0];xd.shift())--e;if(!xd[0])return new Ctor(3===rm?-0:0);y.d=xd,y.e=getBase10Exponent(xd,e)}else if(yd[0])y.s=-y.s;else{if(!xd[0])return new Ctor(3===rm?-0:0);y=new Ctor(x)}return external?finalise(y,pr,rm):y},P.modulo=P.mod=function(y){var q,x=this,Ctor=x.constructor;return y=new Ctor(y),!x.d||!y.s||y.d&&!y.d[0]?new Ctor(NaN):!y.d||x.d&&!x.d[0]?finalise(new Ctor(x),Ctor.precision,Ctor.rounding):(external=!1,9==Ctor.modulo?(q=divide(x,y.abs(),0,3,1)).s*=y.s:q=divide(x,y,0,Ctor.modulo,1),q=q.times(y),external=!0,x.minus(q))},P.naturalExponential=P.exp=function(){return naturalExponential(this)},P.naturalLogarithm=P.ln=function(){return naturalLogarithm(this)},P.negated=P.neg=function(){var x=new this.constructor(this);return x.s=-x.s,finalise(x)},P.plus=P.add=function(y){var carry,d,e,i,k,len,pr,rm,xd,yd,x=this,Ctor=x.constructor;if(y=new Ctor(y),!x.d||!y.d)return x.s&&y.s?x.d||(y=new Ctor(y.d||x.s===y.s?x:NaN)):y=new Ctor(NaN),y;if(x.s!=y.s)return y.s=-y.s,x.minus(y);if(xd=x.d,yd=y.d,pr=Ctor.precision,rm=Ctor.rounding,xd[0]&&yd[0]){if(k=mathfloor(x.e/LOG_BASE),e=mathfloor(y.e/LOG_BASE),xd=xd.slice(),i=k-e){for((len=(len=(i<0?(d=xd,i=-i,yd):(d=yd,e=k,xd)).length)<(k=Math.ceil(pr/LOG_BASE))?k+1:len+1)<i&&(i=len,d.length=1),d.reverse();i--;)d.push(0);d.reverse()}for((len=xd.length)-(i=yd.length)<0&&(i=len,d=yd,yd=xd,xd=d),carry=0;i;)carry=(xd[--i]=xd[i]+yd[i]+carry)/BASE|0,xd[i]%=BASE;for(carry&&(xd.unshift(carry),++e),len=xd.length;0==xd[--len];)xd.pop();y.d=xd,y.e=getBase10Exponent(xd,e)}else yd[0]||(y=new Ctor(x));return external?finalise(y,pr,rm):y},P.precision=P.sd=function(z){var k,x=this;if(void 0!==z&&z!==!!z&&1!==z&&0!==z)throw Error(invalidArgument+z);return x.d?(k=getPrecision(x.d),z&&x.e+1>k&&(k=x.e+1)):k=NaN,k},P.round=function(){var x=this,Ctor=x.constructor;return finalise(new Ctor(x),x.e+1,Ctor.rounding)},P.sine=P.sin=function(){var pr,rm,x=this,Ctor=x.constructor;return x.isFinite()?x.isZero()?new Ctor(x):(pr=Ctor.precision,rm=Ctor.rounding,Ctor.precision=pr+Math.max(x.e,x.sd())+LOG_BASE,Ctor.rounding=1,x=function(Ctor,x){var k,len=x.d.length;if(len<3)return x.isZero()?x:taylorSeries(Ctor,2,x,x);k=16<(k=1.4*Math.sqrt(len))?16:0|k,x=x.times(1/tinyPow(5,k)),x=taylorSeries(Ctor,2,x,x);for(var sin2_x,d5=new Ctor(5),d16=new Ctor(16),d20=new Ctor(20);k--;)sin2_x=x.times(x),x=x.times(d5.plus(sin2_x.times(d16.times(sin2_x).minus(d20))));return x}(Ctor,toLessThanHalfPi(Ctor,x)),Ctor.precision=pr,Ctor.rounding=rm,finalise(2<quadrant?x.neg():x,pr,rm,!0)):new Ctor(NaN)},P.squareRoot=P.sqrt=function(){var m,n,sd,r,rep,t,x=this,d=x.d,e=x.e,s=x.s,Ctor=x.constructor;if(1!==s||!d||!d[0])return new Ctor(!s||s<0&&(!d||d[0])?NaN:d?x:1/0);for(external=!1,r=0==(s=Math.sqrt(+x))||s==1/0?(((n=digitsToString(d)).length+e)%2==0&&(n+="0"),s=Math.sqrt(n),e=mathfloor((e+1)/2)-(e<0||e%2),new Ctor(n=s==1/0?"5e"+e:(n=s.toExponential()).slice(0,n.indexOf("e")+1)+e)):new Ctor(s.toString()),sd=(e=Ctor.precision)+3;;)if(r=(t=r).plus(divide(x,t,sd+2,1)).times(.5),digitsToString(t.d).slice(0,sd)===(n=digitsToString(r.d)).slice(0,sd)){if("9999"!=(n=n.slice(sd-3,sd+1))&&(rep||"4999"!=n)){+n&&(+n.slice(1)||"5"!=n.charAt(0))||(finalise(r,e+1,1),m=!r.times(r).eq(x));break}if(!rep&&(finalise(t,e+1,0),t.times(t).eq(x))){r=t;break}sd+=4,rep=1}return external=!0,finalise(r,e,Ctor.rounding,m)},P.tangent=P.tan=function(){var pr,rm,x=this,Ctor=x.constructor;return x.isFinite()?x.isZero()?new Ctor(x):(pr=Ctor.precision,rm=Ctor.rounding,Ctor.precision=pr+10,Ctor.rounding=1,(x=x.sin()).s=1,x=divide(x,new Ctor(1).minus(x.times(x)).sqrt(),pr+10,0),Ctor.precision=pr,Ctor.rounding=rm,finalise(2==quadrant||4==quadrant?x.neg():x,pr,rm,!0)):new Ctor(NaN)},P.times=P.mul=function(y){var carry,i,k,r,rL,t,xdL,ydL,x=this,Ctor=x.constructor,xd=x.d,yd=(y=new Ctor(y)).d;if(y.s*=x.s,!(xd&&xd[0]&&yd&&yd[0]))return new Ctor(!y.s||xd&&!xd[0]&&!yd||yd&&!yd[0]&&!xd?NaN:xd&&yd?0*y.s:y.s/0);for(x=mathfloor(x.e/LOG_BASE)+mathfloor(y.e/LOG_BASE),(xdL=xd.length)<(ydL=yd.length)&&(r=xd,xd=yd,yd=r,rL=xdL,xdL=ydL,ydL=rL),r=[],i=rL=xdL+ydL;i--;)r.push(0);for(i=ydL;0<=--i;){for(carry=0,k=xdL+i;i<k;)t=r[k]+yd[i]*xd[k-i-1]+carry,r[k--]=t%BASE|0,carry=t/BASE|0;r[k]=(r[k]+carry)%BASE|0}for(;!r[--rL];)r.pop();return carry?++x:r.shift(),y.d=r,y.e=getBase10Exponent(r,x),external?finalise(y,Ctor.precision,Ctor.rounding):y},P.toBinary=function(sd,rm){return toStringBinary(this,2,sd,rm)},P.toDecimalPlaces=P.toDP=function(dp,rm){var Ctor=this.constructor,x=new Ctor(this);return void 0===dp?x:(checkInt32(dp,0,MAX_DIGITS),void 0===rm?rm=Ctor.rounding:checkInt32(rm,0,8),finalise(x,dp+x.e+1,rm))},P.toExponential=function(dp,rm){var x=this,Ctor=x.constructor,Ctor=void 0===dp?finiteToString(x,!0):(checkInt32(dp,0,MAX_DIGITS),void 0===rm?rm=Ctor.rounding:checkInt32(rm,0,8),finiteToString(x=finalise(new Ctor(x),dp+1,rm),!0,dp+1));return x.isNeg()&&!x.isZero()?"-"+Ctor:Ctor},P.toFixed=function(dp,rm){var x=this,Ctor=x.constructor,rm=void 0===dp?finiteToString(x):(checkInt32(dp,0,MAX_DIGITS),void 0===rm?rm=Ctor.rounding:checkInt32(rm,0,8),finiteToString(Ctor=finalise(new Ctor(x),dp+x.e+1,rm),!1,dp+Ctor.e+1));return x.isNeg()&&!x.isZero()?"-"+rm:rm},P.toFraction=function(maxD){var d,d0,d1,d2,e,n,n0,n1,k,q,x=this,xd=x.d,Ctor=x.constructor;if(!xd)return new Ctor(x);if(n1=d0=new Ctor(1),d1=n0=new Ctor(0),e=(d=new Ctor(d1)).e=getPrecision(xd)-x.e-1,d.d[0]=mathpow(10,(k=e%LOG_BASE)<0?LOG_BASE+k:k),null==maxD)maxD=0<e?d:n1;else{if(!(n=new Ctor(maxD)).isInt()||n.lt(n1))throw Error(invalidArgument+n);maxD=n.gt(d)?0<e?d:n1:n}for(external=!1,n=new Ctor(digitsToString(xd)),k=Ctor.precision,Ctor.precision=e=xd.length*LOG_BASE*2;q=divide(n,d,0,1,1),1!=(d2=d0.plus(q.times(d1))).cmp(maxD);)d0=d1,d1=d2,d2=n1,n1=n0.plus(q.times(d2)),n0=d2,d2=d,d=n.minus(q.times(d2)),n=d2;return d2=divide(maxD.minus(d0),d1,0,1,1),n0=n0.plus(d2.times(n1)),d0=d0.plus(d2.times(d1)),n0.s=n1.s=x.s,xd=divide(n1,d1,e,1).minus(x).abs().cmp(divide(n0,d0,e,1).minus(x).abs())<1?[n1,d1]:[n0,d0],Ctor.precision=k,external=!0,xd},P.toHexadecimal=P.toHex=function(sd,rm){return toStringBinary(this,16,sd,rm)},P.toNearest=function(y,rm){var Ctor=(x=this).constructor,x=new Ctor(x);if(null==y){if(!x.d)return x;y=new Ctor(1),rm=Ctor.rounding}else{if(y=new Ctor(y),void 0===rm?rm=Ctor.rounding:checkInt32(rm,0,8),!x.d)return y.s?x:y;if(!y.d)return y.s&&(y.s=x.s),y}return y.d[0]?(external=!1,x=divide(x,y,0,rm,1).times(y),external=!0,finalise(x)):(y.s=x.s,x=y),x},P.toNumber=function(){return+this},P.toOctal=function(sd,rm){return toStringBinary(this,8,sd,rm)},P.toPower=P.pow=function(y){var e,k,pr,r,rm,s,x=this,Ctor=x.constructor,yn=+(y=new Ctor(y));if(!(x.d&&y.d&&x.d[0]&&y.d[0]))return new Ctor(mathpow(+x,yn));if((x=new Ctor(x)).eq(1))return x;if(pr=Ctor.precision,rm=Ctor.rounding,y.eq(1))return finalise(x,pr,rm);if((e=mathfloor(y.e/LOG_BASE))>=y.d.length-1&&(k=yn<0?-yn:yn)<=9007199254740991)return r=intPow(Ctor,x,k,pr),y.s<0?new Ctor(1).div(r):finalise(r,pr,rm);if((s=x.s)<0){if(e<y.d.length-1)return new Ctor(NaN);if(0==(1&y.d[e])&&(s=1),0==x.e&&1==x.d[0]&&1==x.d.length)return x.s=s,x}return(e=0!=(k=mathpow(+x,yn))&&isFinite(k)?new Ctor(k+"").e:mathfloor(yn*(Math.log("0."+digitsToString(x.d))/Math.LN10+x.e+1)))>Ctor.maxE+1||e<Ctor.minE-1?new Ctor(0<e?s/0:0):(external=!1,Ctor.rounding=x.s=1,k=Math.min(12,(e+"").length),(r=(r=naturalExponential(y.times(naturalLogarithm(x,pr+k)),pr)).d&&checkRoundingDigits((r=finalise(r,pr+5,1)).d,pr,rm)&&+digitsToString((r=finalise(naturalExponential(y.times(naturalLogarithm(x,(e=pr+10)+k)),e),e+5,1)).d).slice(pr+1,pr+15)+1==1e14?finalise(r,pr+1,0):r).s=s,external=!0,finalise(r,pr,Ctor.rounding=rm))},P.toPrecision=function(sd,rm){var x=this,Ctor=x.constructor,rm=void 0===sd?finiteToString(x,x.e<=Ctor.toExpNeg||x.e>=Ctor.toExpPos):(checkInt32(sd,1,MAX_DIGITS),void 0===rm?rm=Ctor.rounding:checkInt32(rm,0,8),finiteToString(x=finalise(new Ctor(x),sd,rm),sd<=x.e||x.e<=Ctor.toExpNeg,sd));return x.isNeg()&&!x.isZero()?"-"+rm:rm},P.toSignificantDigits=P.toSD=function(sd,rm){var Ctor=this.constructor;return void 0===sd?(sd=Ctor.precision,rm=Ctor.rounding):(checkInt32(sd,1,MAX_DIGITS),void 0===rm?rm=Ctor.rounding:checkInt32(rm,0,8)),finalise(new Ctor(this),sd,rm)},P.toString=function(){var x=this,Ctor=x.constructor,Ctor=finiteToString(x,x.e<=Ctor.toExpNeg||x.e>=Ctor.toExpPos);return x.isNeg()&&!x.isZero()?"-"+Ctor:Ctor},P.truncated=P.trunc=function(){return finalise(new this.constructor(this),this.e+1,1)},P.valueOf=P.toJSON=function(){var x=this,Ctor=x.constructor,Ctor=finiteToString(x,x.e<=Ctor.toExpNeg||x.e>=Ctor.toExpPos);return x.isNeg()?"-"+Ctor:Ctor};var divide=function(x,y,pr,rm,dp,base){var cmp,e,i,k,logBase,more,prod,prodL,qd,rem,remL,rem0,sd,t,xi,xL,yd0,yL,yz,Ctor=x.constructor,sign=x.s==y.s?1:-1,xd=x.d,yd=y.d;if(!(xd&&xd[0]&&yd&&yd[0]))return new Ctor(x.s&&y.s&&(xd?!yd||xd[0]!=yd[0]:yd)?xd&&0==xd[0]||!yd?0*sign:sign/0:NaN);for(e=base?(logBase=1,x.e-y.e):(base=BASE,mathfloor(x.e/(logBase=LOG_BASE))-mathfloor(y.e/logBase)),yL=yd.length,xL=xd.length,qd=(sign=new Ctor(sign)).d=[],i=0;yd[i]==(xd[i]||0);i++);if(yd[i]>(xd[i]||0)&&e--,null==pr?(sd=pr=Ctor.precision,rm=Ctor.rounding):sd=dp?pr+(x.e-y.e)+1:pr,sd<0)qd.push(1),more=!0;else{if(sd=sd/logBase+2|0,i=0,1==yL){for(yd=yd[k=0],sd++;(i<xL||k)&&sd--;i++)t=k*base+(xd[i]||0),qd[i]=t/yd|0,k=t%yd|0;more=k||i<xL}else{for(1<(k=base/(yd[0]+1)|0)&&(yd=multiplyInteger(yd,k,base),xd=multiplyInteger(xd,k,base),yL=yd.length,xL=xd.length),xi=yL,remL=(rem=xd.slice(0,yL)).length;remL<yL;)rem[remL++]=0;for((yz=yd.slice()).unshift(0),yd0=yd[0],yd[1]>=base/2&&++yd0;k=0,(cmp=compare(yd,rem,yL,remL))<0?(rem0=rem[0],1<(k=(rem0=yL!=remL?rem0*base+(rem[1]||0):rem0)/yd0|0)?1==(cmp=compare(prod=multiplyInteger(yd,k=base<=k?base-1:k,base),rem,prodL=prod.length,remL=rem.length))&&(k--,subtract(prod,yL<prodL?yz:yd,prodL,base)):(0==k&&(cmp=k=1),prod=yd.slice()),(prodL=prod.length)<remL&&prod.unshift(0),subtract(rem,prod,remL,base),-1==cmp&&(cmp=compare(yd,rem,yL,remL=rem.length))<1&&(k++,subtract(rem,yL<remL?yz:yd,remL,base)),remL=rem.length):0===cmp&&(k++,rem=[0]),qd[i++]=k,cmp&&rem[0]?rem[remL++]=xd[xi]||0:(rem=[xd[xi]],remL=1),(xi++<xL||void 0!==rem[0])&&sd--;);more=void 0!==rem[0]}qd[0]||qd.shift()}if(1==logBase)sign.e=e,inexact=more;else{for(i=1,k=qd[0];10<=k;k/=10)i++;sign.e=i+e*logBase-1,finalise(sign,dp?pr+sign.e+1:pr,rm,more)}return sign};function multiplyInteger(x,k,base){var temp,carry=0,i=x.length;for(x=x.slice();i--;)temp=x[i]*k+carry,x[i]=temp%base|0,carry=temp/base|0;return carry&&x.unshift(carry),x}function compare(a,b,aL,bL){var i,r;if(aL!=bL)r=bL<aL?1:-1;else for(i=r=0;i<aL;i++)if(a[i]!=b[i]){r=a[i]>b[i]?1:-1;break}return r}function subtract(a,b,aL,base){for(var i=0;aL--;)a[aL]-=i,i=a[aL]<b[aL]?1:0,a[aL]=i*base+a[aL]-b[aL];for(;!a[0]&&1<a.length;)a.shift()}function finalise(x,sd,rm,isTruncated){var digits,i,j,k,rd,w,xd,xdi,Ctor=x.constructor;out:if(null!=sd){if(!(xd=x.d))return x;for(digits=1,k=xd[0];10<=k;k/=10)digits++;if((i=sd-digits)<0)i+=LOG_BASE,j=sd,rd=(w=xd[xdi=0])/mathpow(10,digits-j-1)%10|0;else if(xdi=Math.ceil((i+1)/LOG_BASE),(k=xd.length)<=xdi){if(!isTruncated)break out;for(;k++<=xdi;)xd.push(0);w=rd=0,j=(i%=LOG_BASE)-LOG_BASE+(digits=1)}else{for(w=k=xd[xdi],digits=1;10<=k;k/=10)digits++;rd=(j=(i%=LOG_BASE)-LOG_BASE+digits)<0?0:w/mathpow(10,digits-j-1)%10|0}if(isTruncated=isTruncated||sd<0||void 0!==xd[xdi+1]||(j<0?w:w%mathpow(10,digits-j-1)),rd=rm<4?(rd||isTruncated)&&(0==rm||rm==(x.s<0?3:2)):5<rd||5==rd&&(4==rm||isTruncated||6==rm&&(0<i?0<j?w/mathpow(10,digits-j):0:xd[xdi-1])%10&1||rm==(x.s<0?8:7)),sd<1||!xd[0])return xd.length=0,rd?(sd-=x.e+1,xd[0]=mathpow(10,(LOG_BASE-sd%LOG_BASE)%LOG_BASE),x.e=-sd||0):xd[0]=x.e=0,x;if(0==i?(xd.length=xdi,k=1,xdi--):(xd.length=xdi+1,k=mathpow(10,LOG_BASE-i),xd[xdi]=0<j?(w/mathpow(10,digits-j)%mathpow(10,j)|0)*k:0),rd)for(;;){if(0==xdi){for(i=1,j=xd[0];10<=j;j/=10)i++;for(j=xd[0]+=k,k=1;10<=j;j/=10)k++;i!=k&&(x.e++,xd[0]==BASE)&&(xd[0]=1);break}if(xd[xdi]+=k,xd[xdi]!=BASE)break;xd[xdi--]=0,k=1}for(i=xd.length;0===xd[--i];)xd.pop()}return external&&(x.e>Ctor.maxE?(x.d=null,x.e=NaN):x.e<Ctor.minE&&(x.e=0,x.d=[0])),x}function finiteToString(x,isExp,sd){var k,e,str,len;return x.isFinite()?(e=x.e,len=(str=digitsToString(x.d)).length,isExp?(sd&&0<(k=sd-len)?str=str.charAt(0)+"."+str.slice(1)+getZeroString(k):1<len&&(str=str.charAt(0)+"."+str.slice(1)),str=str+(x.e<0?"e":"e+")+x.e):e<0?(str="0."+getZeroString(-e-1)+str,sd&&0<(k=sd-len)&&(str+=getZeroString(k))):len<=e?(str+=getZeroString(e+1-len),sd&&0<(k=sd-e-1)&&(str=str+"."+getZeroString(k))):((k=e+1)<len&&(str=str.slice(0,k)+"."+str.slice(k)),sd&&0<(k=sd-len)&&(e+1===len&&(str+="."),str+=getZeroString(k))),str):nonFiniteToString(x)}function getBase10Exponent(digits,e){var w=digits[0];for(e*=LOG_BASE;10<=w;w/=10)e++;return e}function getLn10(Ctor,sd,pr){if(LN10_PRECISION<sd)throw external=!0,pr&&(Ctor.precision=pr),Error(precisionLimitExceeded);return finalise(new Ctor(LN10),sd,1,!0)}function getPi(Ctor,sd,rm){if(PI_PRECISION<sd)throw Error(precisionLimitExceeded);return finalise(new Ctor(PI),sd,rm,!0)}function getPrecision(digits){var w=digits.length-1,len=w*LOG_BASE+1;if(w=digits[w]){for(;w%10==0;w/=10)len--;for(w=digits[0];10<=w;w/=10)len++}return len}function getZeroString(k){for(var zs="";k--;)zs+="0";return zs}function intPow(Ctor,x,n,pr){var isTruncated,r=new Ctor(1),k=Math.ceil(pr/LOG_BASE+4);for(external=!1;;){if(n%2&&truncate((r=r.times(x)).d,k)&&(isTruncated=!0),0===(n=mathfloor(n/2))){n=r.d.length-1,isTruncated&&0===r.d[n]&&++r.d[n];break}truncate((x=x.times(x)).d,k)}return external=!0,r}function isOdd(n){return 1&n.d[n.d.length-1]}function maxOrMin(Ctor,args,ltgt){for(var y,x=new Ctor(args[0]),i=0;++i<args.length;){if(!(y=new Ctor(args[i])).s){x=y;break}x[ltgt](y)&&(x=y)}return x}function naturalExponential(x,sd){var denominator,guard,j,pow,sum,t,wpr,rep=0,i=0,k=0,Ctor=x.constructor,rm=Ctor.rounding,pr=Ctor.precision;if(!x.d||!x.d[0]||17<x.e)return new Ctor(x.d?x.d[0]?x.s<0?0:1/0:1:x.s?x.s<0?0:x:NaN);for(wpr=null==sd?(external=!1,pr):sd,t=new Ctor(.03125);-2<x.e;)x=x.times(t),k+=5;for(wpr+=guard=Math.log(mathpow(2,k))/Math.LN10*2+5|0,denominator=pow=sum=new Ctor(1),Ctor.precision=wpr;;){if(pow=finalise(pow.times(x),wpr,1),denominator=denominator.times(++i),digitsToString((t=sum.plus(divide(pow,denominator,wpr,1))).d).slice(0,wpr)===digitsToString(sum.d).slice(0,wpr)){for(j=k;j--;)sum=finalise(sum.times(sum),wpr,1);if(null!=sd)return Ctor.precision=pr,sum;if(!(rep<3&&checkRoundingDigits(sum.d,wpr-guard,rm,rep)))return finalise(sum,Ctor.precision=pr,rm,external=!0);Ctor.precision=wpr+=10,denominator=pow=t=new Ctor(1),i=0,rep++}sum=t}}function naturalLogarithm(y,sd){var c,c0,denominator,e,numerator,rep,sum,t,wpr,x1,x2,n=1,x=y,xd=x.d,Ctor=x.constructor,rm=Ctor.rounding,pr=Ctor.precision;if(x.s<0||!xd||!xd[0]||!x.e&&1==xd[0]&&1==xd.length)return new Ctor(xd&&!xd[0]?-1/0:1!=x.s?NaN:xd?0:x);if(wpr=null==sd?(external=!1,pr):sd,Ctor.precision=wpr+=10,c0=(c=digitsToString(xd)).charAt(0),!(Math.abs(e=x.e)<15e14))return t=getLn10(Ctor,wpr+2,pr).times(e+""),x=naturalLogarithm(new Ctor(c0+"."+c.slice(1)),wpr-10).plus(t),Ctor.precision=pr,null==sd?finalise(x,pr,rm,external=!0):x;for(;c0<7&&1!=c0||1==c0&&3<c.charAt(1);)c0=(c=digitsToString((x=x.times(y)).d)).charAt(0),n++;for(e=x.e,1<c0?(x=new Ctor("0."+c),e++):x=new Ctor(c0+"."+c.slice(1)),sum=numerator=x=divide((x1=x).minus(1),x.plus(1),wpr,1),x2=finalise(x.times(x),wpr,1),denominator=3;;){if(numerator=finalise(numerator.times(x2),wpr,1),digitsToString((t=sum.plus(divide(numerator,new Ctor(denominator),wpr,1))).d).slice(0,wpr)===digitsToString(sum.d).slice(0,wpr)){if(sum=sum.times(2),0!==e&&(sum=sum.plus(getLn10(Ctor,wpr+2,pr).times(e+""))),sum=divide(sum,new Ctor(n),wpr,1),null!=sd)return Ctor.precision=pr,sum;if(!checkRoundingDigits(sum.d,wpr-10,rm,rep))return finalise(sum,Ctor.precision=pr,rm,external=!0);Ctor.precision=wpr+=10,t=numerator=x=divide(x1.minus(1),x1.plus(1),wpr,1),x2=finalise(x.times(x),wpr,1),denominator=rep=1}sum=t,denominator+=2}}function nonFiniteToString(x){return String(x.s*x.s/0)}function parseDecimal(x,str){var e,i,len;for(0<(i=(str=-1<(e=str.indexOf("."))?str.replace(".",""):str).search(/e/i))?(e<0&&(e=i),e+=+str.slice(i+1),str=str.substring(0,i)):e<0&&(e=str.length),i=0;48===str.charCodeAt(i);i++);for(len=str.length;48===str.charCodeAt(len-1);--len);if(str=str.slice(i,len)){if(len-=i,x.e=e=e-i-1,x.d=[],i=(e+1)%LOG_BASE,e<0&&(i+=LOG_BASE),i<len){for(i&&x.d.push(+str.slice(0,i)),len-=LOG_BASE;i<len;)x.d.push(+str.slice(i,i+=LOG_BASE));str=str.slice(i),i=LOG_BASE-str.length}else i-=len;for(;i--;)str+="0";x.d.push(+str),external&&(x.e>x.constructor.maxE?(x.d=null,x.e=NaN):x.e<x.constructor.minE&&(x.e=0,x.d=[0]))}else x.e=0,x.d=[0];return x}function parseOther(x,str){var base,Ctor,divisor,i,isFloat,len,p,xd;if(-1<str.indexOf("_")){if(str=str.replace(/(\d)_(?=\d)/g,"$1"),isDecimal.test(str))return parseDecimal(x,str)}else if("Infinity"===str||"NaN"===str)return+str||(x.s=NaN),x.e=NaN,x.d=null,x;if(isHex.test(str))base=16,str=str.toLowerCase();else if(isBinary.test(str))base=2;else{if(!isOctal.test(str))throw Error(invalidArgument+str);base=8}for(i=(str=0<(i=str.search(/p/i))?(p=+str.slice(i+1),str.substring(2,i)):str.slice(2)).indexOf("."),Ctor=x.constructor,(isFloat=0<=i)&&(i=(len=(str=str.replace(".","")).length)-i,divisor=intPow(Ctor,new Ctor(base),i,2*i)),i=str=(xd=convertBase(str,base,BASE)).length-1;0===xd[i];--i)xd.pop();return i<0?new Ctor(0*x.s):(x.e=getBase10Exponent(xd,str),x.d=xd,external=!1,isFloat&&(x=divide(x,divisor,4*len)),p&&(x=x.times(Math.abs(p)<54?mathpow(2,p):Decimal.pow(2,p))),external=!0,x)}function taylorSeries(Ctor,n,x,y,isHyperbolic){var j,t,u,x2,pr=Ctor.precision,k=Math.ceil(pr/LOG_BASE);for(external=!1,x2=x.times(x),u=new Ctor(y);;){if(t=divide(u.times(x2),new Ctor(n++*n++),pr,1),u=isHyperbolic?y.plus(t):y.minus(t),y=divide(t.times(x2),new Ctor(n++*n++),pr,1),void 0!==(t=u.plus(y)).d[k]){for(j=k;t.d[j]===u.d[j]&&j--;);if(-1==j)break}j=u,u=y,y=t,t=j,0}return external=!0,t.d.length=k+1,t}function tinyPow(b,e){for(var n=b;--e;)n*=b;return n}function toLessThanHalfPi(Ctor,x){var t,isNeg=x.s<0,Ctor=getPi(Ctor,Ctor.precision,1),halfPi=Ctor.times(.5);if((x=x.abs()).lte(halfPi))return quadrant=isNeg?4:1,x;if((t=x.divToInt(Ctor)).isZero())quadrant=isNeg?3:2;else{if((x=x.minus(t.times(Ctor))).lte(halfPi))return quadrant=isOdd(t)?isNeg?2:3:isNeg?4:1,x;quadrant=isOdd(t)?isNeg?1:4:isNeg?3:2}return x.minus(Ctor).abs()}function toStringBinary(x,baseOut,sd,rm){var base,e,i,len,roundUp,str,xd,y,Ctor=x.constructor,isExp=void 0!==sd;if(isExp?(checkInt32(sd,1,MAX_DIGITS),void 0===rm?rm=Ctor.rounding:checkInt32(rm,0,8)):(sd=Ctor.precision,rm=Ctor.rounding),x.isFinite()){for(isExp?(base=2,16==baseOut?sd=4*sd-3:8==baseOut&&(sd=3*sd-2)):base=baseOut,0<=(i=(str=finiteToString(x)).indexOf("."))&&(str=str.replace(".",""),(y=new Ctor(1)).e=str.length-i,y.d=convertBase(finiteToString(y),10,base),y.e=y.d.length),e=len=(xd=convertBase(str,10,base)).length;0==xd[--len];)xd.pop();if(xd[0]){if(i<0?e--:((x=new Ctor(x)).d=xd,x.e=e,xd=(x=divide(x,y,sd,rm,0,base)).d,e=x.e,roundUp=inexact),i=xd[sd],Ctor=base/2,roundUp=roundUp||void 0!==xd[sd+1],roundUp=rm<4?(void 0!==i||roundUp)&&(0===rm||rm===(x.s<0?3:2)):Ctor<i||i===Ctor&&(4===rm||roundUp||6===rm&&1&xd[sd-1]||rm===(x.s<0?8:7)),xd.length=sd,roundUp)for(;++xd[--sd]>base-1;)xd[sd]=0,sd||(++e,xd.unshift(1));for(len=xd.length;!xd[len-1];--len);for(i=0,str="";i<len;i++)str+=NUMERALS.charAt(xd[i]);if(isExp){if(1<len)if(16==baseOut||8==baseOut){for(i=16==baseOut?4:3,--len;len%i;len++)str+="0";for(len=(xd=convertBase(str,base,baseOut)).length;!xd[len-1];--len);for(i=1,str="1.";i<len;i++)str+=NUMERALS.charAt(xd[i])}else str=str.charAt(0)+"."+str.slice(1);str=str+(e<0?"p":"p+")+e}else if(e<0){for(;++e;)str="0"+str;str="0."+str}else if(++e>len)for(e-=len;e--;)str+="0";else e<len&&(str=str.slice(0,e)+"."+str.slice(e))}else str=isExp?"0p+0":"0";str=(16==baseOut?"0x":2==baseOut?"0b":8==baseOut?"0o":"")+str}else str=nonFiniteToString(x);return x.s<0?"-"+str:str}function truncate(arr,len){return arr.length>len&&(arr.length=len,1)}function abs(x){return new this(x).abs()}function acos(x){return new this(x).acos()}function acosh(x){return new this(x).acosh()}function add(x,y){return new this(x).plus(y)}function asin(x){return new this(x).asin()}function asinh(x){return new this(x).asinh()}function atan(x){return new this(x).atan()}function atanh(x){return new this(x).atanh()}function atan2(y,x){y=new this(y),x=new this(x);var r,pr=this.precision,rm=this.rounding,wpr=pr+4;return y.s&&x.s?y.d||x.d?!x.d||y.isZero()?(r=x.s<0?getPi(this,pr,rm):new this(0)).s=y.s:!y.d||x.isZero()?(r=getPi(this,wpr,1).times(.5)).s=y.s:r=x.s<0?(this.precision=wpr,this.rounding=1,r=this.atan(divide(y,x,wpr,1)),x=getPi(this,wpr,1),this.precision=pr,this.rounding=rm,y.s<0?r.minus(x):r.plus(x)):this.atan(divide(y,x,wpr,1)):(r=getPi(this,wpr,1).times(0<x.s?.25:.75)).s=y.s:r=new this(NaN),r}function cbrt(x){return new this(x).cbrt()}function ceil(x){return finalise(x=new this(x),x.e+1,2)}function clamp(x,min,max){return new this(x).clamp(min,max)}function config(obj){if(!obj||"object"!=typeof obj)throw Error(decimalError+"Object expected");for(var p,v,useDefaults=!0===obj.defaults,ps=["precision",1,MAX_DIGITS,"rounding",0,8,"toExpNeg",-EXP_LIMIT,0,"toExpPos",0,EXP_LIMIT,"maxE",0,EXP_LIMIT,"minE",-EXP_LIMIT,0,"modulo",0,9],i=0;i<ps.length;i+=3)if(p=ps[i],useDefaults&&(this[p]=DEFAULTS[p]),void 0!==(v=obj[p])){if(!(mathfloor(v)===v&&ps[i+1]<=v&&v<=ps[i+2]))throw Error(invalidArgument+p+": "+v);this[p]=v}if(p="crypto",useDefaults&&(this[p]=DEFAULTS[p]),void 0!==(v=obj[p])){if(!0!==v&&!1!==v&&0!==v&&1!==v)throw Error(invalidArgument+p+": "+v);if(v){if(void 0===crypto||!crypto||!crypto.getRandomValues&&!crypto.randomBytes)throw Error(cryptoUnavailable);this[p]=!0}else this[p]=!1}return this}function cos(x){return new this(x).cos()}function cosh(x){return new this(x).cosh()}function div(x,y){return new this(x).div(y)}function exp(x){return new this(x).exp()}function floor(x){return finalise(x=new this(x),x.e+1,3)}function hypot(){var i,n,t=new this(0);for(external=!1,i=0;i<arguments.length;)if((n=new this(arguments[i++])).d)t.d&&(t=t.plus(n.times(n)));else{if(n.s)return external=!0,new this(1/0);t=n}return external=!0,t.sqrt()}function isDecimalInstance(obj){return obj instanceof Decimal||obj&&obj.toStringTag===tag||!1}function ln(x){return new this(x).ln()}function log(x,y){return new this(x).log(y)}function log2(x){return new this(x).log(2)}function log10(x){return new this(x).log(10)}function max(){return maxOrMin(this,arguments,"lt")}function min(){return maxOrMin(this,arguments,"gt")}function mod(x,y){return new this(x).mod(y)}function mul(x,y){return new this(x).mul(y)}function pow(x,y){return new this(x).pow(y)}function random(sd){var d,e,k,n,i=0,r=new this(1),rd=[];if(void 0===sd?sd=this.precision:checkInt32(sd,1,MAX_DIGITS),k=Math.ceil(sd/LOG_BASE),this.crypto)if(crypto.getRandomValues)for(d=crypto.getRandomValues(new Uint32Array(k));i<k;)429e7<=(n=d[i])?d[i]=crypto.getRandomValues(new Uint32Array(1))[0]:rd[i++]=n%1e7;else{if(!crypto.randomBytes)throw Error(cryptoUnavailable);for(d=crypto.randomBytes(k*=4);i<k;)214e7<=(n=d[i]+(d[i+1]<<8)+(d[i+2]<<16)+((127&d[i+3])<<24))?crypto.randomBytes(4).copy(d,i):(rd.push(n%1e7),i+=4);i=k/4}else for(;i<k;)rd[i++]=1e7*Math.random()|0;for(k=rd[--i],sd%=LOG_BASE,k&&sd&&(n=mathpow(10,LOG_BASE-sd),rd[i]=(k/n|0)*n);0===rd[i];i--)rd.pop();if(i<0)rd=[e=0];else{for(e=-1;0===rd[0];e-=LOG_BASE)rd.shift();for(k=1,n=rd[0];10<=n;n/=10)k++;k<LOG_BASE&&(e-=LOG_BASE-k)}return r.e=e,r.d=rd,r}function round(x){return finalise(x=new this(x),x.e+1,this.rounding)}function sign(x){return(x=new this(x)).d?x.d[0]?x.s:0*x.s:x.s||NaN}function sin(x){return new this(x).sin()}function sinh(x){return new this(x).sinh()}function sqrt(x){return new this(x).sqrt()}function sub(x,y){return new this(x).sub(y)}function sum(){var i=0,args=arguments,x=new this(args[i]);for(external=!1;x.s&&++i<args.length;)x=x.plus(args[i]);return external=!0,finalise(x,this.precision,this.rounding)}function tan(x){return new this(x).tan()}function tanh(x){return new this(x).tanh()}function trunc(x){return finalise(x=new this(x),x.e+1,1)}((Decimal=function clone(obj){var i,p,ps;function Decimal(v){var e,i,t,x=this;if(!(x instanceof Decimal))return new Decimal(v);if(x.constructor=Decimal,!isDecimalInstance(v)){if("number"==(t=typeof v)){if(0===v)return x.s=1/v<0?-1:1,x.e=0,void(x.d=[0]);if(v<0?(v=-v,x.s=-1):x.s=1,v===~~v&&v<1e7){for(e=0,i=v;10<=i;i/=10)e++;return void(external?Decimal.maxE<e?(x.e=NaN,x.d=null):e<Decimal.minE?(x.e=0,x.d=[0]):(x.e=e,x.d=[v]):(x.e=e,x.d=[v]))}return 0*v!=0?(v||(x.s=NaN),x.e=NaN,void(x.d=null)):parseDecimal(x,v.toString())}if("string"!=t)throw Error(invalidArgument+v);return 45===(i=v.charCodeAt(0))?(v=v.slice(1),x.s=-1):(43===i&&(v=v.slice(1)),x.s=1),(isDecimal.test(v)?parseDecimal:parseOther)(x,v)}x.s=v.s,external?!v.d||v.e>Decimal.maxE?(x.e=NaN,x.d=null):v.e<Decimal.minE?(x.e=0,x.d=[0]):(x.e=v.e,x.d=v.d.slice()):(x.e=v.e,x.d=v.d&&v.d.slice())}if(Decimal.prototype=P,Decimal.ROUND_UP=0,Decimal.ROUND_DOWN=1,Decimal.ROUND_CEIL=2,Decimal.ROUND_FLOOR=3,Decimal.ROUND_HALF_UP=4,Decimal.ROUND_HALF_DOWN=5,Decimal.ROUND_HALF_EVEN=6,Decimal.ROUND_HALF_CEIL=7,Decimal.ROUND_HALF_FLOOR=8,Decimal.EUCLID=9,Decimal.config=Decimal.set=config,Decimal.clone=clone,Decimal.isDecimal=isDecimalInstance,Decimal.abs=abs,Decimal.acos=acos,Decimal.acosh=acosh,Decimal.add=add,Decimal.asin=asin,Decimal.asinh=asinh,Decimal.atan=atan,Decimal.atanh=atanh,Decimal.atan2=atan2,Decimal.cbrt=cbrt,Decimal.ceil=ceil,Decimal.clamp=clamp,Decimal.cos=cos,Decimal.cosh=cosh,Decimal.div=div,Decimal.exp=exp,Decimal.floor=floor,Decimal.hypot=hypot,Decimal.ln=ln,Decimal.log=log,Decimal.log10=log10,Decimal.log2=log2,Decimal.max=max,Decimal.min=min,Decimal.mod=mod,Decimal.mul=mul,Decimal.pow=pow,Decimal.random=random,Decimal.round=round,Decimal.sign=sign,Decimal.sin=sin,Decimal.sinh=sinh,Decimal.sqrt=sqrt,Decimal.sub=sub,Decimal.sum=sum,Decimal.tan=tan,Decimal.tanh=tanh,Decimal.trunc=trunc,(obj=void 0===obj?{}:obj)&&!0!==obj.defaults)for(ps=["precision","rounding","toExpNeg","toExpPos","maxE","minE","modulo","crypto"],i=0;i<ps.length;)obj.hasOwnProperty(p=ps[i++])||(obj[p]=this[p]);return Decimal.config(obj),Decimal}(DEFAULTS)).prototype.constructor=Decimal).default=Decimal.Decimal=Decimal,LN10=new Decimal(LN10),PI=new Decimal(PI),"function"==typeof define&&define.amd?define(function(){return Decimal}):"undefined"!=typeof module&&module.exports?("function"==typeof Symbol&&"symbol"==typeof Symbol.iterator&&(P[Symbol.for("nodejs.util.inspect.custom")]=P.toString,P[Symbol.toStringTag]="Decimal"),module.exports=Decimal):(globalScope=globalScope||("undefined"!=typeof self&&self&&self.self==self?self:window),noConflict=globalScope.Decimal,Decimal.noConflict=function(){return globalScope.Decimal=noConflict,Decimal},globalScope.Decimal=Decimal)}(this);var VBacktest=(()=>{var _scriptDir="undefined"!=typeof document&&document.currentScript?document.currentScript.src:void 0;return"undefined"!=typeof __filename&&(_scriptDir=_scriptDir||__filename),function(moduleArg={}){var Module=moduleArg,readyPromiseResolve,readyPromiseReject,Std=(Module.ready=new Promise((resolve,reject)=>{readyPromiseResolve=resolve,readyPromiseReject=reject}),{_skip:function(arr,period){for(var j=0,k=0;j<arr.length&&(isNaN(arr[j])||k++,k!=period);j++);return j},_sum:function(arr,num){for(var sum=0,i=0;i<num;i++)isNaN(arr[i])||(sum+=arr[i]);return sum},_avg:function(arr,num){for(var n=0,sum=0,i=0;i<num;i++)isNaN(arr[i])||(sum+=arr[i],n++);return sum/n},_zeros:function(len){for(var n=[],i=0;i<len;i++)n.push(0);return n},_set:function(arr,start,end,value){for(var e=Math.min(arr.length,end),i=start;i<e;i++)arr[i]=value},_diff:function(a,b){for(var d=[],i=0;i<b.length;i++)isNaN(a[i])||isNaN(b[i])?d.push(NaN):d.push(a[i]-b[i]);return d},_move_diff:function(a){for(var d=[],i=1;i<a.length;i++)d.push(a[i]-a[i-1]);return d},_sma:function(S,period){var R=Std._zeros(S.length),j=Std._skip(S,period);if(Std._set(R,0,j,NaN),j<S.length)for(var sum=0,i=j;i<S.length;i++)i==j?sum=Std._sum(S,i+1):sum+=S[i]-S[i-period],R[i]=sum/period;return R},_smma:function(S,period){var R=Std._zeros(S.length),j=Std._skip(S,period);if(Std._set(R,0,j,NaN),j<S.length){R[j]=Std._avg(S,j+1);for(var i=j+1;i<S.length;i++)R[i]=(R[i-1]*(period-1)+S[i])/period}return R},_ema:function(S,period){var R=Std._zeros(S.length),multiplier=2/(period+1),period=Std._skip(S,period);if(Std._set(R,0,period,NaN),period<S.length){R[period]=Std._avg(S,period+1);for(var i=period+1;i<S.length;i++)R[i]=(S[i]-R[i-1])*multiplier+R[i-1]}return R},_cmp:function(arr,start,end,cmpFunc){for(var v=arr[start],i=start;i<end;i++)v=cmpFunc(arr[i],v);return v},_filt:function(records,n,attr,iv,cmpFunc){if(records.length<2)return NaN;for(var v=iv,pos=0!==n?records.length-Math.min(records.length-1,n)-1:0,i=records.length-2;pos<=i;i--)v=cmpFunc(v,void 0!==attr?records[i][attr]:records[i]);return v},_ticks:function(records){if(0===records.length)return[];var ticks=[];if(void 0!==records[0].Close)for(var i=0;i<records.length;i++)ticks.push(records[i].Close);else ticks=records;return ticks}});function TAInstance(logPtr){var self={_log:logPtr="function"!=typeof logPtr?function(){}:logPtr,Highest:function(records,n,attr){return Std._filt(records,n,attr,Number.MIN_VALUE,Math.max)},Lowest:function(records,n,attr){return Std._filt(records,n,attr,Number.MAX_VALUE,Math.min)},MA:function(records,period){return self._log("MA",period=void 0===period?9:period),Std._sma(Std._ticks(records),period)},SMA:function(records,period){return self._log("SMA",period=void 0===period?9:period),Std._sma(Std._ticks(records),period)},EMA:function(records,period){return self._log("EMA",period=void 0===period?9:period),Std._ema(Std._ticks(records),period)},MACD:function(records,fastEMA,slowEMA,signalEMA){self._log("MACD",fastEMA=void 0===fastEMA?12:fastEMA,slowEMA=void 0===slowEMA?26:slowEMA,signalEMA=void 0===signalEMA?9:signalEMA);records=Std._ticks(records),slowEMA=Std._ema(records,slowEMA),records=Std._ema(records,fastEMA),fastEMA=Std._diff(records,slowEMA),records=Std._ema(fastEMA,signalEMA);return[fastEMA,records,Std._diff(fastEMA,records)]},BOLL:function(records,period,multiplier){self._log("BOLL",period=void 0===period?20:period,multiplier=void 0===multiplier?2:multiplier);for(var S=Std._ticks(records),j=period-1;j<S.length&&isNaN(S[j]);j++);for(var UP=Std._zeros(S.length),MB=Std._zeros(S.length),DN=Std._zeros(S.length),sum=(Std._set(UP,0,j,NaN),Std._set(MB,0,j,NaN),Std._set(DN,0,j,NaN),0),i=j;i<S.length;i++){if(i==j)for(var k=0;k<period;k++)sum+=S[k];else sum=sum+S[i]-S[i-period];for(var ma=sum/period,d=0,m=i+1-period;m<=i;m++)d+=(S[m]-ma)*(S[m]-ma);var stdev=Math.sqrt(d/period),dn=ma-multiplier*stdev;UP[i]=ma+multiplier*stdev,MB[i]=ma,DN[i]=dn}return[UP,MB,DN]},KDJ:function(records,n,k,d){self._log("KDJ",n=void 0===n?9:n,k=void 0===k?3:k,d=void 0===d?3:d);for(var RSV=Std._zeros(records.length),K=(Std._set(RSV,0,n-1,NaN),Std._zeros(records.length)),D=Std._zeros(records.length),J=Std._zeros(records.length),hs=Std._zeros(records.length),ls=Std._zeros(records.length),j=0;j<records.length;j++)hs[j]=records[j].High,ls[j]=records[j].Low;for(var c,h,l,i=0;i<records.length;i++)n-1<=i?(c=records[i].Close,h=Std._cmp(hs,i-(n-1),i+1,Math.max),l=Std._cmp(ls,i-(n-1),i+1,Math.min),RSV[i]=h!=l?(c-l)/(h-l)*100:100,K[i]=(+RSV[i]+(k-1)*K[i-1])/k,D[i]=(+K[i]+(d-1)*D[i-1])/d):(K[i]=D[i]=50,RSV[i]=0),J[i]=3*K[i]-2*D[i];for(var m=0;m<n-1;m++)K[m]=D[m]=J[m]=NaN;return[K,D,J]},RSI:function(records,period){self._log("RSI",period=void 0===period?14:period);var n=period,rsi=Std._zeros(records.length);if(Std._set(rsi,0,rsi.length,NaN),!(records.length<n)){for(var ticks=Std._ticks(records),deltas=Std._move_diff(ticks),seed=deltas.slice(0,n),up=0,down=0,i=0;i<seed.length;i++)0<=seed[i]?up+=seed[i]:down+=seed[i];up/=n;var delta,down=-down/n,upval=(rsi[n]=100-100/(1+(0!=down?up/down:0)),0),downval=0;for(i=n+1;i<ticks.length;i++)downval=0<(delta=deltas[i-1])?(upval=delta,0):(upval=0,-delta),rsi[i]=100-100/(1+(up=(up*(n-1)+upval)/n)/(down=(down*(n-1)+downval)/n))}return rsi},OBV:function(records){if(self._log("OBV"),0===records.length)return[];if(void 0===records[0].Close)throw"argument must KLine";for(var R=[],i=0;i<records.length;i++)0===i?R[i]=records[i].Volume:records[i].Close>=records[i-1].Close?R[i]=R[i-1]+records[i].Volume:R[i]=R[i-1]-records[i].Volume;return R},ATR:function(records,period){if(self._log("ATR",period=void 0===period?14:period),0===records.length)return[];if(void 0===records[0].Close)throw"argument must KLine";for(var R=Std._zeros(records.length),sum=0,n=0,i=0;i<records.length;i++){var TR=0;sum+=TR=0==i?records[i].High-records[i].Low:Math.max(records[i].High-records[i].Low,Math.abs(records[i].High-records[i-1].Close),Math.abs(records[i-1].Close-records[i].Low)),R[i]=n=i<period?sum/(i+1):((period-1)*n+TR)/period}return R},Alligator:function(records,jawLength,teethLength,lipsLength){self._log("Alligator",jawLength=void 0===jawLength?13:jawLength,teethLength=void 0===teethLength?8:teethLength,lipsLength=void 0===lipsLength?5:lipsLength);for(var ticks=[],i=0;i<records.length;i++)ticks.push((records[i].High+records[i].Low)/2);return[[NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN].concat(Std._smma(ticks,jawLength)),[NaN,NaN,NaN,NaN,NaN].concat(Std._smma(ticks,teethLength)),[NaN,NaN,NaN].concat(Std._smma(ticks,lipsLength))]},CMF:function(records,periods){self._log("CMF",periods=periods||20);for(var ret=[],sumD=0,sumV=0,arrD=[],arrV=[],i=0;i<records.length;i++){var d=records[i].High==records[i].Low?0:(2*records[i].Close-records[i].Low-records[i].High)/(records[i].High-records[i].Low)*records[i].Volume;arrD.push(d),arrV.push(records[i].Volume),sumD+=d,sumV+=records[i].Volume,periods<=i&&(sumD-=arrD.shift(),sumV-=arrV.shift()),ret.push(sumD/sumV)}return ret}};return self}var TA=TAInstance();function init_pako(){"use strict";function zswap32(q){return(q>>>24&255)+(q>>>8&65280)+((65280&q)<<8)+((255&q)<<24)}var exports={},adler32_1=function(adler,buf,len,pos){for(var s1=65535&adler|0,s2=adler>>>16&65535|0,n=0;0!==len;){for(len-=n=2e3<len?2e3:len;s2=s2+(s1=s1+buf[pos++]|0)|0,--n;);s1%=65521,s2%=65521}return s1|s2<<16|0},crcTable=new Uint32Array(function(){for(var table=[],n=0;n<256;n++){for(var c=n,k=0;k<8;k++)c=1&c?3988292384^c>>>1:c>>>1;table[n]=c}return table}()),crc32_1=function(crc,buf,len,pos){var t=crcTable,end=pos+len;crc^=-1;for(var i=pos;i<end;i++)crc=crc>>>8^t[255&(crc^buf[i])];return-1^crc},BAD$1=16209,TYPE$1=16191,lbase=new Uint16Array([3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0]),lext=new Uint8Array([16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78]),dbase=new Uint16Array([1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0]),dext=new Uint8Array([16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64]),inftrees=function(type,lens,lens_index,codes,table,table_index,work,opts){for(var incr,fill,low,mask,next,match,here_bits,here_op,here_val,bits=opts.bits,len=0,sym=0,min=0,max=0,root=0,curr=0,drop=0,left=0,used=0,huff=0,base=null,count=new Uint16Array(16),offs=new Uint16Array(16),extra=null,len=0;len<=15;len++)count[len]=0;for(sym=0;sym<codes;sym++)count[lens[lens_index+sym]]++;for(root=bits,max=15;1<=max&&0===count[max];max--);if(max<root&&(root=max),0===max)table[table_index++]=20971520,table[table_index++]=20971520,opts.bits=1;else{for(min=1;min<max&&0===count[min];min++);for(root<min&&(root=min),len=left=1;len<=15;len++)if((left=(left<<=1)-count[len])<0)return-1;if(0<left&&(0===type||1!==max))return-1;for(offs[1]=0,len=1;len<15;len++)offs[len+1]=offs[len]+count[len];for(sym=0;sym<codes;sym++)0!==lens[lens_index+sym]&&(work[offs[lens[lens_index+sym]]++]=sym);if(match=0===type?(base=extra=work,20):1===type?(base=lbase,extra=lext,257):(base=dbase,extra=dext,0),len=min,next=table_index,drop=sym=huff=0,low=-1,mask=(used=1<<(curr=root))-1,1===type&&852<used||2===type&&592<used)return 1;for(;;){for(here_val=work[sym]+1<match?(here_op=0,work[sym]):work[sym]>=match?(here_op=extra[work[sym]-match],base[work[sym]-match]):(here_op=96,0),incr=1<<(here_bits=len-drop),min=fill=1<<curr;table[next+(huff>>drop)+(fill-=incr)]=here_bits<<24|here_op<<16|here_val|0,0!==fill;);for(incr=1<<len-1;huff&incr;)incr>>=1;if(huff=0!==incr?(huff&incr-1)+incr:0,sym++,0==--count[len]){if(len===max)break;len=lens[lens_index+work[sym]]}if(root<len&&(huff&mask)!==low){for(next+=min,left=1<<(curr=len-(drop=0===drop?root:drop));curr+drop<max&&!((left-=count[curr+drop])<=0);)curr++,left<<=1;if(used+=1<<curr,1===type&&852<used||2===type&&592<used)return 1;table[low=huff&mask]=root<<24|curr<<16|next-table_index|0}}0!==huff&&(table[next+huff]=len-drop<<24|64<<16|0),opts.bits=root}return 0},constants$1={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_MEM_ERROR:-4,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8},LENS=1,DISTS=2,Z_FINISH$1=constants$1.Z_FINISH,Z_BLOCK=constants$1.Z_BLOCK,Z_TREES=constants$1.Z_TREES,Z_OK$1=constants$1.Z_OK,Z_STREAM_END$1=constants$1.Z_STREAM_END,Z_NEED_DICT$1=constants$1.Z_NEED_DICT,Z_STREAM_ERROR$1=constants$1.Z_STREAM_ERROR,Z_DATA_ERROR$1=constants$1.Z_DATA_ERROR,Z_MEM_ERROR$1=constants$1.Z_MEM_ERROR,Z_BUF_ERROR=constants$1.Z_BUF_ERROR,Z_DEFLATED=constants$1.Z_DEFLATED,HEAD=16180,BAD=16209,SYNC=16211,ENOUGH_LENS=852,ENOUGH_DISTS=592;function InflateState(){this.strm=null,this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new Uint16Array(320),this.work=new Uint16Array(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}function inflateResetKeep(strm){var state;return inflateStateCheck(strm)?Z_STREAM_ERROR$1:(state=strm.state,strm.total_in=strm.total_out=state.total=0,strm.msg="",state.wrap&&(strm.adler=1&state.wrap),state.mode=HEAD,state.last=0,state.havedict=0,state.flags=-1,state.dmax=32768,state.head=null,state.hold=0,state.bits=0,state.lencode=state.lendyn=new Int32Array(ENOUGH_LENS),state.distcode=state.distdyn=new Int32Array(ENOUGH_DISTS),state.sane=1,state.back=-1,Z_OK$1)}function inflateReset(strm){var state;return inflateStateCheck(strm)?Z_STREAM_ERROR$1:((state=strm.state).wsize=0,state.whave=0,state.wnext=0,inflateResetKeep(strm))}function inflateInit2(strm,windowBits){var state;return strm?(state=new InflateState,(strm.state=state).strm=strm,state.window=null,state.mode=HEAD,(state=inflateReset2(strm,windowBits))!==Z_OK$1&&(strm.state=null),state):Z_STREAM_ERROR$1}function updatewindow(strm,src,end,copy){var dist;return null===(strm=strm.state).window&&(strm.wsize=1<<strm.wbits,strm.wnext=0,strm.whave=0,strm.window=new Uint8Array(strm.wsize)),strm.wsize<=copy?(strm.window.set(src.subarray(end-strm.wsize,end),0),strm.wnext=0,strm.whave=strm.wsize):(copy<(dist=strm.wsize-strm.wnext)&&(dist=copy),strm.window.set(src.subarray(end-copy,end-copy+dist),strm.wnext),(copy-=dist)?(strm.window.set(src.subarray(end-copy,end),0),strm.wnext=copy,strm.whave=strm.wsize):(strm.wnext+=dist,strm.wnext===strm.wsize&&(strm.wnext=0),strm.whave<strm.wsize&&(strm.whave+=dist))),0}var lenfix,distfix,inflateStateCheck=function(strm){var state;return!strm||!(state=strm.state)||state.strm!==strm||state.mode<HEAD||state.mode>SYNC?1:0},inflateReset2=function(strm,windowBits){var wrap,state;return inflateStateCheck(strm)||(state=strm.state,windowBits<0?(wrap=0,windowBits=-windowBits):(wrap=5+(windowBits>>4),windowBits<48&&(windowBits&=15)),windowBits&&(windowBits<8||15<windowBits))?Z_STREAM_ERROR$1:(null!==state.window&&state.wbits!==windowBits&&(state.window=null),state.wrap=wrap,state.wbits=windowBits,inflateReset(strm))},virgin=!0,inflate_1$1={inflateReset:inflateReset,inflateReset2:inflateReset2,inflateResetKeep:inflateResetKeep,inflateInit:function(strm){return inflateInit2(strm,15)},inflateInit2:inflateInit2,inflate:function(strm,flush){var state,input,output,next,put,have,left,hold,bits,_in,_out,copy,from,from_source,here_bits,here_op,here_val,last_bits,last_op,last_val,len,ret,opts,n,here=0,hbuf=new Uint8Array(4),order=new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);if(inflateStateCheck(strm)||!strm.output||!strm.input&&0!==strm.avail_in)return Z_STREAM_ERROR$1;16191===(state=strm.state).mode&&(state.mode=16192),put=strm.next_out,output=strm.output,next=strm.next_in,input=strm.input,hold=state.hold,bits=state.bits,_in=have=strm.avail_in,_out=left=strm.avail_out,ret=Z_OK$1;inf_leave:for(;;)switch(state.mode){case HEAD:if(0===state.wrap)state.mode=16192;else{for(;bits<16;){if(0===have)break inf_leave;have--,hold+=input[next++]<<bits,bits+=8}2&state.wrap&&35615===hold?(0===state.wbits&&(state.wbits=15),hbuf[state.check=0]=255&hold,hbuf[1]=hold>>>8&255,state.check=crc32_1(state.check,hbuf,2,0),bits=hold=0,state.mode=16181):(state.head&&(state.head.done=!1),!(1&state.wrap)||(((255&hold)<<8)+(hold>>8))%31?(strm.msg="incorrect header check",state.mode=BAD):(15&hold)!==Z_DEFLATED?(strm.msg="unknown compression method",state.mode=BAD):(bits-=4,len=8+(15&(hold>>>=4)),0===state.wbits&&(state.wbits=len),15<len||len>state.wbits?(strm.msg="invalid window size",state.mode=BAD):(state.dmax=1<<state.wbits,state.flags=0,strm.adler=state.check=1,state.mode=512&hold?16189:16191,bits=hold=0)))}break;case 16181:for(;bits<16;){if(0===have)break inf_leave;have--,hold+=input[next++]<<bits,bits+=8}if(state.flags=hold,(255&state.flags)!==Z_DEFLATED){strm.msg="unknown compression method",state.mode=BAD;break}if(57344&state.flags){strm.msg="unknown header flags set",state.mode=BAD;break}state.head&&(state.head.text=hold>>8&1),512&state.flags&&4&state.wrap&&(hbuf[0]=255&hold,hbuf[1]=hold>>>8&255,state.check=crc32_1(state.check,hbuf,2,0)),bits=hold=0,state.mode=16182;case 16182:for(;bits<32;){if(0===have)break inf_leave;have--,hold+=input[next++]<<bits,bits+=8}state.head&&(state.head.time=hold),512&state.flags&&4&state.wrap&&(hbuf[0]=255&hold,hbuf[1]=hold>>>8&255,hbuf[2]=hold>>>16&255,hbuf[3]=hold>>>24&255,state.check=crc32_1(state.check,hbuf,4,0)),bits=hold=0,state.mode=16183;case 16183:for(;bits<16;){if(0===have)break inf_leave;have--,hold+=input[next++]<<bits,bits+=8}state.head&&(state.head.xflags=255&hold,state.head.os=hold>>8),512&state.flags&&4&state.wrap&&(hbuf[0]=255&hold,hbuf[1]=hold>>>8&255,state.check=crc32_1(state.check,hbuf,2,0)),bits=hold=0,state.mode=16184;case 16184:if(1024&state.flags){for(;bits<16;){if(0===have)break inf_leave;have--,hold+=input[next++]<<bits,bits+=8}state.length=hold,state.head&&(state.head.extra_len=hold),512&state.flags&&4&state.wrap&&(hbuf[0]=255&hold,hbuf[1]=hold>>>8&255,state.check=crc32_1(state.check,hbuf,2,0)),bits=hold=0}else state.head&&(state.head.extra=null);state.mode=16185;case 16185:if(1024&state.flags&&((copy=have<(copy=state.length)?have:copy)&&(state.head&&(len=state.head.extra_len-state.length,state.head.extra||(state.head.extra=new Uint8Array(state.head.extra_len)),state.head.extra.set(input.subarray(next,next+copy),len)),512&state.flags&&4&state.wrap&&(state.check=crc32_1(state.check,input,copy,next)),have-=copy,next+=copy,state.length-=copy),state.length))break inf_leave;state.length=0,state.mode=16186;case 16186:if(2048&state.flags){if(0===have)break inf_leave;for(copy=0;len=input[next+copy++],state.head&&len&&state.length<65536&&(state.head.name+=String.fromCharCode(len)),len&&copy<have;);if(512&state.flags&&4&state.wrap&&(state.check=crc32_1(state.check,input,copy,next)),have-=copy,next+=copy,len)break inf_leave}else state.head&&(state.head.name=null);state.length=0,state.mode=16187;case 16187:if(4096&state.flags){if(0===have)break inf_leave;for(copy=0;len=input[next+copy++],state.head&&len&&state.length<65536&&(state.head.comment+=String.fromCharCode(len)),len&&copy<have;);if(512&state.flags&&4&state.wrap&&(state.check=crc32_1(state.check,input,copy,next)),have-=copy,next+=copy,len)break inf_leave}else state.head&&(state.head.comment=null);state.mode=16188;case 16188:if(512&state.flags){for(;bits<16;){if(0===have)break inf_leave;have--,hold+=input[next++]<<bits,bits+=8}if(4&state.wrap&&hold!==(65535&state.check)){strm.msg="header crc mismatch",state.mode=BAD;break}bits=hold=0}state.head&&(state.head.hcrc=state.flags>>9&1,state.head.done=!0),strm.adler=state.check=0,state.mode=16191;break;case 16189:for(;bits<32;){if(0===have)break inf_leave;have--,hold+=input[next++]<<bits,bits+=8}strm.adler=state.check=zswap32(hold),bits=hold=0,state.mode=16190;case 16190:if(0===state.havedict)return strm.next_out=put,strm.avail_out=left,strm.next_in=next,strm.avail_in=have,state.hold=hold,state.bits=bits,Z_NEED_DICT$1;strm.adler=state.check=1,state.mode=16191;case 16191:if(flush===Z_BLOCK||flush===Z_TREES)break inf_leave;case 16192:if(state.last)hold>>>=7&bits,bits-=7&bits,state.mode=16206;else{for(;bits<3;){if(0===have)break inf_leave;have--,hold+=input[next++]<<bits,bits+=8}switch(state.last=1&hold,--bits,3&(hold>>>=1)){case 0:state.mode=16193;break;case 1:if(!function(state){if(virgin){lenfix=new Int32Array(512),distfix=new Int32Array(32);for(var sym=0;sym<144;)state.lens[sym++]=8;for(;sym<256;)state.lens[sym++]=9;for(;sym<280;)state.lens[sym++]=7;for(;sym<288;)state.lens[sym++]=8;for(inftrees(LENS,state.lens,0,288,lenfix,0,state.work,{bits:9}),sym=0;sym<32;)state.lens[sym++]=5;inftrees(DISTS,state.lens,0,32,distfix,0,state.work,{bits:5}),virgin=!1}state.lencode=lenfix,state.lenbits=9,state.distcode=distfix,state.distbits=5}(state),state.mode=16199,flush!==Z_TREES)break;hold>>>=2,bits-=2;break inf_leave;case 2:state.mode=16196;break;case 3:strm.msg="invalid block type",state.mode=BAD}hold>>>=2,bits-=2}break;case 16193:for(hold>>>=7&bits,bits-=7&bits;bits<32;){if(0===have)break inf_leave;have--,hold+=input[next++]<<bits,bits+=8}if((65535&hold)!=(hold>>>16^65535)){strm.msg="invalid stored block lengths",state.mode=BAD;break}if(state.length=65535&hold,bits=hold=0,state.mode=16194,flush===Z_TREES)break inf_leave;case 16194:state.mode=16195;case 16195:if(copy=state.length){if(0===(copy=left<(copy=have<copy?have:copy)?left:copy))break inf_leave;output.set(input.subarray(next,next+copy),put),have-=copy,next+=copy,left-=copy,put+=copy,state.length-=copy}else state.mode=16191;break;case 16196:for(;bits<14;){if(0===have)break inf_leave;have--,hold+=input[next++]<<bits,bits+=8}if(state.nlen=257+(31&hold),hold>>>=5,bits-=5,state.ndist=1+(31&hold),hold>>>=5,bits-=5,state.ncode=4+(15&hold),hold>>>=4,bits-=4,286<state.nlen||30<state.ndist){strm.msg="too many length or distance symbols",state.mode=BAD;break}state.have=0,state.mode=16197;case 16197:for(;state.have<state.ncode;){for(;bits<3;){if(0===have)break inf_leave;have--,hold+=input[next++]<<bits,bits+=8}state.lens[order[state.have++]]=7&hold,hold>>>=3,bits-=3}for(;state.have<19;)state.lens[order[state.have++]]=0;if(state.lencode=state.lendyn,state.lenbits=7,opts={bits:state.lenbits},ret=inftrees(0,state.lens,0,19,state.lencode,0,state.work,opts),state.lenbits=opts.bits,ret){strm.msg="invalid code lengths set",state.mode=BAD;break}state.have=0,state.mode=16198;case 16198:for(;state.have<state.nlen+state.ndist;){for(;here_op=(here=state.lencode[hold&(1<<state.lenbits)-1])>>>16&255,here_val=65535&here,!((here_bits=here>>>24)<=bits);){if(0===have)break inf_leave;have--,hold+=input[next++]<<bits,bits+=8}if(here_val<16)hold>>>=here_bits,bits-=here_bits,state.lens[state.have++]=here_val;else{if(16===here_val){for(n=here_bits+2;bits<n;){if(0===have)break inf_leave;have--,hold+=input[next++]<<bits,bits+=8}if(hold>>>=here_bits,bits-=here_bits,0===state.have){strm.msg="invalid bit length repeat",state.mode=BAD;break}len=state.lens[state.have-1],copy=3+(3&hold),hold>>>=2,bits-=2}else if(17===here_val){for(n=here_bits+3;bits<n;){if(0===have)break inf_leave;have--,hold+=input[next++]<<bits,bits+=8}len=0,copy=3+(7&(hold>>>=here_bits)),hold>>>=3,bits=bits-here_bits-3}else{for(n=here_bits+7;bits<n;){if(0===have)break inf_leave;have--,hold+=input[next++]<<bits,bits+=8}len=0,copy=11+(127&(hold>>>=here_bits)),hold>>>=7,bits=bits-here_bits-7}if(state.have+copy>state.nlen+state.ndist){strm.msg="invalid bit length repeat",state.mode=BAD;break}for(;copy--;)state.lens[state.have++]=len}}if(state.mode===BAD)break;if(0===state.lens[256]){strm.msg="invalid code -- missing end-of-block",state.mode=BAD;break}if(state.lenbits=9,opts={bits:state.lenbits},ret=inftrees(LENS,state.lens,0,state.nlen,state.lencode,0,state.work,opts),state.lenbits=opts.bits,ret){strm.msg="invalid literal/lengths set",state.mode=BAD;break}if(state.distbits=6,state.distcode=state.distdyn,opts={bits:state.distbits},ret=inftrees(DISTS,state.lens,state.nlen,state.ndist,state.distcode,0,state.work,opts),state.distbits=opts.bits,ret){strm.msg="invalid distances set",state.mode=BAD;break}if(state.mode=16199,flush===Z_TREES)break inf_leave;case 16199:state.mode=16200;case 16200:if(6<=have&&258<=left){strm.next_out=put,strm.avail_out=left,strm.next_in=next,strm.avail_in=have,state.hold=hold,state.bits=bits,!function(strm,start){var here,op,len,dist,from,from_source,state=strm.state,_in=strm.next_in,input=strm.input,last=_in+(strm.avail_in-5),_out=strm.next_out,output=strm.output,beg=_out-(start-strm.avail_out),end=_out+(strm.avail_out-257),dmax=state.dmax,wsize=state.wsize,whave=state.whave,wnext=state.wnext,s_window=state.window,hold=state.hold,bits=state.bits,lcode=state.lencode,dcode=state.distcode,lmask=(1<<state.lenbits)-1,dmask=(1<<state.distbits)-1;top:do{for(bits<15&&(hold+=input[_in++]<<bits,bits+=8,hold+=input[_in++]<<bits,bits+=8),here=lcode[hold&lmask];;){if(hold>>>=op=here>>>24,bits-=op,0===(op=here>>>16&255))output[_out++]=65535&here;else{if(!(16&op)){if(0==(64&op)){here=lcode[(65535&here)+(hold&(1<<op)-1)];continue}if(32&op){state.mode=TYPE$1;break top}strm.msg="invalid literal/length code",state.mode=BAD$1;break top}for(len=65535&here,(op&=15)&&(bits<op&&(hold+=input[_in++]<<bits,bits+=8),len+=hold&(1<<op)-1,hold>>>=op,bits-=op),bits<15&&(hold+=input[_in++]<<bits,bits+=8,hold+=input[_in++]<<bits,bits+=8),here=dcode[hold&dmask];;){if(hold>>>=op=here>>>24,bits-=op,!(16&(op=here>>>16&255))){if(0==(64&op)){here=dcode[(65535&here)+(hold&(1<<op)-1)];continue}strm.msg="invalid distance code",state.mode=BAD$1;break top}if(dist=65535&here,bits<(op&=15)&&(hold+=input[_in++]<<bits,(bits+=8)<op)&&(hold+=input[_in++]<<bits,bits+=8),dmax<(dist+=hold&(1<<op)-1)){strm.msg="invalid distance too far back",state.mode=BAD$1;break top}if(hold>>>=op,bits-=op,(op=_out-beg)<dist){if(whave<(op=dist-op)&&state.sane){strm.msg="invalid distance too far back",state.mode=BAD$1;break top}if(from_source=s_window,(from=0)===wnext){if(from+=wsize-op,op<len){for(len-=op;output[_out++]=s_window[from++],--op;);from=_out-dist,from_source=output}}else if(wnext<op){if(from+=wsize+wnext-op,(op-=wnext)<len){for(len-=op;output[_out++]=s_window[from++],--op;);if(from=0,wnext<len){for(len-=op=wnext;output[_out++]=s_window[from++],--op;);from=_out-dist,from_source=output}}}else if(from+=wnext-op,op<len){for(len-=op;output[_out++]=s_window[from++],--op;);from=_out-dist,from_source=output}for(;2<len;)output[_out++]=from_source[from++],output[_out++]=from_source[from++],output[_out++]=from_source[from++],len-=3;len&&(output[_out++]=from_source[from++],1<len)&&(output[_out++]=from_source[from++])}else{for(from=_out-dist;output[_out++]=output[from++],output[_out++]=output[from++],output[_out++]=output[from++],2<(len-=3););len&&(output[_out++]=output[from++],1<len)&&(output[_out++]=output[from++])}break}}break}}while(_in<last&&_out<end);hold&=(1<<(bits-=(len=bits>>3)<<3))-1,strm.next_in=_in-=len,strm.next_out=_out,strm.avail_in=_in<last?last-_in+5:5-(_in-last),strm.avail_out=_out<end?end-_out+257:257-(_out-end),state.hold=hold,state.bits=bits}(strm,_out),put=strm.next_out,output=strm.output,left=strm.avail_out,next=strm.next_in,input=strm.input,have=strm.avail_in,hold=state.hold,bits=state.bits,16191===state.mode&&(state.back=-1);break}for(state.back=0;here_op=(here=state.lencode[hold&(1<<state.lenbits)-1])>>>16&255,here_val=65535&here,!((here_bits=here>>>24)<=bits);){if(0===have)break inf_leave;have--,hold+=input[next++]<<bits,bits+=8}if(here_op&&0==(240&here_op)){for(last_bits=here_bits,last_op=here_op,last_val=here_val;here_op=(here=state.lencode[last_val+((hold&(1<<last_bits+last_op)-1)>>last_bits)])>>>16&255,here_val=65535&here,!(last_bits+(here_bits=here>>>24)<=bits);){if(0===have)break inf_leave;have--,hold+=input[next++]<<bits,bits+=8}hold>>>=last_bits,bits-=last_bits,state.back+=last_bits}if(hold>>>=here_bits,bits-=here_bits,state.back+=here_bits,state.length=here_val,0===here_op){state.mode=16205;break}if(32&here_op){state.back=-1,state.mode=16191;break}if(64&here_op){strm.msg="invalid literal/length code",state.mode=BAD;break}state.extra=15&here_op,state.mode=16201;case 16201:if(state.extra){for(n=state.extra;bits<n;){if(0===have)break inf_leave;have--,hold+=input[next++]<<bits,bits+=8}state.length+=hold&(1<<state.extra)-1,hold>>>=state.extra,bits-=state.extra,state.back+=state.extra}state.was=state.length,state.mode=16202;case 16202:for(;here_op=(here=state.distcode[hold&(1<<state.distbits)-1])>>>16&255,here_val=65535&here,!((here_bits=here>>>24)<=bits);){if(0===have)break inf_leave;have--,hold+=input[next++]<<bits,bits+=8}if(0==(240&here_op)){for(last_bits=here_bits,last_op=here_op,last_val=here_val;here_op=(here=state.distcode[last_val+((hold&(1<<last_bits+last_op)-1)>>last_bits)])>>>16&255,here_val=65535&here,!(last_bits+(here_bits=here>>>24)<=bits);){if(0===have)break inf_leave;have--,hold+=input[next++]<<bits,bits+=8}hold>>>=last_bits,bits-=last_bits,state.back+=last_bits}if(hold>>>=here_bits,bits-=here_bits,state.back+=here_bits,64&here_op){strm.msg="invalid distance code",state.mode=BAD;break}state.offset=here_val,state.extra=15&here_op,state.mode=16203;case 16203:if(state.extra){for(n=state.extra;bits<n;){if(0===have)break inf_leave;have--,hold+=input[next++]<<bits,bits+=8}state.offset+=hold&(1<<state.extra)-1,hold>>>=state.extra,bits-=state.extra,state.back+=state.extra}if(state.offset>state.dmax){strm.msg="invalid distance too far back",state.mode=BAD;break}state.mode=16204;case 16204:if(0===left)break inf_leave;if(state.offset>(copy=_out-left)){if((copy=state.offset-copy)>state.whave&&state.sane){strm.msg="invalid distance too far back",state.mode=BAD;break}from=copy>state.wnext?(copy-=state.wnext,state.wsize-copy):state.wnext-copy,copy>state.length&&(copy=state.length),from_source=state.window}else from_source=output,from=put-state.offset,copy=state.length;for(left-=copy=left<copy?left:copy,state.length-=copy;output[put++]=from_source[from++],--copy;);0===state.length&&(state.mode=16200);break;case 16205:if(0===left)break inf_leave;output[put++]=state.length,left--,state.mode=16200;break;case 16206:if(state.wrap){for(;bits<32;){if(0===have)break inf_leave;have--,hold|=input[next++]<<bits,bits+=8}if(_out-=left,strm.total_out+=_out,state.total+=_out,4&state.wrap&&_out&&(strm.adler=state.check=(state.flags?crc32_1:adler32_1)(state.check,output,_out,put-_out)),_out=left,4&state.wrap&&(state.flags?hold:zswap32(hold))!==state.check){strm.msg="incorrect data check",state.mode=BAD;break}bits=hold=0}state.mode=16207;case 16207:if(state.wrap&&state.flags){for(;bits<32;){if(0===have)break inf_leave;have--,hold+=input[next++]<<bits,bits+=8}if(4&state.wrap&&hold!==(4294967295&state.total)){strm.msg="incorrect length check",state.mode=BAD;break}bits=hold=0}state.mode=16208;case 16208:ret=Z_STREAM_END$1;break inf_leave;case BAD:ret=Z_DATA_ERROR$1;break inf_leave;case 16210:return Z_MEM_ERROR$1;default:return Z_STREAM_ERROR$1}return strm.next_out=put,strm.avail_out=left,strm.next_in=next,strm.avail_in=have,state.hold=hold,state.bits=bits,(state.wsize||_out!==strm.avail_out&&state.mode<BAD&&(state.mode<16206||flush!==Z_FINISH$1))&&updatewindow(strm,strm.output,strm.next_out,_out-strm.avail_out),_out-=strm.avail_out,strm.total_in+=_in-=strm.avail_in,strm.total_out+=_out,state.total+=_out,4&state.wrap&&_out&&(strm.adler=state.check=(state.flags?crc32_1:adler32_1)(state.check,output,_out,strm.next_out-_out)),strm.data_type=state.bits+(state.last?64:0)+(16191===state.mode?128:0)+(16199===state.mode||16194===state.mode?256:0),ret=(0==_in&&0===_out||flush===Z_FINISH$1)&&ret===Z_OK$1?Z_BUF_ERROR:ret},inflateEnd:function(strm){var state;return inflateStateCheck(strm)?Z_STREAM_ERROR$1:((state=strm.state).window&&(state.window=null),strm.state=null,Z_OK$1)},inflateGetHeader:function(strm,head){return inflateStateCheck(strm)||0==(2&(strm=strm.state).wrap)?Z_STREAM_ERROR$1:((strm.head=head).done=!1,Z_OK$1)},inflateSetDictionary:function(strm,dictionary){var state,dictLength=dictionary.length;return inflateStateCheck(strm)||0!==(state=strm.state).wrap&&16190!==state.mode?Z_STREAM_ERROR$1:16190===state.mode&&adler32_1(1,dictionary,dictLength,0)!==state.check?Z_DATA_ERROR$1:updatewindow(strm,dictionary,dictLength,dictLength)?(state.mode=16210,Z_MEM_ERROR$1):(state.havedict=1,Z_OK$1)},inflateInfo:"pako inflate (from Nodeca project)"};function _typeof(obj){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj})(obj)}var common_assign=function(obj){for(var sources=Array.prototype.slice.call(arguments,1);sources.length;){var source=sources.shift();if(source){if("object"!==_typeof(source))throw new TypeError(source+"must be non-object");for(var p in source)!function(obj,key){return Object.prototype.hasOwnProperty.call(obj,key)}(source,p)||(obj[p]=source[p])}}return obj},common_flattenChunks=function(chunks){for(var len=0,i=0,l=chunks.length;i<l;i++)len+=chunks[i].length;for(var result=new Uint8Array(len),_i=0,pos=0,_l=chunks.length;_i<_l;_i++){var chunk=chunks[_i];result.set(chunk,pos),pos+=chunk.length}return result},STR_APPLY_UIA_OK=!0;try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(__){STR_APPLY_UIA_OK=!1}for(var _utf8len=new Uint8Array(256),q=0;q<256;q++)_utf8len[q]=252<=q?6:248<=q?5:240<=q?4:224<=q?3:192<=q?2:1;_utf8len[254]=_utf8len[254]=1;var strings_string2buf=function(str){if("function"==typeof TextEncoder&&TextEncoder.prototype.encode)return(new TextEncoder).encode(str);for(var buf,c,c2,i,str_len=str.length,buf_len=0,m_pos=0;m_pos<str_len;m_pos++)55296==(64512&(c=str.charCodeAt(m_pos)))&&m_pos+1<str_len&&56320==(64512&(c2=str.charCodeAt(m_pos+1)))&&(c=65536+(c-55296<<10)+(c2-56320),m_pos++),buf_len+=c<128?1:c<2048?2:c<65536?3:4;for(buf=new Uint8Array(buf_len),m_pos=i=0;i<buf_len;m_pos++)55296==(64512&(c=str.charCodeAt(m_pos)))&&m_pos+1<str_len&&56320==(64512&(c2=str.charCodeAt(m_pos+1)))&&(c=65536+(c-55296<<10)+(c2-56320),m_pos++),c<128?buf[i++]=c:(c<2048?buf[i++]=192|c>>>6:(c<65536?buf[i++]=224|c>>>12:(buf[i++]=240|c>>>18,buf[i++]=128|c>>>12&63),buf[i++]=128|c>>>6&63),buf[i++]=128|63&c);return buf},strings_buf2string=function(buf,max){var len=max||buf.length;if("function"==typeof TextDecoder&&TextDecoder.prototype.decode)return(new TextDecoder).decode(buf.subarray(0,max));for(var utf16buf=new Array(2*len),out=0,i=0;i<len;){var c=buf[i++];if(c<128)utf16buf[out++]=c;else{var c_len=_utf8len[c];if(4<c_len)utf16buf[out++]=65533,i+=c_len-1;else{for(c&=2===c_len?31:3===c_len?15:7;1<c_len&&i<len;)c=c<<6|63&buf[i++],c_len--;1<c_len?utf16buf[out++]=65533:c<65536?utf16buf[out++]=c:(c-=65536,utf16buf[out++]=55296|c>>10&1023,utf16buf[out++]=56320|1023&c)}}}return function(buf,len){if(len<65534&&buf.subarray&&STR_APPLY_UIA_OK)return String.fromCharCode.apply(null,buf.length===len?buf:buf.subarray(0,len));for(var result="",i=0;i<len;i++)result+=String.fromCharCode(buf[i]);return result}(utf16buf,out)},strings_utf8border=function(buf,max){for(var pos=(max=(max=max||buf.length)>buf.length?buf.length:max)-1;0<=pos&&128==(192&buf[pos]);)pos--;return!(pos<0)&&0!==pos&&pos+_utf8len[buf[pos]]>max?pos:max},messages={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"};var zstream=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0};var gzheader=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1},toString=Object.prototype.toString,Z_NO_FLUSH=constants$1.Z_NO_FLUSH,Z_FINISH=constants$1.Z_FINISH,Z_OK=constants$1.Z_OK,Z_STREAM_END=constants$1.Z_STREAM_END,Z_NEED_DICT=constants$1.Z_NEED_DICT,Z_STREAM_ERROR=constants$1.Z_STREAM_ERROR,Z_DATA_ERROR=constants$1.Z_DATA_ERROR,Z_MEM_ERROR=constants$1.Z_MEM_ERROR;function Inflate(options){this.options=common_assign({chunkSize:65536,windowBits:15,to:""},options||{});var opt=this.options,options=(opt.raw&&0<=opt.windowBits&&opt.windowBits<16&&(opt.windowBits=-opt.windowBits,0===opt.windowBits)&&(opt.windowBits=-15),!(0<=opt.windowBits&&opt.windowBits<16)||options&&options.windowBits||(opt.windowBits+=32),15<opt.windowBits&&opt.windowBits<48&&0==(15&opt.windowBits)&&(opt.windowBits|=15),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new zstream,this.strm.avail_out=0,inflate_1$1.inflateInit2(this.strm,opt.windowBits));if(options!==Z_OK)throw new Error(messages[options]);if(this.header=new gzheader,inflate_1$1.inflateGetHeader(this.strm,this.header),opt.dictionary&&("string"==typeof opt.dictionary?opt.dictionary=strings_string2buf(opt.dictionary):"[object ArrayBuffer]"===toString.call(opt.dictionary)&&(opt.dictionary=new Uint8Array(opt.dictionary)),opt.raw)&&(options=inflate_1$1.inflateSetDictionary(this.strm,opt.dictionary))!==Z_OK)throw new Error(messages[options])}function inflate(input,options){options=new Inflate(options);if(options.push(input),options.err)throw options.msg||messages[options.err];return options.result}Inflate.prototype.push=function(data,flush_mode){var status,_flush_mode,strm=this.strm,chunkSize=this.options.chunkSize,dictionary=this.options.dictionary;if(this.ended)return!1;for(_flush_mode=flush_mode===~~flush_mode?flush_mode:!0===flush_mode?Z_FINISH:Z_NO_FLUSH,"[object ArrayBuffer]"===toString.call(data)?strm.input=new Uint8Array(data):strm.input=data,strm.next_in=0,strm.avail_in=strm.input.length;;){for(0===strm.avail_out&&(strm.output=new Uint8Array(chunkSize),strm.next_out=0,strm.avail_out=chunkSize),(status=inflate_1$1.inflate(strm,_flush_mode))===Z_NEED_DICT&&dictionary&&((status=inflate_1$1.inflateSetDictionary(strm,dictionary))===Z_OK?status=inflate_1$1.inflate(strm,_flush_mode):status===Z_DATA_ERROR&&(status=Z_NEED_DICT));0<strm.avail_in&&status===Z_STREAM_END&&0<strm.state.wrap&&0!==data[strm.next_in];)inflate_1$1.inflateReset(strm),status=inflate_1$1.inflate(strm,_flush_mode);switch(status){case Z_STREAM_ERROR:case Z_DATA_ERROR:case Z_NEED_DICT:case Z_MEM_ERROR:return this.onEnd(status),!(this.ended=!0)}var next_out_utf8,tail,utf8str,last_avail_out=strm.avail_out;if(!strm.next_out||0!==strm.avail_out&&status!==Z_STREAM_END||("string"===this.options.to?(next_out_utf8=strings_utf8border(strm.output,strm.next_out),tail=strm.next_out-next_out_utf8,utf8str=strings_buf2string(strm.output,next_out_utf8),strm.next_out=tail,strm.avail_out=chunkSize-tail,tail&&strm.output.set(strm.output.subarray(next_out_utf8,next_out_utf8+tail),0),this.onData(utf8str)):this.onData(strm.output.length===strm.next_out?strm.output:strm.output.subarray(0,strm.next_out))),status!==Z_OK||0!==last_avail_out){if(status===Z_STREAM_END)return status=inflate_1$1.inflateEnd(this.strm),this.onEnd(status),this.ended=!0;if(0===strm.avail_in)break}}return!0},Inflate.prototype.onData=function(chunk){this.chunks.push(chunk)},Inflate.prototype.onEnd=function(status){status===Z_OK&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=common_flattenChunks(this.chunks)),this.chunks=[],this.err=status,this.msg=this.strm.msg};function inflateRaw_1(input,options){return(options=options||{}).raw=!0,inflate(input,options)}var inflate_2=inflate,ungzip=inflate,inflate_1={Inflate:Inflate,inflate:inflate_2,inflateRaw:inflateRaw_1,ungzip:ungzip,constants:constants$1};return exports.Inflate=Inflate,exports.constants=constants$1,exports.default=inflate_1,exports.inflate=inflate_2,exports.inflateRaw=inflateRaw_1,exports.ungzip=ungzip,exports}void 0!==Module&&(Module.TA=TA);var browserFix=browserFix||{},wasmString;function inflateBase64(base64){var binaryString=function(string){var b64="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",string=String(string).replace(/[\t\n\f\r ]+/g,"");string+="==".slice(2-(3&string.length));for(var bitmap,r1,r2,result="",i=0;i<string.length;)bitmap=b64.indexOf(string.charAt(i++))<<18|b64.indexOf(string.charAt(i++))<<12|(r1=b64.indexOf(string.charAt(i++)))<<6|(r2=b64.indexOf(string.charAt(i++))),result+=64===r1?String.fromCharCode(bitmap>>16&255):64===r2?String.fromCharCode(bitmap>>16&255,bitmap>>8&255):String.fromCharCode(bitmap>>16&255,bitmap>>8&255,255&bitmap);return result}(base64),length=binaryString.length,bytes=new Uint8Array(length);for(let i=0;i<length;i++)bytes[i]=binaryString.charCodeAt(i);return init_pako().inflate(bytes)}browserFix.sliceTypedArray=function(array,sliceBegin,sliceEnd){var bpe=array.BYTES_PER_ELEMENT,boff=array.byteOffset,len=array.length;return(sliceBegin=0|sliceBegin||0)<0&&(sliceBegin+=len),(sliceEnd=void 0===sliceEnd?len:0|sliceEnd)<0&&(sliceEnd+=len),new array.constructor(array.buffer.slice(boff+bpe*sliceBegin,boff+bpe*sliceEnd))},void 0===Uint8Array.prototype.slice&&(console.warn("The TypedArray.slice method is not supported in this browser. This may impair performance. "),Uint16Array.prototype.slice=function(begin,end){return browserFix.sliceTypedArray(this,begin,end)},Int16Array.prototype.slice=function(begin,end){return browserFix.sliceTypedArray(this,begin,end)},Uint8Array.prototype.slice=function(begin,end){return browserFix.sliceTypedArray(this,begin,end)},Int8Array.prototype.slice=function(begin,end){return browserFix.sliceTypedArray(this,begin,end)}),void 0!==Module&&(wasmString="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",100<wasmString.length)&&(Module.wasmBinary=inflateBase64(wasmString),Module.__haswasmBinary__=!0),"undefined"!=typeof __ctx&&void 0!==__ctx.INITIAL_MEMORY&&(Module.INITIAL_MEMORY=__ctx.INITIAL_MEMORY),"undefined"==typeof print&&(print=console.log);var JSHttpGet=null,crypto,fs,os,process,CLUSTER_IP,CLUSTER_DOMAIN,JSHttpGet;function md5(text){return crypto.createHash("md5").update(text).digest("hex")}JSHttpGet="undefined"!=typeof self&&void 0!==self.onmessage?function(path){var r=XMLHttpRequest?new XMLHttpRequest:new ActiveXObject("Microsoft.XMLHTTP");return r.open("GET","https://www.fmz.com"+path,!1),r.send(null),r.responseText}:(crypto=require("crypto"),fs=require("fs"),os=require("os"),process=require("process"),CLUSTER_IP=process.env.CLUSTER_IP||"q.fmz.com",CLUSTER_DOMAIN=process.env.CLUSTER_DOMAIN||"q.fmz.com",function(url){var tmpCache=os.tmpdir()+"/cache",tmpCache=(fs.existsSync(tmpCache)||fs.mkdirSync(tmpCache),tmpCache+"/botvs_kline_"+md5(url="http://"+CLUSTER_IP+url));return fs.existsSync(tmpCache)?fs.readFileSync(tmpCache,"utf-8"):((url=require("sync-request")("GET",url,{headers:{Host:CLUSTER_DOMAIN}}).getBody("utf8"))&&-1!==url.indexOf(",")&&fs.writeFileSync(tmpCache,url,"utf-8"),url)});var moduleOverrides=Object.assign({},Module),arguments_=[],thisProgram="./this.program",quit_=(status,toThrow)=>{throw toThrow},ENVIRONMENT_IS_WEB="object"==typeof window,ENVIRONMENT_IS_WORKER="function"==typeof importScripts,ENVIRONMENT_IS_NODE="object"==typeof process&&"object"==typeof process.versions&&"string"==typeof process.versions.node,scriptDirectory="",read_,readAsync,readBinary,setWindowTitle,fs,nodePath,scriptDirectory,read_,readBinary,readAsync;function locateFile(path){return Module.locateFile?Module.locateFile(path,scriptDirectory):scriptDirectory+path}ENVIRONMENT_IS_NODE?(fs=require("fs"),nodePath=require("path"),scriptDirectory=ENVIRONMENT_IS_WORKER?nodePath.dirname(scriptDirectory)+"/":__dirname+"/",read_=(filename,binary)=>(filename=isFileURI(filename)?new URL(filename):nodePath.normalize(filename),fs.readFileSync(filename,binary?void 0:"utf8")),readBinary=filename=>{filename=read_(filename,!0);return filename=filename.buffer?filename:new Uint8Array(filename)},readAsync=(filename,onload,onerror,binary=!0)=>{filename=isFileURI(filename)?new URL(filename):nodePath.normalize(filename),fs.readFile(filename,binary?void 0:"utf8",(err,data)=>{err?onerror(err):onload(binary?data.buffer:data)})},!Module.thisProgram&&1<process.argv.length&&(thisProgram=process.argv[1].replace(/\\/g,"/")),arguments_=process.argv.slice(2),quit_=(status,toThrow)=>{throw process.exitCode=status,toThrow},Module.inspect=()=>"[Emscripten Module object]"):(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER)&&(ENVIRONMENT_IS_WORKER?scriptDirectory=self.location.href:"undefined"!=typeof document&&document.currentScript&&(scriptDirectory=document.currentScript.src),_scriptDir&&(scriptDirectory=_scriptDir),scriptDirectory=0!==scriptDirectory.indexOf("blob:")?scriptDirectory.substr(0,scriptDirectory.replace(/[?#].*/,"").lastIndexOf("/")+1):"",read_=url=>{var xhr=new XMLHttpRequest;return xhr.open("GET",url,!1),xhr.send(null),xhr.responseText},ENVIRONMENT_IS_WORKER&&(readBinary=url=>{var xhr=new XMLHttpRequest;return xhr.open("GET",url,!1),xhr.responseType="arraybuffer",xhr.send(null),new Uint8Array(xhr.response)}),readAsync=(url,onload,onerror)=>{var xhr=new XMLHttpRequest;xhr.open("GET",url,!0),xhr.responseType="arraybuffer",xhr.onload=()=>{200==xhr.status||0==xhr.status&&xhr.response?onload(xhr.response):onerror()},xhr.onerror=onerror,xhr.send(null)},setWindowTitle=title=>document.title=title);var out=Module.print||console.log.bind(console),err=Module.printErr||console.error.bind(console),wasmBinary,noExitRuntime=(Object.assign(Module,moduleOverrides),moduleOverrides=null,Module.arguments&&(arguments_=Module.arguments),Module.thisProgram&&(thisProgram=Module.thisProgram),Module.quit&&(quit_=Module.quit),Module.wasmBinary&&(wasmBinary=Module.wasmBinary),Module.noExitRuntime||!0),wasmMemory,wasmExports,ABORT=("object"!=typeof WebAssembly&&abort("no native wasm support detected"),!1),EXITSTATUS,HEAP8,HEAPU8,HEAP16,HEAPU16,HEAP32,HEAPU32,HEAPF32,HEAPF64;function assert(condition,text){condition||abort(text)}function updateMemoryViews(){var b=wasmMemory.buffer;Module.HEAP8=HEAP8=new Int8Array(b),Module.HEAP16=HEAP16=new Int16Array(b),Module.HEAP32=HEAP32=new Int32Array(b),Module.HEAPU8=HEAPU8=new Uint8Array(b),Module.HEAPU16=HEAPU16=new Uint16Array(b),Module.HEAPU32=HEAPU32=new Uint32Array(b),Module.HEAPF32=HEAPF32=new Float32Array(b),Module.HEAPF64=HEAPF64=new Float64Array(b)}var INITIAL_MEMORY=Module.INITIAL_MEMORY||314572800,wasmTable,__ATPRERUN__=(assert(5242880<=INITIAL_MEMORY,"INITIAL_MEMORY should be larger than STACK_SIZE, was "+INITIAL_MEMORY+"! (STACK_SIZE=5242880)"),wasmMemory=Module.wasmMemory||new WebAssembly.Memory({initial:INITIAL_MEMORY/65536,maximum:65536}),updateMemoryViews(),INITIAL_MEMORY=wasmMemory.buffer.byteLength,[]),__ATINIT__=[],__ATPOSTRUN__=[],runtimeInitialized=!1;function preRun(){if(Module.preRun)for("function"==typeof Module.preRun&&(Module.preRun=[Module.preRun]);Module.preRun.length;)addOnPreRun(Module.preRun.shift());callRuntimeCallbacks(__ATPRERUN__)}function initRuntime(){runtimeInitialized=!0,Module.noFSInit||FS.init.initialized||FS.init(),FS.ignorePermissions=!1,TTY.init(),callRuntimeCallbacks(__ATINIT__)}function postRun(){if(Module.postRun)for("function"==typeof Module.postRun&&(Module.postRun=[Module.postRun]);Module.postRun.length;)addOnPostRun(Module.postRun.shift());callRuntimeCallbacks(__ATPOSTRUN__)}function addOnPreRun(cb){__ATPRERUN__.unshift(cb)}function addOnInit(cb){__ATINIT__.unshift(cb)}function addOnPostRun(cb){__ATPOSTRUN__.unshift(cb)}var runDependencies=0,runDependencyWatcher=null,dependenciesFulfilled=null;function getUniqueRunDependency(id){return id}function addRunDependency(id){runDependencies++,Module.monitorRunDependencies&&Module.monitorRunDependencies(runDependencies)}function removeRunDependency(id){var callback;runDependencies--,Module.monitorRunDependencies&&Module.monitorRunDependencies(runDependencies),0==runDependencies&&(null!==runDependencyWatcher&&(clearInterval(runDependencyWatcher),runDependencyWatcher=null),dependenciesFulfilled)&&(callback=dependenciesFulfilled,dependenciesFulfilled=null,callback())}function abort(what){Module.onAbort&&Module.onAbort(what),err(what="Aborted("+what+")"),ABORT=!0,EXITSTATUS=1,what+=". Build with -sASSERTIONS for more info.";what=new WebAssembly.RuntimeError(what);throw readyPromiseReject(what),what}var dataURIPrefix="data:application/octet-stream;base64,",wasmBinaryFile,tempDouble,tempI64;function isDataURI(filename){return filename.startsWith(dataURIPrefix)}function isFileURI(filename){return filename.startsWith("file://")}function getBinarySync(file){if(file==wasmBinaryFile&&wasmBinary)return new Uint8Array(wasmBinary);if(readBinary)return readBinary(file);throw"sync fetching of the wasm failed: you can preload it to Module['wasmBinary'] manually, or emcc.py will do that for you when generating HTML (but not JS)"}function instantiateSync(file,info){file=getBinarySync(file),file=new WebAssembly.Module(file);return[new WebAssembly.Instance(file,info),file]}function createWasm(){var info={a:wasmImports};function receiveInstance(instance,module){instance=applySignatureConversions(instance.exports);return wasmTable=(wasmExports=instance).S,addOnInit(wasmExports.O),removeRunDependency("wasm-instantiate"),instance}if(addRunDependency("wasm-instantiate"),Module.instantiateWasm)try{return Module.instantiateWasm(info,receiveInstance)}catch(e){err("Module.instantiateWasm callback failed with error: "+e),readyPromiseReject(e)}return receiveInstance(instantiateSync(wasmBinaryFile,info)[0])}wasmBinaryFile="sandbox_cpp_wasm.wasm",isDataURI(wasmBinaryFile)||(wasmBinaryFile=locateFile(wasmBinaryFile));var callRuntimeCallbacks=callbacks=>{for(;0<callbacks.length;)callbacks.shift()(Module)};function getValue(ptr,type="i8"){switch(type=type.endsWith("*")?"*":type){case"i1":case"i8":return HEAP8[ptr>>>0];case"i16":return HEAP16[ptr>>>1];case"i32":return HEAP32[ptr>>>2];case"i64":abort("to do getValue(i64) use WASM_BIGINT");case"float":return HEAPF32[ptr>>>2];case"double":return HEAPF64[ptr>>>3];case"*":return HEAPU32[ptr>>>2];default:abort("invalid type for getValue: "+type)}}function setValue(ptr,value,type="i8"){switch(type=type.endsWith("*")?"*":type){case"i1":case"i8":HEAP8[ptr>>>0]=value;break;case"i16":HEAP16[ptr>>>1]=value;break;case"i32":HEAP32[ptr>>>2]=value;break;case"i64":abort("to do setValue(i64) use WASM_BIGINT");case"float":HEAPF32[ptr>>>2]=value;break;case"double":HEAPF64[ptr>>>3]=value;break;case"*":HEAPU32[ptr>>>2]=value;break;default:abort("invalid type for setValue: "+type)}}function convertI32PairToI53Checked(lo,hi){return hi+2097152>>>0<4194305-!!lo?(lo>>>0)+4294967296*hi:NaN}var UTF8Decoder="undefined"!=typeof TextDecoder?new TextDecoder("utf8"):void 0,UTF8ArrayToString=(heapOrArray,idx,maxBytesToRead)=>{for(var endIdx=(idx>>>=0)+maxBytesToRead,endPtr=idx;heapOrArray[endPtr]&&!(endIdx<=endPtr);)++endPtr;if(16<endPtr-idx&&heapOrArray.buffer&&UTF8Decoder)return UTF8Decoder.decode(heapOrArray.subarray(idx,endPtr));for(var str="";idx<endPtr;){var u2,u1,u0=heapOrArray[idx++];128&u0?(u1=63&heapOrArray[idx++],192==(224&u0)?str+=String.fromCharCode((31&u0)<<6|u1):(u2=63&heapOrArray[idx++],(u0=224==(240&u0)?(15&u0)<<12|u1<<6|u2:(7&u0)<<18|u1<<12|u2<<6|63&heapOrArray[idx++])<65536?str+=String.fromCharCode(u0):(u1=u0-65536,str+=String.fromCharCode(55296|u1>>10,56320|1023&u1)))):str+=String.fromCharCode(u0)}return str},UTF8ToString=(ptr,maxBytesToRead)=>(ptr>>>=0)?UTF8ArrayToString(HEAPU8,ptr,maxBytesToRead):"";function ___assert_fail(condition,filename,line,func){filename>>>=0,func>>>=0,abort(`Assertion failed: ${UTF8ToString(condition>>>=0)}, at: `+[filename?UTF8ToString(filename):"unknown filename",line,func?UTF8ToString(func):"unknown function"])}function ExceptionInfo(excPtr){this.excPtr=excPtr,this.ptr=excPtr-24,this.set_type=function(type){HEAPU32[this.ptr+4>>>2]=type},this.get_type=function(){return HEAPU32[this.ptr+4>>>2]},this.set_destructor=function(destructor){HEAPU32[this.ptr+8>>>2]=destructor},this.get_destructor=function(){return HEAPU32[this.ptr+8>>>2]},this.set_caught=function(caught){HEAP8[this.ptr+12>>>0]=caught=caught?1:0},this.get_caught=function(){return 0!=HEAP8[this.ptr+12>>>0]},this.set_rethrown=function(rethrown){HEAP8[this.ptr+13>>>0]=rethrown=rethrown?1:0},this.get_rethrown=function(){return 0!=HEAP8[this.ptr+13>>>0]},this.init=function(type,destructor){this.set_adjusted_ptr(0),this.set_type(type),this.set_destructor(destructor)},this.set_adjusted_ptr=function(adjustedPtr){HEAPU32[this.ptr+16>>>2]=adjustedPtr},this.get_adjusted_ptr=function(){return HEAPU32[this.ptr+16>>>2]},this.get_exception_ptr=function(){var adjusted;return ___cxa_is_pointer_type(this.get_type())?HEAPU32[this.excPtr>>>2]:0!==(adjusted=this.get_adjusted_ptr())?adjusted:this.excPtr}}var exceptionLast=0,uncaughtExceptionCount=0;function ___cxa_throw(ptr,type,destructor){throw type>>>=0,destructor>>>=0,new ExceptionInfo(ptr>>>=0).init(type,destructor),uncaughtExceptionCount++,ptr}var structRegistrations={};function runDestructors(destructors){for(;destructors.length;){var ptr=destructors.pop();destructors.pop()(ptr)}}function simpleReadValueFromPointer(pointer){return this.fromWireType(HEAP32[pointer>>>2])}var awaitingDependencies={},registeredTypes={},typeDependencies={},InternalError=void 0;function throwInternalError(message){throw new InternalError(message)}function whenDependentTypesAreResolved(myTypes,dependentTypes,getTypeConverters){function onComplete(typeConverters){var myTypeConverters=getTypeConverters(typeConverters);myTypeConverters.length!==myTypes.length&&throwInternalError("Mismatched type converter count");for(var i=0;i<myTypes.length;++i)registerType(myTypes[i],myTypeConverters[i])}myTypes.forEach(function(type){typeDependencies[type]=dependentTypes});var typeConverters=new Array(dependentTypes.length),unregisteredTypes=[],registered=0;dependentTypes.forEach((dt,i)=>{registeredTypes.hasOwnProperty(dt)?typeConverters[i]=registeredTypes[dt]:(unregisteredTypes.push(dt),awaitingDependencies.hasOwnProperty(dt)||(awaitingDependencies[dt]=[]),awaitingDependencies[dt].push(()=>{typeConverters[i]=registeredTypes[dt],++registered===unregisteredTypes.length&&onComplete(typeConverters)}))}),0===unregisteredTypes.length&&onComplete(typeConverters)}var __embind_finalize_value_object=function(structType){var reg=structRegistrations[structType>>>=0],rawConstructor=(delete structRegistrations[structType],reg.rawConstructor),rawDestructor=reg.rawDestructor,fieldRecords=reg.fields;whenDependentTypesAreResolved([structType],fieldRecords.map(field=>field.getterReturnType).concat(fieldRecords.map(field=>field.setterArgumentType)),fieldTypes=>{var fields={};return fieldRecords.forEach((field,i)=>{var fieldName=field.fieldName,getterReturnType=fieldTypes[i],getter=field.getter,getterContext=field.getterContext,setterArgumentType=fieldTypes[i+fieldRecords.length],setter=field.setter,setterContext=field.setterContext;fields[fieldName]={read:ptr=>getterReturnType.fromWireType(getter(getterContext,ptr)),write:(ptr,o)=>{var destructors=[];setter(setterContext,ptr,setterArgumentType.toWireType(destructors,o)),runDestructors(destructors)}}}),[{name:reg.name,fromWireType:function(ptr){var i,rv={};for(i in fields)rv[i]=fields[i].read(ptr);return rawDestructor(ptr),rv},toWireType:function(destructors,o){for(var fieldName in fields)if(!(fieldName in o))throw new TypeError(`Missing field: "${fieldName}"`);var ptr=rawConstructor();for(fieldName in fields)fields[fieldName].write(ptr,o[fieldName]);return null!==destructors&&destructors.push(rawDestructor,ptr),ptr},argPackAdvance:8,readValueFromPointer:simpleReadValueFromPointer,destructorFunction:rawDestructor}]})};function __embind_register_bigint(primitiveType,name,size,minRange,maxRange){}function getShiftFromSize(size){switch(size){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError("Unknown type size: "+size)}}function embind_init_charCodes(){for(var codes=new Array(256),i=0;i<256;++i)codes[i]=String.fromCharCode(i);embind_charCodes=codes}var embind_charCodes=void 0;function readLatin1String(ptr){for(var ret="",c=ptr;HEAPU8[c>>>0];)ret+=embind_charCodes[HEAPU8[c++>>>0]];return ret}var BindingError=void 0;function throwBindingError(message){throw new BindingError(message)}function sharedRegisterType(rawType,registeredInstance,options={}){var name=registeredInstance.name;if(rawType||throwBindingError(`type "${name}" must have a positive integer typeid pointer`),registeredTypes.hasOwnProperty(rawType)){if(options.ignoreDuplicateRegistrations)return;throwBindingError(`Cannot register type '${name}' twice`)}registeredTypes[rawType]=registeredInstance,delete typeDependencies[rawType],awaitingDependencies.hasOwnProperty(rawType)&&(options=awaitingDependencies[rawType],delete awaitingDependencies[rawType],options.forEach(cb=>cb()))}function registerType(rawType,registeredInstance,options={}){if(!("argPackAdvance"in registeredInstance))throw new TypeError("registerType registeredInstance requires argPackAdvance");sharedRegisterType(rawType,registeredInstance,options)}function __embind_register_bool(rawType,name,size,trueValue,falseValue){rawType>>>=0,name>>>=0;var shift=getShiftFromSize(size>>>=0);registerType(rawType,{name:name=readLatin1String(name),fromWireType:function(wt){return!!wt},toWireType:function(destructors,o){return o?trueValue:falseValue},argPackAdvance:8,readValueFromPointer:function(pointer){var heap;if(1===size)heap=HEAP8;else if(2===size)heap=HEAP16;else{if(4!==size)throw new TypeError("Unknown boolean type size: "+name);heap=HEAP32}return this.fromWireType(heap[pointer>>>shift])},destructorFunction:null})}function ClassHandle_isAliasOf(other){if(!(this instanceof ClassHandle))return!1;if(!(other instanceof ClassHandle))return!1;for(var leftClass=this.$$.ptrType.registeredClass,left=this.$$.ptr,rightClass=other.$$.ptrType.registeredClass,right=other.$$.ptr;leftClass.baseClass;)left=leftClass.upcast(left),leftClass=leftClass.baseClass;for(;rightClass.baseClass;)right=rightClass.upcast(right),rightClass=rightClass.baseClass;return leftClass===rightClass&&left===right}function shallowCopyInternalPointer(o){return{count:o.count,deleteScheduled:o.deleteScheduled,preservePointerOnDelete:o.preservePointerOnDelete,ptr:o.ptr,ptrType:o.ptrType,smartPtr:o.smartPtr,smartPtrType:o.smartPtrType}}function throwInstanceAlreadyDeleted(obj){throwBindingError(obj.$$.ptrType.registeredClass.name+" instance already deleted")}var finalizationRegistry=!1;function detachFinalizer(handle){}function runDestructor($$){$$.smartPtr?$$.smartPtrType.rawDestructor($$.smartPtr):$$.ptrType.registeredClass.rawDestructor($$.ptr)}function releaseClassHandle($$){--$$.count.value,0===$$.count.value&&runDestructor($$)}function downcastPointer(ptr,ptrClass,desiredClass){return ptrClass===desiredClass?ptr:void 0===desiredClass.baseClass||null===(ptr=downcastPointer(ptr,ptrClass,desiredClass.baseClass))?null:desiredClass.downcast(ptr)}var registeredPointers={};function getInheritedInstanceCount(){return Object.keys(registeredInstances).length}function getLiveInheritedInstances(){var k,rv=[];for(k in registeredInstances)registeredInstances.hasOwnProperty(k)&&rv.push(registeredInstances[k]);return rv}var deletionQueue=[];function flushPendingDeletes(){for(;deletionQueue.length;){var obj=deletionQueue.pop();obj.$$.deleteScheduled=!1,obj.delete()}}var delayFunction=void 0;function setDelayFunction(fn){delayFunction=fn,deletionQueue.length&&delayFunction&&delayFunction(flushPendingDeletes)}function init_embind(){Module.getInheritedInstanceCount=getInheritedInstanceCount,Module.getLiveInheritedInstances=getLiveInheritedInstances,Module.flushPendingDeletes=flushPendingDeletes,Module.setDelayFunction=setDelayFunction}var registeredInstances={};function getBasestPointer(class_,ptr){for(void 0===ptr&&throwBindingError("ptr should not be undefined");class_.baseClass;)ptr=class_.upcast(ptr),class_=class_.baseClass;return ptr}function getInheritedInstance(class_,ptr){return ptr=getBasestPointer(class_,ptr),registeredInstances[ptr]}function makeClassHandle(prototype,record){return record.ptrType&&record.ptr||throwInternalError("makeClassHandle requires ptr and ptrType"),!!record.smartPtrType!=!!record.smartPtr&&throwInternalError("Both smartPtrType and smartPtr must be specified"),record.count={value:1},attachFinalizer(Object.create(prototype,{$$:{value:record}}))}function RegisteredPointer_fromWireType(ptr){var registeredInstance,dp,rawPointer=this.getPointee(ptr);return rawPointer?void 0!==(registeredInstance=getInheritedInstance(this.registeredClass,rawPointer))?0===registeredInstance.$$.count.value?(registeredInstance.$$.ptr=rawPointer,registeredInstance.$$.smartPtr=ptr,registeredInstance.clone()):(registeredInstance=registeredInstance.clone(),this.destructor(ptr),registeredInstance):(registeredInstance=this.registeredClass.getActualType(rawPointer),!(registeredInstance=registeredPointers[registeredInstance])||(registeredInstance=this.isConst?registeredInstance.constPointerType:registeredInstance.pointerType,null===(dp=downcastPointer(rawPointer,this.registeredClass,registeredInstance.registeredClass)))?makeDefaultHandle.call(this):this.isSmartPointer?makeClassHandle(registeredInstance.registeredClass.instancePrototype,{ptrType:registeredInstance,ptr:dp,smartPtrType:this,smartPtr:ptr}):makeClassHandle(registeredInstance.registeredClass.instancePrototype,{ptrType:registeredInstance,ptr:dp})):(this.destructor(ptr),null);function makeDefaultHandle(){return this.isSmartPointer?makeClassHandle(this.registeredClass.instancePrototype,{ptrType:this.pointeeType,ptr:rawPointer,smartPtrType:this,smartPtr:ptr}):makeClassHandle(this.registeredClass.instancePrototype,{ptrType:this,ptr:ptr})}}var attachFinalizer=function(handle){return"undefined"==typeof FinalizationRegistry?(attachFinalizer=handle=>handle,handle):(finalizationRegistry=new FinalizationRegistry(info=>{releaseClassHandle(info.$$)}),detachFinalizer=handle=>finalizationRegistry.unregister(handle),(attachFinalizer=handle=>{var $$=handle.$$;return!!$$.smartPtr&&finalizationRegistry.register(handle,{$$:$$},handle),handle})(handle))};function ClassHandle_clone(){var clone;return this.$$.ptr||throwInstanceAlreadyDeleted(this),this.$$.preservePointerOnDelete?(this.$$.count.value+=1,this):((clone=attachFinalizer(Object.create(Object.getPrototypeOf(this),{$$:{value:shallowCopyInternalPointer(this.$$)}}))).$$.count.value+=1,clone.$$.deleteScheduled=!1,clone)}function ClassHandle_delete(){this.$$.ptr||throwInstanceAlreadyDeleted(this),this.$$.deleteScheduled&&!this.$$.preservePointerOnDelete&&throwBindingError("Object already scheduled for deletion"),detachFinalizer(this),releaseClassHandle(this.$$),this.$$.preservePointerOnDelete||(this.$$.smartPtr=void 0,this.$$.ptr=void 0)}function ClassHandle_isDeleted(){return!this.$$.ptr}function ClassHandle_deleteLater(){return this.$$.ptr||throwInstanceAlreadyDeleted(this),this.$$.deleteScheduled&&!this.$$.preservePointerOnDelete&&throwBindingError("Object already scheduled for deletion"),deletionQueue.push(this),1===deletionQueue.length&&delayFunction&&delayFunction(flushPendingDeletes),this.$$.deleteScheduled=!0,this}function init_ClassHandle(){ClassHandle.prototype.isAliasOf=ClassHandle_isAliasOf,ClassHandle.prototype.clone=ClassHandle_clone,ClassHandle.prototype.delete=ClassHandle_delete,ClassHandle.prototype.isDeleted=ClassHandle_isDeleted,ClassHandle.prototype.deleteLater=ClassHandle_deleteLater}function ClassHandle(){}var char_0=48,char_9=57;function makeLegalFunctionName(name){var f;return void 0===name?"_unknown":(f=(name=name.replace(/[^a-zA-Z0-9_]/g,"$")).charCodeAt(0),char_0<=f&&f<=char_9?"_"+name:name)}function createNamedFunction(name,body){return{[name=makeLegalFunctionName(name)]:function(){return body.apply(this,arguments)}}[name]}function ensureOverloadTable(proto,methodName,humanName){var prevFunc;void 0===proto[methodName].overloadTable&&(prevFunc=proto[methodName],proto[methodName]=function(){return proto[methodName].overloadTable.hasOwnProperty(arguments.length)||throwBindingError(`Function '${humanName}' called with an invalid number of arguments (${arguments.length}) - expects one of (${proto[methodName].overloadTable})!`),proto[methodName].overloadTable[arguments.length].apply(this,arguments)},proto[methodName].overloadTable=[],proto[methodName].overloadTable[prevFunc.argCount]=prevFunc)}function exposePublicSymbol(name,value,numArguments){Module.hasOwnProperty(name)?((void 0===numArguments||void 0!==Module[name].overloadTable&&void 0!==Module[name].overloadTable[numArguments])&&throwBindingError(`Cannot register public name '${name}' twice`),ensureOverloadTable(Module,name,name),Module.hasOwnProperty(numArguments)&&throwBindingError(`Cannot register multiple overloads of a function with the same number of arguments (${numArguments})!`),Module[name].overloadTable[numArguments]=value):(Module[name]=value,void 0!==numArguments&&(Module[name].numArguments=numArguments))}function RegisteredClass(name,constructor,instancePrototype,rawDestructor,baseClass,getActualType,upcast,downcast){this.name=name,this.constructor=constructor,this.instancePrototype=instancePrototype,this.rawDestructor=rawDestructor,this.baseClass=baseClass,this.getActualType=getActualType,this.upcast=upcast,this.downcast=downcast,this.pureVirtualFunctions=[]}function upcastPointer(ptr,ptrClass,desiredClass){for(;ptrClass!==desiredClass;)ptrClass.upcast||throwBindingError(`Expected null or instance of ${desiredClass.name}, got an instance of `+ptrClass.name),ptr=ptrClass.upcast(ptr),ptrClass=ptrClass.baseClass;return ptr}function constNoSmartPtrRawPointerToWireType(destructors,handle){if(null===handle)return this.isReference&&throwBindingError("null is not a valid "+this.name),0;handle.$$||throwBindingError(`Cannot pass "${embindRepr(handle)}" as a `+this.name),handle.$$.ptr||throwBindingError("Cannot pass deleted object as a pointer of type "+this.name);var handleClass=handle.$$.ptrType.registeredClass;return upcastPointer(handle.$$.ptr,handleClass,this.registeredClass)}function genericPointerToWireType(destructors,handle){if(null===handle)return this.isReference&&throwBindingError("null is not a valid "+this.name),this.isSmartPointer?(ptr=this.rawConstructor(),null!==destructors&&destructors.push(this.rawDestructor,ptr),ptr):0;handle.$$||throwBindingError(`Cannot pass "${embindRepr(handle)}" as a `+this.name),handle.$$.ptr||throwBindingError("Cannot pass deleted object as a pointer of type "+this.name),!this.isConst&&handle.$$.ptrType.isConst&&throwBindingError(`Cannot convert argument of type ${(handle.$$.smartPtrType||handle.$$.ptrType).name} to parameter type `+this.name);var clonedHandle,ptr,handleClass=handle.$$.ptrType.registeredClass;if(ptr=upcastPointer(handle.$$.ptr,handleClass,this.registeredClass),this.isSmartPointer)switch(void 0===handle.$$.smartPtr&&throwBindingError("Passing raw pointer to smart pointer is illegal"),this.sharingPolicy){case 0:handle.$$.smartPtrType===this?ptr=handle.$$.smartPtr:throwBindingError(`Cannot convert argument of type ${(handle.$$.smartPtrType||handle.$$.ptrType).name} to parameter type `+this.name);break;case 1:ptr=handle.$$.smartPtr;break;case 2:handle.$$.smartPtrType===this?ptr=handle.$$.smartPtr:(clonedHandle=handle.clone(),ptr=this.rawShare(ptr,Emval.toHandle(function(){clonedHandle.delete()})),null!==destructors&&destructors.push(this.rawDestructor,ptr));break;default:throwBindingError("Unsupporting sharing policy")}return ptr}function nonConstNoSmartPtrRawPointerToWireType(destructors,handle){if(null===handle)return this.isReference&&throwBindingError("null is not a valid "+this.name),0;handle.$$||throwBindingError(`Cannot pass "${embindRepr(handle)}" as a `+this.name),handle.$$.ptr||throwBindingError("Cannot pass deleted object as a pointer of type "+this.name),handle.$$.ptrType.isConst&&throwBindingError(`Cannot convert argument of type ${handle.$$.ptrType.name} to parameter type `+this.name);var handleClass=handle.$$.ptrType.registeredClass;return upcastPointer(handle.$$.ptr,handleClass,this.registeredClass)}function RegisteredPointer_getPointee(ptr){return ptr=this.rawGetPointee?this.rawGetPointee(ptr):ptr}function RegisteredPointer_destructor(ptr){this.rawDestructor&&this.rawDestructor(ptr)}function RegisteredPointer_deleteObject(handle){null!==handle&&handle.delete()}function init_RegisteredPointer(){RegisteredPointer.prototype.getPointee=RegisteredPointer_getPointee,RegisteredPointer.prototype.destructor=RegisteredPointer_destructor,RegisteredPointer.prototype.argPackAdvance=8,RegisteredPointer.prototype.readValueFromPointer=simpleReadValueFromPointer,RegisteredPointer.prototype.deleteObject=RegisteredPointer_deleteObject,RegisteredPointer.prototype.fromWireType=RegisteredPointer_fromWireType}function RegisteredPointer(name,registeredClass,isReference,isConst,isSmartPointer,pointeeType,sharingPolicy,rawGetPointee,rawConstructor,rawShare,rawDestructor){this.name=name,this.registeredClass=registeredClass,this.isReference=isReference,this.isConst=isConst,this.isSmartPointer=isSmartPointer,this.pointeeType=pointeeType,this.sharingPolicy=sharingPolicy,this.rawGetPointee=rawGetPointee,this.rawConstructor=rawConstructor,this.rawShare=rawShare,this.rawDestructor=rawDestructor,isSmartPointer||void 0!==registeredClass.baseClass?this.toWireType=genericPointerToWireType:(this.toWireType=isConst?constNoSmartPtrRawPointerToWireType:nonConstNoSmartPtrRawPointerToWireType,this.destructorFunction=null)}function replacePublicSymbol(name,value,numArguments){Module.hasOwnProperty(name)||throwInternalError("Replacing nonexistant public symbol"),void 0!==Module[name].overloadTable&&void 0!==numArguments?Module[name].overloadTable[numArguments]=value:(Module[name]=value,Module[name].argCount=numArguments)}var dynCallLegacy=(sig,ptr,args)=>{sig=Module["dynCall_"+sig];return args&&args.length?sig.apply(null,[ptr].concat(args)):sig.call(null,ptr)},wasmTableMirror=[],getWasmTableEntry=funcPtr=>{var func=wasmTableMirror[funcPtr];return func||(funcPtr>=wasmTableMirror.length&&(wasmTableMirror.length=funcPtr+1),wasmTableMirror[funcPtr]=func=wasmTable.get(funcPtr)),func},dynCall=(sig,ptr,args)=>sig.includes("j")?dynCallLegacy(sig,ptr,args):getWasmTableEntry(ptr).apply(null,args),getDynCaller=(sig,ptr)=>{var argCache=[];return function(){return argCache.length=0,Object.assign(argCache,arguments),dynCall(sig,ptr,argCache)}};function embind__requireFunction(signature,rawFunction){var fp=(signature=readLatin1String(signature)).includes("j")?getDynCaller(signature,rawFunction):getWasmTableEntry(rawFunction);return"function"!=typeof fp&&throwBindingError(`unknown function pointer with signature ${signature}: `+rawFunction),fp}function extendError(baseErrorType,errorName){var errorClass=createNamedFunction(errorName,function(message){this.name=errorName,this.message=message;message=new Error(message).stack;void 0!==message&&(this.stack=this.toString()+"\n"+message.replace(/^Error(:[^\n]*)?\n/,""))});return errorClass.prototype=Object.create(baseErrorType.prototype),(errorClass.prototype.constructor=errorClass).prototype.toString=function(){return void 0===this.message?this.name:this.name+": "+this.message},errorClass}var UnboundTypeError=void 0;function getTypeName(type){var type=___getTypeName(type),rv=readLatin1String(type);return _free(type),rv}function throwUnboundTypeError(message,types){var unboundTypes=[],seen={};throw types.forEach(function visit(type){seen[type]||registeredTypes[type]||(typeDependencies[type]?typeDependencies[type].forEach(visit):(unboundTypes.push(type),seen[type]=!0))}),new UnboundTypeError(message+": "+unboundTypes.map(getTypeName).join([", "]))}function __embind_register_class(rawType,rawPointerType,rawConstPointerType,baseClassRawType,getActualTypeSignature,getActualType,upcastSignature,upcast,downcastSignature,downcast,name,destructorSignature,rawDestructor){rawType>>>=0,rawPointerType>>>=0,rawConstPointerType>>>=0,baseClassRawType>>>=0,getActualTypeSignature>>>=0,getActualType>>>=0,upcastSignature>>>=0,upcast>>>=0,downcastSignature>>>=0,downcast>>>=0,destructorSignature>>>=0,rawDestructor>>>=0,name=readLatin1String(name>>>=0),getActualType=embind__requireFunction(getActualTypeSignature,getActualType),upcast=upcast&&embind__requireFunction(upcastSignature,upcast),downcast=downcast&&embind__requireFunction(downcastSignature,downcast),rawDestructor=embind__requireFunction(destructorSignature,rawDestructor);var legalFunctionName=makeLegalFunctionName(name);exposePublicSymbol(legalFunctionName,function(){throwUnboundTypeError(`Cannot construct ${name} due to unbound types`,[baseClassRawType])}),whenDependentTypesAreResolved([rawType,rawPointerType,rawConstPointerType],baseClassRawType?[baseClassRawType]:[],function(base){base=base[0],base=baseClassRawType?(baseClass=base.registeredClass).instancePrototype:ClassHandle.prototype;var constructor=createNamedFunction(legalFunctionName,function(){if(Object.getPrototypeOf(this)!==instancePrototype)throw new BindingError("Use 'new' to construct "+name);if(void 0===registeredClass.constructor_body)throw new BindingError(name+" has no accessible constructor");var body=registeredClass.constructor_body[arguments.length];if(void 0===body)throw new BindingError(`Tried to invoke ctor of ${name} with invalid number of parameters (${arguments.length}) - expected (${Object.keys(registeredClass.constructor_body).toString()}) parameters instead!`);return body.apply(this,arguments)}),instancePrototype=Object.create(base,{constructor:{value:constructor}}),registeredClass=(constructor.prototype=instancePrototype,new RegisteredClass(name,constructor,instancePrototype,rawDestructor,baseClass,getActualType,upcast,downcast)),base=(registeredClass.baseClass&&(void 0===registeredClass.baseClass.__derivedClasses&&(registeredClass.baseClass.__derivedClasses=[]),registeredClass.baseClass.__derivedClasses.push(registeredClass)),new RegisteredPointer(name,registeredClass,!0,!1,!1)),baseClass=new RegisteredPointer(name+"*",registeredClass,!1,!1,!1),constPointerConverter=new RegisteredPointer(name+" const*",registeredClass,!1,!0,!1);return registeredPointers[rawType]={pointerType:baseClass,constPointerType:constPointerConverter},replacePublicSymbol(legalFunctionName,constructor),[base,baseClass,constPointerConverter]})}function heap32VectorToArray(count,firstElement){for(var array=[],i=0;i<count;i++)array.push(HEAPU32[firstElement+4*i>>>2]);return array}function newFunc(constructor,argumentList){var dummy;if(constructor instanceof Function)return(dummy=createNamedFunction(constructor.name||"unknownFunctionName",function(){})).prototype=constructor.prototype,dummy=new dummy,(argumentList=constructor.apply(dummy,argumentList))instanceof Object?argumentList:dummy;throw new TypeError(`new_ called with constructor type ${typeof constructor} which is not a function`)}function craftInvokerFunction(humanName,argTypes,classType,cppInvokerFunc,cppTargetFunc,isAsync){for(var argCount=argTypes.length,isClassMethodFunc=(argCount<2&&throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!"),null!==argTypes[1]&&null!==classType),needsDestructorStack=!1,i=1;i<argTypes.length;++i)if(null!==argTypes[i]&&void 0===argTypes[i].destructorFunction){needsDestructorStack=!0;break}for(var returns="void"!==argTypes[0].name,argsList="",argsListWired="",i=0;i<argCount-2;++i)argsList+=(0!==i?", ":"")+"arg"+i,argsListWired+=(0!==i?", ":"")+"arg"+i+"Wired";var invokerFnBody=`
        return function ${makeLegalFunctionName(humanName)}(${argsList}) {
        if (arguments.length !== ${argCount-2}) {
          throwBindingError('function ${humanName} called with ${arguments.length} arguments, expected ${argCount-2} args!');
        }`,dtorStack=(needsDestructorStack&&(invokerFnBody+="var destructors = [];\n"),needsDestructorStack?"destructors":"null"),args1=["throwBindingError","invoker","fn","runDestructors","retType","classParam"],args2=[throwBindingError,cppInvokerFunc,cppTargetFunc,runDestructors,argTypes[0],argTypes[1]];isClassMethodFunc&&(invokerFnBody+="var thisWired = classParam.toWireType("+dtorStack+", this);\n");for(i=0;i<argCount-2;++i)invokerFnBody+="var arg"+i+"Wired = argType"+i+".toWireType("+dtorStack+", arg"+i+"); // "+argTypes[i+2].name+"\n",args1.push("argType"+i),args2.push(argTypes[i+2]);if(invokerFnBody+=(returns||isAsync?"var rv = ":"")+"invoker(fn"+(0<(argsListWired=isClassMethodFunc?"thisWired"+(0<argsListWired.length?", ":"")+argsListWired:argsListWired).length?", ":"")+argsListWired+");\n",needsDestructorStack)invokerFnBody+="runDestructors(destructors);\n";else for(i=isClassMethodFunc?1:2;i<argTypes.length;++i){var paramName=1===i?"thisWired":"arg"+(i-2)+"Wired";null!==argTypes[i].destructorFunction&&(invokerFnBody+=paramName+"_dtor("+paramName+"); // "+argTypes[i].name+"\n",args1.push(paramName+"_dtor"),args2.push(argTypes[i].destructorFunction))}return returns&&(invokerFnBody+="var ret = retType.fromWireType(rv);\nreturn ret;\n"),args1.push(invokerFnBody+="}\n"),newFunc(Function,args1).apply(null,args2)}function __embind_register_class_constructor(rawClassType,argCount,rawArgTypesAddr,invokerSignature,invoker,rawConstructor){rawClassType>>>=0,invokerSignature>>>=0,invoker>>>=0,rawConstructor>>>=0;var rawArgTypes=heap32VectorToArray(argCount,rawArgTypesAddr>>>=0);invoker=embind__requireFunction(invokerSignature,invoker),whenDependentTypesAreResolved([],[rawClassType],function(classType){var humanName="constructor "+(classType=classType[0]).name;if(void 0===classType.registeredClass.constructor_body&&(classType.registeredClass.constructor_body=[]),void 0!==classType.registeredClass.constructor_body[argCount-1])throw new BindingError(`Cannot register multiple constructors with identical number of parameters (${argCount-1}) for class '${classType.name}'! Overload resolution is currently only performed using the parameter count, not actual type info!`);return classType.registeredClass.constructor_body[argCount-1]=()=>{throwUnboundTypeError(`Cannot construct ${classType.name} due to unbound types`,rawArgTypes)},whenDependentTypesAreResolved([],rawArgTypes,function(argTypes){return argTypes.splice(1,0,null),classType.registeredClass.constructor_body[argCount-1]=craftInvokerFunction(humanName,argTypes,null,invoker,rawConstructor),[]}),[]})}function __embind_register_class_function(rawClassType,methodName,argCount,rawArgTypesAddr,invokerSignature,rawInvoker,context,isPureVirtual,isAsync){rawClassType>>>=0,methodName>>>=0,invokerSignature>>>=0,rawInvoker>>>=0,context>>>=0;var rawArgTypes=heap32VectorToArray(argCount,rawArgTypesAddr>>>=0);methodName=readLatin1String(methodName),rawInvoker=embind__requireFunction(invokerSignature,rawInvoker),whenDependentTypesAreResolved([],[rawClassType],function(classType){var humanName=(classType=classType[0]).name+"."+methodName;function unboundTypesHandler(){throwUnboundTypeError(`Cannot call ${humanName} due to unbound types`,rawArgTypes)}methodName.startsWith("@@")&&(methodName=Symbol[methodName.substring(2)]),isPureVirtual&&classType.registeredClass.pureVirtualFunctions.push(methodName);var proto=classType.registeredClass.instancePrototype,method=proto[methodName];return void 0===method||void 0===method.overloadTable&&method.className!==classType.name&&method.argCount===argCount-2?(unboundTypesHandler.argCount=argCount-2,unboundTypesHandler.className=classType.name,proto[methodName]=unboundTypesHandler):(ensureOverloadTable(proto,methodName,humanName),proto[methodName].overloadTable[argCount-2]=unboundTypesHandler),whenDependentTypesAreResolved([],rawArgTypes,function(argTypes){argTypes=craftInvokerFunction(humanName,argTypes,classType,rawInvoker,context,isAsync);return void 0===proto[methodName].overloadTable?(argTypes.argCount=argCount-2,proto[methodName]=argTypes):proto[methodName].overloadTable[argCount-2]=argTypes,[]}),[]})}function handleAllocatorInit(){Object.assign(HandleAllocator.prototype,{get(id){return this.allocated[id]},has(id){return void 0!==this.allocated[id]},allocate(handle){var id=this.freelist.pop()||this.allocated.length;return this.allocated[id]=handle,id},free(id){this.allocated[id]=void 0,this.freelist.push(id)}})}function HandleAllocator(){this.allocated=[void 0],this.freelist=[]}var emval_handles=new HandleAllocator;function __emval_decref(handle){(handle>>>=0)>=emval_handles.reserved&&0==--emval_handles.get(handle).refcount&&emval_handles.free(handle)}function count_emval_handles(){for(var count=0,i=emval_handles.reserved;i<emval_handles.allocated.length;++i)void 0!==emval_handles.allocated[i]&&++count;return count}function init_emval(){emval_handles.allocated.push({value:void 0},{value:null},{value:!0},{value:!1}),emval_handles.reserved=emval_handles.allocated.length,Module.count_emval_handles=count_emval_handles}var Emval={toValue:handle=>(handle||throwBindingError("Cannot use deleted val. handle = "+handle),emval_handles.get(handle).value),toHandle:value=>{switch(value){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:return emval_handles.allocate({refcount:1,value:value})}}};function __embind_register_emval(rawType,name){registerType(rawType>>>=0,{name:name=readLatin1String(name>>>=0),fromWireType:function(handle){var rv=Emval.toValue(handle);return __emval_decref(handle),rv},toWireType:function(destructors,value){return Emval.toHandle(value)},argPackAdvance:8,readValueFromPointer:simpleReadValueFromPointer,destructorFunction:null})}function embindRepr(v){var t;return null===v?"null":"object"==(t=typeof v)||"array"==t||"function"==t?v.toString():""+v}function floatReadValueFromPointer(name,shift){switch(shift){case 2:return function(pointer){return this.fromWireType(HEAPF32[pointer>>>2])};case 3:return function(pointer){return this.fromWireType(HEAPF64[pointer>>>3])};default:throw new TypeError("Unknown float type: "+name)}}function __embind_register_float(rawType,name,size){rawType>>>=0,name>>>=0;size=getShiftFromSize(size>>>=0);registerType(rawType,{name:name=readLatin1String(name),fromWireType:function(value){return value},toWireType:function(destructors,value){return value},argPackAdvance:8,readValueFromPointer:floatReadValueFromPointer(name,size),destructorFunction:null})}function __embind_register_function(name,argCount,rawArgTypesAddr,signature,rawInvoker,fn,isAsync){name>>>=0,signature>>>=0,rawInvoker>>>=0,fn>>>=0;var argTypes=heap32VectorToArray(argCount,rawArgTypesAddr>>>=0);name=readLatin1String(name),rawInvoker=embind__requireFunction(signature,rawInvoker),exposePublicSymbol(name,function(){throwUnboundTypeError(`Cannot call ${name} due to unbound types`,argTypes)},argCount-1),whenDependentTypesAreResolved([],argTypes,function(argTypes){argTypes=[argTypes[0],null].concat(argTypes.slice(1));return replacePublicSymbol(name,craftInvokerFunction(name,argTypes,null,rawInvoker,fn,isAsync),argCount-1),[]})}function integerReadValueFromPointer(name,shift,signed){switch(shift){case 0:return signed?function(pointer){return HEAP8[pointer>>>0]}:function(pointer){return HEAPU8[pointer>>>0]};case 1:return signed?function(pointer){return HEAP16[pointer>>>1]}:function(pointer){return HEAPU16[pointer>>>1]};case 2:return signed?function(pointer){return HEAP32[pointer>>>2]}:function(pointer){return HEAPU32[pointer>>>2]};default:throw new TypeError("Unknown integer type: "+name)}}function __embind_register_integer(primitiveType,name,size,minRange,maxRange){primitiveType>>>=0,size>>>=0,name=readLatin1String(name>>>=0),-1===maxRange&&(maxRange=4294967295);var bitshift,maxRange=getShiftFromSize(size),fromWireType=value=>value,size=(0===minRange&&(bitshift=32-8*size,fromWireType=value=>value<<bitshift>>>bitshift),name.includes("unsigned")),size=size?function(destructors,value){return this.name,value>>>0}:function(destructors,value){return this.name,value};registerType(primitiveType,{name:name,fromWireType:fromWireType,toWireType:size,argPackAdvance:8,readValueFromPointer:integerReadValueFromPointer(name,maxRange,0!==minRange),destructorFunction:null})}function __embind_register_memory_view(rawType,dataTypeIndex,name){rawType>>>=0,name>>>=0;var TA=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array][dataTypeIndex];function decodeMemoryView(handle){var heap=HEAPU32,size=heap[(handle>>=2)>>>0];return new TA(heap.buffer,heap[handle+1>>>0],size)}registerType(rawType,{name:name=readLatin1String(name),fromWireType:decodeMemoryView,argPackAdvance:8,readValueFromPointer:decodeMemoryView},{ignoreDuplicateRegistrations:!0})}var stringToUTF8Array=(str,heap,outIdx,maxBytesToWrite)=>{if(!(0<maxBytesToWrite))return 0;for(var startIdx=outIdx>>>=0,endIdx=outIdx+maxBytesToWrite-1,i=0;i<str.length;++i){var u=str.charCodeAt(i);if((u=55296<=u&&u<=57343?65536+((1023&u)<<10)|1023&str.charCodeAt(++i):u)<=127){if(endIdx<=outIdx)break;heap[outIdx++>>>0]=u}else{if(u<=2047){if(endIdx<=outIdx+1)break;heap[outIdx++>>>0]=192|u>>6}else{if(u<=65535){if(endIdx<=outIdx+2)break;heap[outIdx++>>>0]=224|u>>12}else{if(endIdx<=outIdx+3)break;heap[outIdx++>>>0]=240|u>>18,heap[outIdx++>>>0]=128|u>>12&63}heap[outIdx++>>>0]=128|u>>6&63}heap[outIdx++>>>0]=128|63&u}}return heap[outIdx>>>0]=0,outIdx-startIdx},stringToUTF8=(str,outPtr,maxBytesToWrite)=>stringToUTF8Array(str,HEAPU8,outPtr,maxBytesToWrite),lengthBytesUTF8=str=>{for(var len=0,i=0;i<str.length;++i){var c=str.charCodeAt(i);c<=127?len++:c<=2047?len+=2:55296<=c&&c<=57343?(len+=4,++i):len+=3}return len};function __embind_register_std_string(rawType,name){rawType>>>=0;var stdStringIsUTF8="std::string"===(name=readLatin1String(name>>>=0));registerType(rawType,{name:name,fromWireType:function(value){var length=HEAPU32[value>>>2],payload=value+4;if(stdStringIsUTF8)for(var decodeStartPtr=payload,i=0;i<=length;++i){var stringSegment,str,currentBytePtr=payload+i;i!=length&&0!=HEAPU8[currentBytePtr>>>0]||(stringSegment=UTF8ToString(decodeStartPtr,currentBytePtr-decodeStartPtr),str=void 0===str?stringSegment:str+String.fromCharCode(0)+stringSegment,decodeStartPtr=currentBytePtr+1)}else{for(var a=new Array(length),i=0;i<length;++i)a[i]=String.fromCharCode(HEAPU8[payload+i>>>0]);str=a.join("")}return _free(value),str},toWireType:function(destructors,value){var length,valueIsOfTypeString="string"==typeof(value=value instanceof ArrayBuffer?new Uint8Array(value):value),base=(valueIsOfTypeString||value instanceof Uint8Array||value instanceof Uint8ClampedArray||value instanceof Int8Array||throwBindingError("Cannot pass non-string to std::string"),length=stdStringIsUTF8&&valueIsOfTypeString?lengthBytesUTF8(value):value.length,_malloc(4+length+1)),ptr=base+4;if(HEAPU32[base>>>2]=length,stdStringIsUTF8&&valueIsOfTypeString)stringToUTF8(value,ptr,length+1);else if(valueIsOfTypeString)for(var i=0;i<length;++i){var charCode=value.charCodeAt(i);255<charCode&&(_free(ptr),throwBindingError("String has UTF-16 code units that do not fit in 8 bits")),HEAPU8[ptr+i>>>0]=charCode}else for(i=0;i<length;++i)HEAPU8[ptr+i>>>0]=value[i];return null!==destructors&&destructors.push(_free,base),base},argPackAdvance:8,readValueFromPointer:simpleReadValueFromPointer,destructorFunction:function(ptr){_free(ptr)}})}var UTF16Decoder="undefined"!=typeof TextDecoder?new TextDecoder("utf-16le"):void 0,UTF16ToString=(ptr,maxBytesToRead)=>{for(var endPtr,idx=ptr>>1,maxIdx=idx+maxBytesToRead/2;!(maxIdx<=idx)&&HEAPU16[idx>>>0];)++idx;if(32<(endPtr=idx<<1)-ptr&&UTF16Decoder)return UTF16Decoder.decode(HEAPU8.subarray(ptr>>>0,endPtr>>>0));for(var str="",i=0;!(maxBytesToRead/2<=i);++i){var codeUnit=HEAP16[ptr+2*i>>>1];if(0==codeUnit)break;str+=String.fromCharCode(codeUnit)}return str},stringToUTF16=(str,outPtr,maxBytesToWrite)=>{if((maxBytesToWrite=void 0===maxBytesToWrite?2147483647:maxBytesToWrite)<2)return 0;for(var startPtr=outPtr,numCharsToWrite=(maxBytesToWrite-=2)<2*str.length?maxBytesToWrite/2:str.length,i=0;i<numCharsToWrite;++i){var codeUnit=str.charCodeAt(i);HEAP16[outPtr>>>1]=codeUnit,outPtr+=2}return HEAP16[outPtr>>>1]=0,outPtr-startPtr},lengthBytesUTF16=str=>2*str.length,UTF32ToString=(ptr,maxBytesToRead)=>{for(var i=0,str="";!(maxBytesToRead/4<=i);){var ch,utf32=HEAP32[ptr+4*i>>>2];if(0==utf32)break;++i,65536<=utf32?(ch=utf32-65536,str+=String.fromCharCode(55296|ch>>10,56320|1023&ch)):str+=String.fromCharCode(utf32)}return str},stringToUTF32=(str,outPtr,maxBytesToWrite)=>{if((maxBytesToWrite=void 0===maxBytesToWrite?2147483647:maxBytesToWrite)<4)return 0;for(var startPtr=outPtr>>>=0,endPtr=startPtr+maxBytesToWrite-4,i=0;i<str.length;++i){var codeUnit=str.charCodeAt(i);if(55296<=codeUnit&&codeUnit<=57343&&(codeUnit=65536+((1023&codeUnit)<<10)|1023&str.charCodeAt(++i)),HEAP32[outPtr>>>2]=codeUnit,endPtr<(outPtr+=4)+4)break}return HEAP32[outPtr>>>2]=0,outPtr-startPtr},lengthBytesUTF32=str=>{for(var len=0,i=0;i<str.length;++i){var codeUnit=str.charCodeAt(i);55296<=codeUnit&&codeUnit<=57343&&++i,len+=4}return len},__embind_register_std_wstring=function(rawType,charSize,name){var decodeString,encodeString,getHeap,lengthBytesUTF,shift;rawType>>>=0,charSize>>>=0,name=readLatin1String(name>>>=0),2===charSize?(decodeString=UTF16ToString,encodeString=stringToUTF16,lengthBytesUTF=lengthBytesUTF16,getHeap=()=>HEAPU16,shift=1):4===charSize&&(decodeString=UTF32ToString,encodeString=stringToUTF32,lengthBytesUTF=lengthBytesUTF32,getHeap=()=>HEAPU32,shift=2),registerType(rawType,{name:name,fromWireType:function(value){for(var length=HEAPU32[value>>>2],HEAP=getHeap(),decodeStartPtr=value+4,i=0;i<=length;++i){var stringSegment,str,currentBytePtr=value+4+i*charSize;i!=length&&0!=HEAP[currentBytePtr>>>shift]||(stringSegment=decodeString(decodeStartPtr,currentBytePtr-decodeStartPtr),str=void 0===str?stringSegment:str+String.fromCharCode(0)+stringSegment,decodeStartPtr=currentBytePtr+charSize)}return _free(value),str},toWireType:function(destructors,value){"string"!=typeof value&&throwBindingError("Cannot pass non-string to C++ string type "+name);var length=lengthBytesUTF(value),ptr=_malloc(4+length+charSize);return HEAPU32[ptr>>>2]=length>>shift,encodeString(value,ptr+4,length+charSize),null!==destructors&&destructors.push(_free,ptr),ptr},argPackAdvance:8,readValueFromPointer:simpleReadValueFromPointer,destructorFunction:function(ptr){_free(ptr)}})};function __embind_register_value_object(rawType,name,constructorSignature,rawConstructor,destructorSignature,rawDestructor){constructorSignature>>>=0,rawConstructor>>>=0,destructorSignature>>>=0,rawDestructor>>>=0,structRegistrations[rawType>>>=0]={name:readLatin1String(name>>>=0),rawConstructor:embind__requireFunction(constructorSignature,rawConstructor),rawDestructor:embind__requireFunction(destructorSignature,rawDestructor),fields:[]}}function __embind_register_value_object_field(structType,fieldName,getterReturnType,getterSignature,getter,getterContext,setterArgumentType,setterSignature,setter,setterContext){getterReturnType>>>=0,getterSignature>>>=0,getter>>>=0,getterContext>>>=0,setterArgumentType>>>=0,setterSignature>>>=0,setter>>>=0,setterContext>>>=0,structRegistrations[structType>>>=0].fields.push({fieldName:readLatin1String(fieldName>>>=0),getterReturnType:getterReturnType,getter:embind__requireFunction(getterSignature,getter),getterContext:getterContext,setterArgumentType:setterArgumentType,setter:embind__requireFunction(setterSignature,setter),setterContext:setterContext})}function __embind_register_void(rawType,name){registerType(rawType>>>=0,{isVoid:!0,name:name=readLatin1String(name>>>=0),argPackAdvance:0,fromWireType:function(){},toWireType:function(destructors,o){}})}function __emval_incref(handle){4<(handle>>>=0)&&(emval_handles.get(handle).refcount+=1)}var emval_symbols={};function getStringOrSymbol(address){var symbol=emval_symbols[address];return void 0===symbol?readLatin1String(address):symbol}function __emval_new_cstring(v){return Emval.toHandle(getStringOrSymbol(v>>>=0))}function __emval_new_object(){return Emval.toHandle({})}function __emval_set_property(handle,key,value){key>>>=0,value>>>=0,handle=Emval.toValue(handle>>>=0),key=Emval.toValue(key),value=Emval.toValue(value),handle[key]=value}function requireRegisteredType(rawType,humanName){var impl=registeredTypes[rawType];return void 0===impl&&throwBindingError(humanName+" has unknown type "+getTypeName(rawType)),impl}function __emval_take_value(type,arg){arg>>>=0;type=(type=requireRegisteredType(type>>>=0,"_emval_take_value")).readValueFromPointer(arg);return Emval.toHandle(type)}var isLeapYear=year=>year%4==0&&(year%100!=0||year%400==0),MONTH_DAYS_LEAP_CUMULATIVE=[0,31,60,91,121,152,182,213,244,274,305,335],MONTH_DAYS_REGULAR_CUMULATIVE=[0,31,59,90,120,151,181,212,243,273,304,334],ydayFromDate=date=>(isLeapYear(date.getFullYear())?MONTH_DAYS_LEAP_CUMULATIVE:MONTH_DAYS_REGULAR_CUMULATIVE)[date.getMonth()]+date.getDate()-1;function __localtime_js(time_low,time_high,tmPtr){var time_low=convertI32PairToI53Checked(time_low,time_high),time_high=(tmPtr>>>=0,new Date(1e3*time_low)),time_low=(HEAP32[tmPtr>>>2]=time_high.getSeconds(),HEAP32[tmPtr+4>>>2]=time_high.getMinutes(),HEAP32[tmPtr+8>>>2]=time_high.getHours(),HEAP32[tmPtr+12>>>2]=time_high.getDate(),HEAP32[tmPtr+16>>>2]=time_high.getMonth(),HEAP32[tmPtr+20>>>2]=time_high.getFullYear()-1900,HEAP32[tmPtr+24>>>2]=time_high.getDay(),0|ydayFromDate(time_high)),time_low=(HEAP32[tmPtr+28>>>2]=time_low,HEAP32[tmPtr+36>>>2]=-60*time_high.getTimezoneOffset(),new Date(time_high.getFullYear(),0,1)),summerOffset=new Date(time_high.getFullYear(),6,1).getTimezoneOffset(),time_low=time_low.getTimezoneOffset(),time_high=0|(summerOffset!=time_low&&time_high.getTimezoneOffset()==Math.min(time_low,summerOffset));HEAP32[tmPtr+32>>>2]=time_high}var stringToNewUTF8=str=>{var size=lengthBytesUTF8(str)+1,ret=_malloc(size);return ret&&stringToUTF8(str,ret,size),ret};function __tzset_js(timezone,daylight,tzname){timezone>>>=0,daylight>>>=0,tzname>>>=0;var currentYear=(new Date).getFullYear(),winter=new Date(currentYear,0,1),currentYear=new Date(currentYear,6,1),winterOffset=winter.getTimezoneOffset(),summerOffset=currentYear.getTimezoneOffset(),stdTimezoneOffset=Math.max(winterOffset,summerOffset);function extractZone(date){date=date.toTimeString().match(/\(([A-Za-z ]+)\)$/);return date?date[1]:"GMT"}HEAPU32[timezone>>>2]=60*stdTimezoneOffset,HEAP32[daylight>>>2]=Number(winterOffset!=summerOffset);timezone=extractZone(winter),stdTimezoneOffset=extractZone(currentYear),daylight=stringToNewUTF8(timezone),winter=stringToNewUTF8(stdTimezoneOffset);summerOffset<winterOffset?(HEAPU32[tzname>>>2]=daylight,HEAPU32[tzname+4>>>2]=winter):(HEAPU32[tzname>>>2]=winter,HEAPU32[tzname+4>>>2]=daylight)}var _abort=()=>{abort("")};function _emscripten_date_now(){return Date.now()}function _emscripten_memcpy_big(dest,src,num){return HEAPU8.copyWithin((dest>>>=0)>>>0,(src>>>=0)>>>0,src+(num>>>=0)>>>0)}var getHeapMax=()=>4294901760,growMemory=size=>{size=size-wasmMemory.buffer.byteLength+65535>>>16;try{return wasmMemory.grow(size),updateMemoryViews(),1}catch(e){}};function _emscripten_resize_heap(requestedSize){requestedSize>>>=0;var oldSize=HEAPU8.length,maxHeapSize=getHeapMax();if(!(maxHeapSize<requestedSize))for(var multiple,cutDown=1;cutDown<=4;cutDown*=2){var overGrownHeapSize=oldSize*(1+.2/cutDown),overGrownHeapSize=Math.min(overGrownHeapSize,requestedSize+100663296),overGrownHeapSize=Math.min(maxHeapSize,(overGrownHeapSize=Math.max(requestedSize,overGrownHeapSize))+((multiple=65536)-overGrownHeapSize%multiple)%multiple);if(growMemory(overGrownHeapSize))return!0}return!1}function _emscripten_run_script(ptr){ptr>>>=0,eval(UTF8ToString(ptr))}var ENV={},getExecutableName=()=>thisProgram||"./this.program",getEnvStrings=()=>{if(!getEnvStrings.strings){var env={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:("object"==typeof navigator&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:getExecutableName()};for(x in ENV)void 0===ENV[x]?delete env[x]:env[x]=ENV[x];var x,strings=[];for(x in env)strings.push(x+"="+env[x]);getEnvStrings.strings=strings}return getEnvStrings.strings},stringToAscii=(str,buffer)=>{for(var i=0;i<str.length;++i)HEAP8[buffer++>>>0]=str.charCodeAt(i);HEAP8[buffer>>>0]=0},PATH={isAbs:path=>"/"===path.charAt(0),splitPath:filename=>/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/.exec(filename).slice(1),normalizeArray:(parts,allowAboveRoot)=>{for(var up=0,i=parts.length-1;0<=i;i--){var last=parts[i];"."===last?parts.splice(i,1):".."===last?(parts.splice(i,1),up++):up&&(parts.splice(i,1),up--)}if(allowAboveRoot)for(;up;up--)parts.unshift("..");return parts},normalize:path=>{var isAbsolute=PATH.isAbs(path),trailingSlash="/"===path.substr(-1);return(path=(path=PATH.normalizeArray(path.split("/").filter(p=>!!p),!isAbsolute).join("/"))||isAbsolute?path:".")&&trailingSlash&&(path+="/"),(isAbsolute?"/":"")+path},dirname:path=>{var path=PATH.splitPath(path),root=path[0],path=path[1];return root||path?root+(path=path&&path.substr(0,path.length-1)):"."},basename:path=>{var lastSlash;return"/"===path?"/":-1===(lastSlash=(path=(path=PATH.normalize(path)).replace(/\/$/,"")).lastIndexOf("/"))?path:path.substr(lastSlash+1)},join:function(){var paths=Array.prototype.slice.call(arguments);return PATH.normalize(paths.join("/"))},join2:(l,r)=>PATH.normalize(l+"/"+r)},initRandomFill=()=>{if("object"==typeof crypto&&"function"==typeof crypto.getRandomValues)return view=>crypto.getRandomValues(view);if(ENVIRONMENT_IS_NODE)try{var randomBytes,crypto_module=require("crypto");return crypto_module.randomFillSync?view=>crypto_module.randomFillSync(view):(randomBytes=crypto_module.randomBytes,view=>(view.set(randomBytes(view.byteLength)),view))}catch(e){}abort("initRandomDevice")},randomFill=view=>(randomFill=initRandomFill())(view),PATH_FS={resolve:function(){for(var resolvedPath="",resolvedAbsolute=!1,i=arguments.length-1;-1<=i&&!resolvedAbsolute;i--){var path=0<=i?arguments[i]:FS.cwd();if("string"!=typeof path)throw new TypeError("Arguments to path.resolve must be strings");if(!path)return"";resolvedPath=path+"/"+resolvedPath,resolvedAbsolute=PATH.isAbs(path)}return(resolvedAbsolute?"/":"")+(resolvedPath=PATH.normalizeArray(resolvedPath.split("/").filter(p=>!!p),!resolvedAbsolute).join("/"))||"."},relative:(from,to)=>{function trim(arr){for(var start=0;start<arr.length&&""===arr[start];start++);for(var end=arr.length-1;0<=end&&""===arr[end];end--);return end<start?[]:arr.slice(start,end-start+1)}from=PATH_FS.resolve(from).substr(1),to=PATH_FS.resolve(to).substr(1);for(var fromParts=trim(from.split("/")),toParts=trim(to.split("/")),length=Math.min(fromParts.length,toParts.length),samePartsLength=length,i=0;i<length;i++)if(fromParts[i]!==toParts[i]){samePartsLength=i;break}for(var outputParts=[],i=samePartsLength;i<fromParts.length;i++)outputParts.push("..");return(outputParts=outputParts.concat(toParts.slice(samePartsLength))).join("/")}},FS_stdin_getChar_buffer=[];function intArrayFromString(stringy,dontAddNull,length){length=0<length?length:lengthBytesUTF8(stringy)+1,length=new Array(length),stringy=stringToUTF8Array(stringy,length,0,length.length);return dontAddNull&&(length.length=stringy),length}var FS_stdin_getChar=()=>{if(!FS_stdin_getChar_buffer.length){var result=null;if(ENVIRONMENT_IS_NODE){var buf=Buffer.alloc(256),bytesRead=0,fd=process.stdin.fd;try{bytesRead=fs.readSync(fd,buf,0,256,-1)}catch(e){if(!e.toString().includes("EOF"))throw e;bytesRead=0}result=0<bytesRead?buf.slice(0,bytesRead).toString("utf-8"):null}else"undefined"!=typeof window&&"function"==typeof window.prompt?null!==(result=window.prompt("Input: "))&&(result+="\n"):"function"==typeof readline&&null!==(result=readline())&&(result+="\n");if(!result)return null;FS_stdin_getChar_buffer=intArrayFromString(result,!0)}return FS_stdin_getChar_buffer.shift()},TTY={ttys:[],init:function(){},shutdown:function(){},register:function(dev,ops){TTY.ttys[dev]={input:[],output:[],ops:ops},FS.registerDevice(dev,TTY.stream_ops)},stream_ops:{open:function(stream){var tty=TTY.ttys[stream.node.rdev];if(!tty)throw new FS.ErrnoError(43);stream.tty=tty,stream.seekable=!1},close:function(stream){stream.tty.ops.fsync(stream.tty)},fsync:function(stream){stream.tty.ops.fsync(stream.tty)},read:function(stream,buffer,offset,length,pos){if(!stream.tty||!stream.tty.ops.get_char)throw new FS.ErrnoError(60);for(var result,bytesRead=0,i=0;i<length;i++){try{result=stream.tty.ops.get_char(stream.tty)}catch(e){throw new FS.ErrnoError(29)}if(void 0===result&&0===bytesRead)throw new FS.ErrnoError(6);if(null==result)break;bytesRead++,buffer[offset+i]=result}return bytesRead&&(stream.node.timestamp=Date.now()),bytesRead},write:function(stream,buffer,offset,length,pos){if(!stream.tty||!stream.tty.ops.put_char)throw new FS.ErrnoError(60);try{for(var i=0;i<length;i++)stream.tty.ops.put_char(stream.tty,buffer[offset+i])}catch(e){throw new FS.ErrnoError(29)}return length&&(stream.node.timestamp=Date.now()),i}},default_tty_ops:{get_char:function(tty){return FS_stdin_getChar()},put_char:function(tty,val){null===val||10===val?(out(UTF8ArrayToString(tty.output,0)),tty.output=[]):0!=val&&tty.output.push(val)},fsync:function(tty){tty.output&&0<tty.output.length&&(out(UTF8ArrayToString(tty.output,0)),tty.output=[])},ioctl_tcgets:function(tty){return{c_iflag:25856,c_oflag:5,c_cflag:191,c_lflag:35387,c_cc:[3,28,127,21,4,0,1,0,17,19,26,0,18,15,23,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}},ioctl_tcsets:function(tty,optional_actions,data){return 0},ioctl_tiocgwinsz:function(tty){return[24,80]}},default_tty1_ops:{put_char:function(tty,val){null===val||10===val?(err(UTF8ArrayToString(tty.output,0)),tty.output=[]):0!=val&&tty.output.push(val)},fsync:function(tty){tty.output&&0<tty.output.length&&(err(UTF8ArrayToString(tty.output,0)),tty.output=[])}}},mmapAlloc=size=>{abort()},MEMFS={ops_table:null,mount(mount){return MEMFS.createNode(null,"/",16895,0)},createNode(parent,name,mode,dev){if(FS.isBlkdev(mode)||FS.isFIFO(mode))throw new FS.ErrnoError(63);MEMFS.ops_table||(MEMFS.ops_table={dir:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr,lookup:MEMFS.node_ops.lookup,mknod:MEMFS.node_ops.mknod,rename:MEMFS.node_ops.rename,unlink:MEMFS.node_ops.unlink,rmdir:MEMFS.node_ops.rmdir,readdir:MEMFS.node_ops.readdir,symlink:MEMFS.node_ops.symlink},stream:{llseek:MEMFS.stream_ops.llseek}},file:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr},stream:{llseek:MEMFS.stream_ops.llseek,read:MEMFS.stream_ops.read,write:MEMFS.stream_ops.write,allocate:MEMFS.stream_ops.allocate,mmap:MEMFS.stream_ops.mmap,msync:MEMFS.stream_ops.msync}},link:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr,readlink:MEMFS.node_ops.readlink},stream:{}},chrdev:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr},stream:FS.chrdev_stream_ops}});mode=FS.createNode(parent,name,mode,dev);return FS.isDir(mode.mode)?(mode.node_ops=MEMFS.ops_table.dir.node,mode.stream_ops=MEMFS.ops_table.dir.stream,mode.contents={}):FS.isFile(mode.mode)?(mode.node_ops=MEMFS.ops_table.file.node,mode.stream_ops=MEMFS.ops_table.file.stream,mode.usedBytes=0,mode.contents=null):FS.isLink(mode.mode)?(mode.node_ops=MEMFS.ops_table.link.node,mode.stream_ops=MEMFS.ops_table.link.stream):FS.isChrdev(mode.mode)&&(mode.node_ops=MEMFS.ops_table.chrdev.node,mode.stream_ops=MEMFS.ops_table.chrdev.stream),mode.timestamp=Date.now(),parent&&(parent.contents[name]=mode,parent.timestamp=mode.timestamp),mode},getFileDataAsTypedArray(node){return node.contents?node.contents.subarray?node.contents.subarray(0,node.usedBytes):new Uint8Array(node.contents):new Uint8Array(0)},expandFileStorage(node,newCapacity){var prevCapacity=node.contents?node.contents.length:0;newCapacity<=prevCapacity||(newCapacity=Math.max(newCapacity,prevCapacity*(prevCapacity<1048576?2:1.125)>>>0),0!=prevCapacity&&(newCapacity=Math.max(newCapacity,256)),prevCapacity=node.contents,node.contents=new Uint8Array(newCapacity),0<node.usedBytes&&node.contents.set(prevCapacity.subarray(0,node.usedBytes),0))},resizeFileStorage(node,newSize){var oldContents;node.usedBytes!=newSize&&(0==newSize?(node.contents=null,node.usedBytes=0):(oldContents=node.contents,node.contents=new Uint8Array(newSize),oldContents&&node.contents.set(oldContents.subarray(0,Math.min(newSize,node.usedBytes))),node.usedBytes=newSize))},node_ops:{getattr(node){var attr={};return attr.dev=FS.isChrdev(node.mode)?node.id:1,attr.ino=node.id,attr.mode=node.mode,attr.nlink=1,attr.uid=0,attr.gid=0,attr.rdev=node.rdev,FS.isDir(node.mode)?attr.size=4096:FS.isFile(node.mode)?attr.size=node.usedBytes:FS.isLink(node.mode)?attr.size=node.link.length:attr.size=0,attr.atime=new Date(node.timestamp),attr.mtime=new Date(node.timestamp),attr.ctime=new Date(node.timestamp),attr.blksize=4096,attr.blocks=Math.ceil(attr.size/attr.blksize),attr},setattr(node,attr){void 0!==attr.mode&&(node.mode=attr.mode),void 0!==attr.timestamp&&(node.timestamp=attr.timestamp),void 0!==attr.size&&MEMFS.resizeFileStorage(node,attr.size)},lookup(parent,name){throw FS.genericErrors[44]},mknod(parent,name,mode,dev){return MEMFS.createNode(parent,name,mode,dev)},rename(old_node,new_dir,new_name){if(FS.isDir(old_node.mode)){var new_node;try{new_node=FS.lookupNode(new_dir,new_name)}catch(e){}if(new_node)for(var i in new_node.contents)throw new FS.ErrnoError(55)}delete old_node.parent.contents[old_node.name],old_node.parent.timestamp=Date.now(),old_node.name=new_name,new_dir.contents[new_name]=old_node,new_dir.timestamp=old_node.parent.timestamp,old_node.parent=new_dir},unlink(parent,name){delete parent.contents[name],parent.timestamp=Date.now()},rmdir(parent,name){for(var i in FS.lookupNode(parent,name).contents)throw new FS.ErrnoError(55);delete parent.contents[name],parent.timestamp=Date.now()},readdir(node){var key,entries=[".",".."];for(key in node.contents)node.contents.hasOwnProperty(key)&&entries.push(key);return entries},symlink(parent,newname,oldpath){parent=MEMFS.createNode(parent,newname,41471,0);return parent.link=oldpath,parent},readlink(node){if(FS.isLink(node.mode))return node.link;throw new FS.ErrnoError(28)}},stream_ops:{read(stream,buffer,offset,length,position){var contents=stream.node.contents;if(position>=stream.node.usedBytes)return 0;var size=Math.min(stream.node.usedBytes-position,length);if(8<size&&contents.subarray)buffer.set(contents.subarray(position,position+size),offset);else for(var i=0;i<size;i++)buffer[offset+i]=contents[position+i];return size},write(stream,buffer,offset,length,position,canOwn){if(buffer.buffer===HEAP8.buffer&&(canOwn=!1),!length)return 0;var node=stream.node;if(node.timestamp=Date.now(),buffer.subarray&&(!node.contents||node.contents.subarray)){if(canOwn)return node.contents=buffer.subarray(offset,offset+length),node.usedBytes=length;if(0===node.usedBytes&&0===position)return node.contents=buffer.slice(offset,offset+length),node.usedBytes=length;if(position+length<=node.usedBytes)return node.contents.set(buffer.subarray(offset,offset+length),position),length}if(MEMFS.expandFileStorage(node,position+length),node.contents.subarray&&buffer.subarray)node.contents.set(buffer.subarray(offset,offset+length),position);else for(var i=0;i<length;i++)node.contents[position+i]=buffer[offset+i];return node.usedBytes=Math.max(node.usedBytes,position+length),length},llseek(stream,offset,whence){if(1===whence?offset+=stream.position:2===whence&&FS.isFile(stream.node.mode)&&(offset+=stream.node.usedBytes),offset<0)throw new FS.ErrnoError(28);return offset},allocate(stream,offset,length){MEMFS.expandFileStorage(stream.node,offset+length),stream.node.usedBytes=Math.max(stream.node.usedBytes,offset+length)},mmap(stream,length,position,prot,flags){if(!FS.isFile(stream.node.mode))throw new FS.ErrnoError(43);var ptr,allocated,stream=stream.node.contents;if(2&flags||stream.buffer!==HEAP8.buffer){if((0<position||position+length<stream.length)&&(stream=stream.subarray?stream.subarray(position,position+length):Array.prototype.slice.call(stream,position,position+length)),allocated=!0,!(ptr=mmapAlloc(length)))throw new FS.ErrnoError(48);HEAP8.set(stream,ptr>>>0)}else allocated=!1,ptr=stream.byteOffset;return{ptr:ptr,allocated:allocated}},msync(stream,buffer,offset,length,mmapFlags){return MEMFS.stream_ops.write(stream,buffer,0,length,offset,!1),0}}},asyncLoad=(url,onload,onerror,noRunDep)=>{var dep=noRunDep?"":getUniqueRunDependency("al "+url);readAsync(url,arrayBuffer=>{assert(arrayBuffer,`Loading data file "${url}" failed (no arrayBuffer).`),onload(new Uint8Array(arrayBuffer)),dep&&removeRunDependency(dep)},event=>{if(!onerror)throw`Loading data file "${url}" failed.`;onerror()}),dep&&addRunDependency(dep)},preloadPlugins=Module.preloadPlugins||[];function FS_handledByPreloadPlugin(byteArray,fullname,finish,onerror){"undefined"!=typeof Browser&&Browser.init();var handled=!1;return preloadPlugins.forEach(function(plugin){handled||plugin.canHandle(fullname)&&(plugin.handle(byteArray,fullname,finish,onerror),handled=!0)}),handled}function FS_createPreloadedFile(parent,name,url,canRead,canWrite,onload,onerror,dontCreateFile,canOwn,preFinish){var fullname=name?PATH_FS.resolve(PATH.join2(parent,name)):parent,dep=getUniqueRunDependency("cp "+fullname);function processData(byteArray){function finish(byteArray){preFinish&&preFinish(),dontCreateFile||FS.createDataFile(parent,name,byteArray,canRead,canWrite,canOwn),onload&&onload(),removeRunDependency(dep)}FS_handledByPreloadPlugin(byteArray,fullname,finish,()=>{onerror&&onerror(),removeRunDependency(dep)})||finish(byteArray)}addRunDependency(dep),"string"==typeof url?asyncLoad(url,byteArray=>processData(byteArray),onerror):processData(url)}function FS_modeStringToFlags(str){var flags={r:0,"r+":2,w:577,"w+":578,a:1089,"a+":1090}[str];if(void 0===flags)throw new Error("Unknown file open mode: "+str);return flags}function FS_getMode(canRead,canWrite){var mode=0;return canRead&&(mode|=365),canWrite&&(mode|=146),mode}var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:!1,ignorePermissions:!0,ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,lookupPath:(path,opts={})=>{if(!(path=PATH_FS.resolve(path)))return{path:"",node:null};if(8<(opts=Object.assign({follow_mount:!0,recurse_count:0},opts)).recurse_count)throw new FS.ErrnoError(32);for(var parts=path.split("/").filter(p=>!!p),current=FS.root,current_path="/",i=0;i<parts.length;i++){var islast=i===parts.length-1;if(islast&&opts.parent)break;if(current=FS.lookupNode(current,parts[i]),current_path=PATH.join2(current_path,parts[i]),!FS.isMountpoint(current)||islast&&!opts.follow_mount||(current=current.mounted.root),!islast||opts.follow)for(var count=0;FS.isLink(current.mode);){var link=FS.readlink(current_path),current_path=PATH_FS.resolve(PATH.dirname(current_path),link),current=FS.lookupPath(current_path,{recurse_count:opts.recurse_count+1}).node;if(40<count++)throw new FS.ErrnoError(32)}}return{path:current_path,node:current}},getPath:node=>{for(var path,mount;;){if(FS.isRoot(node))return mount=node.mount.mountpoint,path?"/"!==mount[mount.length-1]?mount+"/"+path:mount+path:mount;path=path?node.name+"/"+path:node.name,node=node.parent}},hashName:(parentid,name)=>{for(var hash=0,i=0;i<name.length;i++)hash=(hash<<5)-hash+name.charCodeAt(i)|0;return(parentid+hash>>>0)%FS.nameTable.length},hashAddNode:node=>{var hash=FS.hashName(node.parent.id,node.name);node.name_next=FS.nameTable[hash],FS.nameTable[hash]=node},hashRemoveNode:node=>{var hash=FS.hashName(node.parent.id,node.name);if(FS.nameTable[hash]===node)FS.nameTable[hash]=node.name_next;else for(var current=FS.nameTable[hash];current;){if(current.name_next===node){current.name_next=node.name_next;break}current=current.name_next}},lookupNode:(parent,name)=>{var errCode=FS.mayLookup(parent);if(errCode)throw new FS.ErrnoError(errCode,parent);for(var errCode=FS.hashName(parent.id,name),node=FS.nameTable[errCode];node;node=node.name_next){var nodeName=node.name;if(node.parent.id===parent.id&&nodeName===name)return node}return FS.lookup(parent,name)},createNode:(parent,name,mode,rdev)=>{parent=new FS.FSNode(parent,name,mode,rdev);return FS.hashAddNode(parent),parent},destroyNode:node=>{FS.hashRemoveNode(node)},isRoot:node=>node===node.parent,isMountpoint:node=>!!node.mounted,isFile:mode=>32768==(61440&mode),isDir:mode=>16384==(61440&mode),isLink:mode=>40960==(61440&mode),isChrdev:mode=>8192==(61440&mode),isBlkdev:mode=>24576==(61440&mode),isFIFO:mode=>4096==(61440&mode),isSocket:mode=>49152==(49152&mode),flagsToPermissionString:flag=>{var perms=["r","w","rw"][3&flag];return 512&flag&&(perms+="w"),perms},nodePermissions:(node,perms)=>FS.ignorePermissions||(!perms.includes("r")||292&node.mode)&&(!perms.includes("w")||146&node.mode)&&(!perms.includes("x")||73&node.mode)?0:2,mayLookup:dir=>{var errCode=FS.nodePermissions(dir,"x");return errCode||(dir.node_ops.lookup?0:2)},mayCreate:(dir,name)=>{try{FS.lookupNode(dir,name);return 20}catch(e){}return FS.nodePermissions(dir,"wx")},mayDelete:(dir,name,isdir)=>{var node;try{node=FS.lookupNode(dir,name)}catch(e){return e.errno}name=FS.nodePermissions(dir,"wx");if(name)return name;if(isdir){if(!FS.isDir(node.mode))return 54;if(FS.isRoot(node)||FS.getPath(node)===FS.cwd())return 10}else if(FS.isDir(node.mode))return 31;return 0},mayOpen:(node,flags)=>node?FS.isLink(node.mode)?32:FS.isDir(node.mode)&&("r"!==FS.flagsToPermissionString(flags)||512&flags)?31:FS.nodePermissions(node,FS.flagsToPermissionString(flags)):44,MAX_OPEN_FDS:4096,nextfd:()=>{for(var fd=0;fd<=FS.MAX_OPEN_FDS;fd++)if(!FS.streams[fd])return fd;throw new FS.ErrnoError(33)},getStreamChecked:fd=>{fd=FS.getStream(fd);if(fd)return fd;throw new FS.ErrnoError(8)},getStream:fd=>FS.streams[fd],createStream:(stream,fd=-1)=>(FS.FSStream||(FS.FSStream=function(){this.shared={}},FS.FSStream.prototype={},Object.defineProperties(FS.FSStream.prototype,{object:{get(){return this.node},set(val){this.node=val}},isRead:{get(){return 1!=(2097155&this.flags)}},isWrite:{get(){return 0!=(2097155&this.flags)}},isAppend:{get(){return 1024&this.flags}},flags:{get(){return this.shared.flags},set(val){this.shared.flags=val}},position:{get(){return this.shared.position},set(val){this.shared.position=val}}})),stream=Object.assign(new FS.FSStream,stream),-1==fd&&(fd=FS.nextfd()),stream.fd=fd,FS.streams[fd]=stream),closeStream:fd=>{FS.streams[fd]=null},chrdev_stream_ops:{open:stream=>{var device=FS.getDevice(stream.node.rdev);stream.stream_ops=device.stream_ops,stream.stream_ops.open&&stream.stream_ops.open(stream)},llseek:()=>{throw new FS.ErrnoError(70)}},major:dev=>dev>>8,minor:dev=>255&dev,makedev:(ma,mi)=>ma<<8|mi,registerDevice:(dev,ops)=>{FS.devices[dev]={stream_ops:ops}},getDevice:dev=>FS.devices[dev],getMounts:mount=>{for(var mounts=[],check=[mount];check.length;){var m=check.pop();mounts.push(m),check.push.apply(check,m.mounts)}return mounts},syncfs:(populate,callback)=>{"function"==typeof populate&&(callback=populate,populate=!1),FS.syncFSRequests++,1<FS.syncFSRequests&&err(`warning: ${FS.syncFSRequests} FS.syncfs operations in flight at once, probably just doing extra work`);var mounts=FS.getMounts(FS.root.mount),completed=0;function doCallback(errCode){return FS.syncFSRequests--,callback(errCode)}function done(errCode){if(errCode)return done.errored?void 0:(done.errored=!0,doCallback(errCode));++completed>=mounts.length&&doCallback(null)}mounts.forEach(mount=>{if(!mount.type.syncfs)return done(null);mount.type.syncfs(mount,populate,done)})},mount:(type,opts,mountpoint)=>{var node,root="/"===mountpoint,pseudo=!mountpoint;if(root&&FS.root)throw new FS.ErrnoError(10);if(!root&&!pseudo){pseudo=FS.lookupPath(mountpoint,{follow_mount:!1});if(mountpoint=pseudo.path,FS.isMountpoint(node=pseudo.node))throw new FS.ErrnoError(10);if(!FS.isDir(node.mode))throw new FS.ErrnoError(54)}pseudo={type:type,opts:opts,mountpoint:mountpoint,mounts:[]},opts=type.mount(pseudo);return(opts.mount=pseudo).root=opts,root?FS.root=opts:node&&(node.mounted=pseudo,node.mount)&&node.mount.mounts.push(pseudo),opts},unmount:mountpoint=>{mountpoint=FS.lookupPath(mountpoint,{follow_mount:!1});if(!FS.isMountpoint(mountpoint.node))throw new FS.ErrnoError(28);var mountpoint=mountpoint.node,mount=mountpoint.mounted,mounts=FS.getMounts(mount),mount=(Object.keys(FS.nameTable).forEach(hash=>{for(var current=FS.nameTable[hash];current;){var next=current.name_next;mounts.includes(current.mount)&&FS.destroyNode(current),current=next}}),mountpoint.mounted=null,mountpoint.mount.mounts.indexOf(mount));mountpoint.mount.mounts.splice(mount,1)},lookup:(parent,name)=>parent.node_ops.lookup(parent,name),mknod:(path,mode,dev)=>{var parent=FS.lookupPath(path,{parent:!0}).node,path=PATH.basename(path);if(!path||"."===path||".."===path)throw new FS.ErrnoError(28);var errCode=FS.mayCreate(parent,path);if(errCode)throw new FS.ErrnoError(errCode);if(parent.node_ops.mknod)return parent.node_ops.mknod(parent,path,mode,dev);throw new FS.ErrnoError(63)},create:(path,mode)=>FS.mknod(path,mode=(mode=void 0!==mode?mode:438)&4095|32768,0),mkdir:(path,mode)=>FS.mknod(path,mode=(mode=void 0!==mode?mode:511)&1023|16384,0),mkdirTree:(path,mode)=>{for(var dirs=path.split("/"),d="",i=0;i<dirs.length;++i)if(dirs[i]){d+="/"+dirs[i];try{FS.mkdir(d,mode)}catch(e){if(20!=e.errno)throw e}}},mkdev:(path,mode,dev)=>(void 0===dev&&(dev=mode,mode=438),FS.mknod(path,mode|=8192,dev)),symlink:(oldpath,newpath)=>{if(!PATH_FS.resolve(oldpath))throw new FS.ErrnoError(44);var parent=FS.lookupPath(newpath,{parent:!0}).node;if(!parent)throw new FS.ErrnoError(44);var newpath=PATH.basename(newpath),errCode=FS.mayCreate(parent,newpath);if(errCode)throw new FS.ErrnoError(errCode);if(parent.node_ops.symlink)return parent.node_ops.symlink(parent,newpath,oldpath);throw new FS.ErrnoError(63)},rename:(old_path,new_path)=>{var old_dirname=PATH.dirname(old_path),new_dirname=PATH.dirname(new_path),old_name=PATH.basename(old_path),new_name=PATH.basename(new_path),lookup=FS.lookupPath(old_path,{parent:!0}),lookup=lookup.node,new_dir=FS.lookupPath(new_path,{parent:!0}).node;if(!lookup||!new_dir)throw new FS.ErrnoError(44);if(lookup.mount!==new_dir.mount)throw new FS.ErrnoError(75);var new_node,old_node=FS.lookupNode(lookup,old_name),old_path=PATH_FS.relative(old_path,new_dirname);if("."!==old_path.charAt(0))throw new FS.ErrnoError(28);if("."!==(old_path=PATH_FS.relative(new_path,old_dirname)).charAt(0))throw new FS.ErrnoError(55);try{new_node=FS.lookupNode(new_dir,new_name)}catch(e){}if(old_node!==new_node){new_dirname=FS.isDir(old_node.mode),new_path=FS.mayDelete(lookup,old_name,new_dirname);if(new_path)throw new FS.ErrnoError(new_path);if(new_path=new_node?FS.mayDelete(new_dir,new_name,new_dirname):FS.mayCreate(new_dir,new_name))throw new FS.ErrnoError(new_path);if(!lookup.node_ops.rename)throw new FS.ErrnoError(63);if(FS.isMountpoint(old_node)||new_node&&FS.isMountpoint(new_node))throw new FS.ErrnoError(10);if(new_dir!==lookup&&(new_path=FS.nodePermissions(lookup,"w")))throw new FS.ErrnoError(new_path);FS.hashRemoveNode(old_node);try{lookup.node_ops.rename(old_node,new_dir,new_name)}catch(e){throw e}finally{FS.hashAddNode(old_node)}}},rmdir:path=>{var parent=FS.lookupPath(path,{parent:!0}).node,path=PATH.basename(path),node=FS.lookupNode(parent,path),errCode=FS.mayDelete(parent,path,!0);if(errCode)throw new FS.ErrnoError(errCode);if(!parent.node_ops.rmdir)throw new FS.ErrnoError(63);if(FS.isMountpoint(node))throw new FS.ErrnoError(10);parent.node_ops.rmdir(parent,path),FS.destroyNode(node)},readdir:path=>{path=FS.lookupPath(path,{follow:!0}).node;if(path.node_ops.readdir)return path.node_ops.readdir(path);throw new FS.ErrnoError(54)},unlink:path=>{var parent=FS.lookupPath(path,{parent:!0}).node;if(!parent)throw new FS.ErrnoError(44);var path=PATH.basename(path),node=FS.lookupNode(parent,path),errCode=FS.mayDelete(parent,path,!1);if(errCode)throw new FS.ErrnoError(errCode);if(!parent.node_ops.unlink)throw new FS.ErrnoError(63);if(FS.isMountpoint(node))throw new FS.ErrnoError(10);parent.node_ops.unlink(parent,path),FS.destroyNode(node)},readlink:path=>{path=FS.lookupPath(path).node;if(!path)throw new FS.ErrnoError(44);if(path.node_ops.readlink)return PATH_FS.resolve(FS.getPath(path.parent),path.node_ops.readlink(path));throw new FS.ErrnoError(28)},stat:(path,dontFollow)=>{path=FS.lookupPath(path,{follow:!dontFollow}).node;if(!path)throw new FS.ErrnoError(44);if(path.node_ops.getattr)return path.node_ops.getattr(path);throw new FS.ErrnoError(63)},lstat:path=>FS.stat(path,!0),chmod:(path,mode,dontFollow)=>{if(!(dontFollow="string"==typeof path?FS.lookupPath(path,{follow:!dontFollow}).node:path).node_ops.setattr)throw new FS.ErrnoError(63);dontFollow.node_ops.setattr(dontFollow,{mode:4095&mode|-4096&dontFollow.mode,timestamp:Date.now()})},lchmod:(path,mode)=>{FS.chmod(path,mode,!0)},fchmod:(fd,mode)=>{fd=FS.getStreamChecked(fd);FS.chmod(fd.node,mode)},chown:(path,uid,gid,dontFollow)=>{if(!(dontFollow="string"==typeof path?FS.lookupPath(path,{follow:!dontFollow}).node:path).node_ops.setattr)throw new FS.ErrnoError(63);dontFollow.node_ops.setattr(dontFollow,{timestamp:Date.now()})},lchown:(path,uid,gid)=>{FS.chown(path,uid,gid,!0)},fchown:(fd,uid,gid)=>{fd=FS.getStreamChecked(fd);FS.chown(fd.node,uid,gid)},truncate:(path,len)=>{if(len<0)throw new FS.ErrnoError(28);if(!(path="string"==typeof path?FS.lookupPath(path,{follow:!0}).node:path).node_ops.setattr)throw new FS.ErrnoError(63);if(FS.isDir(path.mode))throw new FS.ErrnoError(31);if(!FS.isFile(path.mode))throw new FS.ErrnoError(28);var errCode=FS.nodePermissions(path,"w");if(errCode)throw new FS.ErrnoError(errCode);path.node_ops.setattr(path,{size:len,timestamp:Date.now()})},ftruncate:(fd,len)=>{fd=FS.getStreamChecked(fd);if(0==(2097155&fd.flags))throw new FS.ErrnoError(28);FS.truncate(fd.node,len)},utime:(path,atime,mtime)=>{path=FS.lookupPath(path,{follow:!0}).node;path.node_ops.setattr(path,{timestamp:Math.max(atime,mtime)})},open:(path,flags,mode)=>{if(""===path)throw new FS.ErrnoError(44);if(mode=void 0===mode?438:mode,mode=64&(flags="string"==typeof flags?FS_modeStringToFlags(flags):flags)?4095&mode|32768:0,"object"==typeof path)node=path;else{path=PATH.normalize(path);try{var node=FS.lookupPath(path,{follow:!(131072&flags)}).node}catch(e){}}var created=!1;if(64&flags)if(node){if(128&flags)throw new FS.ErrnoError(20)}else node=FS.mknod(path,mode,0),created=!0;if(!node)throw new FS.ErrnoError(44);if(FS.isChrdev(node.mode)&&(flags&=-513),65536&flags&&!FS.isDir(node.mode))throw new FS.ErrnoError(54);if(!created){mode=FS.mayOpen(node,flags);if(mode)throw new FS.ErrnoError(mode)}512&flags&&!created&&FS.truncate(node,0),flags&=-131713;mode=FS.createStream({node:node,path:FS.getPath(node),flags:flags,seekable:!0,position:0,stream_ops:node.stream_ops,ungotten:[],error:!1});return mode.stream_ops.open&&mode.stream_ops.open(mode),!Module.logReadFiles||1&flags||(FS.readFiles||(FS.readFiles={}),path in FS.readFiles)||(FS.readFiles[path]=1),mode},close:stream=>{if(FS.isClosed(stream))throw new FS.ErrnoError(8);stream.getdents&&(stream.getdents=null);try{stream.stream_ops.close&&stream.stream_ops.close(stream)}catch(e){throw e}finally{FS.closeStream(stream.fd)}stream.fd=null},isClosed:stream=>null===stream.fd,llseek:(stream,offset,whence)=>{if(FS.isClosed(stream))throw new FS.ErrnoError(8);if(!stream.seekable||!stream.stream_ops.llseek)throw new FS.ErrnoError(70);if(0!=whence&&1!=whence&&2!=whence)throw new FS.ErrnoError(28);return stream.position=stream.stream_ops.llseek(stream,offset,whence),stream.ungotten=[],stream.position},read:(stream,buffer,offset,length,position)=>{if(length<0||position<0)throw new FS.ErrnoError(28);if(FS.isClosed(stream))throw new FS.ErrnoError(8);if(1==(2097155&stream.flags))throw new FS.ErrnoError(8);if(FS.isDir(stream.node.mode))throw new FS.ErrnoError(31);if(!stream.stream_ops.read)throw new FS.ErrnoError(28);var seeking=void 0!==position;if(seeking){if(!stream.seekable)throw new FS.ErrnoError(70)}else position=stream.position;buffer=stream.stream_ops.read(stream,buffer,offset,length,position);return seeking||(stream.position+=buffer),buffer},write:(stream,buffer,offset,length,position,canOwn)=>{if(length<0||position<0)throw new FS.ErrnoError(28);if(FS.isClosed(stream))throw new FS.ErrnoError(8);if(0==(2097155&stream.flags))throw new FS.ErrnoError(8);if(FS.isDir(stream.node.mode))throw new FS.ErrnoError(31);if(!stream.stream_ops.write)throw new FS.ErrnoError(28);stream.seekable&&1024&stream.flags&&FS.llseek(stream,0,2);var seeking=void 0!==position;if(seeking){if(!stream.seekable)throw new FS.ErrnoError(70)}else position=stream.position;buffer=stream.stream_ops.write(stream,buffer,offset,length,position,canOwn);return seeking||(stream.position+=buffer),buffer},allocate:(stream,offset,length)=>{if(FS.isClosed(stream))throw new FS.ErrnoError(8);if(offset<0||length<=0)throw new FS.ErrnoError(28);if(0==(2097155&stream.flags))throw new FS.ErrnoError(8);if(!FS.isFile(stream.node.mode)&&!FS.isDir(stream.node.mode))throw new FS.ErrnoError(43);if(!stream.stream_ops.allocate)throw new FS.ErrnoError(138);stream.stream_ops.allocate(stream,offset,length)},mmap:(stream,length,position,prot,flags)=>{if(0!=(2&prot)&&0==(2&flags)&&2!=(2097155&stream.flags))throw new FS.ErrnoError(2);if(1==(2097155&stream.flags))throw new FS.ErrnoError(2);if(stream.stream_ops.mmap)return stream.stream_ops.mmap(stream,length,position,prot,flags);throw new FS.ErrnoError(43)},msync:(stream,buffer,offset,length,mmapFlags)=>stream.stream_ops.msync?stream.stream_ops.msync(stream,buffer,offset,length,mmapFlags):0,munmap:stream=>0,ioctl:(stream,cmd,arg)=>{if(stream.stream_ops.ioctl)return stream.stream_ops.ioctl(stream,cmd,arg);throw new FS.ErrnoError(59)},readFile:(path,opts={})=>{if(opts.flags=opts.flags||0,opts.encoding=opts.encoding||"binary","utf8"!==opts.encoding&&"binary"!==opts.encoding)throw new Error(`Invalid encoding type "${opts.encoding}"`);var ret,stream=FS.open(path,opts.flags),path=FS.stat(path).size,buf=new Uint8Array(path);return FS.read(stream,buf,0,path,0),"utf8"===opts.encoding?ret=UTF8ArrayToString(buf,0):"binary"===opts.encoding&&(ret=buf),FS.close(stream),ret},writeFile:(path,data,opts={})=>{opts.flags=opts.flags||577;path=FS.open(path,opts.flags,opts.mode);if("string"==typeof data){var buf=new Uint8Array(lengthBytesUTF8(data)+1),actualNumBytes=stringToUTF8Array(data,buf,0,buf.length);FS.write(path,buf,0,actualNumBytes,void 0,opts.canOwn)}else{if(!ArrayBuffer.isView(data))throw new Error("Unsupported data type");FS.write(path,data,0,data.byteLength,void 0,opts.canOwn)}FS.close(path)},cwd:()=>FS.currentPath,chdir:path=>{path=FS.lookupPath(path,{follow:!0});if(null===path.node)throw new FS.ErrnoError(44);if(!FS.isDir(path.node.mode))throw new FS.ErrnoError(54);var errCode=FS.nodePermissions(path.node,"x");if(errCode)throw new FS.ErrnoError(errCode);FS.currentPath=path.path},createDefaultDirectories:()=>{FS.mkdir("/tmp"),FS.mkdir("/home"),FS.mkdir("/home/web_user")},createDefaultDevices:()=>{FS.mkdir("/dev"),FS.registerDevice(FS.makedev(1,3),{read:()=>0,write:(stream,buffer,offset,length,pos)=>length}),FS.mkdev("/dev/null",FS.makedev(1,3)),TTY.register(FS.makedev(5,0),TTY.default_tty_ops),TTY.register(FS.makedev(6,0),TTY.default_tty1_ops),FS.mkdev("/dev/tty",FS.makedev(5,0)),FS.mkdev("/dev/tty1",FS.makedev(6,0));var randomBuffer=new Uint8Array(1024),randomLeft=0,randomByte=()=>(0===randomLeft&&(randomLeft=randomFill(randomBuffer).byteLength),randomBuffer[--randomLeft]);FS.createDevice("/dev","random",randomByte),FS.createDevice("/dev","urandom",randomByte),FS.mkdir("/dev/shm"),FS.mkdir("/dev/shm/tmp")},createSpecialDirectories:()=>{FS.mkdir("/proc");var proc_self=FS.mkdir("/proc/self");FS.mkdir("/proc/self/fd"),FS.mount({mount:()=>{var node=FS.createNode(proc_self,"fd",16895,73);return node.node_ops={lookup:(parent,name)=>{var stream=FS.getStreamChecked(+name),name={parent:null,mount:{mountpoint:"fake"},node_ops:{readlink:()=>stream.path}};return name.parent=name}},node}},{},"/proc/self/fd")},createStandardStreams:()=>{Module.stdin?FS.createDevice("/dev","stdin",Module.stdin):FS.symlink("/dev/tty","/dev/stdin"),Module.stdout?FS.createDevice("/dev","stdout",null,Module.stdout):FS.symlink("/dev/tty","/dev/stdout"),Module.stderr?FS.createDevice("/dev","stderr",null,Module.stderr):FS.symlink("/dev/tty1","/dev/stderr");FS.open("/dev/stdin",0),FS.open("/dev/stdout",1),FS.open("/dev/stderr",1)},ensureErrnoError:()=>{FS.ErrnoError||(FS.ErrnoError=function(errno,node){this.name="ErrnoError",this.node=node,this.setErrno=function(errno){this.errno=errno},this.setErrno(errno),this.message="FS error"},FS.ErrnoError.prototype=new Error,FS.ErrnoError.prototype.constructor=FS.ErrnoError,[44].forEach(code=>{FS.genericErrors[code]=new FS.ErrnoError(code),FS.genericErrors[code].stack="<generic error, no stack>"}))},staticInit:()=>{FS.ensureErrnoError(),FS.nameTable=new Array(4096),FS.mount(MEMFS,{},"/"),FS.createDefaultDirectories(),FS.createDefaultDevices(),FS.createSpecialDirectories(),FS.filesystems={MEMFS:MEMFS}},init:(input,output,error)=>{FS.init.initialized=!0,FS.ensureErrnoError(),Module.stdin=input||Module.stdin,Module.stdout=output||Module.stdout,Module.stderr=error||Module.stderr,FS.createStandardStreams()},quit:()=>{FS.init.initialized=!1;for(var i=0;i<FS.streams.length;i++){var stream=FS.streams[i];stream&&FS.close(stream)}},findObject:(path,dontResolveLastLink)=>{path=FS.analyzePath(path,dontResolveLastLink);return path.exists?path.object:null},analyzePath:(path,dontResolveLastLink)=>{try{path=(lookup=FS.lookupPath(path,{follow:!dontResolveLastLink})).path}catch(e){}var ret={isRoot:!1,exists:!1,error:0,name:null,path:null,object:null,parentExists:!1,parentPath:null,parentObject:null};try{var lookup=FS.lookupPath(path,{parent:!0});ret.parentExists=!0,ret.parentPath=lookup.path,ret.parentObject=lookup.node,ret.name=PATH.basename(path),lookup=FS.lookupPath(path,{follow:!dontResolveLastLink}),ret.exists=!0,ret.path=lookup.path,ret.object=lookup.node,ret.name=lookup.node.name,ret.isRoot="/"===lookup.path}catch(e){ret.error=e.errno}return ret},createPath:(parent,path,canRead,canWrite)=>{parent="string"==typeof parent?parent:FS.getPath(parent);for(var parts=path.split("/").reverse();parts.length;){var part=parts.pop();if(part){var current=PATH.join2(parent,part);try{FS.mkdir(current)}catch(e){}parent=current}}return current},createFile:(parent,name,properties,canRead,canWrite)=>{parent=PATH.join2("string"==typeof parent?parent:FS.getPath(parent),name),name=FS_getMode(canRead,canWrite);return FS.create(parent,name)},createDataFile:(parent,name,data,canRead,canWrite,canOwn)=>{var path=name,name=(parent&&(parent="string"==typeof parent?parent:FS.getPath(parent),path=name?PATH.join2(parent,name):parent),FS_getMode(canRead,canWrite)),parent=FS.create(path,name);if(data){if("string"==typeof data){for(var arr=new Array(data.length),i=0,len=data.length;i<len;++i)arr[i]=data.charCodeAt(i);data=arr}FS.chmod(parent,146|name);canRead=FS.open(parent,577);FS.write(canRead,data,0,data.length,0,canOwn),FS.close(canRead),FS.chmod(parent,name)}return parent},createDevice:(parent,name,input,output)=>{var parent=PATH.join2("string"==typeof parent?parent:FS.getPath(parent),name),name=FS_getMode(!!input,!!output),dev=(FS.createDevice.major||(FS.createDevice.major=64),FS.makedev(FS.createDevice.major++,0));return FS.registerDevice(dev,{open:stream=>{stream.seekable=!1},close:stream=>{output&&output.buffer&&output.buffer.length&&output(10)},read:(stream,buffer,offset,length,pos)=>{for(var result,bytesRead=0,i=0;i<length;i++){try{result=input()}catch(e){throw new FS.ErrnoError(29)}if(void 0===result&&0===bytesRead)throw new FS.ErrnoError(6);if(null==result)break;bytesRead++,buffer[offset+i]=result}return bytesRead&&(stream.node.timestamp=Date.now()),bytesRead},write:(stream,buffer,offset,length,pos)=>{for(var i=0;i<length;i++)try{output(buffer[offset+i])}catch(e){throw new FS.ErrnoError(29)}return length&&(stream.node.timestamp=Date.now()),i}}),FS.mkdev(parent,name,dev)},forceLoadFile:obj=>{if(obj.isDevice||obj.isFolder||obj.link||obj.contents)return!0;if("undefined"!=typeof XMLHttpRequest)throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");if(!read_)throw new Error("Cannot load without read() or XMLHttpRequest.");try{obj.contents=intArrayFromString(read_(obj.url),!0),obj.usedBytes=obj.contents.length}catch(e){throw new FS.ErrnoError(29)}},createLazyFile:(parent,name,url,canRead,canWrite)=>{function LazyUint8Array(){this.lengthKnown=!1,this.chunks=[]}if(LazyUint8Array.prototype.get=function(idx){var chunkOffset;if(!(idx>this.length-1||idx<0))return chunkOffset=idx%this.chunkSize,idx=idx/this.chunkSize|0,this.getter(idx)[chunkOffset]},LazyUint8Array.prototype.setDataGetter=function(getter){this.getter=getter},LazyUint8Array.prototype.cacheLength=function(){var xhr=new XMLHttpRequest;if(xhr.open("HEAD",url,!1),xhr.send(null),!(200<=xhr.status&&xhr.status<300||304===xhr.status))throw new Error("Couldn't load "+url+". Status: "+xhr.status);var header,datalength=Number(xhr.getResponseHeader("Content-length")),hasByteServing=(header=xhr.getResponseHeader("Accept-Ranges"))&&"bytes"===header,xhr=(header=xhr.getResponseHeader("Content-Encoding"))&&"gzip"===header,chunkSize=1048576,lazyArray=(hasByteServing||(chunkSize=datalength),this);lazyArray.setDataGetter(chunkNum=>{var start=chunkNum*chunkSize,end=(chunkNum+1)*chunkSize-1,end=Math.min(end,datalength-1);if(void 0===lazyArray.chunks[chunkNum]&&(lazyArray.chunks[chunkNum]=((from,to)=>{if(to<from)throw new Error("invalid range ("+from+", "+to+") or no bytes requested!");if(datalength-1<to)throw new Error("only "+datalength+" bytes available! programmer error!");var xhr=new XMLHttpRequest;if(xhr.open("GET",url,!1),datalength!==chunkSize&&xhr.setRequestHeader("Range","bytes="+from+"-"+to),xhr.responseType="arraybuffer",xhr.overrideMimeType&&xhr.overrideMimeType("text/plain; charset=x-user-defined"),xhr.send(null),200<=xhr.status&&xhr.status<300||304===xhr.status)return void 0!==xhr.response?new Uint8Array(xhr.response||[]):intArrayFromString(xhr.responseText||"",!0);throw new Error("Couldn't load "+url+". Status: "+xhr.status)})(start,end)),void 0===lazyArray.chunks[chunkNum])throw new Error("doXHR failed!");return lazyArray.chunks[chunkNum]}),!xhr&&datalength||(chunkSize=datalength=1,datalength=this.getter(0).length,chunkSize=datalength,out("LazyFiles on gzip forces download of the whole file when length is accessed")),this._length=datalength,this._chunkSize=chunkSize,this.lengthKnown=!0},"undefined"!=typeof XMLHttpRequest){if(!ENVIRONMENT_IS_WORKER)throw"Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc";var lazyArray=new LazyUint8Array,lazyArray=(Object.defineProperties(lazyArray,{length:{get:function(){return this.lengthKnown||this.cacheLength(),this._length}},chunkSize:{get:function(){return this.lengthKnown||this.cacheLength(),this._chunkSize}}}),{isDevice:!1,contents:lazyArray})}else lazyArray={isDevice:!1,url:url};var node=FS.createFile(parent,name,lazyArray,canRead,canWrite),stream_ops=(lazyArray.contents?node.contents=lazyArray.contents:lazyArray.url&&(node.contents=null,node.url=lazyArray.url),Object.defineProperties(node,{usedBytes:{get:function(){return this.contents.length}}}),{});function writeChunks(stream,buffer,offset,length,position){var contents=stream.node.contents;if(position>=contents.length)return 0;var size=Math.min(contents.length-position,length);if(contents.slice)for(var i=0;i<size;i++)buffer[offset+i]=contents[position+i];else for(i=0;i<size;i++)buffer[offset+i]=contents.get(position+i);return size}return Object.keys(node.stream_ops).forEach(key=>{var fn=node.stream_ops[key];stream_ops[key]=function(){return FS.forceLoadFile(node),fn.apply(null,arguments)}}),stream_ops.read=(stream,buffer,offset,length,position)=>(FS.forceLoadFile(node),writeChunks(stream,buffer,offset,length,position)),stream_ops.mmap=(stream,length,position,prot,flags)=>{FS.forceLoadFile(node);var ptr=mmapAlloc(length);if(ptr)return writeChunks(stream,HEAP8,ptr,length,position),{ptr:ptr,allocated:!0};throw new FS.ErrnoError(48)},node.stream_ops=stream_ops,node}},SYSCALLS={DEFAULT_POLLMASK:5,calculateAt:function(dirfd,path,allowEmpty){if(PATH.isAbs(path))return path;if(dirfd=-100===dirfd?FS.cwd():SYSCALLS.getStreamFromFD(dirfd).path,0!=path.length)return PATH.join2(dirfd,path);if(allowEmpty)return dirfd;throw new FS.ErrnoError(44)},doStat:function(func,path,buf){try{var stat=func(path)}catch(e){if(e&&e.node&&PATH.normalize(path)!==PATH.normalize(FS.getPath(e.node)))return-54;throw e}HEAP32[buf>>>2]=stat.dev,HEAP32[buf+4>>>2]=stat.mode,HEAPU32[buf+8>>>2]=stat.nlink,HEAP32[buf+12>>>2]=stat.uid,HEAP32[buf+16>>>2]=stat.gid,HEAP32[buf+20>>>2]=stat.rdev,tempI64=[stat.size>>>0,(tempDouble=stat.size,1<=+Math.abs(tempDouble)?0<tempDouble?+Math.floor(tempDouble/4294967296)>>>0:~~+Math.ceil((tempDouble-(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[buf+24>>>2]=tempI64[0],HEAP32[buf+28>>>2]=tempI64[1],HEAP32[buf+32>>>2]=4096,HEAP32[buf+36>>>2]=stat.blocks;var func=stat.atime.getTime(),path=stat.mtime.getTime(),ctime=stat.ctime.getTime();return tempI64=[Math.floor(func/1e3)>>>0,(tempDouble=Math.floor(func/1e3),1<=+Math.abs(tempDouble)?0<tempDouble?+Math.floor(tempDouble/4294967296)>>>0:~~+Math.ceil((tempDouble-(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[buf+40>>>2]=tempI64[0],HEAP32[buf+44>>>2]=tempI64[1],HEAPU32[buf+48>>>2]=func%1e3*1e3,tempI64=[Math.floor(path/1e3)>>>0,(tempDouble=Math.floor(path/1e3),1<=+Math.abs(tempDouble)?0<tempDouble?+Math.floor(tempDouble/4294967296)>>>0:~~+Math.ceil((tempDouble-(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[buf+56>>>2]=tempI64[0],HEAP32[buf+60>>>2]=tempI64[1],HEAPU32[buf+64>>>2]=path%1e3*1e3,tempI64=[Math.floor(ctime/1e3)>>>0,(tempDouble=Math.floor(ctime/1e3),1<=+Math.abs(tempDouble)?0<tempDouble?+Math.floor(tempDouble/4294967296)>>>0:~~+Math.ceil((tempDouble-(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[buf+72>>>2]=tempI64[0],HEAP32[buf+76>>>2]=tempI64[1],HEAPU32[buf+80>>>2]=ctime%1e3*1e3,tempI64=[stat.ino>>>0,(tempDouble=stat.ino,1<=+Math.abs(tempDouble)?0<tempDouble?+Math.floor(tempDouble/4294967296)>>>0:~~+Math.ceil((tempDouble-(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[buf+88>>>2]=tempI64[0],HEAP32[buf+92>>>2]=tempI64[1],0},doMsync:function(addr,stream,len,flags,offset){if(!FS.isFile(stream.node.mode))throw new FS.ErrnoError(43);if(2&flags)return 0;addr=HEAPU8.slice(addr,addr+len);FS.msync(stream,addr,offset,len,flags)},varargs:void 0,get(){return SYSCALLS.varargs+=4,HEAP32[SYSCALLS.varargs-4>>>2]},getStr(ptr){return UTF8ToString(ptr)},getStreamFromFD:function(fd){return FS.getStreamChecked(fd)}};function _environ_get(__environ,environ_buf){__environ>>>=0,environ_buf>>>=0;var bufSize=0;return getEnvStrings().forEach(function(string,i){var ptr=environ_buf+bufSize;HEAPU32[__environ+4*i>>>2]=ptr,stringToAscii(string,ptr),bufSize+=string.length+1}),0}function _environ_sizes_get(penviron_count,penviron_buf_size){penviron_count>>>=0,penviron_buf_size>>>=0;var strings=getEnvStrings(),bufSize=(HEAPU32[penviron_count>>>2]=strings.length,0);return strings.forEach(function(string){bufSize+=string.length+1}),HEAPU32[penviron_buf_size>>>2]=bufSize,0}function _fd_close(fd){try{var stream=SYSCALLS.getStreamFromFD(fd);return FS.close(stream),0}catch(e){if(void 0===FS||"ErrnoError"!==e.name)throw e;return e.errno}}var doReadv=(stream,iov,iovcnt,offset)=>{for(var ret=0,i=0;i<iovcnt;i++){var ptr=HEAPU32[iov>>>2],len=HEAPU32[iov+4>>>2],ptr=(iov+=8,FS.read(stream,HEAP8,ptr,len,offset));if(ptr<0)return-1;if(ret+=ptr,ptr<len)break;void 0!==offset&&(offset+=ptr)}return ret};function _fd_read(fd,iov,iovcnt,pnum){iov>>>=0,iovcnt>>>=0,pnum>>>=0;try{var stream=SYSCALLS.getStreamFromFD(fd),num=doReadv(stream,iov,iovcnt);return HEAPU32[pnum>>>2]=num,0}catch(e){if(void 0===FS||"ErrnoError"!==e.name)throw e;return e.errno}}function _fd_seek(fd,offset_low,offset_high,whence,newOffset){var stream,offset_low=convertI32PairToI53Checked(offset_low,offset_high);newOffset>>>=0;try{return isNaN(offset_low)?61:(stream=SYSCALLS.getStreamFromFD(fd),FS.llseek(stream,offset_low,whence),tempI64=[stream.position>>>0,(tempDouble=stream.position,1<=+Math.abs(tempDouble)?0<tempDouble?+Math.floor(tempDouble/4294967296)>>>0:~~+Math.ceil((tempDouble-(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[newOffset>>>2]=tempI64[0],HEAP32[newOffset+4>>>2]=tempI64[1],stream.getdents&&0===offset_low&&0===whence&&(stream.getdents=null),0)}catch(e){if(void 0===FS||"ErrnoError"!==e.name)throw e;return e.errno}}var doWritev=(stream,iov,iovcnt,offset)=>{for(var ret=0,i=0;i<iovcnt;i++){var ptr=HEAPU32[iov>>>2],len=HEAPU32[iov+4>>>2],ptr=(iov+=8,FS.write(stream,HEAP8,ptr,len,offset));if(ptr<0)return-1;ret+=ptr,void 0!==offset&&(offset+=ptr)}return ret};function _fd_write(fd,iov,iovcnt,pnum){iov>>>=0,iovcnt>>>=0,pnum>>>=0;try{var stream=SYSCALLS.getStreamFromFD(fd),num=doWritev(stream,iov,iovcnt);return HEAPU32[pnum>>>2]=num,0}catch(e){if(void 0===FS||"ErrnoError"!==e.name)throw e;return e.errno}}var arraySum=(array,index)=>{for(var sum=0,i=0;i<=index;sum+=array[i++]);return sum},MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31],MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31],addDays=(date,days)=>{for(var newDate=new Date(date.getTime());0<days;){var leap=isLeapYear(newDate.getFullYear()),currentMonth=newDate.getMonth(),leap=(leap?MONTH_DAYS_LEAP:MONTH_DAYS_REGULAR)[currentMonth];if(!(days>leap-newDate.getDate()))return newDate.setDate(newDate.getDate()+days),newDate;days-=leap-newDate.getDate()+1,newDate.setDate(1),currentMonth<11?newDate.setMonth(currentMonth+1):(newDate.setMonth(0),newDate.setFullYear(newDate.getFullYear()+1))}return newDate},writeArrayToMemory=(array,buffer)=>{HEAP8.set(array,buffer>>>0)};function _strftime(s,maxsize,format,tm){s>>>=0,maxsize>>>=0,format>>>=0;var tm_zone=HEAP32[(tm>>>=0)+40>>>2],date={tm_sec:HEAP32[tm>>>2],tm_min:HEAP32[tm+4>>>2],tm_hour:HEAP32[tm+8>>>2],tm_mday:HEAP32[tm+12>>>2],tm_mon:HEAP32[tm+16>>>2],tm_year:HEAP32[tm+20>>>2],tm_wday:HEAP32[tm+24>>>2],tm_yday:HEAP32[tm+28>>>2],tm_isdst:HEAP32[tm+32>>>2],tm_gmtoff:HEAP32[tm+36>>>2],tm_zone:tm_zone?UTF8ToString(tm_zone):""},pattern=UTF8ToString(format),EXPANSION_RULES_1={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(rule in EXPANSION_RULES_1)pattern=pattern.replace(new RegExp(rule,"g"),EXPANSION_RULES_1[rule]);var WEEKDAYS=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],MONTHS=["January","February","March","April","May","June","July","August","September","October","November","December"];function leadingSomething(value,digits,character){for(var str="number"==typeof value?value.toString():value||"";str.length<digits;)str=character[0]+str;return str}function leadingNulls(value,digits){return leadingSomething(value,digits,"0")}function compareByDay(date1,date2){function sgn(value){return value<0?-1:0<value?1:0}var compare;return compare=0===(compare=sgn(date1.getFullYear()-date2.getFullYear()))&&0===(compare=sgn(date1.getMonth()-date2.getMonth()))?sgn(date1.getDate()-date2.getDate()):compare}function getFirstWeekStartDate(janFourth){switch(janFourth.getDay()){case 0:return new Date(janFourth.getFullYear()-1,11,29);case 1:return janFourth;case 2:return new Date(janFourth.getFullYear(),0,3);case 3:return new Date(janFourth.getFullYear(),0,2);case 4:return new Date(janFourth.getFullYear(),0,1);case 5:return new Date(janFourth.getFullYear()-1,11,31);case 6:return new Date(janFourth.getFullYear()-1,11,30)}}function getWeekBasedYear(date){var date=addDays(new Date(date.tm_year+1900,0,1),date.tm_yday),janFourthThisYear=new Date(date.getFullYear(),0,4),janFourthNextYear=new Date(date.getFullYear()+1,0,4),janFourthThisYear=getFirstWeekStartDate(janFourthThisYear),janFourthNextYear=getFirstWeekStartDate(janFourthNextYear);return compareByDay(janFourthThisYear,date)<=0?compareByDay(janFourthNextYear,date)<=0?date.getFullYear()+1:date.getFullYear():date.getFullYear()-1}var rule,EXPANSION_RULES_2={"%a":date=>WEEKDAYS[date.tm_wday].substring(0,3),"%A":date=>WEEKDAYS[date.tm_wday],"%b":date=>MONTHS[date.tm_mon].substring(0,3),"%B":date=>MONTHS[date.tm_mon],"%C":date=>leadingNulls((date.tm_year+1900)/100|0,2),"%d":date=>leadingNulls(date.tm_mday,2),"%e":date=>leadingSomething(date.tm_mday,2," "),"%g":date=>getWeekBasedYear(date).toString().substring(2),"%G":date=>getWeekBasedYear(date),"%H":date=>leadingNulls(date.tm_hour,2),"%I":date=>{date=date.tm_hour;return 0==date?date=12:12<date&&(date-=12),leadingNulls(date,2)},"%j":date=>leadingNulls(date.tm_mday+arraySum(isLeapYear(date.tm_year+1900)?MONTH_DAYS_LEAP:MONTH_DAYS_REGULAR,date.tm_mon-1),3),"%m":date=>leadingNulls(date.tm_mon+1,2),"%M":date=>leadingNulls(date.tm_min,2),"%n":()=>"\n","%p":date=>0<=date.tm_hour&&date.tm_hour<12?"AM":"PM","%S":date=>leadingNulls(date.tm_sec,2),"%t":()=>"\t","%u":date=>date.tm_wday||7,"%U":date=>{date=date.tm_yday+7-date.tm_wday;return leadingNulls(Math.floor(date/7),2)},"%V":date=>{var jan1,val=Math.floor((date.tm_yday+7-(date.tm_wday+6)%7)/7);return(date.tm_wday+371-date.tm_yday-2)%7<=2&&val++,val?53!=val||4==(jan1=(date.tm_wday+371-date.tm_yday)%7)||3==jan1&&isLeapYear(date.tm_year)||(val=1):(val=52,(4==(jan1=(date.tm_wday+7-date.tm_yday-1)%7)||5==jan1&&isLeapYear(date.tm_year%400-1))&&val++),leadingNulls(val,2)},"%w":date=>date.tm_wday,"%W":date=>{date=date.tm_yday+7-(date.tm_wday+6)%7;return leadingNulls(Math.floor(date/7),2)},"%y":date=>(date.tm_year+1900).toString().substring(2),"%Y":date=>date.tm_year+1900,"%z":date=>{var ahead=0<=(date=date.tm_gmtoff),date=Math.abs(date)/60;return(ahead?"+":"-")+String("0000"+(date/60*100+date%60)).slice(-4)},"%Z":date=>date.tm_zone,"%%":()=>"%"},pattern=pattern.replace(/%%/g,"\0\0");for(rule in EXPANSION_RULES_2)pattern.includes(rule)&&(pattern=pattern.replace(new RegExp(rule,"g"),EXPANSION_RULES_2[rule](date)));tm=intArrayFromString(pattern=pattern.replace(/\0\0/g,"%"),!1);return tm.length>maxsize?0:(writeArrayToMemory(tm,s),tm.length-1)}function _strftime_l(s,maxsize,format,tm,loc){return _strftime(s>>>=0,maxsize>>>=0,format>>>=0,tm>>>=0)}function uleb128Encode(n,target){n<128?target.push(n):target.push(n%128|128,n>>7)}function sigToWasmTypes(sig){for(var typeNames={i:"i32",j:"i64",f:"f32",d:"f64",p:"i32"},type={parameters:[],results:"v"==sig[0]?[]:[typeNames[sig[0]]]},i=1;i<sig.length;++i)type.parameters.push(typeNames[sig[i]]);return type}function generateFuncType(sig,target){var sigRet=sig.slice(0,1),sigParam=sig.slice(1),typeCodes={i:127,p:127,j:126,f:125,d:124};target.push(96),uleb128Encode(sigParam.length,target);for(var i=0;i<sigParam.length;++i)target.push(typeCodes[sigParam[i]]);"v"==sigRet?target.push(0):target.push(1,typeCodes[sigRet])}function convertJsFunctionToWasm(func,sig){var bytes;return"function"==typeof WebAssembly.Function?new WebAssembly.Function(sigToWasmTypes(sig),func):(generateFuncType(sig,sig=[1]),uleb128Encode(sig.length,bytes=[0,97,115,109,1,0,0,0,1]),bytes.push.apply(bytes,sig),bytes.push(2,7,1,1,101,1,102,0,0,7,5,1,1,102,0,0),sig=new WebAssembly.Module(new Uint8Array(bytes)),new WebAssembly.Instance(sig,{e:{f:func}}).exports.f)}function updateTableMap(offset,count){if(functionsInTableMap)for(var i=offset;i<offset+count;i++){var item=getWasmTableEntry(i);item&&functionsInTableMap.set(item,i)}}var functionsInTableMap=void 0;function getFunctionAddress(func){return functionsInTableMap||(functionsInTableMap=new WeakMap,updateTableMap(0,wasmTable.length)),functionsInTableMap.get(func)||0}var freeTableIndexes=[];function getEmptyTableSlot(){if(freeTableIndexes.length)return freeTableIndexes.pop();try{wasmTable.grow(1)}catch(err){if(err instanceof RangeError)throw"Unable to grow wasm table. Set ALLOW_TABLE_GROWTH.";throw err}return wasmTable.length-1}var setWasmTableEntry=(idx,func)=>{wasmTable.set(idx,func),wasmTableMirror[idx]=wasmTable.get(idx)};function addFunction(func,sig){var rtn=getFunctionAddress(func);if(rtn)return rtn;rtn=getEmptyTableSlot();try{setWasmTableEntry(rtn,func)}catch(err){if(!(err instanceof TypeError))throw err;sig=convertJsFunctionToWasm(func,sig);setWasmTableEntry(rtn,sig)}return functionsInTableMap.set(func,rtn),rtn}function removeFunction(index){functionsInTableMap.delete(getWasmTableEntry(index)),freeTableIndexes.push(index)}function getCFunc(ident){return Module["_"+ident]}var stringToUTF8OnStack=str=>{var size=lengthBytesUTF8(str)+1,ret=stackAlloc(size);return stringToUTF8(str,ret,size),ret},ccall=function(ident,returnType,argTypes,args,opts){var toC={string:str=>{var ret=0;return ret=null!=str&&0!==str?stringToUTF8OnStack(str):ret},array:arr=>{var ret=stackAlloc(arr.length);return writeArrayToMemory(arr,ret),ret}};var ident=getCFunc(ident),cArgs=[],stack=0;if(args)for(var i=0;i<args.length;i++){var converter=toC[argTypes[i]];converter?(0===stack&&(stack=stackSave()),cArgs[i]=converter(args[i])):cArgs[i]=args[i]}return function(ret){return 0!==stack&&stackRestore(stack),function(ret){return"string"===returnType?UTF8ToString(ret):"boolean"===returnType?Boolean(ret):ret}(ret)}(ident.apply(null,cArgs))},cwrap=function(ident,returnType,argTypes,opts){var numericArgs=!argTypes||argTypes.every(type=>"number"===type||"boolean"===type);return"string"!==returnType&&numericArgs&&!opts?getCFunc(ident):function(){return ccall(ident,returnType,argTypes,arguments,opts)}},InternalError=Module.InternalError=class InternalError extends Error{constructor(message){super(message),this.name="InternalError"}},FSNode=(embind_init_charCodes(),BindingError=Module.BindingError=class BindingError extends Error{constructor(message){super(message),this.name="BindingError"}},init_ClassHandle(),init_embind(),init_RegisteredPointer(),UnboundTypeError=Module.UnboundTypeError=extendError(Error,"UnboundTypeError"),handleAllocatorInit(),init_emval(),function(parent,name,mode,rdev){this.parent=parent=parent||this,this.mount=parent.mount,this.mounted=null,this.id=FS.nextInode++,this.name=name,this.mode=mode,this.node_ops={},this.stream_ops={},this.rdev=rdev}),readMode=365,writeMode=146,wasmImports=(Object.defineProperties(FSNode.prototype,{read:{get:function(){return(this.mode&readMode)===readMode},set:function(val){val?this.mode|=readMode:this.mode&=~readMode}},write:{get:function(){return(this.mode&writeMode)===writeMode},set:function(val){val?this.mode|=writeMode:this.mode&=~writeMode}},isFolder:{get:function(){return FS.isDir(this.mode)}},isDevice:{get:function(){return FS.isChrdev(this.mode)}}}),FS.FSNode=FSNode,FS.createPreloadedFile=FS_createPreloadedFile,FS.staticInit(),{b:___assert_fail,e:___cxa_throw,n:__embind_finalize_value_object,B:__embind_register_bigint,M:__embind_register_bool,p:__embind_register_class,o:__embind_register_class_constructor,f:__embind_register_class_function,L:__embind_register_emval,y:__embind_register_float,c:__embind_register_function,m:__embind_register_integer,j:__embind_register_memory_view,x:__embind_register_std_string,t:__embind_register_std_wstring,l:__embind_register_value_object,d:__embind_register_value_object_field,N:__embind_register_void,i:__emval_decref,k:__emval_incref,r:__emval_new_cstring,u:__emval_new_object,q:__emval_set_property,g:__emval_take_value,A:__localtime_js,F:__tzset_js,s:_abort,w:_emscripten_date_now,K:_emscripten_memcpy_big,E:_emscripten_resize_heap,h:_emscripten_run_script,I:_environ_get,J:_environ_sizes_get,H:_fd_close,D:_fd_read,z:_fd_seek,v:_fd_write,a:wasmMemory,G:_strftime,C:_strftime_l}),asm=createWasm(),___wasm_call_ctors=asm.O,_backtest=Module._backtest=asm.P,_free=Module._free=asm.Q,_malloc=Module._malloc=asm.R,___errno_location=asm.__errno_location,_TA_ForEachFunc=Module._TA_ForEachFunc=asm.T,_TA_GetFuncHandle=Module._TA_GetFuncHandle=asm.U,_TA_GetFuncInfo=Module._TA_GetFuncInfo=asm.V,_TA_GetInputParameterInfo=Module._TA_GetInputParameterInfo=asm.W,_TA_GetOptInputParameterInfo=Module._TA_GetOptInputParameterInfo=asm.X,_TA_GetOutputParameterInfo=Module._TA_GetOutputParameterInfo=asm.Y,_TA_ParamHolderAlloc=Module._TA_ParamHolderAlloc=asm.Z,_TA_ParamHolderFree=Module._TA_ParamHolderFree=asm._,_TA_SetInputParamIntegerPtr=Module._TA_SetInputParamIntegerPtr=asm.$,_TA_SetInputParamRealPtr=Module._TA_SetInputParamRealPtr=asm.aa,_TA_SetInputParamPricePtr=Module._TA_SetInputParamPricePtr=asm.ba,_TA_SetOptInputParamInteger=Module._TA_SetOptInputParamInteger=asm.ca,_TA_SetOptInputParamReal=Module._TA_SetOptInputParamReal=asm.da,_TA_SetOutputParamIntegerPtr=Module._TA_SetOutputParamIntegerPtr=asm.ea,_TA_SetOutputParamRealPtr=Module._TA_SetOutputParamRealPtr=asm.fa,_TA_CallFunc=Module._TA_CallFunc=asm.ga,_TA_Initialize=Module._TA_Initialize=asm.ha,_TA_Shutdown=Module._TA_Shutdown=asm.ia,_TA_SetRetCodeInfo=Module._TA_SetRetCodeInfo=asm.ja,_TA_GetVersionString=Module._TA_GetVersionString=asm.ka,___getTypeName=asm.la,__embind_initialize_bindings=Module.__embind_initialize_bindings=asm.ma,stackSave=asm.na,stackRestore=asm.oa,stackAlloc=asm.pa,___cxa_is_pointer_type=asm.qa,dynCall_viijii=Module.dynCall_viijii=asm.ra,dynCall_jiji=Module.dynCall_jiji=asm.sa,dynCall_iiiiij=Module.dynCall_iiiiij=asm.ta,dynCall_iiiiijj=Module.dynCall_iiiiijj=asm.ua,dynCall_iiiiiijj=Module.dynCall_iiiiiijj=asm.va,calledRun;function applySignatureConversions(exports){var makeWrapper_pp=f=>a0=>f(a0)>>>0,makeWrapper_p=f=>()=>f()>>>0;return(exports=Object.assign({},exports)).malloc=makeWrapper_pp(exports.malloc),exports.__errno_location=makeWrapper_p(exports.__errno_location),exports.__getTypeName=makeWrapper_pp(exports.__getTypeName),exports.stackSave=makeWrapper_p(exports.stackSave),exports.stackAlloc=makeWrapper_pp(exports.stackAlloc),exports}function run(){function doRun(){calledRun||(calledRun=!0,Module.calledRun=!0,ABORT)||(initRuntime(),readyPromiseResolve(Module),Module.onRuntimeInitialized&&Module.onRuntimeInitialized(),postRun())}0<runDependencies||(preRun(),0<runDependencies)||(Module.setStatus?(Module.setStatus("Running..."),setTimeout(function(){setTimeout(function(){Module.setStatus("")},1),doRun()},1)):doRun())}if(Module.ccall=ccall,Module.cwrap=cwrap,Module.addFunction=addFunction,Module.removeFunction=removeFunction,dependenciesFulfilled=function runCaller(){calledRun||run(),calledRun||(dependenciesFulfilled=runCaller)},Module.preInit)for("function"==typeof Module.preInit&&(Module.preInit=[Module.preInit]);0<Module.preInit.length;)Module.preInit.pop()();function evalScope(locals,code){with(locals)eval(code)}function utf8_encode(s){if("undefined"!=typeof TextEncoder)return(new TextEncoder).encode(s);for(var pos=0,len=s.length,at=0,tlen=Math.max(32,len+(len>>1)+7),target=new Uint8Array(tlen>>3<<3);pos<len;){var extra,value=s.charCodeAt(pos++);if(55296<=value&&value<=56319)if(pos<len&&56320==(64512&(extra=s.charCodeAt(pos)))&&(++pos,value=((1023&value)<<10)+(1023&extra)+65536),55296<=value&&value<=56319)continue;if(at+4>target.length&&(tlen=(tlen=(tlen+=8)*(1+pos/s.length*2))>>3<<3,(extra=new Uint8Array(tlen)).set(target),target=extra),0==(4294967168&value))target[at++]=value;else{if(0==(4294965248&value))target[at++]=value>>6&31|192;else{if(0==(4294901760&value))target[at++]=value>>12&15|224;else{if(0!=(4292870144&value))continue;target[at++]=value>>18&7|240,target[at++]=value>>12&63|128}target[at++]=value>>6&63|128}target[at++]=63&value|128}}return target.slice(0,at)}function valuesToString(values,pos,ch){void 0===ch&&(ch=" ");for(var result="",i=pos=void 0===pos?0:pos;i<values.length;i++)pos<i&&(result+=ch),null==values[i]?result+="null":"string"==typeof values[i]?result+=values[i]:"number"==typeof values[i]||"function"==typeof values[i].getFullYear?result+=values[i].toString():void 0!==values[i].cols&&"string"==typeof values[i].type&&"table"==values[i].type?result+="`"+JSON.stringify(values[i])+"`":result+=JSON.stringify(values[i]);return result=0<result.length?utf8_encode(result):result}function Vector2Array(obj){for(var arr=[],arrSize=obj.size(),i=0;i<arrSize;i++)arr.push(obj.get(i));return arr}function toNonExponential(value){var sign,e;return"number"!=typeof value&&(value=parseFloat(value),isNaN(value))?"":(value<0?(sign="-",value=Math.abs(value)):sign="",value<1?(e=parseInt(value.toString().split("e-")[1]))&&(value*=Math.pow(10,e-1),value="0."+new Array(e).join("0")+value.toString().substring(2)):(e=parseInt(value.toString().split("e+")[1]))&&(value=(value/=Math.pow(10,e))+new Array(e+1).join("0")),sign+value)}function initThread(env){function Thread(func,args){this.tid=void 0===func?0:nextId++,this.terminated=!1,this.ts=0,this.te=0,this.ret=null,this.funcs=[],Array.isArray(func)?(this.funcs.push(func),this.funcs=this.funcs.concat(args)):this.funcs.push([func].concat(args)),this.data={},this.messageQueue=[],this.run=function(){pending++;var prevThreadId=currentThreadId,ctx=(currentThreadId=this.tid,this.ts=env.UnixNano()/1e6,{});for(let i=this.funcs.length-1;0<=i;i--){"string"==typeof this.funcs[i][0]&&(this.funcs[i][0]=new Function(this.funcs[i][0]));var ret=this.funcs[i][0].apply(ctx,this.funcs[i].slice(1));0==i&&(this.ret=ret)}this.te=env.UnixNano()/1e6,totalElapsed+=this.te-this.ts,this.terminated=!1,currentThreadId=prevThreadId,pending--},this.id=function(){return this.tid},this.name=function(){return 0==this.tid?"MainThread":"Thread-"+this.tid},this.terminate=function(){this.terminated=!0},this.release=function(){delete threads[this.tid]},this.postMessage=function(msg){this.messageQueue.push(msg)},this.peekMessage=function(){return this.messageQueue.shift()||null},this.join=function(timeout){var now=env.UnixNano()/1e6-totalElapsed;if("number"==typeof timeout)if(0<timeout){if(now+timeout<this.te)return void env.Sleep(timeout);env.Sleep(this.te-now)}else if(timeout<0&&now<this.te)return;return this.release(),{id:this.tid,terminated:this.terminated,elapsed:this.te-this.ts,ret:this.ret}},this.eventLoop=function(){env.LogError("sandbox not support eventLoop")}}let threads={},nextId=1,pending=0,totalElapsed=0,currentThreadId=0;function run_forever(){for(;;)env.Sleep(10)}threads[0]=new Thread,env.threading={Thread:function(f){var thread=new Thread(f,1<arguments.length?Array.prototype.slice.call(arguments,1):[]);return(threads[thread.tid]=thread).run(),thread},getThread:function(tid){return threads[tid]},mainThread:function(){return threads[0]},currentThread:function(){return threads[currentThreadId]},pending:function(){return pending},Lock:function(){let locked=!1;return{acquire:function(){locked&&run_forever(),locked=!0},release:function(){locked=!1}}},Event:function(){return{set:function(){return!0},clear:function(){return!0},isSet:function(){return!1},wait:function(timeout){return!0}}},Condition:function(){let locked=!1;return{wait:function(){return!0},notify:function(){return!0},notifyAll:function(){return!0},acquire:function(){locked&&run_forever(),locked=!0},release:function(){locked=!1}}},Dict:function(){let dict={};return{get:function(key){return dict[key]},set:function(key,value){dict[key]=value}}}},env.__Thread=function(f){var thread=new Thread(f,1<arguments.length?Array.prototype.slice.call(arguments,1):[]);return(threads[thread.tid]=thread).run(),thread.tid},env.__threadPeekMessage=function(timeout=0){var currentThreadId=nextId-1,currentThreadId=threads[currentThreadId];return currentThreadId&&0!=currentThreadId.messageQueue.length?currentThreadId.receiveMessage():null},env.__threadPostMessage=function(threadId,msg){threadId=threads[threadId];threadId&&threadId.sendMessage(msg)},env.__threadJoin=function(threadId,timeout){var thread=threads[threadId];if(thread)return thread.join(timeout);throw"thread #"+threadId.toString()+" not found"},env.__threadTerminate=function(threadId){threadId=threads[threadId];threadId&&(threadId.terminate(),threadId.release())},env.__threadGetData=function(threadId,key){threadId=threads[threadId];return threadId&&threadId.data[key]||null},env.__threadSetData=function(threadId,key,value){threadId=threads[threadId];threadId&&(threadId.data[key]=value)},env.__threadId=function(){return nextId-1},env.__threadPending=function(running=0){return 0}}return run(),Module.talib=function(){function ReadDouble(p,idx){return getValue(p+4*idx,"double")}function ReadInt(p,idx){return getValue(p+4*idx,"i32")}function ReadStr(p,idx){return UTF8ToString(getValue(p+4*idx,"i32"))}function GetArr(arr,attr,isInteger){var ret=[],tmp=0;isInteger=void 0!==isInteger&&isInteger;for(var i=0;i<arr.length;i++)"number"!=typeof(tmp=arr[i])&&(tmp=arr[i][attr]),isInteger?ret.push(parseInt(tmp)):ret.push(tmp);var data=isInteger?new Uint8Array(new Int32Array(ret).buffer):new Uint8Array(new Float64Array(ret).buffer),ret=Module._malloc(data.length);return writeArrayToMemory(data,ret),ret}Module._TA_Initialize();function throwError(errCode){var retCodeInfo;if(0!==errCode)throw retCodeInfo=Module._malloc(8),TA_SetRetCodeInfo(errCode,retCodeInfo),errCode=ReadStr(retCodeInfo,0)+": "+ReadStr(retCodeInfo,1),Module._free(retCodeInfo),current_func+": "+errCode}var obj={help:function(n){return obj["h_"+n]()},list:[]},TA_GetInputParameterInfo=Module._TA_GetInputParameterInfo,TA_GetOptInputParameterInfo=Module._TA_GetOptInputParameterInfo,TA_GetOutputParameterInfo=Module._TA_GetOutputParameterInfo,TA_ParamHolderAlloc=Module._TA_ParamHolderAlloc,TA_ParamHolderFree=Module._TA_ParamHolderFree,TA_SetInputParamRealPtr=Module._TA_SetInputParamRealPtr,TA_SetInputParamIntegerPtr=Module._TA_SetInputParamIntegerPtr,TA_SetInputParamPricePtr=Module._TA_SetInputParamPricePtr,TA_SetOptInputParamReal=Module._TA_SetOptInputParamReal,TA_SetOptInputParamInteger=Module._TA_SetOptInputParamInteger,TA_SetOutputParamIntegerPtr=Module._TA_SetOutputParamIntegerPtr,TA_SetOutputParamRealPtr=Module._TA_SetOutputParamRealPtr,TA_CallFunc=Module._TA_CallFunc,TA_SetRetCodeInfo=Module._TA_SetRetCodeInfo,current_func="obj",funcCallback=addFunction(function(ptr){var name=ReadStr(ptr,0),group=ReadStr(ptr,1),hint=ReadStr(ptr,2),nbInput=(ReadInt(ptr,4),ReadInt(ptr,5));if(!(1<nbInput&&"OBV"!==name)){for(var nbOptInput=ReadInt(ptr,6),nbOutput=ReadInt(ptr,7),funcHandle=ReadInt(ptr,8),pInfo=Module._malloc(4),inputs=[],optInputs=[],outputs=[],i=0;i<nbInput;i++){throwError(TA_GetInputParameterInfo(funcHandle,i,pInfo));ptr=ReadInt(pInfo,0);inputs.push({type:ReadInt(ptr,0),paramName:ReadStr(ptr,1),flags:ReadInt(ptr,2)})}for(i=0;i<nbOptInput;i++){throwError(TA_GetOptInputParameterInfo(funcHandle,i,pInfo));ptr=ReadInt(pInfo,0);optInputs.push({type:ReadInt(ptr,0),paramName:ReadStr(ptr,1),flags:ReadInt(ptr,2),displayName:ReadStr(ptr,3),defaultValue:ReadDouble(ptr,6),hint:ReadStr(ptr,8)})}for(i=0;i<nbOutput;i++){throwError(TA_GetOutputParameterInfo(funcHandle,i,pInfo));ptr=ReadInt(pInfo,0);outputs.push({type:ReadInt(ptr,0),paramName:ReadStr(ptr,1),flags:ReadInt(ptr,2)})}Module._free(pInfo),obj["h_"+name]=function(){for(var args=[],i=0;i<inputs.length;i++){var type=inputs[i].type,flags=inputs[i].flags,paramName=inputs[i].paramName;1===type?args.push(["Array[Real]",paramName]):2===type?args.push(["Array[Integer]",paramName]):0===type&&(type=[],1&flags&&type.push("Open"),2&flags&&type.push("High"),4&flags&&type.push("Low"),8&flags&&type.push("Close"),16&flags&&type.push("Volume"),32&flags&&type.push("OpenInterest"),64&flags&&type.push("Time"),args.push(["Records["+type.join(",")+"]",paramName]))}for(i=0;i<optInputs.length;i++){var optType="NA";0===optInputs[i].type?optType="RealRange":1===optInputs[i].type?optType="RealList":2===optInputs[i].type?optType="IntegerRange":3===optInputs[i].type&&(optType="IntegerList"),args.push([optType,optInputs[i].paramName,optInputs[i].defaultValue])}for(var rets=[],i=0;i<outputs.length;i++){var outType="Real";1===outputs[i].type&&(outType="Integer"),rets.push([outType,outputs[i].paramName])}return[name,args,rets,hint]},obj.list.push(name);for(var needArg=0,i=0;i<inputs.length;i++){var type=inputs[i].type,flags=inputs[i].flags;(1===type||2===type||0===type&&(1&flags&&needArg++,2&flags&&needArg++,4&flags&&needArg++,8&flags&&needArg++,16&flags))&&needArg++}obj[name]=function(records){var info={handle:funcHandle,name:current_func=name,needArg:needArg,hint:hint,group:group,inputs:inputs,optInputs:optInputs,outputs:outputs};if(void 0===records&&throwError(2),0===records.length){if(0===info.outputs.length)return[];for(var outputArr=[],i=0;i<info.outputs.length;i++)outputArr.push([]);return outputArr}var argPos=0,argv=arguments,moveStep="number"==typeof records[0]?1:0,allocatedParams=(1==moveStep&&arguments.length<info.needArg&&throwError(2),Module._malloc(4)),openPrice=(throwError(TA_ParamHolderAlloc(info.handle,allocatedParams)),null),highPrice=null,lowPrice=null,closePrice=null,volume=null,ints=[],paramsPtr=ReadInt(allocatedParams,0);Module._free(allocatedParams);for(var i=0;i<info.inputs.length;i++){var tmp,type=info.inputs[i].type,flags=info.inputs[i].flags;1===type?(closePrice||(closePrice=GetArr(argv[argPos],"Close"),argPos+=moveStep),throwError(TA_SetInputParamRealPtr(paramsPtr,i,closePrice))):2===type?(tmp=GetArr(argv[argPos],"Close",!0),argPos+=moveStep,ints.push(tmp),throwError(TA_SetInputParamIntegerPtr(paramsPtr,i,tmp))):0===type&&(1&flags&&(openPrice||(openPrice=GetArr(argv[argPos],"Open"),argPos+=moveStep)),2&flags&&(highPrice||(highPrice=GetArr(argv[argPos],"High"),argPos+=moveStep)),4&flags&&(lowPrice||(lowPrice=GetArr(argv[argPos],"Low"),argPos+=moveStep)),8&flags&&(closePrice||(closePrice=GetArr(argv[argPos],"Close"),argPos+=moveStep)),16&flags&&(volume||(volume=GetArr(argv[argPos],"Volume"),argPos+=moveStep)),throwError(TA_SetInputParamPricePtr(paramsPtr,i,openPrice,highPrice,lowPrice,closePrice,volume,null)))}for(0==moveStep&&argPos++,i=0;i<info.optInputs.length;i++)switch(v=argPos+i<arguments.length?arguments[i+argPos]:info.optInputs[i].defaultValue,info.optInputs[i].type){case 0:case 1:TA_SetOptInputParamReal(paramsPtr,i,v);break;case 2:case 3:TA_SetOptInputParamInteger(paramsPtr,i,v);break;default:throw"error"}outputArr=[];for(i=0;i<info.outputs.length;i++){var ptr=null;1===info.outputs[i].type?(ptr=Module._malloc(4*records.length),throwError(TA_SetOutputParamIntegerPtr(paramsPtr,i,ptr))):0===info.outputs[i].type&&(ptr=Module._malloc(8*records.length),throwError(TA_SetOutputParamRealPtr(paramsPtr,i,ptr))),outputArr.push(ptr)}var allocatedParams=Module._malloc(4),outNbElement=Module._malloc(4),beg=(TA_CallFunc(paramsPtr,0,records.length-1,allocatedParams,outNbElement),ReadInt(allocatedParams,0)),num=ReadInt(outNbElement,0),ret=(Module._free(allocatedParams),Module._free(outNbElement),[]);for(i=0;i<info.outputs.length;i++){ptr=outputArr[i];ret[i]=[];for(var v,j=0;j<records.length;j++)j<beg||num<=j-beg?ret[i].push(NaN):(1===info.outputs[i].type?v=ReadInt(ptr,j-beg):0===info.outputs[i].type&&(v=ReadDouble(ptr,2*(j-beg))),ret[i].push(v));Module._free(ptr)}for(throwError(TA_ParamHolderFree(paramsPtr)),openPrice&&Module._free(openPrice),highPrice&&Module._free(highPrice),lowPrice&&Module._free(lowPrice),closePrice&&Module._free(closePrice),volume&&Module._free(volume),i=0;i<ints.length;i++)Module._free(ints[i]);return 1===ret.length?ret[0]:ret}}},"vii");if(0!==ccall("TA_ForEachFunc","number",["pointer","number"],[funcCallback,0]))throw"error";return removeFunction(funcCallback),obj},Module.VMain=function(task){for(var exchanges=[],i=0;i<task.Exchanges.length;i++)exchanges[i]=function(eIdx){var self={},idx=eIdx;return self.cache=[],self.ct="",self.period=task.Options.Period,self.currency=Module.js_Exchange_GetCurrency(eIdx),self.maxBarLen=task.Exchanges[idx].MaxBarLen,self.lastRawJSON="",self.GetName=function(){return Module.js_Exchange_GetName(eIdx)},self.SetData=function(pair,detail){return"string"!=typeof detail&&(detail=JSON.stringify(detail)),Module.js_Exchange_SetData(eIdx,pair,detail)},self.GetPeriod=function(){return self.period/1e3},self.GetCurrency=function(){return self.currency},self.GetLabel=function(){return Module.js_Exchange_GetLabel(eIdx)},self.GetUSDCNY=function(){return Module.js_Exchange_GetUSDCNY(eIdx)},self.GetRate=function(){return Module.js_Exchange_GetRate(eIdx)},self.SetRate=function(n){return Module.js_Exchange_SetRate(eIdx,n=void 0===n?1:n)},self.SetCurrency=function(s){Module.js_Exchange_SetCurrency(eIdx,s),self.currency=Module.js_Exchange_GetCurrency(eIdx)},self.SetBase=function(s){return Module.js_Exchange_SetBase(eIdx,s)},self.GetBase=function(){return Module.js_Exchange_GetBase(eIdx)},self.SetTimeout=function(n){},self.IO=function(k,v){return void 0===v&&(v=1),"currency"==k?self.SetCurrency(v):Module.js_Exchange_IO(eIdx,k,v)},self.SetPrecision=function(a,b){Module.js_Exchange_SetPrecision(eIdx,a,b)},self.SetProxy=function(){},self.GetQuoteCurrency=function(){return Module.js_Exchange_GetQuoteCurrency(eIdx)},self.GetBaseCurrency=function(){return Module.js_Exchange_GetBaseCurrency(eIdx)},self.GetDepth=function(symbol){self.lastRawJSON="";var ret=Module.js_Exchange_GetDepth(eIdx,symbol||"");if(!ret)return null;for(var arr=Vector2Array(ret.Orders),d={Asks:[],Bids:[]},i=0;i<arr.length;i++)(i<ret.AsksLen?d.Asks:d.Bids).push(arr[i]);return d},self.GetTickers=function(){self.lastRawJSON="";var ret=Module.js_Exchange_GetTickers(eIdx);return ret?Vector2Array(ret):null},self.GetMarkets=function(){return JSON.parse(Module.js_Exchange_GetMarkets(eIdx))},self.GetTicker=function(symbol){return self.lastRawJSON="",Module.js_Exchange_GetTicker(eIdx,symbol||"")},self.GetData=function(pair,timeout,offset){"number"!=typeof timeout&&(timeout=6e4),"number"!=typeof offset&&(offset=0),self.lastRawJSON="";pair=Module.js_Exchange_GetData(eIdx,pair,timeout,offset);return 0<pair.Data.length?pair.Data=JSON.parse(pair.Data):pair.Data=null,pair},self.GetTrades=function(symbol){self.lastRawJSON="";symbol=Module.js_Exchange_GetTrades(eIdx,symbol||"");return symbol?Vector2Array(symbol):null},self.SetMaxBarLen=function(n){self.maxBarLen=n},self.GetRecords=function(symbol,period,limit){"number"==typeof symbol?(limit=period,period=symbol,symbol=""):void 0===symbol&&(symbol="",period=-1,limit=0),self.lastRawJSON="";symbol=Module.js_Exchange_GetRecords(eIdx,symbol||"",period=void 0!==period&&-1!=period?period:self.period/1e3,limit="number"!=typeof limit?0:limit);if(!symbol)return null;var records=Vector2Array(symbol),symbol=self.currency+"/"+self.ct+"/"+period.toString();if(void 0===self.cache[symbol])records.length>self.maxBarLen&&(records=records.slice(records.length-self.maxBarLen)),self.cache[symbol]=records;else for(var c=self.cache[symbol],preTime=0<c.length?c[c.length-1].Time:0,i=0;i<records.length;i++)records[i].Time==preTime&&0<c.length?c[c.length-1]=records[i]:records[i].Time>preTime&&(c.push(records[i]),preTime=c[c.length-1].Time,c.length>self.maxBarLen)&&c.shift();let bars=self.cache[symbol];return bars=0<limit&&bars.length>limit?bars.slice(bars.length-limit):bars},self.GetAccount=function(){return self.lastRawJSON="ctpAccount",Module.js_Exchange_GetAccount(eIdx)},self.GetRawJSON=function(){return"ctpAccount"!=self.lastRawJSON?self.lastRawJSON:Module.js_Exchange_GetCTPAccountJSON(eIdx)},self.Buy=function(price,amount){return self.lastRawJSON="",Module.js_Exchange_Buy(eIdx,price,amount,valuesToString(Array.prototype.slice.call(arguments),2))},self.Sell=function(price,amount){return self.lastRawJSON="",Module.js_Exchange_Sell(eIdx,price,amount,valuesToString(Array.prototype.slice.call(arguments),2))},self.CreateOrder=function(symbol,side,price,amount){return self.lastRawJSON="",Module.js_Exchange_CreateOrder(eIdx,symbol,side,price,amount,valuesToString(Array.prototype.slice.call(arguments),4))},self.Log=function(orderType,price,amount){Module.js_Exchange_Log(eIdx,orderType,price,2==orderType?0:amount,valuesToString(Array.prototype.slice.call(arguments),2==orderType?2:3))},self.GetOrders=function(symbol){self.lastRawJSON="";symbol=Module.js_Exchange_GetOrders(eIdx,symbol||"");return symbol?Vector2Array(symbol):null},self.GetHistoryOrders=function(symbol,since,limit){"number"==typeof symbol&&(limit=since,since=symbol,symbol=""),self.lastRawJSON="",void 0===limit&&(limit=0);symbol=Module.js_Exchange_GetHistoryOrders(eIdx,symbol||"",(since=void 0===since?0:since).toString(),limit);return symbol?Vector2Array(symbol):null},self.GetAssets=function(){self.lastRawJSON="";var ret=Module.js_Exchange_GetAssets(eIdx);return ret?Vector2Array(ret):null},self.GetOrder=function(orderId){return self.lastRawJSON="",Module.js_Exchange_GetOrder(eIdx,orderId)},self.CancelOrder=function(orderId){return self.lastRawJSON="",Module.js_Exchange_CancelOrder(eIdx,orderId,valuesToString(Array.prototype.slice.call(arguments),1))},self.SetDirection=function(s){return Module.js_Exchange_SetDirection(eIdx,s)},self.SetMarginLevel=function(symbol,marginLevel){var tmp;return"number"==typeof symbol&&(tmp=marginLevel||"",marginLevel=symbol,symbol=tmp),Module.js_Exchange_SetMarginLevel(eIdx,symbol,marginLevel)},self.SetContractType=function(symbol){var r=Module.js_Exchange_SetContractType(eIdx,symbol);return"string"==typeof r?(self.ct=symbol,JSON.parse(r)):null},self.GetContractType=function(){return self.ct},self.GetFundings=function(symbol){self.lastRawJSON="";symbol=Module.js_Exchange_GetFundings(eIdx,symbol||"");return symbol?Vector2Array(symbol):null},self.GetPosition=self.GetPositions=function(symbol){self.lastRawJSON="";symbol=Module.js_Exchange_GetPositions(eIdx,symbol||"");return symbol?Vector2Array(symbol):null},self.Go=function(){var args=Array.prototype.slice.call(arguments),ret=self[args[0]].apply(self,args.slice(1));return{wait:function(){return ret}}},self}(i);function countLines(s){for(var count=1,i=0;i<s.length;i++)"\n"==s[i]&&count++;return count}var k,gApis={kvdb:{}},__realDate=(initThread(gApis),Date),__cRetryDelay=3e3,runtime=(gApis.RDate=__realDate,gApis.Benchmark=Module.js_Benchmark,gApis._T=function(a,b){return"[trans]"+("string"==typeof b?a+"|"+b:a)+"[/trans]"},gApis._D=function(date,fmt){void 0===fmt&&(fmt="yyyy-MM-dd hh:mm:ss"),"number"==typeof date?date=new __realDate(date):void 0===date&&(date=new __realDate(Module.js_UnixNano()/1e6));var y=date.getFullYear(),yy=(y%100).toString();1==yy.length&&(yy="0"+yy);var M=(M="0"+(date.getMonth()+1)).substring(M.length-2),d=(d="0"+date.getDate()).substring(d.length-2),h=(h="0"+date.getHours()).substring(h.length-2),m=(m="0"+date.getMinutes()).substring(m.length-2),date=(date="0"+date.getSeconds()).substring(date.length-2);return fmt.replace("yyyy",y).replace("MM",M).replace("dd",d).replace("hh",h).replace("mm",m).replace("ss",date).replace("yy",yy)},gApis.Unix=function(){return Module.js_Unix()},gApis.UnixNano=function(){return Module.js_UnixNano()},gApis.Sleep=function(n){Module.js_Sleep(n)},gApis.Log=function(){Module.js_Log(valuesToString(Array.prototype.slice.call(arguments)))},gApis.LogError=function(){Module.js_LogError(valuesToString(Array.prototype.slice.call(arguments)))},gApis.LogStatus=function(){Module.js_LogStatus(valuesToString(Array.prototype.slice.call(arguments)))},gApis.LogProfit=function(profit){Module.js_LogProfit(profit,valuesToString(Array.prototype.slice.call(arguments),1))},gApis.LogReset=function(keep){Module.js_LogReset(keep=void 0===keep?0:keep)},gApis.EnableLog=function(flag){Module.js_EnableLog(flag=void 0===flag?!0:flag)},gApis.LogProfitReset=function(keep){Module.js_LogProfitReset(keep=void 0===keep?0:keep)},gApis.Date=function(s){return void 0===s&&(s=Module.js_UnixNano()/1e6),new __realDate(s)},gApis.Date.UTC=__realDate.UTC,gApis.Date.parse=__realDate.parse,gApis.Date.now=function(){return Module.js_UnixNano()/1e6},gApis._Cross=function(arr1,arr2){if(arr1.length!==arr2.length)throw"cross array length not equal";for(var n=0,i=arr1.length-1;0<=i&&"number"==typeof arr1[i]&&"number"==typeof arr2[i];i--)if(arr1[i]<arr2[i]){if(0<n)break;n--}else{if(!(arr1[i]>arr2[i]))break;if(n<0)break;n++}return n},gApis._N=function(v,precision){"number"!=typeof precision&&(precision=4);var v=parseFloat(v.toFixed(Math.max(10,precision+5))),s=toNonExponential(v).split(".");return!(0<=precision&&(s.length<2||s[1].length<=precision))&&((s=v<0)&&(v=-v),precision=Math.pow(10,precision),v=Math.floor(v*precision)/precision,s)&&0!=v?-v:v},gApis._C=function(method){for(var r;!(r=method.apply(this,Array.prototype.slice.call(arguments).slice(1)));)gApis.Sleep(__cRetryDelay);return r},gApis._CDelay=function(n){0<n&&(__cRetryDelay=n)},gApis.GetPid=function(){return 1},gApis.GetOS=function(){return"linux/amd64"},gApis.GetLastError=function(){return Module.js_GetLastError()},gApis.SetErrorFilter=function(s){},gApis.MD5=function(s){return Module.js_MD5(s)},gApis.UUID=function(){return Math.random().toString(36).substring(2,15)+Math.random().toString(36).substring(2,15)},gApis.GetCommand=function(){return""},gApis.GetMeta=function(){return""},gApis.Mail=function(){return!0},gApis.Mail_Go=function(){return{wait:function(){return!0}}},gApis.EventLoop=function(){gApis.LogError("sandbox not support EventLoop")},gApis.Dial=function(){gApis.LogError("sandbox not support Dial")},gApis.DBExec=function(){gApis.LogError("sandbox not support DBExec")},gApis.Encode=function(){gApis.LogError("sandbox not support Encode")},gApis.HttpQuery=function(url){return Module.js_HttpQuery(url)},gApis.HttpQuery_Go=function(url){return{wait:function(){return Module.js_HttpQuery(url)}}},gApis.JSONParse=function(s){return JSON.parse(s)},gApis.StrDecode=function(s){gApis.LogError("sandbox not support StrDecode")},gApis.IsVirtual=function(){return!0},gApis.EnableLogLocal=function(){},gApis.LogVacuum=function(){},gApis.Version=function(){return"3.6"},gApis._G=function(k,v){if(void 0===k)return 1;if(null==k)gApis.kvdb={};else{if(k=k.toLowerCase(),void 0===v)return void 0===gApis.kvdb[k]?null:gApis.kvdb[k];null==v?delete gApis.kvdb[k]:gApis.kvdb[k]=v}},gApis.Chart=function(js){var self={update:function(cfg){Module.js_Chart_New(utf8_encode(JSON.stringify(cfg)))},add:function(seriesIdx,d,replaceId){var arr=[];"number"!=typeof seriesIdx?arr=seriesIdx:(arr=[seriesIdx,d],void 0!==replaceId&&arr.push(replaceId)),Module.js_Chart_Add(utf8_encode(JSON.stringify(arr)))},reset:function(reverse){Module.js_Chart_Reset("number"!=typeof reverse?0:reverse)}};return self.update(js),self},gApis.KLineChart=function(options){(options=void 0===options?{}:options).__isCandle=!0;function newPlot(shape){return void 0===shape.overlay&&(shape.overlay=scope.overlay),"shape"!=shape.type&&"bgcolor"!=shape.type&&"barcolor"!=shape.type&&(shape.title&&!scope.runtime.titles[shape.title]||(shape.title="<"+(shape.title||"plot")+"_"+scope.runtime.count.toString()+">"),scope.runtime.count+=1,shape.title)&&(scope.runtime.titles[shape.title]=!0),shape}var scope={chart:gApis.Chart(options),bar:{},overlay:options.overlay||!1,preTime:0,runtime:{plots:[],signals:[],titles:{},count:0}};return scope.register=function(name,args,pfn){var dic={},names=[];args.forEach(function(s,i){Array.isArray(s)?(names.push(s[0]),dic[s[0]]={pos:i,val:s[1]}):(names.push(s),dic[s]={pos:i})}),scope[name]=function(){if(!(scope.bar.Time<scope.preTime)){var argv={};for(k in dic)void 0!==dic[k].val&&(argv[k]=dic[k].val);for(var i=0;i<arguments.length;i++)if(i==arguments.length-1&&"object"==typeof arguments[i])for(var k in arguments[i])void 0!==dic[k]&&(argv[k]=arguments[i][k]);else void 0!==dic[names[i]]&&(argv[names[i]]=arguments[i]);return pfn(argv)}}},scope.begin=function(bar){scope.bar=bar},scope.reset=function(remain){scope.chart.reset(remain),scope.preTime=0},scope.close=function(){var data;scope.bar.Time<scope.preTime||(data={timestamp:scope.bar.Time,open:scope.bar.Open,high:scope.bar.High,low:scope.bar.Low,close:scope.bar.Close,volume:scope.bar.Volume},0<scope.runtime.plots.length&&(data.runtime||(data.runtime={}),data.runtime.plots=scope.runtime.plots),0<scope.runtime.signals.length&&(data.runtime||(data.runtime={}),data.runtime.signals=scope.runtime.signals),scope.preTime==scope.bar.Time?scope.chart.add(0,data,-1):scope.chart.add(0,data),scope.preTime=scope.bar.Time,scope.runtime.plots=[],scope.runtime.signals=[],scope.runtime.titles={},scope.runtime.count=0)},scope.register("plot",[["series",NaN],"title","color","linewidth",["style","line"],"trackprice",["histbase",0],["offset",0],["join",!1],"editable","show_last",["display","all"],"overlay"],function(argv,idx){if(!isNaN(argv.series))return scope.runtime.plots.push(newPlot({series:argv.series,overlay:argv.overlay,title:argv.title,join:argv.join,color:argv.color,histbase:argv.histbase,type:argv.style,lineWidth:argv.linewidth,display:argv.display,offset:argv.offset})),scope.runtime.plots.length-1}),scope.register("barcolor",["color","offset","editable","show_last","title",["display","all"]],function(argv,idx){"string"==typeof argv.color&&"all"==argv.display&&scope.runtime.plots.push({type:"barcolor",title:argv.title,color:argv.color,offset:argv.offset,showLast:argv.show_last,display:argv.display})}),scope.register("plotarrow",["series","title",["colorup","#00ff00"],["colordown","#ff0000"],["offset",0],["minheight",5],["maxheight",100],["editable",!0],"show_last",["display","all"],"overlay"],function(argv){"all"!=argv.display||isNaN(argv.series)||scope.runtime.plots.push(newPlot({series:argv.series,title:argv.title,colorup:argv.colorup,colordown:argv.colordown,offset:argv.offset,minheight:argv.minheight,maxheight:argv.maxheight,showLast:argv.show_last,type:"shape",style:"arrow",display:argv.display,overlay:argv.overlay}))}),scope.register("hline",["price","title","color",["linestyle","dashed"],"linewidth","editable",["display","all"],"overlay"],function(argv){return scope.runtime.plots.push(newPlot({title:argv.title,price:argv.price,overlay:argv.overlay,color:argv.color,type:"hline",lineStyle:argv.linestyle,lineWidth:argv.linewidth,display:argv.display})),scope.runtime.plots.length-1}),scope.register("bgcolor",["color","offset","editable","show_last","title",["display","all"],"overlay"],function(argv){"string"==typeof argv.color&&"all"==argv.display&&scope.runtime.plots.push(newPlot({title:argv.title,overlay:argv.overlay,color:argv.color,type:"bgcolor",showLast:argv.show_last,offset:argv.offset}))}),scope.register("plotchar",["series","title","char",["location","abovebar"],"color","offset","text","textcolor","editable",["size","auto"],"show_last","display","overlay"],function(argv){"absolute"!=argv.location&&!argv.series||"absolute"==argv.location&&isNaN(argv.series)||!argv.char||scope.runtime.plots.push(newPlot({overlay:argv.overlay,type:"shape",style:"char",char:argv.char,series:argv.series,location:argv.location,color:argv.color,offset:argv.offset,size:argv.size,text:argv.text,textColor:argv.textcolor}))}),scope.register("plotshape",["series","title","style",["location","abovebar"],"color","offset","text","textcolor","editable",["size","auto"],"show_last","display","overlay"],function(argv){"absolute"!=argv.location&&!argv.series||"absolute"==argv.location&&isNaN(argv.series)||scope.runtime.plots.push(newPlot({type:"shape",overlay:argv.overlay,title:argv.title,size:argv.size,style:argv.style,series:argv.series,location:argv.location,color:argv.color,offset:argv.offset,text:argv.text,textColor:argv.textcolor}))}),scope.register("plotcandle",["open","high","low","close","title","color","wickcolor","editable","show_last","bordercolor",["display","all"],"overlay"],function(argv){"all"==argv.display&&scope.runtime.plots.push(newPlot({price:argv.high,open:argv.open,high:argv.high,low:argv.low,close:argv.close,title:argv.title,color:argv.color,wickColor:argv.wickcolor,showLast:argv.show_last,borderColor:argv.bordercolor,type:"candle",display:argv.display,overlay:argv.overlay}))}),scope.register("fill",["plot1","plot2","color","title","editable","show_last","fillgaps",["display","all"]],function(argv){var dst;0<=argv.plot1&&0<=argv.plot2&&argv.plot1<scope.runtime.plots.length&&argv.plot2<scope.runtime.plots.length&&"all"==argv.display&&void 0!==(dst=scope.runtime.plots[argv.plot1])&&(void 0===dst.fill&&(dst.fill=[]),dst.fill.push({value:scope.runtime.plots[argv.plot2].series,color:argv.color,showLast:argv.show_last}))}),scope.register("signal",["direction","price","qty","id"],function(argv){var task={id:argv.id||argv.direction,qty:argv.qty,avgPrice:argv.price};"buy"==argv.direction||"long"==argv.direction?task.direction="long":"sell"==argv.direction||"short"==argv.direction?task.direction="short":"closesell"==argv.direction||"closeshort"==argv.direction?(task.direction="close",task.closeDirection="short"):"closebuy"!=argv.direction&&"closelong"!=argv.direction||(task.direction="close",task.closeDirection="long"),(task.direction||task.closeDirection)&&scope.runtime.signals.push(task)}),scope},gApis.$={},gApis.ORDER_STATE_PENDING=0,gApis.ORDER_STATE_CLOSED=1,gApis.ORDER_STATE_CANCELED=2,gApis.ORDER_STATE_UNKNOWN=3,gApis.ORDER_TYPE_BUY=0,gApis.ORDER_TYPE_SELL=1,gApis.ORDER_OFFSET_OPEN=0,gApis.ORDER_OFFSET_CLOSE=1,gApis.PD_LONG=0,gApis.PD_SHORT=1,gApis.PD_LONG_YD=2,gApis.PD_SHORT_YD=3,gApis.LOG_TYPE_BUY=0,gApis.LOG_TYPE_SELL=1,gApis.LOG_TYPE_CANCEL=2,gApis.LOG_TYPE_ERROR=3,gApis.LOG_TYPE_PROFIT=4,gApis.LOG_TYPE_LOG=5,gApis.LOG_TYPE_RESTART=6,gApis.PERIOD_M1=60,gApis.PERIOD_M3=180,gApis.PERIOD_M5=300,gApis.PERIOD_M15=900,gApis.PERIOD_M30=1800,gApis.PERIOD_H1=3600,gApis.PERIOD_H2=7200,gApis.PERIOD_H4=14400,gApis.PERIOD_H6=21600,gApis.PERIOD_H12=43200,gApis.PERIOD_D1=86400,gApis.PERIOD_D3=259200,gApis.PERIOD_W1=604800,gApis.exchanges=exchanges,gApis.exchange=exchanges[0],gApis.talib=Module.talib(),gApis.TA=TAInstance(function(name){Module.js_LogTA(name,valuesToString(Array.prototype.slice.call(arguments),1,","))}),null),tpls=(gApis.__runtime__=function(obj){runtime=obj},task.Code),scope={};for(k in gApis)scope[k]=gApis[k];for(var endPos,rawTxt,mapLinesPos,fullSource="",sourceMapObj=[],i=0;i<tpls.length;i++){var tpl=tpls[i],argsLine="",argDic={},suffix=(tpl[1].forEach(function(pair){argsLine+="var "+pair[0]+" = "+JSON.stringify(pair[1])+";",argDic[pair[0]]=pair[1]}),argsLine+="var __arguments = "+JSON.stringify(argDic)+";","\n;if(typeof(init)==='function')init();"),fileName=tpl[2];if(i==tpls.length-1){if(fileName="__FILE__",void 0!==Module.__ret__){scope.__arguments=argDic,tpl[1].forEach(function(pair){scope[pair[0]]=pair[1]}),Module.__ret__.scope=scope,Module.__ret__.Join=Module.js_Join;continue}suffix+=";;main()\nif(typeof(onexit)==='function'){onexit()}"}sourceMapObj.push({baseLine:countLines(fullSource),codeLine:countLines(tpl[0]),fileName:fileName,mapLines:(fileName=tpl[0],mapLinesPos=rawTxt=endPos=void 0,-1!=(mapLinesPos=fileName.indexOf("//# sourceMappingObj="))?(rawTxt="",rawTxt=-1==(endPos=fileName.indexOf("\n",mapLinesPos+1))?fileName.slice(mapLinesPos+"//# sourceMappingObj=".length):fileName.slice(mapLinesPos+"//# sourceMappingObj=".length,endPos),JSON.parse(rawTxt)):[])}),fullSource+="(function(){"+argsLine+tpl[0]+suffix+"})();\n"}function dumpStack(err){let stacks=[],errMsg="";return void 0===err?err=new Error:(err.stack&&(console.log("\nStacktrace:"),console.log("===================="),console.log(err.stack)),errMsg=err.toString(),stacks.push(errMsg)),-1==errMsg.indexOf("line:")&&err.stack&&err.stack.split("\n").forEach(function(stackLine){var posSearch=stackLine.indexOf("(eval at evalScope ");if(0<posSearch){var pos=stackLine.indexOf("<anonymous>:",posSearch),posSearch=(0<pos&&(e=stackLine.indexOf(")",pos)),stackLine.substring(0,posSearch).split("\n")),stackLine=stackLine.substring(pos+"<anonymous>:".length,e).split(":");if(0<stackLine.length){for(var vLine=parseInt(stackLine[0]),fileName=null,mapLines=[],pIndex=0;pIndex<sourceMapObj.length;pIndex++)if(vLine>=sourceMapObj[pIndex].baseLine&&vLine<sourceMapObj[pIndex].baseLine+sourceMapObj[pIndex].codeLine){fileName=sourceMapObj[pIndex].fileName,mapLines=sourceMapObj[pIndex].mapLines,vLine-=sourceMapObj[pIndex].baseLine-1;break}if(fileName){for(var pItem=0;pItem<mapLines.length;pItem++)if(vLine>=mapLines[pItem][0]&&vLine<=mapLines[pItem][1]){vLine-=mapLines[pItem][2];break}stacks.push(posSearch[posSearch.length-1]+"("+fileName+":"+vLine.toString()+")")}}}}),stacks.join("\n")}Module.__dumpStack__=dumpStack;try{evalScope(scope,fullSource)}catch(err){"EOF"!=err&&Module.js_LogError(utf8_encode(dumpStack(err)))}try{void 0!==task.Step&&task.Step||Module.js_Close(JSON.stringify(runtime))}catch(e){}},Module.VTask=function(task,httpCache,httpGet,callBack,onEnd,retScope){void 0!==retScope&&(Module.__ret__=retScope),void 0!==httpCache&&httpCache||(httpCache={});var retScope=addFunction(function(a,b,c,d){var jsString,a=UTF8ToString(a),a=(void 0!==httpCache[a]?jsString=httpCache[a]:(jsString=httpGet(a),httpCache[a]=jsString),lengthBytesUTF8(jsString)+1),ptr=_malloc(a);return stringToUTF8(jsString,ptr,a+1),setValue(b,ptr,"i32"),setValue(c,a,"i32"),setValue(d,1,"i32"),0},"iiiii"),progressCallback=addFunction(function(st){callBack(JSON.parse(UTF8ToString(st)))},"vi"),dumpStack=addFunction(function(b,c,d){var lengthBytes,ptr,pfn=Module.__dumpStack__;return"function"!=typeof pfn?1:(pfn=pfn(),lengthBytes=lengthBytesUTF8(pfn)+1,ptr=_malloc(lengthBytes),stringToUTF8(pfn,ptr,lengthBytes+1),setValue(b,ptr,"i32"),setValue(c,lengthBytes,"i32"),setValue(d,1,"i32"),0)},"iiii");ccall("backtest","number",["string","string","pointer","pointer"],[JSON.stringify(task),null,retScope,progressCallback,dumpStack]),"function"==typeof onEnd&&onEnd()},moduleArg}})(),fs,os,crypto,httpGet,_session,toUnix,fmtTime,toHTML,pdObj,htmlResult,__m;function md5(text){return crypto.createHash("md5").update(text).digest("hex")}function fetchSync(url){var sab=new SharedArrayBuffer(10256),int32=new Int32Array(sab),url=new(require("worker_threads").Worker)(`
    const { workerData } = require('worker_threads');
    const int32 = new Int32Array(workerData);
    const uint8Array = new Uint8Array(workerData);
    
    function next(dataLen, hasMore) {
        Atomics.store(int32, 2, dataLen);
        Atomics.store(int32, 3, hasMore);
        Atomics.store(int32, 0, 1);
        Atomics.notify(int32, 0);
        // wait for main thread to consume the data
        Atomics.wait(int32, 1, 0);
        Atomics.store(int32, 1, 0);
        Atomics.notify(int32, 1);
    }
    
    function postBuffer(text) {
        if (text.length == 0) {
            next(0, 0);
            return;
        }
        const bufLen = 10240;
        let counter = 0;
        for (let i = 0; i < text.length; i++) {
            uint8Array[16 + counter] = text.charCodeAt(i);
            counter++;
            let hasMore = i == text.length - 1 ? 0 : 1;
            if (counter == bufLen || i == text.length - 1) {
                // notify
                next(counter, hasMore)
                counter = 0;
            }
        }
    }
    
    let url = '${url}';
    let finalData = '';
    require(url.split('://')[0]).get(url, function(response) {
        response.setEncoding('utf8');
        response.on('data', function(data) {
            finalData += data;
        });
        response.on('error', function(err) {
            postBuffer('')
        })
        response.on('end', function() {
            postBuffer(finalData)
        })
    });
    `,{workerData:sab,eval:!0}),uint8Array=new Uint8Array(sab);let str="";for(;;){Atomics.wait(int32,0,0),Atomics.store(int32,0,0);var totalLen=Atomics.load(int32,2),hasMore=Atomics.load(int32,3);for(let i=0;i<totalLen;i++)str+=String.fromCharCode(uint8Array[16+i]);if(Atomics.store(int32,1,1),Atomics.notify(int32,1),0==totalLen||0==hasMore)break}return url.terminate(),str}function notify(msgType,msg){var msg=Buffer.from(msg),h=Buffer.allocUnsafe(8);h.writeUInt32BE(msgType,0),h.writeUInt32BE(msg.length,4),_session.write(Buffer.concat([h,msg]))}"object"==typeof exports&&"object"==typeof module?module.exports=VBacktest:"function"==typeof define&&define.amd&&define([],()=>VBacktest),"undefined"!=typeof self&&void 0!==self.onmessage?self.onmessage=function(event){var event=event.data,task=event[0],httpCache=event[1],lastProgress=0,lastSummary="";VBacktest().VTask(task,httpCache,function(path){var r=XMLHttpRequest?new XMLHttpRequest:new ActiveXObject("Microsoft.XMLHTTP");return r.open("GET",path,!1),r.send(null),r.responseText},function(st){var nowProgress;void 0!==st.TaskStatus&&1==st.TaskStatus&&(st.httpCache=httpCache),1==st.TaskStatus?self.postMessage({ret:st}):(nowProgress=st.Progress.toFixed(1))==lastProgress&&lastSummary===st.statusStr||(lastProgress=nowProgress,lastSummary=st.statusStr,self.postMessage({ret:st}))})}:(fs=require("fs"),os=require("os"),crypto=require("crypto"),httpGet=function(url){var tmpCache=os.tmpdir()+"/cache",tmpCache=(fs.existsSync(tmpCache)||fs.mkdirSync(tmpCache),tmpCache+"/botvs_kline_"+md5(url));return fs.existsSync(tmpCache)?fs.readFileSync(tmpCache,"utf-8"):((url=fetchSync(url))&&-1!==url.indexOf(",")&&fs.writeFileSync(tmpCache,url,"utf-8"),url)},"undefined"!=typeof s?(_session=s,VBacktest().VTask(__cfg__,null,httpGet,function(st){notify(st.TaskStatus,JSON.stringify(st))},function(){try{_session.end()}catch(e){}})):(toUnix=function(s){var n=parseInt(new Date(s).getTime()/1e3);return-1==s.indexOf(" ")&&(n-=28800),n},fmtTime=function(date,fmt){void 0===fmt&&(fmt="yyyy-MM-dd hh:mm:ss");var y=date.getFullYear(),yy=(y%100).toString();1==yy.length&&(yy="0"+yy);var M=(M="0"+(date.getMonth()+1)).substring(M.length-2),d=(d="0"+date.getDate()).substring(d.length-2),h=(h="0"+date.getHours()).substring(h.length-2),m=(m="0"+date.getMinutes()).substring(m.length-2),date=(date="0"+date.getSeconds()).substring(date.length-2);return fmt.replace("yyyy",y).replace("MM",M).replace("dd",d).replace("hh",h).replace("mm",m).replace("ss",date).replace("yy",yy)},toHTML=function(data){var html="<table><tr><td>";for(i in data.columns)html+="<td>"+data.columns[i]+"</td>";html+="</tr>";for(var rows=[],i=0;i<data.rows.length;i++){for(var rowSkip="",row=(5<=i&&i<data.rows.length-5&&(i=data.rows.length-5,rowSkip="<tr><td>...</td>"),"<tr><td>"+data.index[i]+"</td>"),j=0;j<data.columns.length;j++)0<rowSkip.length&&(rowSkip+="<td>...</td>"),row+="<td>"+data.rows[i][j]+"</td>";0<rowSkip.length&&rows.push(rowSkip+"</tr>"),rows.push(row+"</tr>")}return html=(html+=rows.join("")+"</table>")+("<p>"+data.rows.length+" rows x "+data.columns.length+" columns<p>")},pdObj=function(data){var p=this;p.index=data.index,p.columns=data.columns,data.columns.forEach(function(c){p[c]=[]}),data.rows.forEach(function(row){row.forEach(function(f,idx){idx<data.columns.length&&p[data.columns[idx]].push(f)})}),p._toHtml=function(){return toHTML(data)}},__ctx.exports.get_bars=function(symbol,unit,start,end,count){void 0===count&&(count=1e3),"string"==typeof(unit=void 0===unit?"1d":unit)&&(ec=unit[unit.length-1],unit=parseInt(unit.slice(0,unit.length-1)),"d"==ec?unit*=1440:"h"==ec?unit*=60:"s"==ec&&(unit/=60));var key,ec=parseInt((new Date).getTime()/1e3),params=(void 0!==end&&(ec=toUnix(end)),void 0!==start?(ts_from=toUnix(start),void 0===end&&(ec=ts_from+100*unit*(count+10))):void 0===end?(ts_from=0,ts_end=0):ts_from=ec-100*unit*(count+10),{symbol:symbol,resolution:unit,from:ts_from,to:ec,size:count}),arr=[];for(key in params)arr.push(encodeURIComponent(key)+"="+encodeURIComponent(params[key]));for(var data=JSON.parse(httpGet("https://q.fmz.com/data/history?"+arr.join("&"))),rows=[],index=[],i=0;i<data.length;i++)index.push(fmtTime(new Date(1e3*data[i][0]))),rows.push(data[i].slice(1,data[i].length));return new pdObj({index:index,rows:rows,columns:["open","high","low","close","volume"]})},htmlResult=function(s){var s=JSON.parse(s),pnl=[],index=[];return s.Snapshots.forEach(function(ele){var acc=ele[1][0];pnl.push([acc.PnL,100*acc.Utilization]),index.push(fmtTime(new Date(ele[0])))}),columns=["PnL","Utilization(%)"],new pdObj({columns:columns,index:index,rows:pnl})},__m=VBacktest(),void 0===global.talib&&(global.talib=__m.talib(),global.TA=__m.TA,global.plot=function(data,layout){void 0!==data.index&&void 0!==data.columns&&(arr=[],data.columns.forEach(function(c){arr.push({name:c,x:data.index,y:data[c]})}),data=arr),Array.isArray(data)&&0<data.length&&"number"==typeof data[0]&&(obj={x:[],y:data},data.forEach(function(ele,idx){obj.x.push(idx+1)}),data=[obj]),void 0===layout&&(layout={});var arr,obj,timestamp=(new Date).getTime(),timestamp=["<div class='plotly-plot'>","<div id='notebook-plot-"+timestamp+"'></div>","<script>","function plot(){","Plotly.plot('notebook-plot-"+timestamp+"',",JSON.stringify(data),",",JSON.stringify(layout),",",JSON.stringify({displaylogo:!1}),");","}","if(window.Plotly){","plot();","}else{","var head = document.head || document.getElementsByTagName('head')[0];","var s = document.createElement('script');","s.charset='utf-8';","s.src = 'https://www.fmz.com/pkg/plotly-latest.min.js';","s.type = 'text/javascript';","s.async = false;","s.onreadystatechange = s.onload = plot;","head.appendChild(s);","}","<\/script>","</div>"].join("");$$.html(timestamp)}),__ctx.exports.VCtx=function(obj){function periodToMs(s,def){var tmp;return s.length<2||(tmp=parseInt(s.slice(0,s.length-1)),"d"==(s=s[s.length-1])?def=6e4*tmp*60*24:"m"==s?def=6e4*tmp:"h"==s&&(def=36e4*tmp)),def}function dicGet(obj,k,v){return void 0!==obj[k]?obj[k]:v}var k,period=periodToMs(obj.period,36e5),basePeriod=36e5,exchanges=("string"==typeof obj.basePeriod?basePeriod=periodToMs(obj.basePeriod,basePeriod):864e5==period?basePeriod=36e5:36e5==period?basePeriod=18e5:18e5==period?basePeriod=9e5:9e5==period?basePeriod=3e5:3e5==period&&(basePeriod=6e4),[]),feeDef={Huobi:[150,200],OKX:[150,200],Binance:[150,200],Futures_BitMEX:[8,10],Futures_OKX:[30,30],Futures_HuobiDM:[30,30],Futures_CTP:[25,25],Futures_XTP:[30,130]},isCNY=!1,period=(obj.exchanges.forEach(function(e){var arr=e.currency.toUpperCase().split("_"),fee=(1==arr.length&&arr.push(-1!=e.eid.indexOf("CTP")?"CNY":"USD"),[200,200]),v=e.fee,fee=void 0!==v?[1e3*v[0],1e3*v[1]]:feeDef[e.eid]||[200,200];cfg={Balance:dicGet(e,"balance",1e4),BaseCurrency:arr[0],BasePeriod:basePeriod,DepthDeep:5,DepthAmount:20,FaultTolerant:0,PreBarLen:1e3,FeeDenominator:5,FeeMaker:fee[0],FeeTaker:fee[1],FeeMin:dicGet(e,"feeMin",0),Id:e.eid,Label:e.eid,QuoteCurrency:arr[1],SlipPoint:0,Stocks:dicGet(e,"stocks",3)},"Futures_CTP"==e.eid||"Futures_XTP"==e.eid?(cfg.DepthDeep=1,isCNY=!0):"Futures_OKX"!=e.eid&&"Futures_HuobiDM"!=e.eid&&"Bitfinex"!=e.eid&&"Binance"!=e.eid&&("Futures_BitMEX"==e.eid?15!=(v=cfg.BasePeriod/6e4)&&30!=v||(cfg.BasePeriod=3e5):e.eid.indexOf("Futures")),exchanges.push(cfg)}),(options={DataServer:obj.dataServer||(isCNY?"https://q.youquant.com":"https://q.fmz.com"),MaxChartLogs:800,MaxProfitLogs:800,MaxRuntimeLogs:800,NetDelay:200,Period:period,RetFlags:189,UpdatePeriod:5e3}).TimeBegin=toUnix(obj.start),options.TimeEnd=toUnix(obj.end),86400),obj=options.TimeEnd-options.TimeBegin,ctx=(obj/3600<=2?period=60:obj/86400<=2?period=300:obj/86400<30&&(period=3600),options.SnapshotPeriod=1e3*period,options.RetFlags|=256,{});for(k in __m.VTask({Code:[["function main() {}",[],"main"]],Exchanges:exchanges,Options:options,Step:!0},null,httpGet,function(st){},function(){},ctx),ctx.scope)"Date"!=k&&(global[k]=ctx.scope[k]);var realJoin=ctx.Join;return ctx.Join=function(report){var r=realJoin();return report?htmlResult(r):r},ctx}));