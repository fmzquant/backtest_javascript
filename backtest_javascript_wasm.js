"undefined"==typeof __ctx&&(__ctx={}),__ctx.INITIAL_MEMORY=335544320,"undefined"!=typeof module&&(__ctx.module=module),"undefined"!=typeof exports&&(__ctx.exports=exports),"undefined"==typeof module&&"undefined"==typeof exports||(module=void 0,exports=void 0,print=console.log),!function(n,r){var t,e;"object"==typeof exports&&"undefined"!=typeof module?module.exports=r():"function"==typeof define&&define.amd?define("underscore",r):(n="undefined"!=typeof globalThis?globalThis:n||self,t=n._,(e=n._=r()).noConflict=function(){return n._=t,e})}(this,function(){var n="1.13.7",r="object"==typeof self&&self.self===self&&self||"object"==typeof global&&global.global===global&&global||Function("return this")()||{},t=Array.prototype,e=Object.prototype,u="undefined"!=typeof Symbol?Symbol.prototype:null,i=t.push,o=t.slice,a=e.toString,f=e.hasOwnProperty,c="undefined"!=typeof ArrayBuffer,l="undefined"!=typeof DataView,s=Array.isArray,p=Object.keys,v=Object.create,h=c&&ArrayBuffer.isView,y=isNaN,d=isFinite,g=!{toString:null}.propertyIsEnumerable("toString"),b=["valueOf","isPrototypeOf","toString","propertyIsEnumerable","hasOwnProperty","toLocaleString"],m=Math.pow(2,53)-1;function j(n,r){return r=null==r?n.length-1:+r,function(){for(var t=Math.max(arguments.length-r,0),e=Array(t),u=0;u<t;u++)e[u]=arguments[u+r];switch(r){case 0:return n.call(this,e);case 1:return n.call(this,arguments[0],e);case 2:return n.call(this,arguments[0],arguments[1],e)}for(var i=Array(r+1),u=0;u<r;u++)i[u]=arguments[u];return i[r]=e,n.apply(this,i)}}function w(n){var r=typeof n;return"function"==r||"object"==r&&!!n}function _(n){return void 0===n}function A(n){return!0===n||!1===n||"[object Boolean]"===a.call(n)}function x(n){var r="[object "+n+"]";return function(n){return a.call(n)===r}}var S=x("String"),O=x("Number"),M=x("Date"),E=x("RegExp"),B=x("Error"),N=x("Symbol"),I=x("ArrayBuffer"),T=x("Function"),r=r.document&&r.document.childNodes,D=T="function"!=typeof/./&&"object"!=typeof Int8Array&&"function"!=typeof r?function(n){return"function"==typeof n||!1}:T,r=x("Object"),V=l&&(!/\[native code\]/.test(String(DataView))||r(new DataView(new ArrayBuffer(8)))),T="undefined"!=typeof Map&&r(new Map),l=x("DataView"),q=V?function(n){return null!=n&&D(n.getInt8)&&I(n.buffer)}:l,U=s||x("Array");function W(n,r){return null!=n&&f.call(n,r)}var z=x("Arguments"),L=(!function(){z(arguments)||(z=function(n){return W(n,"callee")})}(),z);function $(n){return O(n)&&y(n)}function C(n){return function(){return n}}function K(n){return function(r){r=n(r);return"number"==typeof r&&0<=r&&r<=m}}function J(n){return function(r){return null==r?void 0:r[n]}}var G=J("byteLength"),H=K(G),Q=/\[object ((I|Ui)nt(8|16|32)|Float(32|64)|Uint8Clamped|Big(I|Ui)nt64)Array\]/,X=c?function(n){return h?h(n)&&!q(n):H(n)&&Q.test(a.call(n))}:C(!1),Y=J("length");function Z(n,r){r=function(n){for(var r={},t=n.length,e=0;e<t;++e)r[n[e]]=!0;return{contains:function(n){return!0===r[n]},push:function(t){return r[t]=!0,n.push(t)}}}(r);var t=b.length,u=n.constructor,i=D(u)&&u.prototype||e,o="constructor";for(W(n,o)&&!r.contains(o)&&r.push(o);t--;)(o=b[t])in n&&n[o]!==i[o]&&!r.contains(o)&&r.push(o)}function nn(n){if(!w(n))return[];if(p)return p(n);var t,r=[];for(t in n)W(n,t)&&r.push(t);return g&&Z(n,r),r}function rn(n,r){var t=nn(r),e=t.length;if(null==n)return!e;for(var u=Object(n),i=0;i<e;i++){var o=t[i];if(r[o]!==u[o]||!(o in u))return!1}return!0}function tn(n){return n instanceof tn?n:this instanceof tn?void(this._wrapped=n):new tn(n)}function en(n){return new Uint8Array(n.buffer||n,n.byteOffset||0,G(n))}tn.VERSION=n,tn.prototype.valueOf=tn.prototype.toJSON=tn.prototype.value=function(){return this._wrapped},tn.prototype.toString=function(){return String(this._wrapped)};var un="[object DataView]";function an(n){if(!w(n))return[];var t,r=[];for(t in n)r.push(t);return g&&Z(n,r),r}function fn(n){var r=Y(n);return function(t){if(null==t)return!1;var e=an(t);if(Y(e))return!1;for(var u=0;u<r;u++)if(!D(t[n[u]]))return!1;return n!==hn||!D(t[cn])}}var cn="forEach",r=["clear","delete"],l=["get","has","set"],s=r.concat(cn,l),hn=r.concat(l),c=["add"].concat(r,cn,"has"),l=T?fn(s):x("Map"),r=T?fn(hn):x("WeakMap"),s=T?fn(c):x("Set"),T=x("WeakSet");function jn(n){for(var r=nn(n),t=r.length,e=Array(t),u=0;u<t;u++)e[u]=n[r[u]];return e}function wn(n){for(var r={},t=nn(n),e=0,u=t.length;e<u;e++)r[n[t[e]]]=t[e];return r}function _n(n){var t,r=[];for(t in n)D(n[t])&&r.push(t);return r.sort()}function An(n,r){return function(t){var e=arguments.length;if(r&&(t=Object(t)),!(e<2||null==t))for(var u=1;u<e;u++)for(var i=arguments[u],o=n(i),a=o.length,f=0;f<a;f++){var c=o[f];r&&void 0!==t[c]||(t[c]=i[c])}return t}}var xn=An(an),Sn=An(nn),On=An(an,!0);function Mn(n){var r;return w(n)?v?v(n):((r=function(){}).prototype=n,n=new r,r.prototype=null,n):{}}function En(n){return U(n)?n:[n]}function Bn(n){return tn.toPath(n)}function Nn(n,r){for(var t=r.length,e=0;e<t;e++){if(null==n)return;n=n[r[e]]}return t?n:void 0}function In(n,r,t){n=Nn(n,Bn(r));return _(n)?t:n}function Tn(n){return n}function kn(n){return n=Sn({},n),function(r){return rn(r,n)}}function Dn(n){return n=Bn(n),function(r){return Nn(r,n)}}function Rn(n,r,t){if(void 0===r)return n;switch(null==t?3:t){case 1:return function(t){return n.call(r,t)};case 3:return function(t,e,u){return n.call(r,t,e,u)};case 4:return function(t,e,u,i){return n.call(r,t,e,u,i)}}return function(){return n.apply(r,arguments)}}function Vn(n,r,t){return null==n?Tn:D(n)?Rn(n,r,t):(w(n)&&!U(n)?kn:Dn)(n)}function Fn(n,r){return Vn(n,r,1/0)}function Pn(n,r,t){return tn.iteratee!==Fn?tn.iteratee(n,r):Vn(n,r,t)}function qn(){}function Un(n,r){return null==r&&(r=n,n=0),n+Math.floor(Math.random()*(r-n+1))}tn.toPath=En,tn.iteratee=Fn;var Wn=Date.now||function(){return(new Date).getTime()};function zn(n){function r(r){return n[r]}var t="(?:"+nn(n).join("|")+")",e=RegExp(t),u=RegExp(t,"g");return function(n){return e.test(n=null==n?"":""+n)?n.replace(u,r):n}}var c={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","`":"&#x60;"},$n=zn(c),c=zn(wn(c)),Kn=tn.templateSettings={evaluate:/<%([\s\S]+?)%>/g,interpolate:/<%=([\s\S]+?)%>/g,escape:/<%-([\s\S]+?)%>/g},Jn=/(.)^/,Gn={"'":"'","\\":"\\","\r":"r","\n":"n","\u2028":"u2028","\u2029":"u2029"},Hn=/\\|'|\r|\n|\u2028|\u2029/g;function Qn(n){return"\\"+Gn[n]}var Xn=/^\s*(\w|\$)+\s*$/,Yn=0;function Zn(n,r,t,e,u){return e instanceof r?(e=Mn(n.prototype),w(r=n.apply(e,u))?r:e):n.apply(t,u)}var nr=j(function(n,r){function e(){for(var u=0,i=r.length,o=Array(i),a=0;a<i;a++)o[a]=r[a]===t?arguments[u++]:r[a];for(;u<arguments.length;)o.push(arguments[u++]);return Zn(n,e,this,this,o)}var t=nr.placeholder;return e}),rr=(nr.placeholder=tn,j(function(n,r,t){var e;if(D(n))return e=j(function(u){return Zn(n,e,r,this,t.concat(u))});throw new TypeError("Bind must be called on a function")})),tr=K(Y);function er(n,r,t,e){if(e=e||[],r||0===r){if(r<=0)return e.concat(n)}else r=1/0;for(var u=e.length,i=0,o=Y(n);i<o;i++){var a=n[i];if(tr(a)&&(U(a)||L(a)))if(1<r)er(a,r-1,t,e),u=e.length;else for(var f=0,c=a.length;f<c;)e[u++]=a[f++];else t||(e[u++]=a)}return e}var ur=j(function(n,r){var t=(r=er(r,!1,!1)).length;if(t<1)throw new Error("bindAll must be passed function names");for(;t--;){var e=r[t];n[e]=rr(n[e],n)}return n}),ir=j(function(n,r,t){return setTimeout(function(){return n.apply(null,t)},r)}),or=nr(ir,tn,1);function ar(n){return function(){return!n.apply(this,arguments)}}function fr(n,r){var t;return function(){return 0<--n&&(t=r.apply(this,arguments)),n<=1&&(r=null),t}}var cr=nr(fr,2);function lr(n,r,t){r=Pn(r,t);for(var e,u=nn(n),i=0,o=u.length;i<o;i++)if(r(n[e=u[i]],e,n))return e}function sr(n){return function(r,t,e){t=Pn(t,e);for(var u=Y(r),i=0<n?0:u-1;0<=i&&i<u;i+=n)if(t(r[i],i,r))return i;return-1}}var pr=sr(1),vr=sr(-1);function hr(n,r,t,e){for(var u=(t=Pn(t,e,1))(r),i=0,o=Y(n);i<o;){var a=Math.floor((i+o)/2);t(n[a])<u?i=a+1:o=a}return i}function yr(n,r,t){return function(e,u,i){var a=0,f=Y(e);if("number"==typeof i)0<n?a=0<=i?i:Math.max(i+f,a):f=0<=i?Math.min(i+1,f):i+f+1;else if(t&&i&&f)return e[i=t(e,u)]===u?i:-1;if(u!=u)return 0<=(i=r(o.call(e,a,f),$))?i+a:-1;for(i=0<n?a:f-1;0<=i&&i<f;i+=n)if(e[i]===u)return i;return-1}}var dr=yr(1,pr,hr),gr=yr(-1,vr);function br(n,r,t){r=(tr(n)?pr:lr)(n,r,t);if(void 0!==r&&-1!==r)return n[r]}function mr(n,r,t){if(r=Rn(r,t),tr(n))for(e=0,u=n.length;e<u;e++)r(n[e],e,n);else for(var i=nn(n),e=0,u=i.length;e<u;e++)r(n[i[e]],i[e],n);return n}function jr(n,r,t){r=Pn(r,t);for(var e=!tr(n)&&nn(n),u=(e||n).length,i=Array(u),o=0;o<u;o++){var a=e?e[o]:o;i[o]=r(n[a],a,n)}return i}function wr(n){function r(r,t,e,u){var i=!tr(r)&&nn(r),o=(i||r).length,a=0<n?0:o-1;for(u||(e=r[i?i[a]:a],a+=n);0<=a&&a<o;a+=n){var f=i?i[a]:a;e=t(e,r[f],f,r)}return e}return function(n,t,e,u){var i=3<=arguments.length;return r(n,Rn(t,u,4),e,i)}}var _r=wr(1),Ar=wr(-1);function xr(n,r,t){var e=[];return r=Pn(r,t),mr(n,function(n,t,u){r(n,t,u)&&e.push(n)}),e}function Sr(n,r,t){r=Pn(r,t);for(var e=!tr(n)&&nn(n),u=(e||n).length,i=0;i<u;i++){var o=e?e[i]:i;if(!r(n[o],o,n))return!1}return!0}function Or(n,r,t){r=Pn(r,t);for(var e=!tr(n)&&nn(n),u=(e||n).length,i=0;i<u;i++){var o=e?e[i]:i;if(r(n[o],o,n))return!0}return!1}function Mr(n,r,t,e){return tr(n)||(n=jn(n)),0<=dr(n,r,t="number"==typeof t&&!e?t:0)}var Er=j(function(n,r,t){var e,u;return D(r)?u=r:(r=Bn(r),e=r.slice(0,-1),r=r[r.length-1]),jr(n,function(n){var i=u;if(!i){if(null==(n=e&&e.length?Nn(n,e):n))return;i=n[r]}return null==i?i:i.apply(n,t)})});function Br(n,r){return jr(n,Dn(r))}function Nr(n,r,t){var e,u,i=-1/0,o=-1/0;if(null==r||"number"==typeof r&&"object"!=typeof n[0]&&null!=n)for(var a=0,f=(n=tr(n)?n:jn(n)).length;a<f;a++)null!=(e=n[a])&&i<e&&(i=e);else r=Pn(r,t),mr(n,function(n,t,e){((u=r(n,t,e))>o||u===-1/0&&i===-1/0)&&(i=n,o=u)});return i}var Ir=/[^\ud800-\udfff]|[\ud800-\udbff][\udc00-\udfff]|[\ud800-\udfff]/g;function Tr(n){return n?U(n)?o.call(n):S(n)?n.match(Ir):tr(n)?jr(n,Tn):jn(n):[]}function kr(n,r,t){if(null==r||t)return(n=tr(n)?n:jn(n))[Un(n.length-1)];var e=Tr(n),t=Y(e);r=Math.max(Math.min(r,t),0);for(var i=t-1,o=0;o<r;o++){var a=Un(o,i),f=e[o];e[o]=e[a],e[a]=f}return e.slice(0,r)}function Dr(n,r){return function(t,e,u){var i=r?[[],[]]:{};return e=Pn(e,u),mr(t,function(r,u){u=e(r,u,t);n(i,r,u)}),i}}var Rr=Dr(function(n,r,t){W(n,t)?n[t].push(r):n[t]=[r]}),Vr=Dr(function(n,r,t){n[t]=r}),Fr=Dr(function(n,r,t){W(n,t)?n[t]++:n[t]=1}),Pr=Dr(function(n,r,t){n[t?0:1].push(r)},!0);function qr(n,r,t){return r in t}var Ur=j(function(n,r){var t={},e=r[0];if(null!=n){D(e)?(1<r.length&&(e=Rn(e,r[1])),r=an(n)):(e=qr,r=er(r,!1,!1),n=Object(n));for(var u=0,i=r.length;u<i;u++){var o=r[u],a=n[o];e(a,o,n)&&(t[o]=a)}}return t}),Wr=j(function(n,r){var t,e=r[0];return D(e)?(e=ar(e),1<r.length&&(t=r[1])):(r=jr(er(r,!1,!1),String),e=function(n,t){return!Mr(r,t)}),Ur(n,e,t)});function zr(n,r,t){return o.call(n,0,Math.max(0,n.length-(null==r||t?1:r)))}function Lr(n,r,t){return null==n||n.length<1?null==r||t?void 0:[]:null==r||t?n[0]:zr(n,n.length-r)}function $r(n,r,t){return o.call(n,null==r||t?1:r)}var Cr=j(function(n,r){return r=er(r,!0,!0),xr(n,function(n){return!Mr(r,n)})}),Kr=j(function(n,r){return Cr(n,r)});function Jr(n,r,t,e){A(r)||(e=t,t=r,r=!1),null!=t&&(t=Pn(t,e));for(var u=[],i=[],o=0,a=Y(n);o<a;o++){var f=n[o],c=t?t(f,o,n):f;r&&!t?(o&&i===c||u.push(f),i=c):t?Mr(i,c)||(i.push(c),u.push(f)):Mr(u,f)||u.push(f)}return u}var Gr=j(function(n){return Jr(er(n,!0,!0))});function Hr(n){for(var r=n&&Nr(n,Y).length||0,t=Array(r),e=0;e<r;e++)t[e]=Br(n,e);return t}var Qr=j(Hr);function Xr(n,r){return n._chain?tn(r).chain():r}function Yr(n){return mr(_n(n),function(r){var t=tn[r]=n[r];tn.prototype[r]=function(){var n=[this._wrapped];return i.apply(n,arguments),Xr(this,t.apply(tn,n))}}),tn}mr(["pop","push","reverse","shift","sort","splice","unshift"],function(n){var r=t[n];tn.prototype[n]=function(){var t=this._wrapped;return null!=t&&(r.apply(t,arguments),"shift"!==n&&"splice"!==n||0!==t.length||delete t[0]),Xr(this,t)}}),mr(["concat","join","slice"],function(n){var r=t[n];tn.prototype[n]=function(){var n=this._wrapped;return Xr(this,n=null!=n?r.apply(n,arguments):n)}});n=Yr({__proto__:null,VERSION:n,restArguments:j,isObject:w,isNull:function(n){return null===n},isUndefined:_,isBoolean:A,isElement:function(n){return!(!n||1!==n.nodeType)},isString:S,isNumber:O,isDate:M,isRegExp:E,isError:B,isSymbol:N,isArrayBuffer:I,isDataView:q,isArray:U,isFunction:D,isArguments:L,isFinite:function(n){return!N(n)&&d(n)&&!isNaN(parseFloat(n))},isNaN:$,isTypedArray:X,isEmpty:function(n){var r;return null==n||("number"==typeof(r=Y(n))&&(U(n)||S(n)||L(n))?0===r:0===Y(nn(n)))},isMatch:rn,isEqual:function(n,r){return function on(n,r,t,e){var i;return n===r?0!==n||1/n==1/r:null!=n&&null!=r&&(n!=n?r!=r:("function"==(i=typeof n)||"object"==i||"object"==typeof r)&&function n(r,t,e,i){r instanceof tn&&(r=r._wrapped),t instanceof tn&&(t=t._wrapped);var o=a.call(r);if(o!==a.call(t))return!1;if(V&&"[object Object]"==o&&q(r)){if(!q(t))return!1;o=un}switch(o){case"[object RegExp]":case"[object String]":return""+r==""+t;case"[object Number]":return+r!=+r?+t!=+t:0==+r?1/+r==1/t:+r==+t;case"[object Date]":case"[object Boolean]":return+r==+t;case"[object Symbol]":return u.valueOf.call(r)===u.valueOf.call(t);case"[object ArrayBuffer]":case un:return n(en(r),en(t),e,i)}if(!(o="[object Array]"===o)&&X(r)){if(G(r)!==G(t))return!1;if(r.buffer===t.buffer&&r.byteOffset===t.byteOffset)return!0;o=!0}if(!o){if("object"!=typeof r||"object"!=typeof t)return!1;var c=r.constructor,l=t.constructor;if(c!==l&&!(D(c)&&c instanceof c&&D(l)&&l instanceof l)&&"constructor"in r&&"constructor"in t)return!1}i=i||[];for(var s=(e=e||[]).length;s--;)if(e[s]===r)return i[s]===t;if(e.push(r),i.push(t),o){if((s=r.length)!==t.length)return!1;for(;s--;)if(!on(r[s],t[s],e,i))return!1}else{var p,v=nn(r),s=v.length;if(nn(t).length!==s)return!1;for(;s--;)if(!W(t,p=v[s])||!on(r[p],t[p],e,i))return!1}return e.pop(),i.pop(),!0}(n,r,t,e))}(n,r)},isMap:l,isWeakMap:r,isSet:s,isWeakSet:T,keys:nn,allKeys:an,values:jn,pairs:function(n){for(var r=nn(n),t=r.length,e=Array(t),u=0;u<t;u++)e[u]=[r[u],n[r[u]]];return e},invert:wn,functions:_n,methods:_n,extend:xn,extendOwn:Sn,assign:Sn,defaults:On,create:function(n,r){n=Mn(n);return r&&Sn(n,r),n},clone:function(n){return w(n)?U(n)?n.slice():xn({},n):n},tap:function(n,r){return r(n),n},get:In,has:function(n,r){for(var t=(r=Bn(r)).length,e=0;e<t;e++){var u=r[e];if(!W(n,u))return!1;n=n[u]}return!!t},mapObject:function(n,r,t){r=Pn(r,t);for(var e=nn(n),u=e.length,i={},o=0;o<u;o++){var a=e[o];i[a]=r(n[a],a,n)}return i},identity:Tn,constant:C,noop:qn,toPath:En,property:Dn,propertyOf:function(n){return null==n?qn:function(r){return In(n,r)}},matcher:kn,matches:kn,times:function(n,r,t){var e=Array(Math.max(0,n));r=Rn(r,t,1);for(var u=0;u<n;u++)e[u]=r(u);return e},random:Un,now:Wn,escape:$n,unescape:c,templateSettings:Kn,template:function(n,r,t){r=On({},r=!r&&t?t:r,tn.templateSettings);var t=RegExp([(r.escape||Jn).source,(r.interpolate||Jn).source,(r.evaluate||Jn).source].join("|")+"|$","g"),u=0,i="__p+='";n.replace(t,function(r,t,e,o,a){return i+=n.slice(u,a).replace(Hn,Qn),u=a+r.length,t?i+="'+\n((__t=("+t+"))==null?'':_.escape(__t))+\n'":e?i+="'+\n((__t=("+e+"))==null?'':__t)+\n'":o&&(i+="';\n"+o+"\n__p+='"),r}),i+="';\n";var o,t=r.variable;if(t){if(!Xn.test(t))throw new Error("variable is not a bare identifier: "+t)}else i="with(obj||{}){\n"+i+"}\n",t="obj";i="var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};\n"+i+"return __p;\n";try{o=new Function(t,"_",i)}catch(n){throw n.source=i,n}function f(n){return o.call(this,n,tn)}return f.source="function("+t+"){\n"+i+"}",f},result:function(n,r,t){var e=(r=Bn(r)).length;if(!e)return D(t)?t.call(n):t;for(var u=0;u<e;u++){var i=null==n?void 0:n[r[u]];void 0===i&&(i=t,u=e),n=D(i)?i.call(n):i}return n},uniqueId:function(n){var r=++Yn+"";return n?n+r:r},chain:function(n){n=tn(n);return n._chain=!0,n},iteratee:Fn,partial:nr,bind:rr,bindAll:ur,memoize:function(n,r){function t(e){var u=t.cache,i=""+(r?r.apply(this,arguments):e);return W(u,i)||(u[i]=n.apply(this,arguments)),u[i]}return t.cache={},t},delay:ir,defer:or,throttle:function(n,r,t){function f(){a=!1===t.leading?0:Wn(),e=null,o=n.apply(u,i),e||(u=i=null)}function c(){var c=Wn(),l=(a||!1!==t.leading||(a=c),r-(c-a));return u=this,i=arguments,l<=0||r<l?(e&&(clearTimeout(e),e=null),a=c,o=n.apply(u,i),e||(u=i=null)):e||!1===t.trailing||(e=setTimeout(f,l)),o}var e,u,i,o,a=0;t=t||{};return c.cancel=function(){clearTimeout(e),a=0,e=u=i=null},c},debounce:function(n,r,t){function f(){var c=Wn()-u;c<r?e=setTimeout(f,r-c):(e=null,t||(o=n.apply(a,i)),e||(i=a=null))}var e,u,i,o,a,c=j(function(c){return a=this,i=c,u=Wn(),e||(e=setTimeout(f,r),t&&(o=n.apply(a,i))),o});return c.cancel=function(){clearTimeout(e),e=i=a=null},c},wrap:function(n,r){return nr(r,n)},negate:ar,compose:function(){var n=arguments,r=n.length-1;return function(){for(var t=r,e=n[r].apply(this,arguments);t--;)e=n[t].call(this,e);return e}},after:function(n,r){return function(){if(--n<1)return r.apply(this,arguments)}},before:fr,once:cr,findKey:lr,findIndex:pr,findLastIndex:vr,sortedIndex:hr,indexOf:dr,lastIndexOf:gr,find:br,detect:br,findWhere:function(n,r){return br(n,kn(r))},each:mr,forEach:mr,map:jr,collect:jr,reduce:_r,foldl:_r,inject:_r,reduceRight:Ar,foldr:Ar,filter:xr,select:xr,reject:function(n,r,t){return xr(n,ar(Pn(r)),t)},every:Sr,all:Sr,some:Or,any:Or,contains:Mr,includes:Mr,include:Mr,invoke:Er,pluck:Br,where:function(n,r){return xr(n,kn(r))},max:Nr,min:function(n,r,t){var e,u,i=1/0,o=1/0;if(null==r||"number"==typeof r&&"object"!=typeof n[0]&&null!=n)for(var a=0,f=(n=tr(n)?n:jn(n)).length;a<f;a++)null!=(e=n[a])&&e<i&&(i=e);else r=Pn(r,t),mr(n,function(n,t,e){((u=r(n,t,e))<o||u===1/0&&i===1/0)&&(i=n,o=u)});return i},shuffle:function(n){return kr(n,1/0)},sample:kr,sortBy:function(n,r,t){var e=0;return r=Pn(r,t),Br(jr(n,function(n,t,u){return{value:n,index:e++,criteria:r(n,t,u)}}).sort(function(n,r){var t=n.criteria,e=r.criteria;if(t!==e){if(e<t||void 0===t)return 1;if(t<e||void 0===e)return-1}return n.index-r.index}),"value")},groupBy:Rr,indexBy:Vr,countBy:Fr,partition:Pr,toArray:Tr,size:function(n){return null==n?0:(tr(n)?n:nn(n)).length},pick:Ur,omit:Wr,first:Lr,head:Lr,take:Lr,initial:zr,last:function(n,r,t){return null==n||n.length<1?null==r||t?void 0:[]:null==r||t?n[n.length-1]:$r(n,Math.max(0,n.length-r))},rest:$r,tail:$r,drop:$r,compact:function(n){return xr(n,Boolean)},flatten:function(n,r){return er(n,r,!1)},without:Kr,uniq:Jr,unique:Jr,union:Gr,intersection:function(n){for(var r=[],t=arguments.length,e=0,u=Y(n);e<u;e++){var i=n[e];if(!Mr(r,i)){for(var o=1;o<t&&Mr(arguments[o],i);o++);o===t&&r.push(i)}}return r},difference:Cr,unzip:Hr,transpose:Hr,zip:Qr,object:function(n,r){for(var t={},e=0,u=Y(n);e<u;e++)r?t[n[e]]=r[e]:t[n[e][0]]=n[e][1];return t},range:function(n,r,t){null==r&&(r=n||0,n=0),t=t||(r<n?-1:1);for(var e=Math.max(Math.ceil((r-n)/t),0),u=Array(e),i=0;i<e;i++,n+=t)u[i]=n;return u},chunk:function(n,r){if(null==r||r<1)return[];for(var t=[],e=0,u=n.length;e<u;)t.push(o.call(n,e,e+=r));return t},mixin:Yr,default:tn});return n._=n}),!function(globalScope){var Decimal,inexact,noConflict,quadrant,EXP_LIMIT=9e15,MAX_DIGITS=1e9,NUMERALS="0123456789abcdef",LN10="2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058",PI="3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789",DEFAULTS={precision:20,rounding:4,modulo:1,toExpNeg:-7,toExpPos:21,minE:-EXP_LIMIT,maxE:EXP_LIMIT,crypto:!1},external=!0,decimalError="[DecimalError] ",invalidArgument=decimalError+"Invalid argument: ",precisionLimitExceeded=decimalError+"Precision limit exceeded",cryptoUnavailable=decimalError+"crypto unavailable",tag="[object Decimal]",mathfloor=Math.floor,mathpow=Math.pow,isBinary=/^0b([01]+(\.[01]*)?|\.[01]+)(p[+-]?\d+)?$/i,isHex=/^0x([0-9a-f]+(\.[0-9a-f]*)?|\.[0-9a-f]+)(p[+-]?\d+)?$/i,isOctal=/^0o([0-7]+(\.[0-7]*)?|\.[0-7]+)(p[+-]?\d+)?$/i,isDecimal=/^(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,BASE=1e7,LOG_BASE=7,LN10_PRECISION=LN10.length-1,PI_PRECISION=PI.length-1,P={toStringTag:tag};function digitsToString(d){var i,k,ws,indexOfLastWord=d.length-1,str="",w=d[0];if(0<indexOfLastWord){for(str+=w,i=1;i<indexOfLastWord;i++)ws=d[i]+"",(k=LOG_BASE-ws.length)&&(str+=getZeroString(k)),str+=ws;w=d[i],(k=LOG_BASE-(ws=w+"").length)&&(str+=getZeroString(k))}else if(0===w)return"0";for(;w%10==0;)w/=10;return str+w}function checkInt32(i,min,max){if(i!==~~i||i<min||max<i)throw Error(invalidArgument+i)}function checkRoundingDigits(d,i,rm,repeating){for(var di,rd,k=d[0];10<=k;k/=10)--i;return--i<0?(i+=LOG_BASE,di=0):(di=Math.ceil((i+1)/LOG_BASE),i%=LOG_BASE),k=mathpow(10,LOG_BASE-i),rd=d[di]%k|0,null==repeating?i<3?(0==i?rd=rd/100|0:1==i&&(rd=rd/10|0),rm<4&&99999==rd||3<rm&&49999==rd||5e4==rd||0==rd):(rm<4&&rd+1==k||3<rm&&rd+1==k/2)&&(d[di+1]/k/100|0)==mathpow(10,i-2)-1||(rd==k/2||0==rd)&&0==(d[di+1]/k/100|0):i<4?(0==i?rd=rd/1e3|0:1==i?rd=rd/100|0:2==i&&(rd=rd/10|0),(repeating||rm<4)&&9999==rd||!repeating&&3<rm&&4999==rd):((repeating||rm<4)&&rd+1==k||!repeating&&3<rm&&rd+1==k/2)&&(d[di+1]/k/1e3|0)==mathpow(10,i-3)-1}function convertBase(str,baseIn,baseOut){for(var j,arrL,arr=[0],i=0,strL=str.length;i<strL;){for(arrL=arr.length;arrL--;)arr[arrL]*=baseIn;for(arr[0]+=NUMERALS.indexOf(str.charAt(i++)),j=0;j<arr.length;j++)baseOut-1<arr[j]&&(void 0===arr[j+1]&&(arr[j+1]=0),arr[j+1]+=arr[j]/baseOut|0,arr[j]%=baseOut)}return arr.reverse()}P.absoluteValue=P.abs=function(){var x=new this.constructor(this);return x.s<0&&(x.s=1),finalise(x)},P.ceil=function(){return finalise(new this.constructor(this),this.e+1,2)},P.clampedTo=P.clamp=function(min,max){var x=this,Ctor=x.constructor;if(min=new Ctor(min),max=new Ctor(max),!min.s||!max.s)return new Ctor(NaN);if(min.gt(max))throw Error(invalidArgument+max);return x.cmp(min)<0?min:0<x.cmp(max)?max:new Ctor(x)},P.comparedTo=P.cmp=function(y){var i,j,x=this,xd=x.d,yd=(y=new x.constructor(y)).d,xs=x.s,ys=y.s;if(!xd||!yd)return xs&&ys?xs!==ys?xs:xd===yd?0:!xd^xs<0?1:-1:NaN;if(!xd[0]||!yd[0])return xd[0]?xs:yd[0]?-ys:0;if(xs!==ys)return xs;if(x.e!==y.e)return x.e>y.e^xs<0?1:-1;for(i=0,j=(ys=xd.length)<(x=yd.length)?ys:x;i<j;++i)if(xd[i]!==yd[i])return xd[i]>yd[i]^xs<0?1:-1;return ys===x?0:x<ys^xs<0?1:-1},P.cosine=P.cos=function(){var pr,rm,x=this,Ctor=x.constructor;return x.d?x.d[0]?(pr=Ctor.precision,rm=Ctor.rounding,Ctor.precision=pr+Math.max(x.e,x.sd())+LOG_BASE,Ctor.rounding=1,x=function(Ctor,x){var k,len;if(!x.isZero()){len=x.d.length,len=len<32?(1/tinyPow(4,k=Math.ceil(len/3))).toString():(k=16,"2.3283064365386962890625e-10"),Ctor.precision+=k,x=taylorSeries(Ctor,1,x.times(len),new Ctor(1));for(var i=k;i--;){var cos2x=x.times(x);x=cos2x.times(cos2x).minus(cos2x).times(8).plus(1)}Ctor.precision-=k}return x}(Ctor,toLessThanHalfPi(Ctor,x)),Ctor.precision=pr,Ctor.rounding=rm,finalise(2==quadrant||3==quadrant?x.neg():x,pr,rm,!0)):new Ctor(1):new Ctor(NaN)},P.cubeRoot=P.cbrt=function(){var e,m,n,r,rep,s,sd,t,t3,t3plusx,x=this,Ctor=x.constructor;if(!x.isFinite()||x.isZero())return new Ctor(x);for(external=!1,(s=x.s*mathpow(x.s*x,1/3))&&Math.abs(s)!=1/0?r=new Ctor(s.toString()):(n=digitsToString(x.d),(s=((e=x.e)-n.length+1)%3)&&(n+=1==s||-2==s?"0":"00"),s=mathpow(n,1/3),e=mathfloor((e+1)/3)-(e%3==(e<0?-1:2)),(r=new Ctor(n=s==1/0?"5e"+e:(n=s.toExponential()).slice(0,n.indexOf("e")+1)+e)).s=x.s),sd=(e=Ctor.precision)+3;;)if(t3plusx=(t3=(t=r).times(t).times(t)).plus(x),r=divide(t3plusx.plus(x).times(t),t3plusx.plus(t3),sd+2,1),digitsToString(t.d).slice(0,sd)===(n=digitsToString(r.d)).slice(0,sd)){if("9999"!=(n=n.slice(sd-3,sd+1))&&(rep||"4999"!=n)){+n&&(+n.slice(1)||"5"!=n.charAt(0))||(finalise(r,e+1,1),m=!r.times(r).times(r).eq(x));break}if(!rep&&(finalise(t,e+1,0),t.times(t).times(t).eq(x))){r=t;break}sd+=4,rep=1}return external=!0,finalise(r,e,Ctor.rounding,m)},P.decimalPlaces=P.dp=function(){var w,d=this.d,n=NaN;if(d){if(n=((w=d.length-1)-mathfloor(this.e/LOG_BASE))*LOG_BASE,w=d[w])for(;w%10==0;w/=10)n--;n<0&&(n=0)}return n},P.dividedBy=P.div=function(y){return divide(this,new this.constructor(y))},P.dividedToIntegerBy=P.divToInt=function(y){var Ctor=this.constructor;return finalise(divide(this,new Ctor(y),0,1,1),Ctor.precision,Ctor.rounding)},P.equals=P.eq=function(y){return 0===this.cmp(y)},P.floor=function(){return finalise(new this.constructor(this),this.e+1,3)},P.greaterThan=P.gt=function(y){return 0<this.cmp(y)},P.greaterThanOrEqualTo=P.gte=function(y){y=this.cmp(y);return 1==y||0===y},P.hyperbolicCosine=P.cosh=function(){var k,pr,rm,Ctor=(x=this).constructor,one=new Ctor(1);if(!x.isFinite())return new Ctor(x.s?1/0:NaN);if(x.isZero())return one;pr=Ctor.precision,rm=Ctor.rounding,Ctor.precision=pr+Math.max(x.e,x.sd())+4,Ctor.rounding=1;for(var cosh2_x,len=(len=x.d.length)<32?(1/tinyPow(4,k=Math.ceil(len/3))).toString():(k=16,"2.3283064365386962890625e-10"),x=taylorSeries(Ctor,1,x.times(len),new Ctor(1),!0),i=k,d8=new Ctor(8);i--;)cosh2_x=x.times(x),x=one.minus(cosh2_x.times(d8.minus(cosh2_x.times(d8))));return finalise(x,Ctor.precision=pr,Ctor.rounding=rm,!0)},P.hyperbolicSine=P.sinh=function(){var pr,rm,len,Ctor=(x=this).constructor;if(!x.isFinite()||x.isZero())return new Ctor(x);if(pr=Ctor.precision,rm=Ctor.rounding,Ctor.precision=pr+Math.max(x.e,x.sd())+4,Ctor.rounding=1,(len=x.d.length)<3)x=taylorSeries(Ctor,2,x,x,!0);else for(var sinh2_x,k=1.4*Math.sqrt(len),x=taylorSeries(Ctor,2,x=x.times(1/tinyPow(5,k=16<k?16:0|k)),x,!0),d5=new Ctor(5),d16=new Ctor(16),d20=new Ctor(20);k--;)sinh2_x=x.times(x),x=x.times(d5.plus(sinh2_x.times(d16.times(sinh2_x).plus(d20))));return finalise(x,Ctor.precision=pr,Ctor.rounding=rm,!0)},P.hyperbolicTangent=P.tanh=function(){var pr,rm,x=this,Ctor=x.constructor;return x.isFinite()?x.isZero()?new Ctor(x):(pr=Ctor.precision,rm=Ctor.rounding,Ctor.precision=pr+7,Ctor.rounding=1,divide(x.sinh(),x.cosh(),Ctor.precision=pr,Ctor.rounding=rm)):new Ctor(x.s)},P.inverseCosine=P.acos=function(){var x=this,Ctor=x.constructor,k=x.abs().cmp(1),pr=Ctor.precision,rm=Ctor.rounding;return-1!==k?0===k?x.isNeg()?getPi(Ctor,pr,rm):new Ctor(0):new Ctor(NaN):x.isZero()?getPi(Ctor,pr+4,rm).times(.5):(Ctor.precision=pr+6,Ctor.rounding=1,x=x.asin(),k=getPi(Ctor,pr+4,rm).times(.5),Ctor.precision=pr,Ctor.rounding=rm,k.minus(x))},P.inverseHyperbolicCosine=P.acosh=function(){var pr,rm,x=this,Ctor=x.constructor;return x.lte(1)?new Ctor(x.eq(1)?0:NaN):x.isFinite()?(pr=Ctor.precision,rm=Ctor.rounding,Ctor.precision=pr+Math.max(Math.abs(x.e),x.sd())+4,Ctor.rounding=1,external=!1,x=x.times(x).minus(1).sqrt().plus(x),external=!0,Ctor.precision=pr,Ctor.rounding=rm,x.ln()):new Ctor(x)},P.inverseHyperbolicSine=P.asinh=function(){var pr,rm,x=this,Ctor=x.constructor;return!x.isFinite()||x.isZero()?new Ctor(x):(pr=Ctor.precision,rm=Ctor.rounding,Ctor.precision=pr+2*Math.max(Math.abs(x.e),x.sd())+6,Ctor.rounding=1,external=!1,x=x.times(x).plus(1).sqrt().plus(x),external=!0,Ctor.precision=pr,Ctor.rounding=rm,x.ln())},P.inverseHyperbolicTangent=P.atanh=function(){var pr,rm,xsd,x=this,Ctor=x.constructor;return x.isFinite()?0<=x.e?new Ctor(x.abs().eq(1)?x.s/0:x.isZero()?x:NaN):(pr=Ctor.precision,rm=Ctor.rounding,xsd=x.sd(),Math.max(xsd,pr)<2*-x.e-1?finalise(new Ctor(x),pr,rm,!0):(Ctor.precision=xsd=xsd-x.e,x=divide(x.plus(1),new Ctor(1).minus(x),xsd+pr,1),Ctor.precision=pr+4,Ctor.rounding=1,x=x.ln(),Ctor.precision=pr,Ctor.rounding=rm,x.times(.5))):new Ctor(NaN)},P.inverseSine=P.asin=function(){var k,pr,rm,x=this,Ctor=x.constructor;return x.isZero()?new Ctor(x):(k=x.abs().cmp(1),pr=Ctor.precision,rm=Ctor.rounding,-1!==k?0===k?((k=getPi(Ctor,pr+4,rm).times(.5)).s=x.s,k):new Ctor(NaN):(Ctor.precision=pr+6,Ctor.rounding=1,x=x.div(new Ctor(1).minus(x.times(x)).sqrt().plus(1)).atan(),Ctor.precision=pr,Ctor.rounding=rm,x.times(2)))},P.inverseTangent=P.atan=function(){var i,j,k,n,px,t,r,wpr,x2,x=this,Ctor=x.constructor,pr=Ctor.precision,rm=Ctor.rounding;if(x.isFinite()){if(x.isZero())return new Ctor(x);if(x.abs().eq(1)&&pr+4<=PI_PRECISION)return(r=getPi(Ctor,pr+4,rm).times(.25)).s=x.s,r}else{if(!x.s)return new Ctor(NaN);if(pr+4<=PI_PRECISION)return(r=getPi(Ctor,pr+4,rm).times(.5)).s=x.s,r}for(Ctor.precision=wpr=pr+10,Ctor.rounding=1,i=k=Math.min(28,wpr/LOG_BASE+2|0);i;--i)x=x.div(x.times(x).plus(1).sqrt().plus(1));for(external=!1,j=Math.ceil(wpr/LOG_BASE),n=1,x2=x.times(x),r=new Ctor(x),px=x;-1!==i;)if(px=px.times(x2),t=r.minus(px.div(n+=2)),px=px.times(x2),void 0!==(r=t.plus(px.div(n+=2))).d[j])for(i=j;r.d[i]===t.d[i]&&i--;);return k&&(r=r.times(2<<k-1)),external=!0,finalise(r,Ctor.precision=pr,Ctor.rounding=rm,!0)},P.isFinite=function(){return!!this.d},P.isInteger=P.isInt=function(){return!!this.d&&mathfloor(this.e/LOG_BASE)>this.d.length-2},P.isNaN=function(){return!this.s},P.isNegative=P.isNeg=function(){return this.s<0},P.isPositive=P.isPos=function(){return 0<this.s},P.isZero=function(){return!!this.d&&0===this.d[0]},P.lessThan=P.lt=function(y){return this.cmp(y)<0},P.lessThanOrEqualTo=P.lte=function(y){return this.cmp(y)<1},P.logarithm=P.log=function(base){var isBase10,d,denominator,k,inf,num,sd,r,Ctor=this.constructor,pr=Ctor.precision,rm=Ctor.rounding;if(null==base)base=new Ctor(10),isBase10=!0;else{if(d=(base=new Ctor(base)).d,base.s<0||!d||!d[0]||base.eq(1))return new Ctor(NaN);isBase10=base.eq(10)}if(d=this.d,this.s<0||!d||!d[0]||this.eq(1))return new Ctor(d&&!d[0]?-1/0:1!=this.s?NaN:d?0:1/0);if(isBase10)if(1<d.length)inf=!0;else{for(k=d[0];k%10==0;)k/=10;inf=1!==k}if(external=!1,num=naturalLogarithm(this,sd=pr+5),denominator=isBase10?getLn10(Ctor,sd+10):naturalLogarithm(base,sd),checkRoundingDigits((r=divide(num,denominator,sd,1)).d,k=pr,rm))do{if(num=naturalLogarithm(this,sd+=10),denominator=isBase10?getLn10(Ctor,sd+10):naturalLogarithm(base,sd),r=divide(num,denominator,sd,1),!inf){+digitsToString(r.d).slice(k+1,k+15)+1==1e14&&(r=finalise(r,pr+1,0));break}}while(checkRoundingDigits(r.d,k+=10,rm));return external=!0,finalise(r,pr,rm)},P.minus=P.sub=function(y){var d,e,i,j,k,len,pr,rm,xd,xe,xLTy,yd,x=this,Ctor=x.constructor;if(y=new Ctor(y),!x.d||!y.d)return x.s&&y.s?x.d?y.s=-y.s:y=new Ctor(y.d||x.s!==y.s?x:NaN):y=new Ctor(NaN),y;if(x.s!=y.s)return y.s=-y.s,x.plus(y);if(xd=x.d,yd=y.d,pr=Ctor.precision,rm=Ctor.rounding,xd[0]&&yd[0]){if(e=mathfloor(y.e/LOG_BASE),xe=mathfloor(x.e/LOG_BASE),xd=xd.slice(),k=xe-e){for(len=((xLTy=k<0)?(d=xd,k=-k,yd):(d=yd,e=xe,xd)).length,(i=Math.max(Math.ceil(pr/LOG_BASE),len)+2)<k&&(k=i,d.length=1),d.reverse(),i=k;i--;)d.push(0);d.reverse()}else{for((xLTy=(i=xd.length)<(len=yd.length))&&(len=i),i=0;i<len;i++)if(xd[i]!=yd[i]){xLTy=xd[i]<yd[i];break}k=0}for(xLTy&&(d=xd,xd=yd,yd=d,y.s=-y.s),len=xd.length,i=yd.length-len;0<i;--i)xd[len++]=0;for(i=yd.length;k<i;){if(xd[--i]<yd[i]){for(j=i;j&&0===xd[--j];)xd[j]=BASE-1;--xd[j],xd[i]+=BASE}xd[i]-=yd[i]}for(;0===xd[--len];)xd.pop();for(;0===xd[0];xd.shift())--e;if(!xd[0])return new Ctor(3===rm?-0:0);y.d=xd,y.e=getBase10Exponent(xd,e)}else if(yd[0])y.s=-y.s;else{if(!xd[0])return new Ctor(3===rm?-0:0);y=new Ctor(x)}return external?finalise(y,pr,rm):y},P.modulo=P.mod=function(y){var q,x=this,Ctor=x.constructor;return y=new Ctor(y),!x.d||!y.s||y.d&&!y.d[0]?new Ctor(NaN):!y.d||x.d&&!x.d[0]?finalise(new Ctor(x),Ctor.precision,Ctor.rounding):(external=!1,9==Ctor.modulo?(q=divide(x,y.abs(),0,3,1)).s*=y.s:q=divide(x,y,0,Ctor.modulo,1),q=q.times(y),external=!0,x.minus(q))},P.naturalExponential=P.exp=function(){return naturalExponential(this)},P.naturalLogarithm=P.ln=function(){return naturalLogarithm(this)},P.negated=P.neg=function(){var x=new this.constructor(this);return x.s=-x.s,finalise(x)},P.plus=P.add=function(y){var carry,d,e,i,k,len,pr,rm,xd,yd,x=this,Ctor=x.constructor;if(y=new Ctor(y),!x.d||!y.d)return x.s&&y.s?x.d||(y=new Ctor(y.d||x.s===y.s?x:NaN)):y=new Ctor(NaN),y;if(x.s!=y.s)return y.s=-y.s,x.minus(y);if(xd=x.d,yd=y.d,pr=Ctor.precision,rm=Ctor.rounding,xd[0]&&yd[0]){if(k=mathfloor(x.e/LOG_BASE),e=mathfloor(y.e/LOG_BASE),xd=xd.slice(),i=k-e){for((len=(len=(i<0?(d=xd,i=-i,yd):(d=yd,e=k,xd)).length)<(k=Math.ceil(pr/LOG_BASE))?k+1:len+1)<i&&(i=len,d.length=1),d.reverse();i--;)d.push(0);d.reverse()}for((len=xd.length)-(i=yd.length)<0&&(i=len,d=yd,yd=xd,xd=d),carry=0;i;)carry=(xd[--i]=xd[i]+yd[i]+carry)/BASE|0,xd[i]%=BASE;for(carry&&(xd.unshift(carry),++e),len=xd.length;0==xd[--len];)xd.pop();y.d=xd,y.e=getBase10Exponent(xd,e)}else yd[0]||(y=new Ctor(x));return external?finalise(y,pr,rm):y},P.precision=P.sd=function(z){var k,x=this;if(void 0!==z&&z!==!!z&&1!==z&&0!==z)throw Error(invalidArgument+z);return x.d?(k=getPrecision(x.d),z&&x.e+1>k&&(k=x.e+1)):k=NaN,k},P.round=function(){var x=this,Ctor=x.constructor;return finalise(new Ctor(x),x.e+1,Ctor.rounding)},P.sine=P.sin=function(){var pr,rm,x=this,Ctor=x.constructor;return x.isFinite()?x.isZero()?new Ctor(x):(pr=Ctor.precision,rm=Ctor.rounding,Ctor.precision=pr+Math.max(x.e,x.sd())+LOG_BASE,Ctor.rounding=1,x=function(Ctor,x){var k,len=x.d.length;if(len<3)return x.isZero()?x:taylorSeries(Ctor,2,x,x);k=16<(k=1.4*Math.sqrt(len))?16:0|k,x=x.times(1/tinyPow(5,k)),x=taylorSeries(Ctor,2,x,x);for(var sin2_x,d5=new Ctor(5),d16=new Ctor(16),d20=new Ctor(20);k--;)sin2_x=x.times(x),x=x.times(d5.plus(sin2_x.times(d16.times(sin2_x).minus(d20))));return x}(Ctor,toLessThanHalfPi(Ctor,x)),Ctor.precision=pr,Ctor.rounding=rm,finalise(2<quadrant?x.neg():x,pr,rm,!0)):new Ctor(NaN)},P.squareRoot=P.sqrt=function(){var m,n,sd,r,rep,t,x=this,d=x.d,e=x.e,s=x.s,Ctor=x.constructor;if(1!==s||!d||!d[0])return new Ctor(!s||s<0&&(!d||d[0])?NaN:d?x:1/0);for(external=!1,r=0==(s=Math.sqrt(+x))||s==1/0?(((n=digitsToString(d)).length+e)%2==0&&(n+="0"),s=Math.sqrt(n),e=mathfloor((e+1)/2)-(e<0||e%2),new Ctor(n=s==1/0?"5e"+e:(n=s.toExponential()).slice(0,n.indexOf("e")+1)+e)):new Ctor(s.toString()),sd=(e=Ctor.precision)+3;;)if(r=(t=r).plus(divide(x,t,sd+2,1)).times(.5),digitsToString(t.d).slice(0,sd)===(n=digitsToString(r.d)).slice(0,sd)){if("9999"!=(n=n.slice(sd-3,sd+1))&&(rep||"4999"!=n)){+n&&(+n.slice(1)||"5"!=n.charAt(0))||(finalise(r,e+1,1),m=!r.times(r).eq(x));break}if(!rep&&(finalise(t,e+1,0),t.times(t).eq(x))){r=t;break}sd+=4,rep=1}return external=!0,finalise(r,e,Ctor.rounding,m)},P.tangent=P.tan=function(){var pr,rm,x=this,Ctor=x.constructor;return x.isFinite()?x.isZero()?new Ctor(x):(pr=Ctor.precision,rm=Ctor.rounding,Ctor.precision=pr+10,Ctor.rounding=1,(x=x.sin()).s=1,x=divide(x,new Ctor(1).minus(x.times(x)).sqrt(),pr+10,0),Ctor.precision=pr,Ctor.rounding=rm,finalise(2==quadrant||4==quadrant?x.neg():x,pr,rm,!0)):new Ctor(NaN)},P.times=P.mul=function(y){var carry,i,k,r,rL,t,xdL,ydL,x=this,Ctor=x.constructor,xd=x.d,yd=(y=new Ctor(y)).d;if(y.s*=x.s,!(xd&&xd[0]&&yd&&yd[0]))return new Ctor(!y.s||xd&&!xd[0]&&!yd||yd&&!yd[0]&&!xd?NaN:xd&&yd?0*y.s:y.s/0);for(x=mathfloor(x.e/LOG_BASE)+mathfloor(y.e/LOG_BASE),(xdL=xd.length)<(ydL=yd.length)&&(r=xd,xd=yd,yd=r,rL=xdL,xdL=ydL,ydL=rL),r=[],i=rL=xdL+ydL;i--;)r.push(0);for(i=ydL;0<=--i;){for(carry=0,k=xdL+i;i<k;)t=r[k]+yd[i]*xd[k-i-1]+carry,r[k--]=t%BASE|0,carry=t/BASE|0;r[k]=(r[k]+carry)%BASE|0}for(;!r[--rL];)r.pop();return carry?++x:r.shift(),y.d=r,y.e=getBase10Exponent(r,x),external?finalise(y,Ctor.precision,Ctor.rounding):y},P.toBinary=function(sd,rm){return toStringBinary(this,2,sd,rm)},P.toDecimalPlaces=P.toDP=function(dp,rm){var Ctor=this.constructor,x=new Ctor(this);return void 0===dp?x:(checkInt32(dp,0,MAX_DIGITS),void 0===rm?rm=Ctor.rounding:checkInt32(rm,0,8),finalise(x,dp+x.e+1,rm))},P.toExponential=function(dp,rm){var x=this,Ctor=x.constructor,Ctor=void 0===dp?finiteToString(x,!0):(checkInt32(dp,0,MAX_DIGITS),void 0===rm?rm=Ctor.rounding:checkInt32(rm,0,8),finiteToString(x=finalise(new Ctor(x),dp+1,rm),!0,dp+1));return x.isNeg()&&!x.isZero()?"-"+Ctor:Ctor},P.toFixed=function(dp,rm){var x=this,Ctor=x.constructor,rm=void 0===dp?finiteToString(x):(checkInt32(dp,0,MAX_DIGITS),void 0===rm?rm=Ctor.rounding:checkInt32(rm,0,8),finiteToString(Ctor=finalise(new Ctor(x),dp+x.e+1,rm),!1,dp+Ctor.e+1));return x.isNeg()&&!x.isZero()?"-"+rm:rm},P.toFraction=function(maxD){var d,d0,d1,d2,e,n,n0,n1,k,q,x=this,xd=x.d,Ctor=x.constructor;if(!xd)return new Ctor(x);if(n1=d0=new Ctor(1),d1=n0=new Ctor(0),e=(d=new Ctor(d1)).e=getPrecision(xd)-x.e-1,d.d[0]=mathpow(10,(k=e%LOG_BASE)<0?LOG_BASE+k:k),null==maxD)maxD=0<e?d:n1;else{if(!(n=new Ctor(maxD)).isInt()||n.lt(n1))throw Error(invalidArgument+n);maxD=n.gt(d)?0<e?d:n1:n}for(external=!1,n=new Ctor(digitsToString(xd)),k=Ctor.precision,Ctor.precision=e=xd.length*LOG_BASE*2;q=divide(n,d,0,1,1),1!=(d2=d0.plus(q.times(d1))).cmp(maxD);)d0=d1,d1=d2,d2=n1,n1=n0.plus(q.times(d2)),n0=d2,d2=d,d=n.minus(q.times(d2)),n=d2;return d2=divide(maxD.minus(d0),d1,0,1,1),n0=n0.plus(d2.times(n1)),d0=d0.plus(d2.times(d1)),n0.s=n1.s=x.s,xd=divide(n1,d1,e,1).minus(x).abs().cmp(divide(n0,d0,e,1).minus(x).abs())<1?[n1,d1]:[n0,d0],Ctor.precision=k,external=!0,xd},P.toHexadecimal=P.toHex=function(sd,rm){return toStringBinary(this,16,sd,rm)},P.toNearest=function(y,rm){var Ctor=(x=this).constructor,x=new Ctor(x);if(null==y){if(!x.d)return x;y=new Ctor(1),rm=Ctor.rounding}else{if(y=new Ctor(y),void 0===rm?rm=Ctor.rounding:checkInt32(rm,0,8),!x.d)return y.s?x:y;if(!y.d)return y.s&&(y.s=x.s),y}return y.d[0]?(external=!1,x=divide(x,y,0,rm,1).times(y),external=!0,finalise(x)):(y.s=x.s,x=y),x},P.toNumber=function(){return+this},P.toOctal=function(sd,rm){return toStringBinary(this,8,sd,rm)},P.toPower=P.pow=function(y){var e,k,pr,r,rm,s,x=this,Ctor=x.constructor,yn=+(y=new Ctor(y));if(!(x.d&&y.d&&x.d[0]&&y.d[0]))return new Ctor(mathpow(+x,yn));if((x=new Ctor(x)).eq(1))return x;if(pr=Ctor.precision,rm=Ctor.rounding,y.eq(1))return finalise(x,pr,rm);if((e=mathfloor(y.e/LOG_BASE))>=y.d.length-1&&(k=yn<0?-yn:yn)<=9007199254740991)return r=intPow(Ctor,x,k,pr),y.s<0?new Ctor(1).div(r):finalise(r,pr,rm);if((s=x.s)<0){if(e<y.d.length-1)return new Ctor(NaN);if(0==(1&y.d[e])&&(s=1),0==x.e&&1==x.d[0]&&1==x.d.length)return x.s=s,x}return(e=0!=(k=mathpow(+x,yn))&&isFinite(k)?new Ctor(k+"").e:mathfloor(yn*(Math.log("0."+digitsToString(x.d))/Math.LN10+x.e+1)))>Ctor.maxE+1||e<Ctor.minE-1?new Ctor(0<e?s/0:0):(external=!1,Ctor.rounding=x.s=1,k=Math.min(12,(e+"").length),(r=(r=naturalExponential(y.times(naturalLogarithm(x,pr+k)),pr)).d&&checkRoundingDigits((r=finalise(r,pr+5,1)).d,pr,rm)&&+digitsToString((r=finalise(naturalExponential(y.times(naturalLogarithm(x,(e=pr+10)+k)),e),e+5,1)).d).slice(pr+1,pr+15)+1==1e14?finalise(r,pr+1,0):r).s=s,external=!0,finalise(r,pr,Ctor.rounding=rm))},P.toPrecision=function(sd,rm){var x=this,Ctor=x.constructor,rm=void 0===sd?finiteToString(x,x.e<=Ctor.toExpNeg||x.e>=Ctor.toExpPos):(checkInt32(sd,1,MAX_DIGITS),void 0===rm?rm=Ctor.rounding:checkInt32(rm,0,8),finiteToString(x=finalise(new Ctor(x),sd,rm),sd<=x.e||x.e<=Ctor.toExpNeg,sd));return x.isNeg()&&!x.isZero()?"-"+rm:rm},P.toSignificantDigits=P.toSD=function(sd,rm){var Ctor=this.constructor;return void 0===sd?(sd=Ctor.precision,rm=Ctor.rounding):(checkInt32(sd,1,MAX_DIGITS),void 0===rm?rm=Ctor.rounding:checkInt32(rm,0,8)),finalise(new Ctor(this),sd,rm)},P.toString=function(){var x=this,Ctor=x.constructor,Ctor=finiteToString(x,x.e<=Ctor.toExpNeg||x.e>=Ctor.toExpPos);return x.isNeg()&&!x.isZero()?"-"+Ctor:Ctor},P.truncated=P.trunc=function(){return finalise(new this.constructor(this),this.e+1,1)},P.valueOf=P.toJSON=function(){var x=this,Ctor=x.constructor,Ctor=finiteToString(x,x.e<=Ctor.toExpNeg||x.e>=Ctor.toExpPos);return x.isNeg()?"-"+Ctor:Ctor};var divide=function(x,y,pr,rm,dp,base){var cmp,e,i,k,logBase,more,prod,prodL,qd,rem,remL,rem0,sd,t,xi,xL,yd0,yL,yz,Ctor=x.constructor,sign=x.s==y.s?1:-1,xd=x.d,yd=y.d;if(!(xd&&xd[0]&&yd&&yd[0]))return new Ctor(x.s&&y.s&&(xd?!yd||xd[0]!=yd[0]:yd)?xd&&0==xd[0]||!yd?0*sign:sign/0:NaN);for(e=base?(logBase=1,x.e-y.e):(base=BASE,mathfloor(x.e/(logBase=LOG_BASE))-mathfloor(y.e/logBase)),yL=yd.length,xL=xd.length,qd=(sign=new Ctor(sign)).d=[],i=0;yd[i]==(xd[i]||0);i++);if(yd[i]>(xd[i]||0)&&e--,null==pr?(sd=pr=Ctor.precision,rm=Ctor.rounding):sd=dp?pr+(x.e-y.e)+1:pr,sd<0)qd.push(1),more=!0;else{if(sd=sd/logBase+2|0,i=0,1==yL){for(yd=yd[k=0],sd++;(i<xL||k)&&sd--;i++)t=k*base+(xd[i]||0),qd[i]=t/yd|0,k=t%yd|0;more=k||i<xL}else{for(1<(k=base/(yd[0]+1)|0)&&(yd=multiplyInteger(yd,k,base),xd=multiplyInteger(xd,k,base),yL=yd.length,xL=xd.length),xi=yL,remL=(rem=xd.slice(0,yL)).length;remL<yL;)rem[remL++]=0;for((yz=yd.slice()).unshift(0),yd0=yd[0],yd[1]>=base/2&&++yd0;k=0,(cmp=compare(yd,rem,yL,remL))<0?(rem0=rem[0],1<(k=(rem0=yL!=remL?rem0*base+(rem[1]||0):rem0)/yd0|0)?1==(cmp=compare(prod=multiplyInteger(yd,k=base<=k?base-1:k,base),rem,prodL=prod.length,remL=rem.length))&&(k--,subtract(prod,yL<prodL?yz:yd,prodL,base)):(0==k&&(cmp=k=1),prod=yd.slice()),(prodL=prod.length)<remL&&prod.unshift(0),subtract(rem,prod,remL,base),-1==cmp&&(cmp=compare(yd,rem,yL,remL=rem.length))<1&&(k++,subtract(rem,yL<remL?yz:yd,remL,base)),remL=rem.length):0===cmp&&(k++,rem=[0]),qd[i++]=k,cmp&&rem[0]?rem[remL++]=xd[xi]||0:(rem=[xd[xi]],remL=1),(xi++<xL||void 0!==rem[0])&&sd--;);more=void 0!==rem[0]}qd[0]||qd.shift()}if(1==logBase)sign.e=e,inexact=more;else{for(i=1,k=qd[0];10<=k;k/=10)i++;sign.e=i+e*logBase-1,finalise(sign,dp?pr+sign.e+1:pr,rm,more)}return sign};function multiplyInteger(x,k,base){var temp,carry=0,i=x.length;for(x=x.slice();i--;)temp=x[i]*k+carry,x[i]=temp%base|0,carry=temp/base|0;return carry&&x.unshift(carry),x}function compare(a,b,aL,bL){var i,r;if(aL!=bL)r=bL<aL?1:-1;else for(i=r=0;i<aL;i++)if(a[i]!=b[i]){r=a[i]>b[i]?1:-1;break}return r}function subtract(a,b,aL,base){for(var i=0;aL--;)a[aL]-=i,i=a[aL]<b[aL]?1:0,a[aL]=i*base+a[aL]-b[aL];for(;!a[0]&&1<a.length;)a.shift()}function finalise(x,sd,rm,isTruncated){var digits,i,j,k,rd,w,xd,xdi,Ctor=x.constructor;out:if(null!=sd){if(!(xd=x.d))return x;for(digits=1,k=xd[0];10<=k;k/=10)digits++;if((i=sd-digits)<0)i+=LOG_BASE,j=sd,rd=(w=xd[xdi=0])/mathpow(10,digits-j-1)%10|0;else if(xdi=Math.ceil((i+1)/LOG_BASE),(k=xd.length)<=xdi){if(!isTruncated)break out;for(;k++<=xdi;)xd.push(0);w=rd=0,j=(i%=LOG_BASE)-LOG_BASE+(digits=1)}else{for(w=k=xd[xdi],digits=1;10<=k;k/=10)digits++;rd=(j=(i%=LOG_BASE)-LOG_BASE+digits)<0?0:w/mathpow(10,digits-j-1)%10|0}if(isTruncated=isTruncated||sd<0||void 0!==xd[xdi+1]||(j<0?w:w%mathpow(10,digits-j-1)),rd=rm<4?(rd||isTruncated)&&(0==rm||rm==(x.s<0?3:2)):5<rd||5==rd&&(4==rm||isTruncated||6==rm&&(0<i?0<j?w/mathpow(10,digits-j):0:xd[xdi-1])%10&1||rm==(x.s<0?8:7)),sd<1||!xd[0])return xd.length=0,rd?(sd-=x.e+1,xd[0]=mathpow(10,(LOG_BASE-sd%LOG_BASE)%LOG_BASE),x.e=-sd||0):xd[0]=x.e=0,x;if(0==i?(xd.length=xdi,k=1,xdi--):(xd.length=xdi+1,k=mathpow(10,LOG_BASE-i),xd[xdi]=0<j?(w/mathpow(10,digits-j)%mathpow(10,j)|0)*k:0),rd)for(;;){if(0==xdi){for(i=1,j=xd[0];10<=j;j/=10)i++;for(j=xd[0]+=k,k=1;10<=j;j/=10)k++;i!=k&&(x.e++,xd[0]==BASE)&&(xd[0]=1);break}if(xd[xdi]+=k,xd[xdi]!=BASE)break;xd[xdi--]=0,k=1}for(i=xd.length;0===xd[--i];)xd.pop()}return external&&(x.e>Ctor.maxE?(x.d=null,x.e=NaN):x.e<Ctor.minE&&(x.e=0,x.d=[0])),x}function finiteToString(x,isExp,sd){var k,e,str,len;return x.isFinite()?(e=x.e,len=(str=digitsToString(x.d)).length,isExp?(sd&&0<(k=sd-len)?str=str.charAt(0)+"."+str.slice(1)+getZeroString(k):1<len&&(str=str.charAt(0)+"."+str.slice(1)),str=str+(x.e<0?"e":"e+")+x.e):e<0?(str="0."+getZeroString(-e-1)+str,sd&&0<(k=sd-len)&&(str+=getZeroString(k))):len<=e?(str+=getZeroString(e+1-len),sd&&0<(k=sd-e-1)&&(str=str+"."+getZeroString(k))):((k=e+1)<len&&(str=str.slice(0,k)+"."+str.slice(k)),sd&&0<(k=sd-len)&&(e+1===len&&(str+="."),str+=getZeroString(k))),str):nonFiniteToString(x)}function getBase10Exponent(digits,e){var w=digits[0];for(e*=LOG_BASE;10<=w;w/=10)e++;return e}function getLn10(Ctor,sd,pr){if(LN10_PRECISION<sd)throw external=!0,pr&&(Ctor.precision=pr),Error(precisionLimitExceeded);return finalise(new Ctor(LN10),sd,1,!0)}function getPi(Ctor,sd,rm){if(PI_PRECISION<sd)throw Error(precisionLimitExceeded);return finalise(new Ctor(PI),sd,rm,!0)}function getPrecision(digits){var w=digits.length-1,len=w*LOG_BASE+1;if(w=digits[w]){for(;w%10==0;w/=10)len--;for(w=digits[0];10<=w;w/=10)len++}return len}function getZeroString(k){for(var zs="";k--;)zs+="0";return zs}function intPow(Ctor,x,n,pr){var isTruncated,r=new Ctor(1),k=Math.ceil(pr/LOG_BASE+4);for(external=!1;;){if(n%2&&truncate((r=r.times(x)).d,k)&&(isTruncated=!0),0===(n=mathfloor(n/2))){n=r.d.length-1,isTruncated&&0===r.d[n]&&++r.d[n];break}truncate((x=x.times(x)).d,k)}return external=!0,r}function isOdd(n){return 1&n.d[n.d.length-1]}function maxOrMin(Ctor,args,ltgt){for(var y,x=new Ctor(args[0]),i=0;++i<args.length;){if(!(y=new Ctor(args[i])).s){x=y;break}x[ltgt](y)&&(x=y)}return x}function naturalExponential(x,sd){var denominator,guard,j,pow,sum,t,wpr,rep=0,i=0,k=0,Ctor=x.constructor,rm=Ctor.rounding,pr=Ctor.precision;if(!x.d||!x.d[0]||17<x.e)return new Ctor(x.d?x.d[0]?x.s<0?0:1/0:1:x.s?x.s<0?0:x:NaN);for(wpr=null==sd?(external=!1,pr):sd,t=new Ctor(.03125);-2<x.e;)x=x.times(t),k+=5;for(wpr+=guard=Math.log(mathpow(2,k))/Math.LN10*2+5|0,denominator=pow=sum=new Ctor(1),Ctor.precision=wpr;;){if(pow=finalise(pow.times(x),wpr,1),denominator=denominator.times(++i),digitsToString((t=sum.plus(divide(pow,denominator,wpr,1))).d).slice(0,wpr)===digitsToString(sum.d).slice(0,wpr)){for(j=k;j--;)sum=finalise(sum.times(sum),wpr,1);if(null!=sd)return Ctor.precision=pr,sum;if(!(rep<3&&checkRoundingDigits(sum.d,wpr-guard,rm,rep)))return finalise(sum,Ctor.precision=pr,rm,external=!0);Ctor.precision=wpr+=10,denominator=pow=t=new Ctor(1),i=0,rep++}sum=t}}function naturalLogarithm(y,sd){var c,c0,denominator,e,numerator,rep,sum,t,wpr,x1,x2,n=1,x=y,xd=x.d,Ctor=x.constructor,rm=Ctor.rounding,pr=Ctor.precision;if(x.s<0||!xd||!xd[0]||!x.e&&1==xd[0]&&1==xd.length)return new Ctor(xd&&!xd[0]?-1/0:1!=x.s?NaN:xd?0:x);if(wpr=null==sd?(external=!1,pr):sd,Ctor.precision=wpr+=10,c0=(c=digitsToString(xd)).charAt(0),!(Math.abs(e=x.e)<15e14))return t=getLn10(Ctor,wpr+2,pr).times(e+""),x=naturalLogarithm(new Ctor(c0+"."+c.slice(1)),wpr-10).plus(t),Ctor.precision=pr,null==sd?finalise(x,pr,rm,external=!0):x;for(;c0<7&&1!=c0||1==c0&&3<c.charAt(1);)c0=(c=digitsToString((x=x.times(y)).d)).charAt(0),n++;for(e=x.e,1<c0?(x=new Ctor("0."+c),e++):x=new Ctor(c0+"."+c.slice(1)),sum=numerator=x=divide((x1=x).minus(1),x.plus(1),wpr,1),x2=finalise(x.times(x),wpr,1),denominator=3;;){if(numerator=finalise(numerator.times(x2),wpr,1),digitsToString((t=sum.plus(divide(numerator,new Ctor(denominator),wpr,1))).d).slice(0,wpr)===digitsToString(sum.d).slice(0,wpr)){if(sum=sum.times(2),0!==e&&(sum=sum.plus(getLn10(Ctor,wpr+2,pr).times(e+""))),sum=divide(sum,new Ctor(n),wpr,1),null!=sd)return Ctor.precision=pr,sum;if(!checkRoundingDigits(sum.d,wpr-10,rm,rep))return finalise(sum,Ctor.precision=pr,rm,external=!0);Ctor.precision=wpr+=10,t=numerator=x=divide(x1.minus(1),x1.plus(1),wpr,1),x2=finalise(x.times(x),wpr,1),denominator=rep=1}sum=t,denominator+=2}}function nonFiniteToString(x){return String(x.s*x.s/0)}function parseDecimal(x,str){var e,i,len;for(0<(i=(str=-1<(e=str.indexOf("."))?str.replace(".",""):str).search(/e/i))?(e<0&&(e=i),e+=+str.slice(i+1),str=str.substring(0,i)):e<0&&(e=str.length),i=0;48===str.charCodeAt(i);i++);for(len=str.length;48===str.charCodeAt(len-1);--len);if(str=str.slice(i,len)){if(len-=i,x.e=e=e-i-1,x.d=[],i=(e+1)%LOG_BASE,e<0&&(i+=LOG_BASE),i<len){for(i&&x.d.push(+str.slice(0,i)),len-=LOG_BASE;i<len;)x.d.push(+str.slice(i,i+=LOG_BASE));str=str.slice(i),i=LOG_BASE-str.length}else i-=len;for(;i--;)str+="0";x.d.push(+str),external&&(x.e>x.constructor.maxE?(x.d=null,x.e=NaN):x.e<x.constructor.minE&&(x.e=0,x.d=[0]))}else x.e=0,x.d=[0];return x}function parseOther(x,str){var base,Ctor,divisor,i,isFloat,len,p,xd;if(-1<str.indexOf("_")){if(str=str.replace(/(\d)_(?=\d)/g,"$1"),isDecimal.test(str))return parseDecimal(x,str)}else if("Infinity"===str||"NaN"===str)return+str||(x.s=NaN),x.e=NaN,x.d=null,x;if(isHex.test(str))base=16,str=str.toLowerCase();else if(isBinary.test(str))base=2;else{if(!isOctal.test(str))throw Error(invalidArgument+str);base=8}for(i=(str=0<(i=str.search(/p/i))?(p=+str.slice(i+1),str.substring(2,i)):str.slice(2)).indexOf("."),Ctor=x.constructor,(isFloat=0<=i)&&(i=(len=(str=str.replace(".","")).length)-i,divisor=intPow(Ctor,new Ctor(base),i,2*i)),i=str=(xd=convertBase(str,base,BASE)).length-1;0===xd[i];--i)xd.pop();return i<0?new Ctor(0*x.s):(x.e=getBase10Exponent(xd,str),x.d=xd,external=!1,isFloat&&(x=divide(x,divisor,4*len)),p&&(x=x.times(Math.abs(p)<54?mathpow(2,p):Decimal.pow(2,p))),external=!0,x)}function taylorSeries(Ctor,n,x,y,isHyperbolic){var j,t,u,x2,pr=Ctor.precision,k=Math.ceil(pr/LOG_BASE);for(external=!1,x2=x.times(x),u=new Ctor(y);;){if(t=divide(u.times(x2),new Ctor(n++*n++),pr,1),u=isHyperbolic?y.plus(t):y.minus(t),y=divide(t.times(x2),new Ctor(n++*n++),pr,1),void 0!==(t=u.plus(y)).d[k]){for(j=k;t.d[j]===u.d[j]&&j--;);if(-1==j)break}j=u,u=y,y=t,t=j,0}return external=!0,t.d.length=k+1,t}function tinyPow(b,e){for(var n=b;--e;)n*=b;return n}function toLessThanHalfPi(Ctor,x){var t,isNeg=x.s<0,Ctor=getPi(Ctor,Ctor.precision,1),halfPi=Ctor.times(.5);if((x=x.abs()).lte(halfPi))return quadrant=isNeg?4:1,x;if((t=x.divToInt(Ctor)).isZero())quadrant=isNeg?3:2;else{if((x=x.minus(t.times(Ctor))).lte(halfPi))return quadrant=isOdd(t)?isNeg?2:3:isNeg?4:1,x;quadrant=isOdd(t)?isNeg?1:4:isNeg?3:2}return x.minus(Ctor).abs()}function toStringBinary(x,baseOut,sd,rm){var base,e,i,len,roundUp,str,xd,y,Ctor=x.constructor,isExp=void 0!==sd;if(isExp?(checkInt32(sd,1,MAX_DIGITS),void 0===rm?rm=Ctor.rounding:checkInt32(rm,0,8)):(sd=Ctor.precision,rm=Ctor.rounding),x.isFinite()){for(isExp?(base=2,16==baseOut?sd=4*sd-3:8==baseOut&&(sd=3*sd-2)):base=baseOut,0<=(i=(str=finiteToString(x)).indexOf("."))&&(str=str.replace(".",""),(y=new Ctor(1)).e=str.length-i,y.d=convertBase(finiteToString(y),10,base),y.e=y.d.length),e=len=(xd=convertBase(str,10,base)).length;0==xd[--len];)xd.pop();if(xd[0]){if(i<0?e--:((x=new Ctor(x)).d=xd,x.e=e,xd=(x=divide(x,y,sd,rm,0,base)).d,e=x.e,roundUp=inexact),i=xd[sd],Ctor=base/2,roundUp=roundUp||void 0!==xd[sd+1],roundUp=rm<4?(void 0!==i||roundUp)&&(0===rm||rm===(x.s<0?3:2)):Ctor<i||i===Ctor&&(4===rm||roundUp||6===rm&&1&xd[sd-1]||rm===(x.s<0?8:7)),xd.length=sd,roundUp)for(;++xd[--sd]>base-1;)xd[sd]=0,sd||(++e,xd.unshift(1));for(len=xd.length;!xd[len-1];--len);for(i=0,str="";i<len;i++)str+=NUMERALS.charAt(xd[i]);if(isExp){if(1<len)if(16==baseOut||8==baseOut){for(i=16==baseOut?4:3,--len;len%i;len++)str+="0";for(len=(xd=convertBase(str,base,baseOut)).length;!xd[len-1];--len);for(i=1,str="1.";i<len;i++)str+=NUMERALS.charAt(xd[i])}else str=str.charAt(0)+"."+str.slice(1);str=str+(e<0?"p":"p+")+e}else if(e<0){for(;++e;)str="0"+str;str="0."+str}else if(++e>len)for(e-=len;e--;)str+="0";else e<len&&(str=str.slice(0,e)+"."+str.slice(e))}else str=isExp?"0p+0":"0";str=(16==baseOut?"0x":2==baseOut?"0b":8==baseOut?"0o":"")+str}else str=nonFiniteToString(x);return x.s<0?"-"+str:str}function truncate(arr,len){return arr.length>len&&(arr.length=len,1)}function abs(x){return new this(x).abs()}function acos(x){return new this(x).acos()}function acosh(x){return new this(x).acosh()}function add(x,y){return new this(x).plus(y)}function asin(x){return new this(x).asin()}function asinh(x){return new this(x).asinh()}function atan(x){return new this(x).atan()}function atanh(x){return new this(x).atanh()}function atan2(y,x){y=new this(y),x=new this(x);var r,pr=this.precision,rm=this.rounding,wpr=pr+4;return y.s&&x.s?y.d||x.d?!x.d||y.isZero()?(r=x.s<0?getPi(this,pr,rm):new this(0)).s=y.s:!y.d||x.isZero()?(r=getPi(this,wpr,1).times(.5)).s=y.s:r=x.s<0?(this.precision=wpr,this.rounding=1,r=this.atan(divide(y,x,wpr,1)),x=getPi(this,wpr,1),this.precision=pr,this.rounding=rm,y.s<0?r.minus(x):r.plus(x)):this.atan(divide(y,x,wpr,1)):(r=getPi(this,wpr,1).times(0<x.s?.25:.75)).s=y.s:r=new this(NaN),r}function cbrt(x){return new this(x).cbrt()}function ceil(x){return finalise(x=new this(x),x.e+1,2)}function clamp(x,min,max){return new this(x).clamp(min,max)}function config(obj){if(!obj||"object"!=typeof obj)throw Error(decimalError+"Object expected");for(var p,v,useDefaults=!0===obj.defaults,ps=["precision",1,MAX_DIGITS,"rounding",0,8,"toExpNeg",-EXP_LIMIT,0,"toExpPos",0,EXP_LIMIT,"maxE",0,EXP_LIMIT,"minE",-EXP_LIMIT,0,"modulo",0,9],i=0;i<ps.length;i+=3)if(p=ps[i],useDefaults&&(this[p]=DEFAULTS[p]),void 0!==(v=obj[p])){if(!(mathfloor(v)===v&&ps[i+1]<=v&&v<=ps[i+2]))throw Error(invalidArgument+p+": "+v);this[p]=v}if(p="crypto",useDefaults&&(this[p]=DEFAULTS[p]),void 0!==(v=obj[p])){if(!0!==v&&!1!==v&&0!==v&&1!==v)throw Error(invalidArgument+p+": "+v);if(v){if(void 0===crypto||!crypto||!crypto.getRandomValues&&!crypto.randomBytes)throw Error(cryptoUnavailable);this[p]=!0}else this[p]=!1}return this}function cos(x){return new this(x).cos()}function cosh(x){return new this(x).cosh()}function div(x,y){return new this(x).div(y)}function exp(x){return new this(x).exp()}function floor(x){return finalise(x=new this(x),x.e+1,3)}function hypot(){var i,n,t=new this(0);for(external=!1,i=0;i<arguments.length;)if((n=new this(arguments[i++])).d)t.d&&(t=t.plus(n.times(n)));else{if(n.s)return external=!0,new this(1/0);t=n}return external=!0,t.sqrt()}function isDecimalInstance(obj){return obj instanceof Decimal||obj&&obj.toStringTag===tag||!1}function ln(x){return new this(x).ln()}function log(x,y){return new this(x).log(y)}function log2(x){return new this(x).log(2)}function log10(x){return new this(x).log(10)}function max(){return maxOrMin(this,arguments,"lt")}function min(){return maxOrMin(this,arguments,"gt")}function mod(x,y){return new this(x).mod(y)}function mul(x,y){return new this(x).mul(y)}function pow(x,y){return new this(x).pow(y)}function random(sd){var d,e,k,n,i=0,r=new this(1),rd=[];if(void 0===sd?sd=this.precision:checkInt32(sd,1,MAX_DIGITS),k=Math.ceil(sd/LOG_BASE),this.crypto)if(crypto.getRandomValues)for(d=crypto.getRandomValues(new Uint32Array(k));i<k;)429e7<=(n=d[i])?d[i]=crypto.getRandomValues(new Uint32Array(1))[0]:rd[i++]=n%1e7;else{if(!crypto.randomBytes)throw Error(cryptoUnavailable);for(d=crypto.randomBytes(k*=4);i<k;)214e7<=(n=d[i]+(d[i+1]<<8)+(d[i+2]<<16)+((127&d[i+3])<<24))?crypto.randomBytes(4).copy(d,i):(rd.push(n%1e7),i+=4);i=k/4}else for(;i<k;)rd[i++]=1e7*Math.random()|0;for(k=rd[--i],sd%=LOG_BASE,k&&sd&&(n=mathpow(10,LOG_BASE-sd),rd[i]=(k/n|0)*n);0===rd[i];i--)rd.pop();if(i<0)rd=[e=0];else{for(e=-1;0===rd[0];e-=LOG_BASE)rd.shift();for(k=1,n=rd[0];10<=n;n/=10)k++;k<LOG_BASE&&(e-=LOG_BASE-k)}return r.e=e,r.d=rd,r}function round(x){return finalise(x=new this(x),x.e+1,this.rounding)}function sign(x){return(x=new this(x)).d?x.d[0]?x.s:0*x.s:x.s||NaN}function sin(x){return new this(x).sin()}function sinh(x){return new this(x).sinh()}function sqrt(x){return new this(x).sqrt()}function sub(x,y){return new this(x).sub(y)}function sum(){var i=0,args=arguments,x=new this(args[i]);for(external=!1;x.s&&++i<args.length;)x=x.plus(args[i]);return external=!0,finalise(x,this.precision,this.rounding)}function tan(x){return new this(x).tan()}function tanh(x){return new this(x).tanh()}function trunc(x){return finalise(x=new this(x),x.e+1,1)}((Decimal=function clone(obj){var i,p,ps;function Decimal(v){var e,i,t,x=this;if(!(x instanceof Decimal))return new Decimal(v);if(x.constructor=Decimal,!isDecimalInstance(v)){if("number"==(t=typeof v)){if(0===v)return x.s=1/v<0?-1:1,x.e=0,void(x.d=[0]);if(v<0?(v=-v,x.s=-1):x.s=1,v===~~v&&v<1e7){for(e=0,i=v;10<=i;i/=10)e++;return void(external?Decimal.maxE<e?(x.e=NaN,x.d=null):e<Decimal.minE?(x.e=0,x.d=[0]):(x.e=e,x.d=[v]):(x.e=e,x.d=[v]))}return 0*v!=0?(v||(x.s=NaN),x.e=NaN,void(x.d=null)):parseDecimal(x,v.toString())}if("string"!=t)throw Error(invalidArgument+v);return 45===(i=v.charCodeAt(0))?(v=v.slice(1),x.s=-1):(43===i&&(v=v.slice(1)),x.s=1),(isDecimal.test(v)?parseDecimal:parseOther)(x,v)}x.s=v.s,external?!v.d||v.e>Decimal.maxE?(x.e=NaN,x.d=null):v.e<Decimal.minE?(x.e=0,x.d=[0]):(x.e=v.e,x.d=v.d.slice()):(x.e=v.e,x.d=v.d&&v.d.slice())}if(Decimal.prototype=P,Decimal.ROUND_UP=0,Decimal.ROUND_DOWN=1,Decimal.ROUND_CEIL=2,Decimal.ROUND_FLOOR=3,Decimal.ROUND_HALF_UP=4,Decimal.ROUND_HALF_DOWN=5,Decimal.ROUND_HALF_EVEN=6,Decimal.ROUND_HALF_CEIL=7,Decimal.ROUND_HALF_FLOOR=8,Decimal.EUCLID=9,Decimal.config=Decimal.set=config,Decimal.clone=clone,Decimal.isDecimal=isDecimalInstance,Decimal.abs=abs,Decimal.acos=acos,Decimal.acosh=acosh,Decimal.add=add,Decimal.asin=asin,Decimal.asinh=asinh,Decimal.atan=atan,Decimal.atanh=atanh,Decimal.atan2=atan2,Decimal.cbrt=cbrt,Decimal.ceil=ceil,Decimal.clamp=clamp,Decimal.cos=cos,Decimal.cosh=cosh,Decimal.div=div,Decimal.exp=exp,Decimal.floor=floor,Decimal.hypot=hypot,Decimal.ln=ln,Decimal.log=log,Decimal.log10=log10,Decimal.log2=log2,Decimal.max=max,Decimal.min=min,Decimal.mod=mod,Decimal.mul=mul,Decimal.pow=pow,Decimal.random=random,Decimal.round=round,Decimal.sign=sign,Decimal.sin=sin,Decimal.sinh=sinh,Decimal.sqrt=sqrt,Decimal.sub=sub,Decimal.sum=sum,Decimal.tan=tan,Decimal.tanh=tanh,Decimal.trunc=trunc,(obj=void 0===obj?{}:obj)&&!0!==obj.defaults)for(ps=["precision","rounding","toExpNeg","toExpPos","maxE","minE","modulo","crypto"],i=0;i<ps.length;)obj.hasOwnProperty(p=ps[i++])||(obj[p]=this[p]);return Decimal.config(obj),Decimal}(DEFAULTS)).prototype.constructor=Decimal).default=Decimal.Decimal=Decimal,LN10=new Decimal(LN10),PI=new Decimal(PI),"function"==typeof define&&define.amd?define(function(){return Decimal}):"undefined"!=typeof module&&module.exports?("function"==typeof Symbol&&"symbol"==typeof Symbol.iterator&&(P[Symbol.for("nodejs.util.inspect.custom")]=P.toString,P[Symbol.toStringTag]="Decimal"),module.exports=Decimal):(globalScope=globalScope||("undefined"!=typeof self&&self&&self.self==self?self:window),noConflict=globalScope.Decimal,Decimal.noConflict=function(){return globalScope.Decimal=noConflict,Decimal},globalScope.Decimal=Decimal)}(this);var VBacktest=(()=>{var _scriptDir="undefined"!=typeof document&&document.currentScript?document.currentScript.src:void 0;return"undefined"!=typeof __filename&&(_scriptDir=_scriptDir||__filename),function(moduleArg={}){var Module=moduleArg,readyPromiseResolve,readyPromiseReject,Std=(Module.ready=new Promise((resolve,reject)=>{readyPromiseResolve=resolve,readyPromiseReject=reject}),{_skip:function(arr,period){for(var j=0,k=0;j<arr.length&&(isNaN(arr[j])||k++,k!=period);j++);return j},_sum:function(arr,num){for(var sum=0,i=0;i<num;i++)isNaN(arr[i])||(sum+=arr[i]);return sum},_avg:function(arr,num){for(var n=0,sum=0,i=0;i<num;i++)isNaN(arr[i])||(sum+=arr[i],n++);return sum/n},_zeros:function(len){for(var n=[],i=0;i<len;i++)n.push(0);return n},_set:function(arr,start,end,value){for(var e=Math.min(arr.length,end),i=start;i<e;i++)arr[i]=value},_diff:function(a,b){for(var d=[],i=0;i<b.length;i++)isNaN(a[i])||isNaN(b[i])?d.push(NaN):d.push(a[i]-b[i]);return d},_move_diff:function(a){for(var d=[],i=1;i<a.length;i++)d.push(a[i]-a[i-1]);return d},_sma:function(S,period){var R=Std._zeros(S.length),j=Std._skip(S,period);if(Std._set(R,0,j,NaN),j<S.length)for(var sum=0,i=j;i<S.length;i++)i==j?sum=Std._sum(S,i+1):sum+=S[i]-S[i-period],R[i]=sum/period;return R},_smma:function(S,period){var R=Std._zeros(S.length),j=Std._skip(S,period);if(Std._set(R,0,j,NaN),j<S.length){R[j]=Std._avg(S,j+1);for(var i=j+1;i<S.length;i++)R[i]=(R[i-1]*(period-1)+S[i])/period}return R},_ema:function(S,period){var R=Std._zeros(S.length),multiplier=2/(period+1),period=Std._skip(S,period);if(Std._set(R,0,period,NaN),period<S.length){R[period]=Std._avg(S,period+1);for(var i=period+1;i<S.length;i++)R[i]=(S[i]-R[i-1])*multiplier+R[i-1]}return R},_cmp:function(arr,start,end,cmpFunc){for(var v=arr[start],i=start;i<end;i++)v=cmpFunc(arr[i],v);return v},_filt:function(records,n,attr,iv,cmpFunc){if(records.length<2)return NaN;for(var v=iv,pos=0!==n?records.length-Math.min(records.length-1,n)-1:0,i=records.length-2;pos<=i;i--)v=cmpFunc(v,void 0!==attr?records[i][attr]:records[i]);return v},_ticks:function(records){if(0===records.length)return[];var ticks=[];if(void 0!==records[0].Close)for(var i=0;i<records.length;i++)ticks.push(records[i].Close);else ticks=records;return ticks}});function TAInstance(logPtr){var self={_log:logPtr="function"!=typeof logPtr?function(){}:logPtr,Highest:function(records,n,attr){return Std._filt(records,n,attr,Number.MIN_VALUE,Math.max)},Lowest:function(records,n,attr){return Std._filt(records,n,attr,Number.MAX_VALUE,Math.min)},MA:function(records,period){return self._log("MA",period=void 0===period?9:period),Std._sma(Std._ticks(records),period)},SMA:function(records,period){return self._log("SMA",period=void 0===period?9:period),Std._sma(Std._ticks(records),period)},EMA:function(records,period){return self._log("EMA",period=void 0===period?9:period),Std._ema(Std._ticks(records),period)},MACD:function(records,fastEMA,slowEMA,signalEMA){self._log("MACD",fastEMA=void 0===fastEMA?12:fastEMA,slowEMA=void 0===slowEMA?26:slowEMA,signalEMA=void 0===signalEMA?9:signalEMA);records=Std._ticks(records),slowEMA=Std._ema(records,slowEMA),records=Std._ema(records,fastEMA),fastEMA=Std._diff(records,slowEMA),records=Std._ema(fastEMA,signalEMA);return[fastEMA,records,Std._diff(fastEMA,records)]},BOLL:function(records,period,multiplier){self._log("BOLL",period=void 0===period?20:period,multiplier=void 0===multiplier?2:multiplier);for(var S=Std._ticks(records),j=period-1;j<S.length&&isNaN(S[j]);j++);for(var UP=Std._zeros(S.length),MB=Std._zeros(S.length),DN=Std._zeros(S.length),sum=(Std._set(UP,0,j,NaN),Std._set(MB,0,j,NaN),Std._set(DN,0,j,NaN),0),i=j;i<S.length;i++){if(i==j)for(var k=0;k<period;k++)sum+=S[k];else sum=sum+S[i]-S[i-period];for(var ma=sum/period,d=0,m=i+1-period;m<=i;m++)d+=(S[m]-ma)*(S[m]-ma);var stdev=Math.sqrt(d/period),dn=ma-multiplier*stdev;UP[i]=ma+multiplier*stdev,MB[i]=ma,DN[i]=dn}return[UP,MB,DN]},KDJ:function(records,n,k,d){self._log("KDJ",n=void 0===n?9:n,k=void 0===k?3:k,d=void 0===d?3:d);for(var RSV=Std._zeros(records.length),K=(Std._set(RSV,0,n-1,NaN),Std._zeros(records.length)),D=Std._zeros(records.length),J=Std._zeros(records.length),hs=Std._zeros(records.length),ls=Std._zeros(records.length),j=0;j<records.length;j++)hs[j]=records[j].High,ls[j]=records[j].Low;for(var c,h,l,i=0;i<records.length;i++)n-1<=i?(c=records[i].Close,h=Std._cmp(hs,i-(n-1),i+1,Math.max),l=Std._cmp(ls,i-(n-1),i+1,Math.min),RSV[i]=h!=l?(c-l)/(h-l)*100:100,K[i]=(+RSV[i]+(k-1)*K[i-1])/k,D[i]=(+K[i]+(d-1)*D[i-1])/d):(K[i]=D[i]=50,RSV[i]=0),J[i]=3*K[i]-2*D[i];for(var m=0;m<n-1;m++)K[m]=D[m]=J[m]=NaN;return[K,D,J]},RSI:function(records,period){self._log("RSI",period=void 0===period?14:period);var n=period,rsi=Std._zeros(records.length);if(Std._set(rsi,0,rsi.length,NaN),!(records.length<n)){for(var ticks=Std._ticks(records),deltas=Std._move_diff(ticks),seed=deltas.slice(0,n),up=0,down=0,i=0;i<seed.length;i++)0<=seed[i]?up+=seed[i]:down+=seed[i];up/=n;var delta,down=-down/n,upval=(rsi[n]=100-100/(1+(0!=down?up/down:0)),0),downval=0;for(i=n+1;i<ticks.length;i++)downval=0<(delta=deltas[i-1])?(upval=delta,0):(upval=0,-delta),rsi[i]=100-100/(1+(up=(up*(n-1)+upval)/n)/(down=(down*(n-1)+downval)/n))}return rsi},OBV:function(records){if(self._log("OBV"),0===records.length)return[];if(void 0===records[0].Close)throw"argument must KLine";for(var R=[],i=0;i<records.length;i++)0===i?R[i]=records[i].Volume:records[i].Close>=records[i-1].Close?R[i]=R[i-1]+records[i].Volume:R[i]=R[i-1]-records[i].Volume;return R},ATR:function(records,period){if(self._log("ATR",period=void 0===period?14:period),0===records.length)return[];if(void 0===records[0].Close)throw"argument must KLine";for(var R=Std._zeros(records.length),sum=0,n=0,i=0;i<records.length;i++){var TR=0;sum+=TR=0==i?records[i].High-records[i].Low:Math.max(records[i].High-records[i].Low,Math.abs(records[i].High-records[i-1].Close),Math.abs(records[i-1].Close-records[i].Low)),R[i]=n=i<period?sum/(i+1):((period-1)*n+TR)/period}return R},Alligator:function(records,jawLength,teethLength,lipsLength){self._log("Alligator",jawLength=void 0===jawLength?13:jawLength,teethLength=void 0===teethLength?8:teethLength,lipsLength=void 0===lipsLength?5:lipsLength);for(var ticks=[],i=0;i<records.length;i++)ticks.push((records[i].High+records[i].Low)/2);return[[NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN].concat(Std._smma(ticks,jawLength)),[NaN,NaN,NaN,NaN,NaN].concat(Std._smma(ticks,teethLength)),[NaN,NaN,NaN].concat(Std._smma(ticks,lipsLength))]},CMF:function(records,periods){self._log("CMF",periods=periods||20);for(var ret=[],sumD=0,sumV=0,arrD=[],arrV=[],i=0;i<records.length;i++){var d=records[i].High==records[i].Low?0:(2*records[i].Close-records[i].Low-records[i].High)/(records[i].High-records[i].Low)*records[i].Volume;arrD.push(d),arrV.push(records[i].Volume),sumD+=d,sumV+=records[i].Volume,periods<=i&&(sumD-=arrD.shift(),sumV-=arrV.shift()),ret.push(sumD/sumV)}return ret}};return self}var TA=TAInstance();function init_pako(){"use strict";function zswap32(q){return(q>>>24&255)+(q>>>8&65280)+((65280&q)<<8)+((255&q)<<24)}var exports={},adler32_1=function(adler,buf,len,pos){for(var s1=65535&adler|0,s2=adler>>>16&65535|0,n=0;0!==len;){for(len-=n=2e3<len?2e3:len;s2=s2+(s1=s1+buf[pos++]|0)|0,--n;);s1%=65521,s2%=65521}return s1|s2<<16|0},crcTable=new Uint32Array(function(){for(var table=[],n=0;n<256;n++){for(var c=n,k=0;k<8;k++)c=1&c?3988292384^c>>>1:c>>>1;table[n]=c}return table}()),crc32_1=function(crc,buf,len,pos){var t=crcTable,end=pos+len;crc^=-1;for(var i=pos;i<end;i++)crc=crc>>>8^t[255&(crc^buf[i])];return-1^crc},BAD$1=16209,TYPE$1=16191,lbase=new Uint16Array([3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0]),lext=new Uint8Array([16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78]),dbase=new Uint16Array([1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0]),dext=new Uint8Array([16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64]),inftrees=function(type,lens,lens_index,codes,table,table_index,work,opts){for(var incr,fill,low,mask,next,match,here_bits,here_op,here_val,bits=opts.bits,len=0,sym=0,min=0,max=0,root=0,curr=0,drop=0,left=0,used=0,huff=0,base=null,count=new Uint16Array(16),offs=new Uint16Array(16),extra=null,len=0;len<=15;len++)count[len]=0;for(sym=0;sym<codes;sym++)count[lens[lens_index+sym]]++;for(root=bits,max=15;1<=max&&0===count[max];max--);if(max<root&&(root=max),0===max)table[table_index++]=20971520,table[table_index++]=20971520,opts.bits=1;else{for(min=1;min<max&&0===count[min];min++);for(root<min&&(root=min),len=left=1;len<=15;len++)if((left=(left<<=1)-count[len])<0)return-1;if(0<left&&(0===type||1!==max))return-1;for(offs[1]=0,len=1;len<15;len++)offs[len+1]=offs[len]+count[len];for(sym=0;sym<codes;sym++)0!==lens[lens_index+sym]&&(work[offs[lens[lens_index+sym]]++]=sym);if(match=0===type?(base=extra=work,20):1===type?(base=lbase,extra=lext,257):(base=dbase,extra=dext,0),len=min,next=table_index,drop=sym=huff=0,low=-1,mask=(used=1<<(curr=root))-1,1===type&&852<used||2===type&&592<used)return 1;for(;;){for(here_val=work[sym]+1<match?(here_op=0,work[sym]):work[sym]>=match?(here_op=extra[work[sym]-match],base[work[sym]-match]):(here_op=96,0),incr=1<<(here_bits=len-drop),min=fill=1<<curr;table[next+(huff>>drop)+(fill-=incr)]=here_bits<<24|here_op<<16|here_val|0,0!==fill;);for(incr=1<<len-1;huff&incr;)incr>>=1;if(huff=0!==incr?(huff&incr-1)+incr:0,sym++,0==--count[len]){if(len===max)break;len=lens[lens_index+work[sym]]}if(root<len&&(huff&mask)!==low){for(next+=min,left=1<<(curr=len-(drop=0===drop?root:drop));curr+drop<max&&!((left-=count[curr+drop])<=0);)curr++,left<<=1;if(used+=1<<curr,1===type&&852<used||2===type&&592<used)return 1;table[low=huff&mask]=root<<24|curr<<16|next-table_index|0}}0!==huff&&(table[next+huff]=len-drop<<24|64<<16|0),opts.bits=root}return 0},constants$1={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_MEM_ERROR:-4,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8},LENS=1,DISTS=2,Z_FINISH$1=constants$1.Z_FINISH,Z_BLOCK=constants$1.Z_BLOCK,Z_TREES=constants$1.Z_TREES,Z_OK$1=constants$1.Z_OK,Z_STREAM_END$1=constants$1.Z_STREAM_END,Z_NEED_DICT$1=constants$1.Z_NEED_DICT,Z_STREAM_ERROR$1=constants$1.Z_STREAM_ERROR,Z_DATA_ERROR$1=constants$1.Z_DATA_ERROR,Z_MEM_ERROR$1=constants$1.Z_MEM_ERROR,Z_BUF_ERROR=constants$1.Z_BUF_ERROR,Z_DEFLATED=constants$1.Z_DEFLATED,HEAD=16180,BAD=16209,SYNC=16211,ENOUGH_LENS=852,ENOUGH_DISTS=592;function InflateState(){this.strm=null,this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new Uint16Array(320),this.work=new Uint16Array(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}function inflateResetKeep(strm){var state;return inflateStateCheck(strm)?Z_STREAM_ERROR$1:(state=strm.state,strm.total_in=strm.total_out=state.total=0,strm.msg="",state.wrap&&(strm.adler=1&state.wrap),state.mode=HEAD,state.last=0,state.havedict=0,state.flags=-1,state.dmax=32768,state.head=null,state.hold=0,state.bits=0,state.lencode=state.lendyn=new Int32Array(ENOUGH_LENS),state.distcode=state.distdyn=new Int32Array(ENOUGH_DISTS),state.sane=1,state.back=-1,Z_OK$1)}function inflateReset(strm){var state;return inflateStateCheck(strm)?Z_STREAM_ERROR$1:((state=strm.state).wsize=0,state.whave=0,state.wnext=0,inflateResetKeep(strm))}function inflateInit2(strm,windowBits){var state;return strm?(state=new InflateState,(strm.state=state).strm=strm,state.window=null,state.mode=HEAD,(state=inflateReset2(strm,windowBits))!==Z_OK$1&&(strm.state=null),state):Z_STREAM_ERROR$1}function updatewindow(strm,src,end,copy){var dist;return null===(strm=strm.state).window&&(strm.wsize=1<<strm.wbits,strm.wnext=0,strm.whave=0,strm.window=new Uint8Array(strm.wsize)),strm.wsize<=copy?(strm.window.set(src.subarray(end-strm.wsize,end),0),strm.wnext=0,strm.whave=strm.wsize):(copy<(dist=strm.wsize-strm.wnext)&&(dist=copy),strm.window.set(src.subarray(end-copy,end-copy+dist),strm.wnext),(copy-=dist)?(strm.window.set(src.subarray(end-copy,end),0),strm.wnext=copy,strm.whave=strm.wsize):(strm.wnext+=dist,strm.wnext===strm.wsize&&(strm.wnext=0),strm.whave<strm.wsize&&(strm.whave+=dist))),0}var lenfix,distfix,inflateStateCheck=function(strm){var state;return!strm||!(state=strm.state)||state.strm!==strm||state.mode<HEAD||state.mode>SYNC?1:0},inflateReset2=function(strm,windowBits){var wrap,state;return inflateStateCheck(strm)||(state=strm.state,windowBits<0?(wrap=0,windowBits=-windowBits):(wrap=5+(windowBits>>4),windowBits<48&&(windowBits&=15)),windowBits&&(windowBits<8||15<windowBits))?Z_STREAM_ERROR$1:(null!==state.window&&state.wbits!==windowBits&&(state.window=null),state.wrap=wrap,state.wbits=windowBits,inflateReset(strm))},virgin=!0,inflate_1$1={inflateReset:inflateReset,inflateReset2:inflateReset2,inflateResetKeep:inflateResetKeep,inflateInit:function(strm){return inflateInit2(strm,15)},inflateInit2:inflateInit2,inflate:function(strm,flush){var state,input,output,next,put,have,left,hold,bits,_in,_out,copy,from,from_source,here_bits,here_op,here_val,last_bits,last_op,last_val,len,ret,opts,n,here=0,hbuf=new Uint8Array(4),order=new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);if(inflateStateCheck(strm)||!strm.output||!strm.input&&0!==strm.avail_in)return Z_STREAM_ERROR$1;16191===(state=strm.state).mode&&(state.mode=16192),put=strm.next_out,output=strm.output,next=strm.next_in,input=strm.input,hold=state.hold,bits=state.bits,_in=have=strm.avail_in,_out=left=strm.avail_out,ret=Z_OK$1;inf_leave:for(;;)switch(state.mode){case HEAD:if(0===state.wrap)state.mode=16192;else{for(;bits<16;){if(0===have)break inf_leave;have--,hold+=input[next++]<<bits,bits+=8}2&state.wrap&&35615===hold?(0===state.wbits&&(state.wbits=15),hbuf[state.check=0]=255&hold,hbuf[1]=hold>>>8&255,state.check=crc32_1(state.check,hbuf,2,0),bits=hold=0,state.mode=16181):(state.head&&(state.head.done=!1),!(1&state.wrap)||(((255&hold)<<8)+(hold>>8))%31?(strm.msg="incorrect header check",state.mode=BAD):(15&hold)!==Z_DEFLATED?(strm.msg="unknown compression method",state.mode=BAD):(bits-=4,len=8+(15&(hold>>>=4)),0===state.wbits&&(state.wbits=len),15<len||len>state.wbits?(strm.msg="invalid window size",state.mode=BAD):(state.dmax=1<<state.wbits,state.flags=0,strm.adler=state.check=1,state.mode=512&hold?16189:16191,bits=hold=0)))}break;case 16181:for(;bits<16;){if(0===have)break inf_leave;have--,hold+=input[next++]<<bits,bits+=8}if(state.flags=hold,(255&state.flags)!==Z_DEFLATED){strm.msg="unknown compression method",state.mode=BAD;break}if(57344&state.flags){strm.msg="unknown header flags set",state.mode=BAD;break}state.head&&(state.head.text=hold>>8&1),512&state.flags&&4&state.wrap&&(hbuf[0]=255&hold,hbuf[1]=hold>>>8&255,state.check=crc32_1(state.check,hbuf,2,0)),bits=hold=0,state.mode=16182;case 16182:for(;bits<32;){if(0===have)break inf_leave;have--,hold+=input[next++]<<bits,bits+=8}state.head&&(state.head.time=hold),512&state.flags&&4&state.wrap&&(hbuf[0]=255&hold,hbuf[1]=hold>>>8&255,hbuf[2]=hold>>>16&255,hbuf[3]=hold>>>24&255,state.check=crc32_1(state.check,hbuf,4,0)),bits=hold=0,state.mode=16183;case 16183:for(;bits<16;){if(0===have)break inf_leave;have--,hold+=input[next++]<<bits,bits+=8}state.head&&(state.head.xflags=255&hold,state.head.os=hold>>8),512&state.flags&&4&state.wrap&&(hbuf[0]=255&hold,hbuf[1]=hold>>>8&255,state.check=crc32_1(state.check,hbuf,2,0)),bits=hold=0,state.mode=16184;case 16184:if(1024&state.flags){for(;bits<16;){if(0===have)break inf_leave;have--,hold+=input[next++]<<bits,bits+=8}state.length=hold,state.head&&(state.head.extra_len=hold),512&state.flags&&4&state.wrap&&(hbuf[0]=255&hold,hbuf[1]=hold>>>8&255,state.check=crc32_1(state.check,hbuf,2,0)),bits=hold=0}else state.head&&(state.head.extra=null);state.mode=16185;case 16185:if(1024&state.flags&&((copy=have<(copy=state.length)?have:copy)&&(state.head&&(len=state.head.extra_len-state.length,state.head.extra||(state.head.extra=new Uint8Array(state.head.extra_len)),state.head.extra.set(input.subarray(next,next+copy),len)),512&state.flags&&4&state.wrap&&(state.check=crc32_1(state.check,input,copy,next)),have-=copy,next+=copy,state.length-=copy),state.length))break inf_leave;state.length=0,state.mode=16186;case 16186:if(2048&state.flags){if(0===have)break inf_leave;for(copy=0;len=input[next+copy++],state.head&&len&&state.length<65536&&(state.head.name+=String.fromCharCode(len)),len&&copy<have;);if(512&state.flags&&4&state.wrap&&(state.check=crc32_1(state.check,input,copy,next)),have-=copy,next+=copy,len)break inf_leave}else state.head&&(state.head.name=null);state.length=0,state.mode=16187;case 16187:if(4096&state.flags){if(0===have)break inf_leave;for(copy=0;len=input[next+copy++],state.head&&len&&state.length<65536&&(state.head.comment+=String.fromCharCode(len)),len&&copy<have;);if(512&state.flags&&4&state.wrap&&(state.check=crc32_1(state.check,input,copy,next)),have-=copy,next+=copy,len)break inf_leave}else state.head&&(state.head.comment=null);state.mode=16188;case 16188:if(512&state.flags){for(;bits<16;){if(0===have)break inf_leave;have--,hold+=input[next++]<<bits,bits+=8}if(4&state.wrap&&hold!==(65535&state.check)){strm.msg="header crc mismatch",state.mode=BAD;break}bits=hold=0}state.head&&(state.head.hcrc=state.flags>>9&1,state.head.done=!0),strm.adler=state.check=0,state.mode=16191;break;case 16189:for(;bits<32;){if(0===have)break inf_leave;have--,hold+=input[next++]<<bits,bits+=8}strm.adler=state.check=zswap32(hold),bits=hold=0,state.mode=16190;case 16190:if(0===state.havedict)return strm.next_out=put,strm.avail_out=left,strm.next_in=next,strm.avail_in=have,state.hold=hold,state.bits=bits,Z_NEED_DICT$1;strm.adler=state.check=1,state.mode=16191;case 16191:if(flush===Z_BLOCK||flush===Z_TREES)break inf_leave;case 16192:if(state.last)hold>>>=7&bits,bits-=7&bits,state.mode=16206;else{for(;bits<3;){if(0===have)break inf_leave;have--,hold+=input[next++]<<bits,bits+=8}switch(state.last=1&hold,--bits,3&(hold>>>=1)){case 0:state.mode=16193;break;case 1:if(!function(state){if(virgin){lenfix=new Int32Array(512),distfix=new Int32Array(32);for(var sym=0;sym<144;)state.lens[sym++]=8;for(;sym<256;)state.lens[sym++]=9;for(;sym<280;)state.lens[sym++]=7;for(;sym<288;)state.lens[sym++]=8;for(inftrees(LENS,state.lens,0,288,lenfix,0,state.work,{bits:9}),sym=0;sym<32;)state.lens[sym++]=5;inftrees(DISTS,state.lens,0,32,distfix,0,state.work,{bits:5}),virgin=!1}state.lencode=lenfix,state.lenbits=9,state.distcode=distfix,state.distbits=5}(state),state.mode=16199,flush!==Z_TREES)break;hold>>>=2,bits-=2;break inf_leave;case 2:state.mode=16196;break;case 3:strm.msg="invalid block type",state.mode=BAD}hold>>>=2,bits-=2}break;case 16193:for(hold>>>=7&bits,bits-=7&bits;bits<32;){if(0===have)break inf_leave;have--,hold+=input[next++]<<bits,bits+=8}if((65535&hold)!=(hold>>>16^65535)){strm.msg="invalid stored block lengths",state.mode=BAD;break}if(state.length=65535&hold,bits=hold=0,state.mode=16194,flush===Z_TREES)break inf_leave;case 16194:state.mode=16195;case 16195:if(copy=state.length){if(0===(copy=left<(copy=have<copy?have:copy)?left:copy))break inf_leave;output.set(input.subarray(next,next+copy),put),have-=copy,next+=copy,left-=copy,put+=copy,state.length-=copy}else state.mode=16191;break;case 16196:for(;bits<14;){if(0===have)break inf_leave;have--,hold+=input[next++]<<bits,bits+=8}if(state.nlen=257+(31&hold),hold>>>=5,bits-=5,state.ndist=1+(31&hold),hold>>>=5,bits-=5,state.ncode=4+(15&hold),hold>>>=4,bits-=4,286<state.nlen||30<state.ndist){strm.msg="too many length or distance symbols",state.mode=BAD;break}state.have=0,state.mode=16197;case 16197:for(;state.have<state.ncode;){for(;bits<3;){if(0===have)break inf_leave;have--,hold+=input[next++]<<bits,bits+=8}state.lens[order[state.have++]]=7&hold,hold>>>=3,bits-=3}for(;state.have<19;)state.lens[order[state.have++]]=0;if(state.lencode=state.lendyn,state.lenbits=7,opts={bits:state.lenbits},ret=inftrees(0,state.lens,0,19,state.lencode,0,state.work,opts),state.lenbits=opts.bits,ret){strm.msg="invalid code lengths set",state.mode=BAD;break}state.have=0,state.mode=16198;case 16198:for(;state.have<state.nlen+state.ndist;){for(;here_op=(here=state.lencode[hold&(1<<state.lenbits)-1])>>>16&255,here_val=65535&here,!((here_bits=here>>>24)<=bits);){if(0===have)break inf_leave;have--,hold+=input[next++]<<bits,bits+=8}if(here_val<16)hold>>>=here_bits,bits-=here_bits,state.lens[state.have++]=here_val;else{if(16===here_val){for(n=here_bits+2;bits<n;){if(0===have)break inf_leave;have--,hold+=input[next++]<<bits,bits+=8}if(hold>>>=here_bits,bits-=here_bits,0===state.have){strm.msg="invalid bit length repeat",state.mode=BAD;break}len=state.lens[state.have-1],copy=3+(3&hold),hold>>>=2,bits-=2}else if(17===here_val){for(n=here_bits+3;bits<n;){if(0===have)break inf_leave;have--,hold+=input[next++]<<bits,bits+=8}len=0,copy=3+(7&(hold>>>=here_bits)),hold>>>=3,bits=bits-here_bits-3}else{for(n=here_bits+7;bits<n;){if(0===have)break inf_leave;have--,hold+=input[next++]<<bits,bits+=8}len=0,copy=11+(127&(hold>>>=here_bits)),hold>>>=7,bits=bits-here_bits-7}if(state.have+copy>state.nlen+state.ndist){strm.msg="invalid bit length repeat",state.mode=BAD;break}for(;copy--;)state.lens[state.have++]=len}}if(state.mode===BAD)break;if(0===state.lens[256]){strm.msg="invalid code -- missing end-of-block",state.mode=BAD;break}if(state.lenbits=9,opts={bits:state.lenbits},ret=inftrees(LENS,state.lens,0,state.nlen,state.lencode,0,state.work,opts),state.lenbits=opts.bits,ret){strm.msg="invalid literal/lengths set",state.mode=BAD;break}if(state.distbits=6,state.distcode=state.distdyn,opts={bits:state.distbits},ret=inftrees(DISTS,state.lens,state.nlen,state.ndist,state.distcode,0,state.work,opts),state.distbits=opts.bits,ret){strm.msg="invalid distances set",state.mode=BAD;break}if(state.mode=16199,flush===Z_TREES)break inf_leave;case 16199:state.mode=16200;case 16200:if(6<=have&&258<=left){strm.next_out=put,strm.avail_out=left,strm.next_in=next,strm.avail_in=have,state.hold=hold,state.bits=bits,!function(strm,start){var here,op,len,dist,from,from_source,state=strm.state,_in=strm.next_in,input=strm.input,last=_in+(strm.avail_in-5),_out=strm.next_out,output=strm.output,beg=_out-(start-strm.avail_out),end=_out+(strm.avail_out-257),dmax=state.dmax,wsize=state.wsize,whave=state.whave,wnext=state.wnext,s_window=state.window,hold=state.hold,bits=state.bits,lcode=state.lencode,dcode=state.distcode,lmask=(1<<state.lenbits)-1,dmask=(1<<state.distbits)-1;top:do{for(bits<15&&(hold+=input[_in++]<<bits,bits+=8,hold+=input[_in++]<<bits,bits+=8),here=lcode[hold&lmask];;){if(hold>>>=op=here>>>24,bits-=op,0===(op=here>>>16&255))output[_out++]=65535&here;else{if(!(16&op)){if(0==(64&op)){here=lcode[(65535&here)+(hold&(1<<op)-1)];continue}if(32&op){state.mode=TYPE$1;break top}strm.msg="invalid literal/length code",state.mode=BAD$1;break top}for(len=65535&here,(op&=15)&&(bits<op&&(hold+=input[_in++]<<bits,bits+=8),len+=hold&(1<<op)-1,hold>>>=op,bits-=op),bits<15&&(hold+=input[_in++]<<bits,bits+=8,hold+=input[_in++]<<bits,bits+=8),here=dcode[hold&dmask];;){if(hold>>>=op=here>>>24,bits-=op,!(16&(op=here>>>16&255))){if(0==(64&op)){here=dcode[(65535&here)+(hold&(1<<op)-1)];continue}strm.msg="invalid distance code",state.mode=BAD$1;break top}if(dist=65535&here,bits<(op&=15)&&(hold+=input[_in++]<<bits,(bits+=8)<op)&&(hold+=input[_in++]<<bits,bits+=8),dmax<(dist+=hold&(1<<op)-1)){strm.msg="invalid distance too far back",state.mode=BAD$1;break top}if(hold>>>=op,bits-=op,(op=_out-beg)<dist){if(whave<(op=dist-op)&&state.sane){strm.msg="invalid distance too far back",state.mode=BAD$1;break top}if(from_source=s_window,(from=0)===wnext){if(from+=wsize-op,op<len){for(len-=op;output[_out++]=s_window[from++],--op;);from=_out-dist,from_source=output}}else if(wnext<op){if(from+=wsize+wnext-op,(op-=wnext)<len){for(len-=op;output[_out++]=s_window[from++],--op;);if(from=0,wnext<len){for(len-=op=wnext;output[_out++]=s_window[from++],--op;);from=_out-dist,from_source=output}}}else if(from+=wnext-op,op<len){for(len-=op;output[_out++]=s_window[from++],--op;);from=_out-dist,from_source=output}for(;2<len;)output[_out++]=from_source[from++],output[_out++]=from_source[from++],output[_out++]=from_source[from++],len-=3;len&&(output[_out++]=from_source[from++],1<len)&&(output[_out++]=from_source[from++])}else{for(from=_out-dist;output[_out++]=output[from++],output[_out++]=output[from++],output[_out++]=output[from++],2<(len-=3););len&&(output[_out++]=output[from++],1<len)&&(output[_out++]=output[from++])}break}}break}}while(_in<last&&_out<end);hold&=(1<<(bits-=(len=bits>>3)<<3))-1,strm.next_in=_in-=len,strm.next_out=_out,strm.avail_in=_in<last?last-_in+5:5-(_in-last),strm.avail_out=_out<end?end-_out+257:257-(_out-end),state.hold=hold,state.bits=bits}(strm,_out),put=strm.next_out,output=strm.output,left=strm.avail_out,next=strm.next_in,input=strm.input,have=strm.avail_in,hold=state.hold,bits=state.bits,16191===state.mode&&(state.back=-1);break}for(state.back=0;here_op=(here=state.lencode[hold&(1<<state.lenbits)-1])>>>16&255,here_val=65535&here,!((here_bits=here>>>24)<=bits);){if(0===have)break inf_leave;have--,hold+=input[next++]<<bits,bits+=8}if(here_op&&0==(240&here_op)){for(last_bits=here_bits,last_op=here_op,last_val=here_val;here_op=(here=state.lencode[last_val+((hold&(1<<last_bits+last_op)-1)>>last_bits)])>>>16&255,here_val=65535&here,!(last_bits+(here_bits=here>>>24)<=bits);){if(0===have)break inf_leave;have--,hold+=input[next++]<<bits,bits+=8}hold>>>=last_bits,bits-=last_bits,state.back+=last_bits}if(hold>>>=here_bits,bits-=here_bits,state.back+=here_bits,state.length=here_val,0===here_op){state.mode=16205;break}if(32&here_op){state.back=-1,state.mode=16191;break}if(64&here_op){strm.msg="invalid literal/length code",state.mode=BAD;break}state.extra=15&here_op,state.mode=16201;case 16201:if(state.extra){for(n=state.extra;bits<n;){if(0===have)break inf_leave;have--,hold+=input[next++]<<bits,bits+=8}state.length+=hold&(1<<state.extra)-1,hold>>>=state.extra,bits-=state.extra,state.back+=state.extra}state.was=state.length,state.mode=16202;case 16202:for(;here_op=(here=state.distcode[hold&(1<<state.distbits)-1])>>>16&255,here_val=65535&here,!((here_bits=here>>>24)<=bits);){if(0===have)break inf_leave;have--,hold+=input[next++]<<bits,bits+=8}if(0==(240&here_op)){for(last_bits=here_bits,last_op=here_op,last_val=here_val;here_op=(here=state.distcode[last_val+((hold&(1<<last_bits+last_op)-1)>>last_bits)])>>>16&255,here_val=65535&here,!(last_bits+(here_bits=here>>>24)<=bits);){if(0===have)break inf_leave;have--,hold+=input[next++]<<bits,bits+=8}hold>>>=last_bits,bits-=last_bits,state.back+=last_bits}if(hold>>>=here_bits,bits-=here_bits,state.back+=here_bits,64&here_op){strm.msg="invalid distance code",state.mode=BAD;break}state.offset=here_val,state.extra=15&here_op,state.mode=16203;case 16203:if(state.extra){for(n=state.extra;bits<n;){if(0===have)break inf_leave;have--,hold+=input[next++]<<bits,bits+=8}state.offset+=hold&(1<<state.extra)-1,hold>>>=state.extra,bits-=state.extra,state.back+=state.extra}if(state.offset>state.dmax){strm.msg="invalid distance too far back",state.mode=BAD;break}state.mode=16204;case 16204:if(0===left)break inf_leave;if(state.offset>(copy=_out-left)){if((copy=state.offset-copy)>state.whave&&state.sane){strm.msg="invalid distance too far back",state.mode=BAD;break}from=copy>state.wnext?(copy-=state.wnext,state.wsize-copy):state.wnext-copy,copy>state.length&&(copy=state.length),from_source=state.window}else from_source=output,from=put-state.offset,copy=state.length;for(left-=copy=left<copy?left:copy,state.length-=copy;output[put++]=from_source[from++],--copy;);0===state.length&&(state.mode=16200);break;case 16205:if(0===left)break inf_leave;output[put++]=state.length,left--,state.mode=16200;break;case 16206:if(state.wrap){for(;bits<32;){if(0===have)break inf_leave;have--,hold|=input[next++]<<bits,bits+=8}if(_out-=left,strm.total_out+=_out,state.total+=_out,4&state.wrap&&_out&&(strm.adler=state.check=(state.flags?crc32_1:adler32_1)(state.check,output,_out,put-_out)),_out=left,4&state.wrap&&(state.flags?hold:zswap32(hold))!==state.check){strm.msg="incorrect data check",state.mode=BAD;break}bits=hold=0}state.mode=16207;case 16207:if(state.wrap&&state.flags){for(;bits<32;){if(0===have)break inf_leave;have--,hold+=input[next++]<<bits,bits+=8}if(4&state.wrap&&hold!==(4294967295&state.total)){strm.msg="incorrect length check",state.mode=BAD;break}bits=hold=0}state.mode=16208;case 16208:ret=Z_STREAM_END$1;break inf_leave;case BAD:ret=Z_DATA_ERROR$1;break inf_leave;case 16210:return Z_MEM_ERROR$1;default:return Z_STREAM_ERROR$1}return strm.next_out=put,strm.avail_out=left,strm.next_in=next,strm.avail_in=have,state.hold=hold,state.bits=bits,(state.wsize||_out!==strm.avail_out&&state.mode<BAD&&(state.mode<16206||flush!==Z_FINISH$1))&&updatewindow(strm,strm.output,strm.next_out,_out-strm.avail_out),_out-=strm.avail_out,strm.total_in+=_in-=strm.avail_in,strm.total_out+=_out,state.total+=_out,4&state.wrap&&_out&&(strm.adler=state.check=(state.flags?crc32_1:adler32_1)(state.check,output,_out,strm.next_out-_out)),strm.data_type=state.bits+(state.last?64:0)+(16191===state.mode?128:0)+(16199===state.mode||16194===state.mode?256:0),ret=(0==_in&&0===_out||flush===Z_FINISH$1)&&ret===Z_OK$1?Z_BUF_ERROR:ret},inflateEnd:function(strm){var state;return inflateStateCheck(strm)?Z_STREAM_ERROR$1:((state=strm.state).window&&(state.window=null),strm.state=null,Z_OK$1)},inflateGetHeader:function(strm,head){return inflateStateCheck(strm)||0==(2&(strm=strm.state).wrap)?Z_STREAM_ERROR$1:((strm.head=head).done=!1,Z_OK$1)},inflateSetDictionary:function(strm,dictionary){var state,dictLength=dictionary.length;return inflateStateCheck(strm)||0!==(state=strm.state).wrap&&16190!==state.mode?Z_STREAM_ERROR$1:16190===state.mode&&adler32_1(1,dictionary,dictLength,0)!==state.check?Z_DATA_ERROR$1:updatewindow(strm,dictionary,dictLength,dictLength)?(state.mode=16210,Z_MEM_ERROR$1):(state.havedict=1,Z_OK$1)},inflateInfo:"pako inflate (from Nodeca project)"};function _typeof(obj){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj})(obj)}var common_assign=function(obj){for(var sources=Array.prototype.slice.call(arguments,1);sources.length;){var source=sources.shift();if(source){if("object"!==_typeof(source))throw new TypeError(source+"must be non-object");for(var p in source)!function(obj,key){return Object.prototype.hasOwnProperty.call(obj,key)}(source,p)||(obj[p]=source[p])}}return obj},common_flattenChunks=function(chunks){for(var len=0,i=0,l=chunks.length;i<l;i++)len+=chunks[i].length;for(var result=new Uint8Array(len),_i=0,pos=0,_l=chunks.length;_i<_l;_i++){var chunk=chunks[_i];result.set(chunk,pos),pos+=chunk.length}return result},STR_APPLY_UIA_OK=!0;try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(__){STR_APPLY_UIA_OK=!1}for(var _utf8len=new Uint8Array(256),q=0;q<256;q++)_utf8len[q]=252<=q?6:248<=q?5:240<=q?4:224<=q?3:192<=q?2:1;_utf8len[254]=_utf8len[254]=1;var strings_string2buf=function(str){if("function"==typeof TextEncoder&&TextEncoder.prototype.encode)return(new TextEncoder).encode(str);for(var buf,c,c2,i,str_len=str.length,buf_len=0,m_pos=0;m_pos<str_len;m_pos++)55296==(64512&(c=str.charCodeAt(m_pos)))&&m_pos+1<str_len&&56320==(64512&(c2=str.charCodeAt(m_pos+1)))&&(c=65536+(c-55296<<10)+(c2-56320),m_pos++),buf_len+=c<128?1:c<2048?2:c<65536?3:4;for(buf=new Uint8Array(buf_len),m_pos=i=0;i<buf_len;m_pos++)55296==(64512&(c=str.charCodeAt(m_pos)))&&m_pos+1<str_len&&56320==(64512&(c2=str.charCodeAt(m_pos+1)))&&(c=65536+(c-55296<<10)+(c2-56320),m_pos++),c<128?buf[i++]=c:(c<2048?buf[i++]=192|c>>>6:(c<65536?buf[i++]=224|c>>>12:(buf[i++]=240|c>>>18,buf[i++]=128|c>>>12&63),buf[i++]=128|c>>>6&63),buf[i++]=128|63&c);return buf},strings_buf2string=function(buf,max){var len=max||buf.length;if("function"==typeof TextDecoder&&TextDecoder.prototype.decode)return(new TextDecoder).decode(buf.subarray(0,max));for(var utf16buf=new Array(2*len),out=0,i=0;i<len;){var c=buf[i++];if(c<128)utf16buf[out++]=c;else{var c_len=_utf8len[c];if(4<c_len)utf16buf[out++]=65533,i+=c_len-1;else{for(c&=2===c_len?31:3===c_len?15:7;1<c_len&&i<len;)c=c<<6|63&buf[i++],c_len--;1<c_len?utf16buf[out++]=65533:c<65536?utf16buf[out++]=c:(c-=65536,utf16buf[out++]=55296|c>>10&1023,utf16buf[out++]=56320|1023&c)}}}return function(buf,len){if(len<65534&&buf.subarray&&STR_APPLY_UIA_OK)return String.fromCharCode.apply(null,buf.length===len?buf:buf.subarray(0,len));for(var result="",i=0;i<len;i++)result+=String.fromCharCode(buf[i]);return result}(utf16buf,out)},strings_utf8border=function(buf,max){for(var pos=(max=(max=max||buf.length)>buf.length?buf.length:max)-1;0<=pos&&128==(192&buf[pos]);)pos--;return!(pos<0)&&0!==pos&&pos+_utf8len[buf[pos]]>max?pos:max},messages={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"};var zstream=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0};var gzheader=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1},toString=Object.prototype.toString,Z_NO_FLUSH=constants$1.Z_NO_FLUSH,Z_FINISH=constants$1.Z_FINISH,Z_OK=constants$1.Z_OK,Z_STREAM_END=constants$1.Z_STREAM_END,Z_NEED_DICT=constants$1.Z_NEED_DICT,Z_STREAM_ERROR=constants$1.Z_STREAM_ERROR,Z_DATA_ERROR=constants$1.Z_DATA_ERROR,Z_MEM_ERROR=constants$1.Z_MEM_ERROR;function Inflate(options){this.options=common_assign({chunkSize:65536,windowBits:15,to:""},options||{});var opt=this.options,options=(opt.raw&&0<=opt.windowBits&&opt.windowBits<16&&(opt.windowBits=-opt.windowBits,0===opt.windowBits)&&(opt.windowBits=-15),!(0<=opt.windowBits&&opt.windowBits<16)||options&&options.windowBits||(opt.windowBits+=32),15<opt.windowBits&&opt.windowBits<48&&0==(15&opt.windowBits)&&(opt.windowBits|=15),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new zstream,this.strm.avail_out=0,inflate_1$1.inflateInit2(this.strm,opt.windowBits));if(options!==Z_OK)throw new Error(messages[options]);if(this.header=new gzheader,inflate_1$1.inflateGetHeader(this.strm,this.header),opt.dictionary&&("string"==typeof opt.dictionary?opt.dictionary=strings_string2buf(opt.dictionary):"[object ArrayBuffer]"===toString.call(opt.dictionary)&&(opt.dictionary=new Uint8Array(opt.dictionary)),opt.raw)&&(options=inflate_1$1.inflateSetDictionary(this.strm,opt.dictionary))!==Z_OK)throw new Error(messages[options])}function inflate(input,options){options=new Inflate(options);if(options.push(input),options.err)throw options.msg||messages[options.err];return options.result}Inflate.prototype.push=function(data,flush_mode){var status,_flush_mode,strm=this.strm,chunkSize=this.options.chunkSize,dictionary=this.options.dictionary;if(this.ended)return!1;for(_flush_mode=flush_mode===~~flush_mode?flush_mode:!0===flush_mode?Z_FINISH:Z_NO_FLUSH,"[object ArrayBuffer]"===toString.call(data)?strm.input=new Uint8Array(data):strm.input=data,strm.next_in=0,strm.avail_in=strm.input.length;;){for(0===strm.avail_out&&(strm.output=new Uint8Array(chunkSize),strm.next_out=0,strm.avail_out=chunkSize),(status=inflate_1$1.inflate(strm,_flush_mode))===Z_NEED_DICT&&dictionary&&((status=inflate_1$1.inflateSetDictionary(strm,dictionary))===Z_OK?status=inflate_1$1.inflate(strm,_flush_mode):status===Z_DATA_ERROR&&(status=Z_NEED_DICT));0<strm.avail_in&&status===Z_STREAM_END&&0<strm.state.wrap&&0!==data[strm.next_in];)inflate_1$1.inflateReset(strm),status=inflate_1$1.inflate(strm,_flush_mode);switch(status){case Z_STREAM_ERROR:case Z_DATA_ERROR:case Z_NEED_DICT:case Z_MEM_ERROR:return this.onEnd(status),!(this.ended=!0)}var next_out_utf8,tail,utf8str,last_avail_out=strm.avail_out;if(!strm.next_out||0!==strm.avail_out&&status!==Z_STREAM_END||("string"===this.options.to?(next_out_utf8=strings_utf8border(strm.output,strm.next_out),tail=strm.next_out-next_out_utf8,utf8str=strings_buf2string(strm.output,next_out_utf8),strm.next_out=tail,strm.avail_out=chunkSize-tail,tail&&strm.output.set(strm.output.subarray(next_out_utf8,next_out_utf8+tail),0),this.onData(utf8str)):this.onData(strm.output.length===strm.next_out?strm.output:strm.output.subarray(0,strm.next_out))),status!==Z_OK||0!==last_avail_out){if(status===Z_STREAM_END)return status=inflate_1$1.inflateEnd(this.strm),this.onEnd(status),this.ended=!0;if(0===strm.avail_in)break}}return!0},Inflate.prototype.onData=function(chunk){this.chunks.push(chunk)},Inflate.prototype.onEnd=function(status){status===Z_OK&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=common_flattenChunks(this.chunks)),this.chunks=[],this.err=status,this.msg=this.strm.msg};function inflateRaw_1(input,options){return(options=options||{}).raw=!0,inflate(input,options)}var inflate_2=inflate,ungzip=inflate,inflate_1={Inflate:Inflate,inflate:inflate_2,inflateRaw:inflateRaw_1,ungzip:ungzip,constants:constants$1};return exports.Inflate=Inflate,exports.constants=constants$1,exports.default=inflate_1,exports.inflate=inflate_2,exports.inflateRaw=inflateRaw_1,exports.ungzip=ungzip,exports}void 0!==Module&&(Module.TA=TA);var browserFix=browserFix||{},wasmString;function inflateBase64(base64){var binaryString=function(string){var b64="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",string=String(string).replace(/[\t\n\f\r ]+/g,"");string+="==".slice(2-(3&string.length));for(var bitmap,r1,r2,result="",i=0;i<string.length;)bitmap=b64.indexOf(string.charAt(i++))<<18|b64.indexOf(string.charAt(i++))<<12|(r1=b64.indexOf(string.charAt(i++)))<<6|(r2=b64.indexOf(string.charAt(i++))),result+=64===r1?String.fromCharCode(bitmap>>16&255):64===r2?String.fromCharCode(bitmap>>16&255,bitmap>>8&255):String.fromCharCode(bitmap>>16&255,bitmap>>8&255,255&bitmap);return result}(base64),length=binaryString.length,bytes=new Uint8Array(length);for(let i=0;i<length;i++)bytes[i]=binaryString.charCodeAt(i);return init_pako().inflate(bytes)}browserFix.sliceTypedArray=function(array,sliceBegin,sliceEnd){var bpe=array.BYTES_PER_ELEMENT,boff=array.byteOffset,len=array.length;return(sliceBegin=0|sliceBegin||0)<0&&(sliceBegin+=len),(sliceEnd=void 0===sliceEnd?len:0|sliceEnd)<0&&(sliceEnd+=len),new array.constructor(array.buffer.slice(boff+bpe*sliceBegin,boff+bpe*sliceEnd))},void 0===Uint8Array.prototype.slice&&(console.warn("The TypedArray.slice method is not supported in this browser. This may impair performance. "),Uint16Array.prototype.slice=function(begin,end){return browserFix.sliceTypedArray(this,begin,end)},Int16Array.prototype.slice=function(begin,end){return browserFix.sliceTypedArray(this,begin,end)},Uint8Array.prototype.slice=function(begin,end){return browserFix.sliceTypedArray(this,begin,end)},Int8Array.prototype.slice=function(begin,end){return browserFix.sliceTypedArray(this,begin,end)}),void 0!==Module&&(wasmString="",100<wasmString.length)&&(Module.wasmBinary=inflateBase64(wasmString),Module.__haswasmBinary__=!0),"undefined"!=typeof __ctx&&void 0!==__ctx.INITIAL_MEMORY&&(Module.INITIAL_MEMORY=__ctx.INITIAL_MEMORY),"undefined"==typeof print&&(print=console.log);var JSHttpGet=null,crypto,fs,os,process,CLUSTER_IP,CLUSTER_DOMAIN,JSHttpGet;function md5(text){return crypto.createHash("md5").update(text).digest("hex")}JSHttpGet="undefined"!=typeof self&&void 0!==self.onmessage?function(path){var r=XMLHttpRequest?new XMLHttpRequest:new ActiveXObject("Microsoft.XMLHTTP");return r.open("GET","https://www.fmz.com"+path,!1),r.send(null),r.responseText}:(crypto=require("crypto"),fs=require("fs"),os=require("os"),process=require("process"),CLUSTER_IP=process.env.CLUSTER_IP||"q.fmz.com",CLUSTER_DOMAIN=process.env.CLUSTER_DOMAIN||"q.fmz.com",function(url){var tmpCache=os.tmpdir()+"/cache",tmpCache=(fs.existsSync(tmpCache)||fs.mkdirSync(tmpCache),tmpCache+"/botvs_kline_"+md5(url="http://"+CLUSTER_IP+url));return fs.existsSync(tmpCache)?fs.readFileSync(tmpCache,"utf-8"):((url=require("sync-request")("GET",url,{headers:{Host:CLUSTER_DOMAIN}}).getBody("utf8"))&&-1!==url.indexOf(",")&&fs.writeFileSync(tmpCache,url,"utf-8"),url)});var moduleOverrides=Object.assign({},Module),arguments_=[],thisProgram="./this.program",quit_=(status,toThrow)=>{throw toThrow},ENVIRONMENT_IS_WEB="object"==typeof window,ENVIRONMENT_IS_WORKER="function"==typeof importScripts,ENVIRONMENT_IS_NODE="object"==typeof process&&"object"==typeof process.versions&&"string"==typeof process.versions.node,scriptDirectory="",read_,readAsync,readBinary,setWindowTitle,fs,nodePath,scriptDirectory,read_,readBinary,readAsync;function locateFile(path){return Module.locateFile?Module.locateFile(path,scriptDirectory):scriptDirectory+path}ENVIRONMENT_IS_NODE?(fs=require("fs"),nodePath=require("path"),scriptDirectory=ENVIRONMENT_IS_WORKER?nodePath.dirname(scriptDirectory)+"/":__dirname+"/",read_=(filename,binary)=>(filename=isFileURI(filename)?new URL(filename):nodePath.normalize(filename),fs.readFileSync(filename,binary?void 0:"utf8")),readBinary=filename=>{filename=read_(filename,!0);return filename=filename.buffer?filename:new Uint8Array(filename)},readAsync=(filename,onload,onerror,binary=!0)=>{filename=isFileURI(filename)?new URL(filename):nodePath.normalize(filename),fs.readFile(filename,binary?void 0:"utf8",(err,data)=>{err?onerror(err):onload(binary?data.buffer:data)})},!Module.thisProgram&&1<process.argv.length&&(thisProgram=process.argv[1].replace(/\\/g,"/")),arguments_=process.argv.slice(2),quit_=(status,toThrow)=>{throw process.exitCode=status,toThrow},Module.inspect=()=>"[Emscripten Module object]"):(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER)&&(ENVIRONMENT_IS_WORKER?scriptDirectory=self.location.href:"undefined"!=typeof document&&document.currentScript&&(scriptDirectory=document.currentScript.src),_scriptDir&&(scriptDirectory=_scriptDir),scriptDirectory=0!==scriptDirectory.indexOf("blob:")?scriptDirectory.substr(0,scriptDirectory.replace(/[?#].*/,"").lastIndexOf("/")+1):"",read_=url=>{var xhr=new XMLHttpRequest;return xhr.open("GET",url,!1),xhr.send(null),xhr.responseText},ENVIRONMENT_IS_WORKER&&(readBinary=url=>{var xhr=new XMLHttpRequest;return xhr.open("GET",url,!1),xhr.responseType="arraybuffer",xhr.send(null),new Uint8Array(xhr.response)}),readAsync=(url,onload,onerror)=>{var xhr=new XMLHttpRequest;xhr.open("GET",url,!0),xhr.responseType="arraybuffer",xhr.onload=()=>{200==xhr.status||0==xhr.status&&xhr.response?onload(xhr.response):onerror()},xhr.onerror=onerror,xhr.send(null)},setWindowTitle=title=>document.title=title);var out=Module.print||console.log.bind(console),err=Module.printErr||console.error.bind(console),wasmBinary,noExitRuntime=(Object.assign(Module,moduleOverrides),moduleOverrides=null,Module.arguments&&(arguments_=Module.arguments),Module.thisProgram&&(thisProgram=Module.thisProgram),Module.quit&&(quit_=Module.quit),Module.wasmBinary&&(wasmBinary=Module.wasmBinary),Module.noExitRuntime||!0),wasmMemory,wasmExports,ABORT=("object"!=typeof WebAssembly&&abort("no native wasm support detected"),!1),EXITSTATUS,HEAP8,HEAPU8,HEAP16,HEAPU16,HEAP32,HEAPU32,HEAPF32,HEAPF64;function assert(condition,text){condition||abort(text)}function updateMemoryViews(){var b=wasmMemory.buffer;Module.HEAP8=HEAP8=new Int8Array(b),Module.HEAP16=HEAP16=new Int16Array(b),Module.HEAP32=HEAP32=new Int32Array(b),Module.HEAPU8=HEAPU8=new Uint8Array(b),Module.HEAPU16=HEAPU16=new Uint16Array(b),Module.HEAPU32=HEAPU32=new Uint32Array(b),Module.HEAPF32=HEAPF32=new Float32Array(b),Module.HEAPF64=HEAPF64=new Float64Array(b)}var INITIAL_MEMORY=Module.INITIAL_MEMORY||314572800,wasmTable,__ATPRERUN__=(assert(5242880<=INITIAL_MEMORY,"INITIAL_MEMORY should be larger than STACK_SIZE, was "+INITIAL_MEMORY+"! (STACK_SIZE=5242880)"),wasmMemory=Module.wasmMemory||new WebAssembly.Memory({initial:INITIAL_MEMORY/65536,maximum:65536}),updateMemoryViews(),INITIAL_MEMORY=wasmMemory.buffer.byteLength,[]),__ATINIT__=[],__ATPOSTRUN__=[],runtimeInitialized=!1;function preRun(){if(Module.preRun)for("function"==typeof Module.preRun&&(Module.preRun=[Module.preRun]);Module.preRun.length;)addOnPreRun(Module.preRun.shift());callRuntimeCallbacks(__ATPRERUN__)}function initRuntime(){runtimeInitialized=!0,Module.noFSInit||FS.init.initialized||FS.init(),FS.ignorePermissions=!1,TTY.init(),callRuntimeCallbacks(__ATINIT__)}function postRun(){if(Module.postRun)for("function"==typeof Module.postRun&&(Module.postRun=[Module.postRun]);Module.postRun.length;)addOnPostRun(Module.postRun.shift());callRuntimeCallbacks(__ATPOSTRUN__)}function addOnPreRun(cb){__ATPRERUN__.unshift(cb)}function addOnInit(cb){__ATINIT__.unshift(cb)}function addOnPostRun(cb){__ATPOSTRUN__.unshift(cb)}var runDependencies=0,runDependencyWatcher=null,dependenciesFulfilled=null;function getUniqueRunDependency(id){return id}function addRunDependency(id){runDependencies++,Module.monitorRunDependencies&&Module.monitorRunDependencies(runDependencies)}function removeRunDependency(id){var callback;runDependencies--,Module.monitorRunDependencies&&Module.monitorRunDependencies(runDependencies),0==runDependencies&&(null!==runDependencyWatcher&&(clearInterval(runDependencyWatcher),runDependencyWatcher=null),dependenciesFulfilled)&&(callback=dependenciesFulfilled,dependenciesFulfilled=null,callback())}function abort(what){Module.onAbort&&Module.onAbort(what),err(what="Aborted("+what+")"),ABORT=!0,EXITSTATUS=1,what+=". Build with -sASSERTIONS for more info.";what=new WebAssembly.RuntimeError(what);throw readyPromiseReject(what),what}var dataURIPrefix="data:application/octet-stream;base64,",wasmBinaryFile,tempDouble,tempI64;function isDataURI(filename){return filename.startsWith(dataURIPrefix)}function isFileURI(filename){return filename.startsWith("file://")}function getBinarySync(file){if(file==wasmBinaryFile&&wasmBinary)return new Uint8Array(wasmBinary);if(readBinary)return readBinary(file);throw"sync fetching of the wasm failed: you can preload it to Module['wasmBinary'] manually, or emcc.py will do that for you when generating HTML (but not JS)"}function instantiateSync(file,info){file=getBinarySync(file),file=new WebAssembly.Module(file);return[new WebAssembly.Instance(file,info),file]}function createWasm(){var info={a:wasmImports};function receiveInstance(instance,module){instance=applySignatureConversions(instance.exports);return wasmTable=(wasmExports=instance).S,addOnInit(wasmExports.O),removeRunDependency("wasm-instantiate"),instance}if(addRunDependency("wasm-instantiate"),Module.instantiateWasm)try{return Module.instantiateWasm(info,receiveInstance)}catch(e){err("Module.instantiateWasm callback failed with error: "+e),readyPromiseReject(e)}return receiveInstance(instantiateSync(wasmBinaryFile,info)[0])}wasmBinaryFile="sandbox_cpp_wasm.wasm",isDataURI(wasmBinaryFile)||(wasmBinaryFile=locateFile(wasmBinaryFile));var callRuntimeCallbacks=callbacks=>{for(;0<callbacks.length;)callbacks.shift()(Module)};function getValue(ptr,type="i8"){switch(type=type.endsWith("*")?"*":type){case"i1":case"i8":return HEAP8[ptr>>>0];case"i16":return HEAP16[ptr>>>1];case"i32":return HEAP32[ptr>>>2];case"i64":abort("to do getValue(i64) use WASM_BIGINT");case"float":return HEAPF32[ptr>>>2];case"double":return HEAPF64[ptr>>>3];case"*":return HEAPU32[ptr>>>2];default:abort("invalid type for getValue: "+type)}}function setValue(ptr,value,type="i8"){switch(type=type.endsWith("*")?"*":type){case"i1":case"i8":HEAP8[ptr>>>0]=value;break;case"i16":HEAP16[ptr>>>1]=value;break;case"i32":HEAP32[ptr>>>2]=value;break;case"i64":abort("to do setValue(i64) use WASM_BIGINT");case"float":HEAPF32[ptr>>>2]=value;break;case"double":HEAPF64[ptr>>>3]=value;break;case"*":HEAPU32[ptr>>>2]=value;break;default:abort("invalid type for setValue: "+type)}}function convertI32PairToI53Checked(lo,hi){return hi+2097152>>>0<4194305-!!lo?(lo>>>0)+4294967296*hi:NaN}var UTF8Decoder="undefined"!=typeof TextDecoder?new TextDecoder("utf8"):void 0,UTF8ArrayToString=(heapOrArray,idx,maxBytesToRead)=>{for(var endIdx=(idx>>>=0)+maxBytesToRead,endPtr=idx;heapOrArray[endPtr]&&!(endIdx<=endPtr);)++endPtr;if(16<endPtr-idx&&heapOrArray.buffer&&UTF8Decoder)return UTF8Decoder.decode(heapOrArray.subarray(idx,endPtr));for(var str="";idx<endPtr;){var u2,u1,u0=heapOrArray[idx++];128&u0?(u1=63&heapOrArray[idx++],192==(224&u0)?str+=String.fromCharCode((31&u0)<<6|u1):(u2=63&heapOrArray[idx++],(u0=224==(240&u0)?(15&u0)<<12|u1<<6|u2:(7&u0)<<18|u1<<12|u2<<6|63&heapOrArray[idx++])<65536?str+=String.fromCharCode(u0):(u1=u0-65536,str+=String.fromCharCode(55296|u1>>10,56320|1023&u1)))):str+=String.fromCharCode(u0)}return str},UTF8ToString=(ptr,maxBytesToRead)=>(ptr>>>=0)?UTF8ArrayToString(HEAPU8,ptr,maxBytesToRead):"";function ___assert_fail(condition,filename,line,func){filename>>>=0,func>>>=0,abort(`Assertion failed: ${UTF8ToString(condition>>>=0)}, at: `+[filename?UTF8ToString(filename):"unknown filename",line,func?UTF8ToString(func):"unknown function"])}function ExceptionInfo(excPtr){this.excPtr=excPtr,this.ptr=excPtr-24,this.set_type=function(type){HEAPU32[this.ptr+4>>>2]=type},this.get_type=function(){return HEAPU32[this.ptr+4>>>2]},this.set_destructor=function(destructor){HEAPU32[this.ptr+8>>>2]=destructor},this.get_destructor=function(){return HEAPU32[this.ptr+8>>>2]},this.set_caught=function(caught){HEAP8[this.ptr+12>>>0]=caught=caught?1:0},this.get_caught=function(){return 0!=HEAP8[this.ptr+12>>>0]},this.set_rethrown=function(rethrown){HEAP8[this.ptr+13>>>0]=rethrown=rethrown?1:0},this.get_rethrown=function(){return 0!=HEAP8[this.ptr+13>>>0]},this.init=function(type,destructor){this.set_adjusted_ptr(0),this.set_type(type),this.set_destructor(destructor)},this.set_adjusted_ptr=function(adjustedPtr){HEAPU32[this.ptr+16>>>2]=adjustedPtr},this.get_adjusted_ptr=function(){return HEAPU32[this.ptr+16>>>2]},this.get_exception_ptr=function(){var adjusted;return ___cxa_is_pointer_type(this.get_type())?HEAPU32[this.excPtr>>>2]:0!==(adjusted=this.get_adjusted_ptr())?adjusted:this.excPtr}}var exceptionLast=0,uncaughtExceptionCount=0;function ___cxa_throw(ptr,type,destructor){throw type>>>=0,destructor>>>=0,new ExceptionInfo(ptr>>>=0).init(type,destructor),uncaughtExceptionCount++,ptr}var structRegistrations={};function runDestructors(destructors){for(;destructors.length;){var ptr=destructors.pop();destructors.pop()(ptr)}}function simpleReadValueFromPointer(pointer){return this.fromWireType(HEAP32[pointer>>>2])}var awaitingDependencies={},registeredTypes={},typeDependencies={},InternalError=void 0;function throwInternalError(message){throw new InternalError(message)}function whenDependentTypesAreResolved(myTypes,dependentTypes,getTypeConverters){function onComplete(typeConverters){var myTypeConverters=getTypeConverters(typeConverters);myTypeConverters.length!==myTypes.length&&throwInternalError("Mismatched type converter count");for(var i=0;i<myTypes.length;++i)registerType(myTypes[i],myTypeConverters[i])}myTypes.forEach(function(type){typeDependencies[type]=dependentTypes});var typeConverters=new Array(dependentTypes.length),unregisteredTypes=[],registered=0;dependentTypes.forEach((dt,i)=>{registeredTypes.hasOwnProperty(dt)?typeConverters[i]=registeredTypes[dt]:(unregisteredTypes.push(dt),awaitingDependencies.hasOwnProperty(dt)||(awaitingDependencies[dt]=[]),awaitingDependencies[dt].push(()=>{typeConverters[i]=registeredTypes[dt],++registered===unregisteredTypes.length&&onComplete(typeConverters)}))}),0===unregisteredTypes.length&&onComplete(typeConverters)}var __embind_finalize_value_object=function(structType){var reg=structRegistrations[structType>>>=0],rawConstructor=(delete structRegistrations[structType],reg.rawConstructor),rawDestructor=reg.rawDestructor,fieldRecords=reg.fields;whenDependentTypesAreResolved([structType],fieldRecords.map(field=>field.getterReturnType).concat(fieldRecords.map(field=>field.setterArgumentType)),fieldTypes=>{var fields={};return fieldRecords.forEach((field,i)=>{var fieldName=field.fieldName,getterReturnType=fieldTypes[i],getter=field.getter,getterContext=field.getterContext,setterArgumentType=fieldTypes[i+fieldRecords.length],setter=field.setter,setterContext=field.setterContext;fields[fieldName]={read:ptr=>getterReturnType.fromWireType(getter(getterContext,ptr)),write:(ptr,o)=>{var destructors=[];setter(setterContext,ptr,setterArgumentType.toWireType(destructors,o)),runDestructors(destructors)}}}),[{name:reg.name,fromWireType:function(ptr){var i,rv={};for(i in fields)rv[i]=fields[i].read(ptr);return rawDestructor(ptr),rv},toWireType:function(destructors,o){for(var fieldName in fields)if(!(fieldName in o))throw new TypeError(`Missing field: "${fieldName}"`);var ptr=rawConstructor();for(fieldName in fields)fields[fieldName].write(ptr,o[fieldName]);return null!==destructors&&destructors.push(rawDestructor,ptr),ptr},argPackAdvance:8,readValueFromPointer:simpleReadValueFromPointer,destructorFunction:rawDestructor}]})};function __embind_register_bigint(primitiveType,name,size,minRange,maxRange){}function getShiftFromSize(size){switch(size){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError("Unknown type size: "+size)}}function embind_init_charCodes(){for(var codes=new Array(256),i=0;i<256;++i)codes[i]=String.fromCharCode(i);embind_charCodes=codes}var embind_charCodes=void 0;function readLatin1String(ptr){for(var ret="",c=ptr;HEAPU8[c>>>0];)ret+=embind_charCodes[HEAPU8[c++>>>0]];return ret}var BindingError=void 0;function throwBindingError(message){throw new BindingError(message)}function sharedRegisterType(rawType,registeredInstance,options={}){var name=registeredInstance.name;if(rawType||throwBindingError(`type "${name}" must have a positive integer typeid pointer`),registeredTypes.hasOwnProperty(rawType)){if(options.ignoreDuplicateRegistrations)return;throwBindingError(`Cannot register type '${name}' twice`)}registeredTypes[rawType]=registeredInstance,delete typeDependencies[rawType],awaitingDependencies.hasOwnProperty(rawType)&&(options=awaitingDependencies[rawType],delete awaitingDependencies[rawType],options.forEach(cb=>cb()))}function registerType(rawType,registeredInstance,options={}){if(!("argPackAdvance"in registeredInstance))throw new TypeError("registerType registeredInstance requires argPackAdvance");sharedRegisterType(rawType,registeredInstance,options)}function __embind_register_bool(rawType,name,size,trueValue,falseValue){rawType>>>=0,name>>>=0;var shift=getShiftFromSize(size>>>=0);registerType(rawType,{name:name=readLatin1String(name),fromWireType:function(wt){return!!wt},toWireType:function(destructors,o){return o?trueValue:falseValue},argPackAdvance:8,readValueFromPointer:function(pointer){var heap;if(1===size)heap=HEAP8;else if(2===size)heap=HEAP16;else{if(4!==size)throw new TypeError("Unknown boolean type size: "+name);heap=HEAP32}return this.fromWireType(heap[pointer>>>shift])},destructorFunction:null})}function ClassHandle_isAliasOf(other){if(!(this instanceof ClassHandle))return!1;if(!(other instanceof ClassHandle))return!1;for(var leftClass=this.$$.ptrType.registeredClass,left=this.$$.ptr,rightClass=other.$$.ptrType.registeredClass,right=other.$$.ptr;leftClass.baseClass;)left=leftClass.upcast(left),leftClass=leftClass.baseClass;for(;rightClass.baseClass;)right=rightClass.upcast(right),rightClass=rightClass.baseClass;return leftClass===rightClass&&left===right}function shallowCopyInternalPointer(o){return{count:o.count,deleteScheduled:o.deleteScheduled,preservePointerOnDelete:o.preservePointerOnDelete,ptr:o.ptr,ptrType:o.ptrType,smartPtr:o.smartPtr,smartPtrType:o.smartPtrType}}function throwInstanceAlreadyDeleted(obj){throwBindingError(obj.$$.ptrType.registeredClass.name+" instance already deleted")}var finalizationRegistry=!1;function detachFinalizer(handle){}function runDestructor($$){$$.smartPtr?$$.smartPtrType.rawDestructor($$.smartPtr):$$.ptrType.registeredClass.rawDestructor($$.ptr)}function releaseClassHandle($$){--$$.count.value,0===$$.count.value&&runDestructor($$)}function downcastPointer(ptr,ptrClass,desiredClass){return ptrClass===desiredClass?ptr:void 0===desiredClass.baseClass||null===(ptr=downcastPointer(ptr,ptrClass,desiredClass.baseClass))?null:desiredClass.downcast(ptr)}var registeredPointers={};function getInheritedInstanceCount(){return Object.keys(registeredInstances).length}function getLiveInheritedInstances(){var k,rv=[];for(k in registeredInstances)registeredInstances.hasOwnProperty(k)&&rv.push(registeredInstances[k]);return rv}var deletionQueue=[];function flushPendingDeletes(){for(;deletionQueue.length;){var obj=deletionQueue.pop();obj.$$.deleteScheduled=!1,obj.delete()}}var delayFunction=void 0;function setDelayFunction(fn){delayFunction=fn,deletionQueue.length&&delayFunction&&delayFunction(flushPendingDeletes)}function init_embind(){Module.getInheritedInstanceCount=getInheritedInstanceCount,Module.getLiveInheritedInstances=getLiveInheritedInstances,Module.flushPendingDeletes=flushPendingDeletes,Module.setDelayFunction=setDelayFunction}var registeredInstances={};function getBasestPointer(class_,ptr){for(void 0===ptr&&throwBindingError("ptr should not be undefined");class_.baseClass;)ptr=class_.upcast(ptr),class_=class_.baseClass;return ptr}function getInheritedInstance(class_,ptr){return ptr=getBasestPointer(class_,ptr),registeredInstances[ptr]}function makeClassHandle(prototype,record){return record.ptrType&&record.ptr||throwInternalError("makeClassHandle requires ptr and ptrType"),!!record.smartPtrType!=!!record.smartPtr&&throwInternalError("Both smartPtrType and smartPtr must be specified"),record.count={value:1},attachFinalizer(Object.create(prototype,{$$:{value:record}}))}function RegisteredPointer_fromWireType(ptr){var registeredInstance,dp,rawPointer=this.getPointee(ptr);return rawPointer?void 0!==(registeredInstance=getInheritedInstance(this.registeredClass,rawPointer))?0===registeredInstance.$$.count.value?(registeredInstance.$$.ptr=rawPointer,registeredInstance.$$.smartPtr=ptr,registeredInstance.clone()):(registeredInstance=registeredInstance.clone(),this.destructor(ptr),registeredInstance):(registeredInstance=this.registeredClass.getActualType(rawPointer),!(registeredInstance=registeredPointers[registeredInstance])||(registeredInstance=this.isConst?registeredInstance.constPointerType:registeredInstance.pointerType,null===(dp=downcastPointer(rawPointer,this.registeredClass,registeredInstance.registeredClass)))?makeDefaultHandle.call(this):this.isSmartPointer?makeClassHandle(registeredInstance.registeredClass.instancePrototype,{ptrType:registeredInstance,ptr:dp,smartPtrType:this,smartPtr:ptr}):makeClassHandle(registeredInstance.registeredClass.instancePrototype,{ptrType:registeredInstance,ptr:dp})):(this.destructor(ptr),null);function makeDefaultHandle(){return this.isSmartPointer?makeClassHandle(this.registeredClass.instancePrototype,{ptrType:this.pointeeType,ptr:rawPointer,smartPtrType:this,smartPtr:ptr}):makeClassHandle(this.registeredClass.instancePrototype,{ptrType:this,ptr:ptr})}}var attachFinalizer=function(handle){return"undefined"==typeof FinalizationRegistry?(attachFinalizer=handle=>handle,handle):(finalizationRegistry=new FinalizationRegistry(info=>{releaseClassHandle(info.$$)}),detachFinalizer=handle=>finalizationRegistry.unregister(handle),(attachFinalizer=handle=>{var $$=handle.$$;return!!$$.smartPtr&&finalizationRegistry.register(handle,{$$:$$},handle),handle})(handle))};function ClassHandle_clone(){var clone;return this.$$.ptr||throwInstanceAlreadyDeleted(this),this.$$.preservePointerOnDelete?(this.$$.count.value+=1,this):((clone=attachFinalizer(Object.create(Object.getPrototypeOf(this),{$$:{value:shallowCopyInternalPointer(this.$$)}}))).$$.count.value+=1,clone.$$.deleteScheduled=!1,clone)}function ClassHandle_delete(){this.$$.ptr||throwInstanceAlreadyDeleted(this),this.$$.deleteScheduled&&!this.$$.preservePointerOnDelete&&throwBindingError("Object already scheduled for deletion"),detachFinalizer(this),releaseClassHandle(this.$$),this.$$.preservePointerOnDelete||(this.$$.smartPtr=void 0,this.$$.ptr=void 0)}function ClassHandle_isDeleted(){return!this.$$.ptr}function ClassHandle_deleteLater(){return this.$$.ptr||throwInstanceAlreadyDeleted(this),this.$$.deleteScheduled&&!this.$$.preservePointerOnDelete&&throwBindingError("Object already scheduled for deletion"),deletionQueue.push(this),1===deletionQueue.length&&delayFunction&&delayFunction(flushPendingDeletes),this.$$.deleteScheduled=!0,this}function init_ClassHandle(){ClassHandle.prototype.isAliasOf=ClassHandle_isAliasOf,ClassHandle.prototype.clone=ClassHandle_clone,ClassHandle.prototype.delete=ClassHandle_delete,ClassHandle.prototype.isDeleted=ClassHandle_isDeleted,ClassHandle.prototype.deleteLater=ClassHandle_deleteLater}function ClassHandle(){}var char_0=48,char_9=57;function makeLegalFunctionName(name){var f;return void 0===name?"_unknown":(f=(name=name.replace(/[^a-zA-Z0-9_]/g,"$")).charCodeAt(0),char_0<=f&&f<=char_9?"_"+name:name)}function createNamedFunction(name,body){return{[name=makeLegalFunctionName(name)]:function(){return body.apply(this,arguments)}}[name]}function ensureOverloadTable(proto,methodName,humanName){var prevFunc;void 0===proto[methodName].overloadTable&&(prevFunc=proto[methodName],proto[methodName]=function(){return proto[methodName].overloadTable.hasOwnProperty(arguments.length)||throwBindingError(`Function '${humanName}' called with an invalid number of arguments (${arguments.length}) - expects one of (${proto[methodName].overloadTable})!`),proto[methodName].overloadTable[arguments.length].apply(this,arguments)},proto[methodName].overloadTable=[],proto[methodName].overloadTable[prevFunc.argCount]=prevFunc)}function exposePublicSymbol(name,value,numArguments){Module.hasOwnProperty(name)?((void 0===numArguments||void 0!==Module[name].overloadTable&&void 0!==Module[name].overloadTable[numArguments])&&throwBindingError(`Cannot register public name '${name}' twice`),ensureOverloadTable(Module,name,name),Module.hasOwnProperty(numArguments)&&throwBindingError(`Cannot register multiple overloads of a function with the same number of arguments (${numArguments})!`),Module[name].overloadTable[numArguments]=value):(Module[name]=value,void 0!==numArguments&&(Module[name].numArguments=numArguments))}function RegisteredClass(name,constructor,instancePrototype,rawDestructor,baseClass,getActualType,upcast,downcast){this.name=name,this.constructor=constructor,this.instancePrototype=instancePrototype,this.rawDestructor=rawDestructor,this.baseClass=baseClass,this.getActualType=getActualType,this.upcast=upcast,this.downcast=downcast,this.pureVirtualFunctions=[]}function upcastPointer(ptr,ptrClass,desiredClass){for(;ptrClass!==desiredClass;)ptrClass.upcast||throwBindingError(`Expected null or instance of ${desiredClass.name}, got an instance of `+ptrClass.name),ptr=ptrClass.upcast(ptr),ptrClass=ptrClass.baseClass;return ptr}function constNoSmartPtrRawPointerToWireType(destructors,handle){if(null===handle)return this.isReference&&throwBindingError("null is not a valid "+this.name),0;handle.$$||throwBindingError(`Cannot pass "${embindRepr(handle)}" as a `+this.name),handle.$$.ptr||throwBindingError("Cannot pass deleted object as a pointer of type "+this.name);var handleClass=handle.$$.ptrType.registeredClass;return upcastPointer(handle.$$.ptr,handleClass,this.registeredClass)}function genericPointerToWireType(destructors,handle){if(null===handle)return this.isReference&&throwBindingError("null is not a valid "+this.name),this.isSmartPointer?(ptr=this.rawConstructor(),null!==destructors&&destructors.push(this.rawDestructor,ptr),ptr):0;handle.$$||throwBindingError(`Cannot pass "${embindRepr(handle)}" as a `+this.name),handle.$$.ptr||throwBindingError("Cannot pass deleted object as a pointer of type "+this.name),!this.isConst&&handle.$$.ptrType.isConst&&throwBindingError(`Cannot convert argument of type ${(handle.$$.smartPtrType||handle.$$.ptrType).name} to parameter type `+this.name);var clonedHandle,ptr,handleClass=handle.$$.ptrType.registeredClass;if(ptr=upcastPointer(handle.$$.ptr,handleClass,this.registeredClass),this.isSmartPointer)switch(void 0===handle.$$.smartPtr&&throwBindingError("Passing raw pointer to smart pointer is illegal"),this.sharingPolicy){case 0:handle.$$.smartPtrType===this?ptr=handle.$$.smartPtr:throwBindingError(`Cannot convert argument of type ${(handle.$$.smartPtrType||handle.$$.ptrType).name} to parameter type `+this.name);break;case 1:ptr=handle.$$.smartPtr;break;case 2:handle.$$.smartPtrType===this?ptr=handle.$$.smartPtr:(clonedHandle=handle.clone(),ptr=this.rawShare(ptr,Emval.toHandle(function(){clonedHandle.delete()})),null!==destructors&&destructors.push(this.rawDestructor,ptr));break;default:throwBindingError("Unsupporting sharing policy")}return ptr}function nonConstNoSmartPtrRawPointerToWireType(destructors,handle){if(null===handle)return this.isReference&&throwBindingError("null is not a valid "+this.name),0;handle.$$||throwBindingError(`Cannot pass "${embindRepr(handle)}" as a `+this.name),handle.$$.ptr||throwBindingError("Cannot pass deleted object as a pointer of type "+this.name),handle.$$.ptrType.isConst&&throwBindingError(`Cannot convert argument of type ${handle.$$.ptrType.name} to parameter type `+this.name);var handleClass=handle.$$.ptrType.registeredClass;return upcastPointer(handle.$$.ptr,handleClass,this.registeredClass)}function RegisteredPointer_getPointee(ptr){return ptr=this.rawGetPointee?this.rawGetPointee(ptr):ptr}function RegisteredPointer_destructor(ptr){this.rawDestructor&&this.rawDestructor(ptr)}function RegisteredPointer_deleteObject(handle){null!==handle&&handle.delete()}function init_RegisteredPointer(){RegisteredPointer.prototype.getPointee=RegisteredPointer_getPointee,RegisteredPointer.prototype.destructor=RegisteredPointer_destructor,RegisteredPointer.prototype.argPackAdvance=8,RegisteredPointer.prototype.readValueFromPointer=simpleReadValueFromPointer,RegisteredPointer.prototype.deleteObject=RegisteredPointer_deleteObject,RegisteredPointer.prototype.fromWireType=RegisteredPointer_fromWireType}function RegisteredPointer(name,registeredClass,isReference,isConst,isSmartPointer,pointeeType,sharingPolicy,rawGetPointee,rawConstructor,rawShare,rawDestructor){this.name=name,this.registeredClass=registeredClass,this.isReference=isReference,this.isConst=isConst,this.isSmartPointer=isSmartPointer,this.pointeeType=pointeeType,this.sharingPolicy=sharingPolicy,this.rawGetPointee=rawGetPointee,this.rawConstructor=rawConstructor,this.rawShare=rawShare,this.rawDestructor=rawDestructor,isSmartPointer||void 0!==registeredClass.baseClass?this.toWireType=genericPointerToWireType:(this.toWireType=isConst?constNoSmartPtrRawPointerToWireType:nonConstNoSmartPtrRawPointerToWireType,this.destructorFunction=null)}function replacePublicSymbol(name,value,numArguments){Module.hasOwnProperty(name)||throwInternalError("Replacing nonexistant public symbol"),void 0!==Module[name].overloadTable&&void 0!==numArguments?Module[name].overloadTable[numArguments]=value:(Module[name]=value,Module[name].argCount=numArguments)}var dynCallLegacy=(sig,ptr,args)=>{sig=Module["dynCall_"+sig];return args&&args.length?sig.apply(null,[ptr].concat(args)):sig.call(null,ptr)},wasmTableMirror=[],getWasmTableEntry=funcPtr=>{var func=wasmTableMirror[funcPtr];return func||(funcPtr>=wasmTableMirror.length&&(wasmTableMirror.length=funcPtr+1),wasmTableMirror[funcPtr]=func=wasmTable.get(funcPtr)),func},dynCall=(sig,ptr,args)=>sig.includes("j")?dynCallLegacy(sig,ptr,args):getWasmTableEntry(ptr).apply(null,args),getDynCaller=(sig,ptr)=>{var argCache=[];return function(){return argCache.length=0,Object.assign(argCache,arguments),dynCall(sig,ptr,argCache)}};function embind__requireFunction(signature,rawFunction){var fp=(signature=readLatin1String(signature)).includes("j")?getDynCaller(signature,rawFunction):getWasmTableEntry(rawFunction);return"function"!=typeof fp&&throwBindingError(`unknown function pointer with signature ${signature}: `+rawFunction),fp}function extendError(baseErrorType,errorName){var errorClass=createNamedFunction(errorName,function(message){this.name=errorName,this.message=message;message=new Error(message).stack;void 0!==message&&(this.stack=this.toString()+"\n"+message.replace(/^Error(:[^\n]*)?\n/,""))});return errorClass.prototype=Object.create(baseErrorType.prototype),(errorClass.prototype.constructor=errorClass).prototype.toString=function(){return void 0===this.message?this.name:this.name+": "+this.message},errorClass}var UnboundTypeError=void 0;function getTypeName(type){var type=___getTypeName(type),rv=readLatin1String(type);return _free(type),rv}function throwUnboundTypeError(message,types){var unboundTypes=[],seen={};throw types.forEach(function visit(type){seen[type]||registeredTypes[type]||(typeDependencies[type]?typeDependencies[type].forEach(visit):(unboundTypes.push(type),seen[type]=!0))}),new UnboundTypeError(message+": "+unboundTypes.map(getTypeName).join([", "]))}function __embind_register_class(rawType,rawPointerType,rawConstPointerType,baseClassRawType,getActualTypeSignature,getActualType,upcastSignature,upcast,downcastSignature,downcast,name,destructorSignature,rawDestructor){rawType>>>=0,rawPointerType>>>=0,rawConstPointerType>>>=0,baseClassRawType>>>=0,getActualTypeSignature>>>=0,getActualType>>>=0,upcastSignature>>>=0,upcast>>>=0,downcastSignature>>>=0,downcast>>>=0,destructorSignature>>>=0,rawDestructor>>>=0,name=readLatin1String(name>>>=0),getActualType=embind__requireFunction(getActualTypeSignature,getActualType),upcast=upcast&&embind__requireFunction(upcastSignature,upcast),downcast=downcast&&embind__requireFunction(downcastSignature,downcast),rawDestructor=embind__requireFunction(destructorSignature,rawDestructor);var legalFunctionName=makeLegalFunctionName(name);exposePublicSymbol(legalFunctionName,function(){throwUnboundTypeError(`Cannot construct ${name} due to unbound types`,[baseClassRawType])}),whenDependentTypesAreResolved([rawType,rawPointerType,rawConstPointerType],baseClassRawType?[baseClassRawType]:[],function(base){base=base[0],base=baseClassRawType?(baseClass=base.registeredClass).instancePrototype:ClassHandle.prototype;var constructor=createNamedFunction(legalFunctionName,function(){if(Object.getPrototypeOf(this)!==instancePrototype)throw new BindingError("Use 'new' to construct "+name);if(void 0===registeredClass.constructor_body)throw new BindingError(name+" has no accessible constructor");var body=registeredClass.constructor_body[arguments.length];if(void 0===body)throw new BindingError(`Tried to invoke ctor of ${name} with invalid number of parameters (${arguments.length}) - expected (${Object.keys(registeredClass.constructor_body).toString()}) parameters instead!`);return body.apply(this,arguments)}),instancePrototype=Object.create(base,{constructor:{value:constructor}}),registeredClass=(constructor.prototype=instancePrototype,new RegisteredClass(name,constructor,instancePrototype,rawDestructor,baseClass,getActualType,upcast,downcast)),base=(registeredClass.baseClass&&(void 0===registeredClass.baseClass.__derivedClasses&&(registeredClass.baseClass.__derivedClasses=[]),registeredClass.baseClass.__derivedClasses.push(registeredClass)),new RegisteredPointer(name,registeredClass,!0,!1,!1)),baseClass=new RegisteredPointer(name+"*",registeredClass,!1,!1,!1),constPointerConverter=new RegisteredPointer(name+" const*",registeredClass,!1,!0,!1);return registeredPointers[rawType]={pointerType:baseClass,constPointerType:constPointerConverter},replacePublicSymbol(legalFunctionName,constructor),[base,baseClass,constPointerConverter]})}function heap32VectorToArray(count,firstElement){for(var array=[],i=0;i<count;i++)array.push(HEAPU32[firstElement+4*i>>>2]);return array}function newFunc(constructor,argumentList){var dummy;if(constructor instanceof Function)return(dummy=createNamedFunction(constructor.name||"unknownFunctionName",function(){})).prototype=constructor.prototype,dummy=new dummy,(argumentList=constructor.apply(dummy,argumentList))instanceof Object?argumentList:dummy;throw new TypeError(`new_ called with constructor type ${typeof constructor} which is not a function`)}function craftInvokerFunction(humanName,argTypes,classType,cppInvokerFunc,cppTargetFunc,isAsync){for(var argCount=argTypes.length,isClassMethodFunc=(argCount<2&&throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!"),null!==argTypes[1]&&null!==classType),needsDestructorStack=!1,i=1;i<argTypes.length;++i)if(null!==argTypes[i]&&void 0===argTypes[i].destructorFunction){needsDestructorStack=!0;break}for(var returns="void"!==argTypes[0].name,argsList="",argsListWired="",i=0;i<argCount-2;++i)argsList+=(0!==i?", ":"")+"arg"+i,argsListWired+=(0!==i?", ":"")+"arg"+i+"Wired";var invokerFnBody=`
        return function ${makeLegalFunctionName(humanName)}(${argsList}) {
        if (arguments.length !== ${argCount-2}) {
          throwBindingError('function ${humanName} called with ${arguments.length} arguments, expected ${argCount-2} args!');
        }`,dtorStack=(needsDestructorStack&&(invokerFnBody+="var destructors = [];\n"),needsDestructorStack?"destructors":"null"),args1=["throwBindingError","invoker","fn","runDestructors","retType","classParam"],args2=[throwBindingError,cppInvokerFunc,cppTargetFunc,runDestructors,argTypes[0],argTypes[1]];isClassMethodFunc&&(invokerFnBody+="var thisWired = classParam.toWireType("+dtorStack+", this);\n");for(i=0;i<argCount-2;++i)invokerFnBody+="var arg"+i+"Wired = argType"+i+".toWireType("+dtorStack+", arg"+i+"); // "+argTypes[i+2].name+"\n",args1.push("argType"+i),args2.push(argTypes[i+2]);if(invokerFnBody+=(returns||isAsync?"var rv = ":"")+"invoker(fn"+(0<(argsListWired=isClassMethodFunc?"thisWired"+(0<argsListWired.length?", ":"")+argsListWired:argsListWired).length?", ":"")+argsListWired+");\n",needsDestructorStack)invokerFnBody+="runDestructors(destructors);\n";else for(i=isClassMethodFunc?1:2;i<argTypes.length;++i){var paramName=1===i?"thisWired":"arg"+(i-2)+"Wired";null!==argTypes[i].destructorFunction&&(invokerFnBody+=paramName+"_dtor("+paramName+"); // "+argTypes[i].name+"\n",args1.push(paramName+"_dtor"),args2.push(argTypes[i].destructorFunction))}return returns&&(invokerFnBody+="var ret = retType.fromWireType(rv);\nreturn ret;\n"),args1.push(invokerFnBody+="}\n"),newFunc(Function,args1).apply(null,args2)}function __embind_register_class_constructor(rawClassType,argCount,rawArgTypesAddr,invokerSignature,invoker,rawConstructor){rawClassType>>>=0,invokerSignature>>>=0,invoker>>>=0,rawConstructor>>>=0;var rawArgTypes=heap32VectorToArray(argCount,rawArgTypesAddr>>>=0);invoker=embind__requireFunction(invokerSignature,invoker),whenDependentTypesAreResolved([],[rawClassType],function(classType){var humanName="constructor "+(classType=classType[0]).name;if(void 0===classType.registeredClass.constructor_body&&(classType.registeredClass.constructor_body=[]),void 0!==classType.registeredClass.constructor_body[argCount-1])throw new BindingError(`Cannot register multiple constructors with identical number of parameters (${argCount-1}) for class '${classType.name}'! Overload resolution is currently only performed using the parameter count, not actual type info!`);return classType.registeredClass.constructor_body[argCount-1]=()=>{throwUnboundTypeError(`Cannot construct ${classType.name} due to unbound types`,rawArgTypes)},whenDependentTypesAreResolved([],rawArgTypes,function(argTypes){return argTypes.splice(1,0,null),classType.registeredClass.constructor_body[argCount-1]=craftInvokerFunction(humanName,argTypes,null,invoker,rawConstructor),[]}),[]})}function __embind_register_class_function(rawClassType,methodName,argCount,rawArgTypesAddr,invokerSignature,rawInvoker,context,isPureVirtual,isAsync){rawClassType>>>=0,methodName>>>=0,invokerSignature>>>=0,rawInvoker>>>=0,context>>>=0;var rawArgTypes=heap32VectorToArray(argCount,rawArgTypesAddr>>>=0);methodName=readLatin1String(methodName),rawInvoker=embind__requireFunction(invokerSignature,rawInvoker),whenDependentTypesAreResolved([],[rawClassType],function(classType){var humanName=(classType=classType[0]).name+"."+methodName;function unboundTypesHandler(){throwUnboundTypeError(`Cannot call ${humanName} due to unbound types`,rawArgTypes)}methodName.startsWith("@@")&&(methodName=Symbol[methodName.substring(2)]),isPureVirtual&&classType.registeredClass.pureVirtualFunctions.push(methodName);var proto=classType.registeredClass.instancePrototype,method=proto[methodName];return void 0===method||void 0===method.overloadTable&&method.className!==classType.name&&method.argCount===argCount-2?(unboundTypesHandler.argCount=argCount-2,unboundTypesHandler.className=classType.name,proto[methodName]=unboundTypesHandler):(ensureOverloadTable(proto,methodName,humanName),proto[methodName].overloadTable[argCount-2]=unboundTypesHandler),whenDependentTypesAreResolved([],rawArgTypes,function(argTypes){argTypes=craftInvokerFunction(humanName,argTypes,classType,rawInvoker,context,isAsync);return void 0===proto[methodName].overloadTable?(argTypes.argCount=argCount-2,proto[methodName]=argTypes):proto[methodName].overloadTable[argCount-2]=argTypes,[]}),[]})}function handleAllocatorInit(){Object.assign(HandleAllocator.prototype,{get(id){return this.allocated[id]},has(id){return void 0!==this.allocated[id]},allocate(handle){var id=this.freelist.pop()||this.allocated.length;return this.allocated[id]=handle,id},free(id){this.allocated[id]=void 0,this.freelist.push(id)}})}function HandleAllocator(){this.allocated=[void 0],this.freelist=[]}var emval_handles=new HandleAllocator;function __emval_decref(handle){(handle>>>=0)>=emval_handles.reserved&&0==--emval_handles.get(handle).refcount&&emval_handles.free(handle)}function count_emval_handles(){for(var count=0,i=emval_handles.reserved;i<emval_handles.allocated.length;++i)void 0!==emval_handles.allocated[i]&&++count;return count}function init_emval(){emval_handles.allocated.push({value:void 0},{value:null},{value:!0},{value:!1}),emval_handles.reserved=emval_handles.allocated.length,Module.count_emval_handles=count_emval_handles}var Emval={toValue:handle=>(handle||throwBindingError("Cannot use deleted val. handle = "+handle),emval_handles.get(handle).value),toHandle:value=>{switch(value){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:return emval_handles.allocate({refcount:1,value:value})}}};function __embind_register_emval(rawType,name){registerType(rawType>>>=0,{name:name=readLatin1String(name>>>=0),fromWireType:function(handle){var rv=Emval.toValue(handle);return __emval_decref(handle),rv},toWireType:function(destructors,value){return Emval.toHandle(value)},argPackAdvance:8,readValueFromPointer:simpleReadValueFromPointer,destructorFunction:null})}function embindRepr(v){var t;return null===v?"null":"object"==(t=typeof v)||"array"==t||"function"==t?v.toString():""+v}function floatReadValueFromPointer(name,shift){switch(shift){case 2:return function(pointer){return this.fromWireType(HEAPF32[pointer>>>2])};case 3:return function(pointer){return this.fromWireType(HEAPF64[pointer>>>3])};default:throw new TypeError("Unknown float type: "+name)}}function __embind_register_float(rawType,name,size){rawType>>>=0,name>>>=0;size=getShiftFromSize(size>>>=0);registerType(rawType,{name:name=readLatin1String(name),fromWireType:function(value){return value},toWireType:function(destructors,value){return value},argPackAdvance:8,readValueFromPointer:floatReadValueFromPointer(name,size),destructorFunction:null})}function __embind_register_function(name,argCount,rawArgTypesAddr,signature,rawInvoker,fn,isAsync){name>>>=0,signature>>>=0,rawInvoker>>>=0,fn>>>=0;var argTypes=heap32VectorToArray(argCount,rawArgTypesAddr>>>=0);name=readLatin1String(name),rawInvoker=embind__requireFunction(signature,rawInvoker),exposePublicSymbol(name,function(){throwUnboundTypeError(`Cannot call ${name} due to unbound types`,argTypes)},argCount-1),whenDependentTypesAreResolved([],argTypes,function(argTypes){argTypes=[argTypes[0],null].concat(argTypes.slice(1));return replacePublicSymbol(name,craftInvokerFunction(name,argTypes,null,rawInvoker,fn,isAsync),argCount-1),[]})}function integerReadValueFromPointer(name,shift,signed){switch(shift){case 0:return signed?function(pointer){return HEAP8[pointer>>>0]}:function(pointer){return HEAPU8[pointer>>>0]};case 1:return signed?function(pointer){return HEAP16[pointer>>>1]}:function(pointer){return HEAPU16[pointer>>>1]};case 2:return signed?function(pointer){return HEAP32[pointer>>>2]}:function(pointer){return HEAPU32[pointer>>>2]};default:throw new TypeError("Unknown integer type: "+name)}}function __embind_register_integer(primitiveType,name,size,minRange,maxRange){primitiveType>>>=0,size>>>=0,name=readLatin1String(name>>>=0),-1===maxRange&&(maxRange=4294967295);var bitshift,maxRange=getShiftFromSize(size),fromWireType=value=>value,size=(0===minRange&&(bitshift=32-8*size,fromWireType=value=>value<<bitshift>>>bitshift),name.includes("unsigned")),size=size?function(destructors,value){return this.name,value>>>0}:function(destructors,value){return this.name,value};registerType(primitiveType,{name:name,fromWireType:fromWireType,toWireType:size,argPackAdvance:8,readValueFromPointer:integerReadValueFromPointer(name,maxRange,0!==minRange),destructorFunction:null})}function __embind_register_memory_view(rawType,dataTypeIndex,name){rawType>>>=0,name>>>=0;var TA=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array][dataTypeIndex];function decodeMemoryView(handle){var heap=HEAPU32,size=heap[(handle>>=2)>>>0];return new TA(heap.buffer,heap[handle+1>>>0],size)}registerType(rawType,{name:name=readLatin1String(name),fromWireType:decodeMemoryView,argPackAdvance:8,readValueFromPointer:decodeMemoryView},{ignoreDuplicateRegistrations:!0})}var stringToUTF8Array=(str,heap,outIdx,maxBytesToWrite)=>{if(!(0<maxBytesToWrite))return 0;for(var startIdx=outIdx>>>=0,endIdx=outIdx+maxBytesToWrite-1,i=0;i<str.length;++i){var u=str.charCodeAt(i);if((u=55296<=u&&u<=57343?65536+((1023&u)<<10)|1023&str.charCodeAt(++i):u)<=127){if(endIdx<=outIdx)break;heap[outIdx++>>>0]=u}else{if(u<=2047){if(endIdx<=outIdx+1)break;heap[outIdx++>>>0]=192|u>>6}else{if(u<=65535){if(endIdx<=outIdx+2)break;heap[outIdx++>>>0]=224|u>>12}else{if(endIdx<=outIdx+3)break;heap[outIdx++>>>0]=240|u>>18,heap[outIdx++>>>0]=128|u>>12&63}heap[outIdx++>>>0]=128|u>>6&63}heap[outIdx++>>>0]=128|63&u}}return heap[outIdx>>>0]=0,outIdx-startIdx},stringToUTF8=(str,outPtr,maxBytesToWrite)=>stringToUTF8Array(str,HEAPU8,outPtr,maxBytesToWrite),lengthBytesUTF8=str=>{for(var len=0,i=0;i<str.length;++i){var c=str.charCodeAt(i);c<=127?len++:c<=2047?len+=2:55296<=c&&c<=57343?(len+=4,++i):len+=3}return len};function __embind_register_std_string(rawType,name){rawType>>>=0;var stdStringIsUTF8="std::string"===(name=readLatin1String(name>>>=0));registerType(rawType,{name:name,fromWireType:function(value){var length=HEAPU32[value>>>2],payload=value+4;if(stdStringIsUTF8)for(var decodeStartPtr=payload,i=0;i<=length;++i){var stringSegment,str,currentBytePtr=payload+i;i!=length&&0!=HEAPU8[currentBytePtr>>>0]||(stringSegment=UTF8ToString(decodeStartPtr,currentBytePtr-decodeStartPtr),str=void 0===str?stringSegment:str+String.fromCharCode(0)+stringSegment,decodeStartPtr=currentBytePtr+1)}else{for(var a=new Array(length),i=0;i<length;++i)a[i]=String.fromCharCode(HEAPU8[payload+i>>>0]);str=a.join("")}return _free(value),str},toWireType:function(destructors,value){var length,valueIsOfTypeString="string"==typeof(value=value instanceof ArrayBuffer?new Uint8Array(value):value),base=(valueIsOfTypeString||value instanceof Uint8Array||value instanceof Uint8ClampedArray||value instanceof Int8Array||throwBindingError("Cannot pass non-string to std::string"),length=stdStringIsUTF8&&valueIsOfTypeString?lengthBytesUTF8(value):value.length,_malloc(4+length+1)),ptr=base+4;if(HEAPU32[base>>>2]=length,stdStringIsUTF8&&valueIsOfTypeString)stringToUTF8(value,ptr,length+1);else if(valueIsOfTypeString)for(var i=0;i<length;++i){var charCode=value.charCodeAt(i);255<charCode&&(_free(ptr),throwBindingError("String has UTF-16 code units that do not fit in 8 bits")),HEAPU8[ptr+i>>>0]=charCode}else for(i=0;i<length;++i)HEAPU8[ptr+i>>>0]=value[i];return null!==destructors&&destructors.push(_free,base),base},argPackAdvance:8,readValueFromPointer:simpleReadValueFromPointer,destructorFunction:function(ptr){_free(ptr)}})}var UTF16Decoder="undefined"!=typeof TextDecoder?new TextDecoder("utf-16le"):void 0,UTF16ToString=(ptr,maxBytesToRead)=>{for(var endPtr,idx=ptr>>1,maxIdx=idx+maxBytesToRead/2;!(maxIdx<=idx)&&HEAPU16[idx>>>0];)++idx;if(32<(endPtr=idx<<1)-ptr&&UTF16Decoder)return UTF16Decoder.decode(HEAPU8.subarray(ptr>>>0,endPtr>>>0));for(var str="",i=0;!(maxBytesToRead/2<=i);++i){var codeUnit=HEAP16[ptr+2*i>>>1];if(0==codeUnit)break;str+=String.fromCharCode(codeUnit)}return str},stringToUTF16=(str,outPtr,maxBytesToWrite)=>{if((maxBytesToWrite=void 0===maxBytesToWrite?2147483647:maxBytesToWrite)<2)return 0;for(var startPtr=outPtr,numCharsToWrite=(maxBytesToWrite-=2)<2*str.length?maxBytesToWrite/2:str.length,i=0;i<numCharsToWrite;++i){var codeUnit=str.charCodeAt(i);HEAP16[outPtr>>>1]=codeUnit,outPtr+=2}return HEAP16[outPtr>>>1]=0,outPtr-startPtr},lengthBytesUTF16=str=>2*str.length,UTF32ToString=(ptr,maxBytesToRead)=>{for(var i=0,str="";!(maxBytesToRead/4<=i);){var ch,utf32=HEAP32[ptr+4*i>>>2];if(0==utf32)break;++i,65536<=utf32?(ch=utf32-65536,str+=String.fromCharCode(55296|ch>>10,56320|1023&ch)):str+=String.fromCharCode(utf32)}return str},stringToUTF32=(str,outPtr,maxBytesToWrite)=>{if((maxBytesToWrite=void 0===maxBytesToWrite?2147483647:maxBytesToWrite)<4)return 0;for(var startPtr=outPtr>>>=0,endPtr=startPtr+maxBytesToWrite-4,i=0;i<str.length;++i){var codeUnit=str.charCodeAt(i);if(55296<=codeUnit&&codeUnit<=57343&&(codeUnit=65536+((1023&codeUnit)<<10)|1023&str.charCodeAt(++i)),HEAP32[outPtr>>>2]=codeUnit,endPtr<(outPtr+=4)+4)break}return HEAP32[outPtr>>>2]=0,outPtr-startPtr},lengthBytesUTF32=str=>{for(var len=0,i=0;i<str.length;++i){var codeUnit=str.charCodeAt(i);55296<=codeUnit&&codeUnit<=57343&&++i,len+=4}return len},__embind_register_std_wstring=function(rawType,charSize,name){var decodeString,encodeString,getHeap,lengthBytesUTF,shift;rawType>>>=0,charSize>>>=0,name=readLatin1String(name>>>=0),2===charSize?(decodeString=UTF16ToString,encodeString=stringToUTF16,lengthBytesUTF=lengthBytesUTF16,getHeap=()=>HEAPU16,shift=1):4===charSize&&(decodeString=UTF32ToString,encodeString=stringToUTF32,lengthBytesUTF=lengthBytesUTF32,getHeap=()=>HEAPU32,shift=2),registerType(rawType,{name:name,fromWireType:function(value){for(var length=HEAPU32[value>>>2],HEAP=getHeap(),decodeStartPtr=value+4,i=0;i<=length;++i){var stringSegment,str,currentBytePtr=value+4+i*charSize;i!=length&&0!=HEAP[currentBytePtr>>>shift]||(stringSegment=decodeString(decodeStartPtr,currentBytePtr-decodeStartPtr),str=void 0===str?stringSegment:str+String.fromCharCode(0)+stringSegment,decodeStartPtr=currentBytePtr+charSize)}return _free(value),str},toWireType:function(destructors,value){"string"!=typeof value&&throwBindingError("Cannot pass non-string to C++ string type "+name);var length=lengthBytesUTF(value),ptr=_malloc(4+length+charSize);return HEAPU32[ptr>>>2]=length>>shift,encodeString(value,ptr+4,length+charSize),null!==destructors&&destructors.push(_free,ptr),ptr},argPackAdvance:8,readValueFromPointer:simpleReadValueFromPointer,destructorFunction:function(ptr){_free(ptr)}})};function __embind_register_value_object(rawType,name,constructorSignature,rawConstructor,destructorSignature,rawDestructor){constructorSignature>>>=0,rawConstructor>>>=0,destructorSignature>>>=0,rawDestructor>>>=0,structRegistrations[rawType>>>=0]={name:readLatin1String(name>>>=0),rawConstructor:embind__requireFunction(constructorSignature,rawConstructor),rawDestructor:embind__requireFunction(destructorSignature,rawDestructor),fields:[]}}function __embind_register_value_object_field(structType,fieldName,getterReturnType,getterSignature,getter,getterContext,setterArgumentType,setterSignature,setter,setterContext){getterReturnType>>>=0,getterSignature>>>=0,getter>>>=0,getterContext>>>=0,setterArgumentType>>>=0,setterSignature>>>=0,setter>>>=0,setterContext>>>=0,structRegistrations[structType>>>=0].fields.push({fieldName:readLatin1String(fieldName>>>=0),getterReturnType:getterReturnType,getter:embind__requireFunction(getterSignature,getter),getterContext:getterContext,setterArgumentType:setterArgumentType,setter:embind__requireFunction(setterSignature,setter),setterContext:setterContext})}function __embind_register_void(rawType,name){registerType(rawType>>>=0,{isVoid:!0,name:name=readLatin1String(name>>>=0),argPackAdvance:0,fromWireType:function(){},toWireType:function(destructors,o){}})}function __emval_incref(handle){4<(handle>>>=0)&&(emval_handles.get(handle).refcount+=1)}var emval_symbols={};function getStringOrSymbol(address){var symbol=emval_symbols[address];return void 0===symbol?readLatin1String(address):symbol}function __emval_new_cstring(v){return Emval.toHandle(getStringOrSymbol(v>>>=0))}function __emval_new_object(){return Emval.toHandle({})}function __emval_set_property(handle,key,value){key>>>=0,value>>>=0,handle=Emval.toValue(handle>>>=0),key=Emval.toValue(key),value=Emval.toValue(value),handle[key]=value}function requireRegisteredType(rawType,humanName){var impl=registeredTypes[rawType];return void 0===impl&&throwBindingError(humanName+" has unknown type "+getTypeName(rawType)),impl}function __emval_take_value(type,arg){arg>>>=0;type=(type=requireRegisteredType(type>>>=0,"_emval_take_value")).readValueFromPointer(arg);return Emval.toHandle(type)}var isLeapYear=year=>year%4==0&&(year%100!=0||year%400==0),MONTH_DAYS_LEAP_CUMULATIVE=[0,31,60,91,121,152,182,213,244,274,305,335],MONTH_DAYS_REGULAR_CUMULATIVE=[0,31,59,90,120,151,181,212,243,273,304,334],ydayFromDate=date=>(isLeapYear(date.getFullYear())?MONTH_DAYS_LEAP_CUMULATIVE:MONTH_DAYS_REGULAR_CUMULATIVE)[date.getMonth()]+date.getDate()-1;function __localtime_js(time_low,time_high,tmPtr){var time_low=convertI32PairToI53Checked(time_low,time_high),time_high=(tmPtr>>>=0,new Date(1e3*time_low)),time_low=(HEAP32[tmPtr>>>2]=time_high.getSeconds(),HEAP32[tmPtr+4>>>2]=time_high.getMinutes(),HEAP32[tmPtr+8>>>2]=time_high.getHours(),HEAP32[tmPtr+12>>>2]=time_high.getDate(),HEAP32[tmPtr+16>>>2]=time_high.getMonth(),HEAP32[tmPtr+20>>>2]=time_high.getFullYear()-1900,HEAP32[tmPtr+24>>>2]=time_high.getDay(),0|ydayFromDate(time_high)),time_low=(HEAP32[tmPtr+28>>>2]=time_low,HEAP32[tmPtr+36>>>2]=-60*time_high.getTimezoneOffset(),new Date(time_high.getFullYear(),0,1)),summerOffset=new Date(time_high.getFullYear(),6,1).getTimezoneOffset(),time_low=time_low.getTimezoneOffset(),time_high=0|(summerOffset!=time_low&&time_high.getTimezoneOffset()==Math.min(time_low,summerOffset));HEAP32[tmPtr+32>>>2]=time_high}var stringToNewUTF8=str=>{var size=lengthBytesUTF8(str)+1,ret=_malloc(size);return ret&&stringToUTF8(str,ret,size),ret};function __tzset_js(timezone,daylight,tzname){timezone>>>=0,daylight>>>=0,tzname>>>=0;var currentYear=(new Date).getFullYear(),winter=new Date(currentYear,0,1),currentYear=new Date(currentYear,6,1),winterOffset=winter.getTimezoneOffset(),summerOffset=currentYear.getTimezoneOffset(),stdTimezoneOffset=Math.max(winterOffset,summerOffset);function extractZone(date){date=date.toTimeString().match(/\(([A-Za-z ]+)\)$/);return date?date[1]:"GMT"}HEAPU32[timezone>>>2]=60*stdTimezoneOffset,HEAP32[daylight>>>2]=Number(winterOffset!=summerOffset);timezone=extractZone(winter),stdTimezoneOffset=extractZone(currentYear),daylight=stringToNewUTF8(timezone),winter=stringToNewUTF8(stdTimezoneOffset);summerOffset<winterOffset?(HEAPU32[tzname>>>2]=daylight,HEAPU32[tzname+4>>>2]=winter):(HEAPU32[tzname>>>2]=winter,HEAPU32[tzname+4>>>2]=daylight)}var _abort=()=>{abort("")};function _emscripten_date_now(){return Date.now()}function _emscripten_memcpy_big(dest,src,num){return HEAPU8.copyWithin((dest>>>=0)>>>0,(src>>>=0)>>>0,src+(num>>>=0)>>>0)}var getHeapMax=()=>4294901760,growMemory=size=>{size=size-wasmMemory.buffer.byteLength+65535>>>16;try{return wasmMemory.grow(size),updateMemoryViews(),1}catch(e){}};function _emscripten_resize_heap(requestedSize){requestedSize>>>=0;var oldSize=HEAPU8.length,maxHeapSize=getHeapMax();if(!(maxHeapSize<requestedSize))for(var multiple,cutDown=1;cutDown<=4;cutDown*=2){var overGrownHeapSize=oldSize*(1+.2/cutDown),overGrownHeapSize=Math.min(overGrownHeapSize,requestedSize+100663296),overGrownHeapSize=Math.min(maxHeapSize,(overGrownHeapSize=Math.max(requestedSize,overGrownHeapSize))+((multiple=65536)-overGrownHeapSize%multiple)%multiple);if(growMemory(overGrownHeapSize))return!0}return!1}function _emscripten_run_script(ptr){ptr>>>=0,eval(UTF8ToString(ptr))}var ENV={},getExecutableName=()=>thisProgram||"./this.program",getEnvStrings=()=>{if(!getEnvStrings.strings){var env={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:("object"==typeof navigator&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:getExecutableName()};for(x in ENV)void 0===ENV[x]?delete env[x]:env[x]=ENV[x];var x,strings=[];for(x in env)strings.push(x+"="+env[x]);getEnvStrings.strings=strings}return getEnvStrings.strings},stringToAscii=(str,buffer)=>{for(var i=0;i<str.length;++i)HEAP8[buffer++>>>0]=str.charCodeAt(i);HEAP8[buffer>>>0]=0},PATH={isAbs:path=>"/"===path.charAt(0),splitPath:filename=>/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/.exec(filename).slice(1),normalizeArray:(parts,allowAboveRoot)=>{for(var up=0,i=parts.length-1;0<=i;i--){var last=parts[i];"."===last?parts.splice(i,1):".."===last?(parts.splice(i,1),up++):up&&(parts.splice(i,1),up--)}if(allowAboveRoot)for(;up;up--)parts.unshift("..");return parts},normalize:path=>{var isAbsolute=PATH.isAbs(path),trailingSlash="/"===path.substr(-1);return(path=(path=PATH.normalizeArray(path.split("/").filter(p=>!!p),!isAbsolute).join("/"))||isAbsolute?path:".")&&trailingSlash&&(path+="/"),(isAbsolute?"/":"")+path},dirname:path=>{var path=PATH.splitPath(path),root=path[0],path=path[1];return root||path?root+(path=path&&path.substr(0,path.length-1)):"."},basename:path=>{var lastSlash;return"/"===path?"/":-1===(lastSlash=(path=(path=PATH.normalize(path)).replace(/\/$/,"")).lastIndexOf("/"))?path:path.substr(lastSlash+1)},join:function(){var paths=Array.prototype.slice.call(arguments);return PATH.normalize(paths.join("/"))},join2:(l,r)=>PATH.normalize(l+"/"+r)},initRandomFill=()=>{if("object"==typeof crypto&&"function"==typeof crypto.getRandomValues)return view=>crypto.getRandomValues(view);if(ENVIRONMENT_IS_NODE)try{var randomBytes,crypto_module=require("crypto");return crypto_module.randomFillSync?view=>crypto_module.randomFillSync(view):(randomBytes=crypto_module.randomBytes,view=>(view.set(randomBytes(view.byteLength)),view))}catch(e){}abort("initRandomDevice")},randomFill=view=>(randomFill=initRandomFill())(view),PATH_FS={resolve:function(){for(var resolvedPath="",resolvedAbsolute=!1,i=arguments.length-1;-1<=i&&!resolvedAbsolute;i--){var path=0<=i?arguments[i]:FS.cwd();if("string"!=typeof path)throw new TypeError("Arguments to path.resolve must be strings");if(!path)return"";resolvedPath=path+"/"+resolvedPath,resolvedAbsolute=PATH.isAbs(path)}return(resolvedAbsolute?"/":"")+(resolvedPath=PATH.normalizeArray(resolvedPath.split("/").filter(p=>!!p),!resolvedAbsolute).join("/"))||"."},relative:(from,to)=>{function trim(arr){for(var start=0;start<arr.length&&""===arr[start];start++);for(var end=arr.length-1;0<=end&&""===arr[end];end--);return end<start?[]:arr.slice(start,end-start+1)}from=PATH_FS.resolve(from).substr(1),to=PATH_FS.resolve(to).substr(1);for(var fromParts=trim(from.split("/")),toParts=trim(to.split("/")),length=Math.min(fromParts.length,toParts.length),samePartsLength=length,i=0;i<length;i++)if(fromParts[i]!==toParts[i]){samePartsLength=i;break}for(var outputParts=[],i=samePartsLength;i<fromParts.length;i++)outputParts.push("..");return(outputParts=outputParts.concat(toParts.slice(samePartsLength))).join("/")}},FS_stdin_getChar_buffer=[];function intArrayFromString(stringy,dontAddNull,length){length=0<length?length:lengthBytesUTF8(stringy)+1,length=new Array(length),stringy=stringToUTF8Array(stringy,length,0,length.length);return dontAddNull&&(length.length=stringy),length}var FS_stdin_getChar=()=>{if(!FS_stdin_getChar_buffer.length){var result=null;if(ENVIRONMENT_IS_NODE){var buf=Buffer.alloc(256),bytesRead=0,fd=process.stdin.fd;try{bytesRead=fs.readSync(fd,buf,0,256,-1)}catch(e){if(!e.toString().includes("EOF"))throw e;bytesRead=0}result=0<bytesRead?buf.slice(0,bytesRead).toString("utf-8"):null}else"undefined"!=typeof window&&"function"==typeof window.prompt?null!==(result=window.prompt("Input: "))&&(result+="\n"):"function"==typeof readline&&null!==(result=readline())&&(result+="\n");if(!result)return null;FS_stdin_getChar_buffer=intArrayFromString(result,!0)}return FS_stdin_getChar_buffer.shift()},TTY={ttys:[],init:function(){},shutdown:function(){},register:function(dev,ops){TTY.ttys[dev]={input:[],output:[],ops:ops},FS.registerDevice(dev,TTY.stream_ops)},stream_ops:{open:function(stream){var tty=TTY.ttys[stream.node.rdev];if(!tty)throw new FS.ErrnoError(43);stream.tty=tty,stream.seekable=!1},close:function(stream){stream.tty.ops.fsync(stream.tty)},fsync:function(stream){stream.tty.ops.fsync(stream.tty)},read:function(stream,buffer,offset,length,pos){if(!stream.tty||!stream.tty.ops.get_char)throw new FS.ErrnoError(60);for(var result,bytesRead=0,i=0;i<length;i++){try{result=stream.tty.ops.get_char(stream.tty)}catch(e){throw new FS.ErrnoError(29)}if(void 0===result&&0===bytesRead)throw new FS.ErrnoError(6);if(null==result)break;bytesRead++,buffer[offset+i]=result}return bytesRead&&(stream.node.timestamp=Date.now()),bytesRead},write:function(stream,buffer,offset,length,pos){if(!stream.tty||!stream.tty.ops.put_char)throw new FS.ErrnoError(60);try{for(var i=0;i<length;i++)stream.tty.ops.put_char(stream.tty,buffer[offset+i])}catch(e){throw new FS.ErrnoError(29)}return length&&(stream.node.timestamp=Date.now()),i}},default_tty_ops:{get_char:function(tty){return FS_stdin_getChar()},put_char:function(tty,val){null===val||10===val?(out(UTF8ArrayToString(tty.output,0)),tty.output=[]):0!=val&&tty.output.push(val)},fsync:function(tty){tty.output&&0<tty.output.length&&(out(UTF8ArrayToString(tty.output,0)),tty.output=[])},ioctl_tcgets:function(tty){return{c_iflag:25856,c_oflag:5,c_cflag:191,c_lflag:35387,c_cc:[3,28,127,21,4,0,1,0,17,19,26,0,18,15,23,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}},ioctl_tcsets:function(tty,optional_actions,data){return 0},ioctl_tiocgwinsz:function(tty){return[24,80]}},default_tty1_ops:{put_char:function(tty,val){null===val||10===val?(err(UTF8ArrayToString(tty.output,0)),tty.output=[]):0!=val&&tty.output.push(val)},fsync:function(tty){tty.output&&0<tty.output.length&&(err(UTF8ArrayToString(tty.output,0)),tty.output=[])}}},mmapAlloc=size=>{abort()},MEMFS={ops_table:null,mount(mount){return MEMFS.createNode(null,"/",16895,0)},createNode(parent,name,mode,dev){if(FS.isBlkdev(mode)||FS.isFIFO(mode))throw new FS.ErrnoError(63);MEMFS.ops_table||(MEMFS.ops_table={dir:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr,lookup:MEMFS.node_ops.lookup,mknod:MEMFS.node_ops.mknod,rename:MEMFS.node_ops.rename,unlink:MEMFS.node_ops.unlink,rmdir:MEMFS.node_ops.rmdir,readdir:MEMFS.node_ops.readdir,symlink:MEMFS.node_ops.symlink},stream:{llseek:MEMFS.stream_ops.llseek}},file:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr},stream:{llseek:MEMFS.stream_ops.llseek,read:MEMFS.stream_ops.read,write:MEMFS.stream_ops.write,allocate:MEMFS.stream_ops.allocate,mmap:MEMFS.stream_ops.mmap,msync:MEMFS.stream_ops.msync}},link:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr,readlink:MEMFS.node_ops.readlink},stream:{}},chrdev:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr},stream:FS.chrdev_stream_ops}});mode=FS.createNode(parent,name,mode,dev);return FS.isDir(mode.mode)?(mode.node_ops=MEMFS.ops_table.dir.node,mode.stream_ops=MEMFS.ops_table.dir.stream,mode.contents={}):FS.isFile(mode.mode)?(mode.node_ops=MEMFS.ops_table.file.node,mode.stream_ops=MEMFS.ops_table.file.stream,mode.usedBytes=0,mode.contents=null):FS.isLink(mode.mode)?(mode.node_ops=MEMFS.ops_table.link.node,mode.stream_ops=MEMFS.ops_table.link.stream):FS.isChrdev(mode.mode)&&(mode.node_ops=MEMFS.ops_table.chrdev.node,mode.stream_ops=MEMFS.ops_table.chrdev.stream),mode.timestamp=Date.now(),parent&&(parent.contents[name]=mode,parent.timestamp=mode.timestamp),mode},getFileDataAsTypedArray(node){return node.contents?node.contents.subarray?node.contents.subarray(0,node.usedBytes):new Uint8Array(node.contents):new Uint8Array(0)},expandFileStorage(node,newCapacity){var prevCapacity=node.contents?node.contents.length:0;newCapacity<=prevCapacity||(newCapacity=Math.max(newCapacity,prevCapacity*(prevCapacity<1048576?2:1.125)>>>0),0!=prevCapacity&&(newCapacity=Math.max(newCapacity,256)),prevCapacity=node.contents,node.contents=new Uint8Array(newCapacity),0<node.usedBytes&&node.contents.set(prevCapacity.subarray(0,node.usedBytes),0))},resizeFileStorage(node,newSize){var oldContents;node.usedBytes!=newSize&&(0==newSize?(node.contents=null,node.usedBytes=0):(oldContents=node.contents,node.contents=new Uint8Array(newSize),oldContents&&node.contents.set(oldContents.subarray(0,Math.min(newSize,node.usedBytes))),node.usedBytes=newSize))},node_ops:{getattr(node){var attr={};return attr.dev=FS.isChrdev(node.mode)?node.id:1,attr.ino=node.id,attr.mode=node.mode,attr.nlink=1,attr.uid=0,attr.gid=0,attr.rdev=node.rdev,FS.isDir(node.mode)?attr.size=4096:FS.isFile(node.mode)?attr.size=node.usedBytes:FS.isLink(node.mode)?attr.size=node.link.length:attr.size=0,attr.atime=new Date(node.timestamp),attr.mtime=new Date(node.timestamp),attr.ctime=new Date(node.timestamp),attr.blksize=4096,attr.blocks=Math.ceil(attr.size/attr.blksize),attr},setattr(node,attr){void 0!==attr.mode&&(node.mode=attr.mode),void 0!==attr.timestamp&&(node.timestamp=attr.timestamp),void 0!==attr.size&&MEMFS.resizeFileStorage(node,attr.size)},lookup(parent,name){throw FS.genericErrors[44]},mknod(parent,name,mode,dev){return MEMFS.createNode(parent,name,mode,dev)},rename(old_node,new_dir,new_name){if(FS.isDir(old_node.mode)){var new_node;try{new_node=FS.lookupNode(new_dir,new_name)}catch(e){}if(new_node)for(var i in new_node.contents)throw new FS.ErrnoError(55)}delete old_node.parent.contents[old_node.name],old_node.parent.timestamp=Date.now(),old_node.name=new_name,new_dir.contents[new_name]=old_node,new_dir.timestamp=old_node.parent.timestamp,old_node.parent=new_dir},unlink(parent,name){delete parent.contents[name],parent.timestamp=Date.now()},rmdir(parent,name){for(var i in FS.lookupNode(parent,name).contents)throw new FS.ErrnoError(55);delete parent.contents[name],parent.timestamp=Date.now()},readdir(node){var key,entries=[".",".."];for(key in node.contents)node.contents.hasOwnProperty(key)&&entries.push(key);return entries},symlink(parent,newname,oldpath){parent=MEMFS.createNode(parent,newname,41471,0);return parent.link=oldpath,parent},readlink(node){if(FS.isLink(node.mode))return node.link;throw new FS.ErrnoError(28)}},stream_ops:{read(stream,buffer,offset,length,position){var contents=stream.node.contents;if(position>=stream.node.usedBytes)return 0;var size=Math.min(stream.node.usedBytes-position,length);if(8<size&&contents.subarray)buffer.set(contents.subarray(position,position+size),offset);else for(var i=0;i<size;i++)buffer[offset+i]=contents[position+i];return size},write(stream,buffer,offset,length,position,canOwn){if(buffer.buffer===HEAP8.buffer&&(canOwn=!1),!length)return 0;var node=stream.node;if(node.timestamp=Date.now(),buffer.subarray&&(!node.contents||node.contents.subarray)){if(canOwn)return node.contents=buffer.subarray(offset,offset+length),node.usedBytes=length;if(0===node.usedBytes&&0===position)return node.contents=buffer.slice(offset,offset+length),node.usedBytes=length;if(position+length<=node.usedBytes)return node.contents.set(buffer.subarray(offset,offset+length),position),length}if(MEMFS.expandFileStorage(node,position+length),node.contents.subarray&&buffer.subarray)node.contents.set(buffer.subarray(offset,offset+length),position);else for(var i=0;i<length;i++)node.contents[position+i]=buffer[offset+i];return node.usedBytes=Math.max(node.usedBytes,position+length),length},llseek(stream,offset,whence){if(1===whence?offset+=stream.position:2===whence&&FS.isFile(stream.node.mode)&&(offset+=stream.node.usedBytes),offset<0)throw new FS.ErrnoError(28);return offset},allocate(stream,offset,length){MEMFS.expandFileStorage(stream.node,offset+length),stream.node.usedBytes=Math.max(stream.node.usedBytes,offset+length)},mmap(stream,length,position,prot,flags){if(!FS.isFile(stream.node.mode))throw new FS.ErrnoError(43);var ptr,allocated,stream=stream.node.contents;if(2&flags||stream.buffer!==HEAP8.buffer){if((0<position||position+length<stream.length)&&(stream=stream.subarray?stream.subarray(position,position+length):Array.prototype.slice.call(stream,position,position+length)),allocated=!0,!(ptr=mmapAlloc(length)))throw new FS.ErrnoError(48);HEAP8.set(stream,ptr>>>0)}else allocated=!1,ptr=stream.byteOffset;return{ptr:ptr,allocated:allocated}},msync(stream,buffer,offset,length,mmapFlags){return MEMFS.stream_ops.write(stream,buffer,0,length,offset,!1),0}}},asyncLoad=(url,onload,onerror,noRunDep)=>{var dep=noRunDep?"":getUniqueRunDependency("al "+url);readAsync(url,arrayBuffer=>{assert(arrayBuffer,`Loading data file "${url}" failed (no arrayBuffer).`),onload(new Uint8Array(arrayBuffer)),dep&&removeRunDependency(dep)},event=>{if(!onerror)throw`Loading data file "${url}" failed.`;onerror()}),dep&&addRunDependency(dep)},preloadPlugins=Module.preloadPlugins||[];function FS_handledByPreloadPlugin(byteArray,fullname,finish,onerror){"undefined"!=typeof Browser&&Browser.init();var handled=!1;return preloadPlugins.forEach(function(plugin){handled||plugin.canHandle(fullname)&&(plugin.handle(byteArray,fullname,finish,onerror),handled=!0)}),handled}function FS_createPreloadedFile(parent,name,url,canRead,canWrite,onload,onerror,dontCreateFile,canOwn,preFinish){var fullname=name?PATH_FS.resolve(PATH.join2(parent,name)):parent,dep=getUniqueRunDependency("cp "+fullname);function processData(byteArray){function finish(byteArray){preFinish&&preFinish(),dontCreateFile||FS.createDataFile(parent,name,byteArray,canRead,canWrite,canOwn),onload&&onload(),removeRunDependency(dep)}FS_handledByPreloadPlugin(byteArray,fullname,finish,()=>{onerror&&onerror(),removeRunDependency(dep)})||finish(byteArray)}addRunDependency(dep),"string"==typeof url?asyncLoad(url,byteArray=>processData(byteArray),onerror):processData(url)}function FS_modeStringToFlags(str){var flags={r:0,"r+":2,w:577,"w+":578,a:1089,"a+":1090}[str];if(void 0===flags)throw new Error("Unknown file open mode: "+str);return flags}function FS_getMode(canRead,canWrite){var mode=0;return canRead&&(mode|=365),canWrite&&(mode|=146),mode}var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:!1,ignorePermissions:!0,ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,lookupPath:(path,opts={})=>{if(!(path=PATH_FS.resolve(path)))return{path:"",node:null};if(8<(opts=Object.assign({follow_mount:!0,recurse_count:0},opts)).recurse_count)throw new FS.ErrnoError(32);for(var parts=path.split("/").filter(p=>!!p),current=FS.root,current_path="/",i=0;i<parts.length;i++){var islast=i===parts.length-1;if(islast&&opts.parent)break;if(current=FS.lookupNode(current,parts[i]),current_path=PATH.join2(current_path,parts[i]),!FS.isMountpoint(current)||islast&&!opts.follow_mount||(current=current.mounted.root),!islast||opts.follow)for(var count=0;FS.isLink(current.mode);){var link=FS.readlink(current_path),current_path=PATH_FS.resolve(PATH.dirname(current_path),link),current=FS.lookupPath(current_path,{recurse_count:opts.recurse_count+1}).node;if(40<count++)throw new FS.ErrnoError(32)}}return{path:current_path,node:current}},getPath:node=>{for(var path,mount;;){if(FS.isRoot(node))return mount=node.mount.mountpoint,path?"/"!==mount[mount.length-1]?mount+"/"+path:mount+path:mount;path=path?node.name+"/"+path:node.name,node=node.parent}},hashName:(parentid,name)=>{for(var hash=0,i=0;i<name.length;i++)hash=(hash<<5)-hash+name.charCodeAt(i)|0;return(parentid+hash>>>0)%FS.nameTable.length},hashAddNode:node=>{var hash=FS.hashName(node.parent.id,node.name);node.name_next=FS.nameTable[hash],FS.nameTable[hash]=node},hashRemoveNode:node=>{var hash=FS.hashName(node.parent.id,node.name);if(FS.nameTable[hash]===node)FS.nameTable[hash]=node.name_next;else for(var current=FS.nameTable[hash];current;){if(current.name_next===node){current.name_next=node.name_next;break}current=current.name_next}},lookupNode:(parent,name)=>{var errCode=FS.mayLookup(parent);if(errCode)throw new FS.ErrnoError(errCode,parent);for(var errCode=FS.hashName(parent.id,name),node=FS.nameTable[errCode];node;node=node.name_next){var nodeName=node.name;if(node.parent.id===parent.id&&nodeName===name)return node}return FS.lookup(parent,name)},createNode:(parent,name,mode,rdev)=>{parent=new FS.FSNode(parent,name,mode,rdev);return FS.hashAddNode(parent),parent},destroyNode:node=>{FS.hashRemoveNode(node)},isRoot:node=>node===node.parent,isMountpoint:node=>!!node.mounted,isFile:mode=>32768==(61440&mode),isDir:mode=>16384==(61440&mode),isLink:mode=>40960==(61440&mode),isChrdev:mode=>8192==(61440&mode),isBlkdev:mode=>24576==(61440&mode),isFIFO:mode=>4096==(61440&mode),isSocket:mode=>49152==(49152&mode),flagsToPermissionString:flag=>{var perms=["r","w","rw"][3&flag];return 512&flag&&(perms+="w"),perms},nodePermissions:(node,perms)=>FS.ignorePermissions||(!perms.includes("r")||292&node.mode)&&(!perms.includes("w")||146&node.mode)&&(!perms.includes("x")||73&node.mode)?0:2,mayLookup:dir=>{var errCode=FS.nodePermissions(dir,"x");return errCode||(dir.node_ops.lookup?0:2)},mayCreate:(dir,name)=>{try{FS.lookupNode(dir,name);return 20}catch(e){}return FS.nodePermissions(dir,"wx")},mayDelete:(dir,name,isdir)=>{var node;try{node=FS.lookupNode(dir,name)}catch(e){return e.errno}name=FS.nodePermissions(dir,"wx");if(name)return name;if(isdir){if(!FS.isDir(node.mode))return 54;if(FS.isRoot(node)||FS.getPath(node)===FS.cwd())return 10}else if(FS.isDir(node.mode))return 31;return 0},mayOpen:(node,flags)=>node?FS.isLink(node.mode)?32:FS.isDir(node.mode)&&("r"!==FS.flagsToPermissionString(flags)||512&flags)?31:FS.nodePermissions(node,FS.flagsToPermissionString(flags)):44,MAX_OPEN_FDS:4096,nextfd:()=>{for(var fd=0;fd<=FS.MAX_OPEN_FDS;fd++)if(!FS.streams[fd])return fd;throw new FS.ErrnoError(33)},getStreamChecked:fd=>{fd=FS.getStream(fd);if(fd)return fd;throw new FS.ErrnoError(8)},getStream:fd=>FS.streams[fd],createStream:(stream,fd=-1)=>(FS.FSStream||(FS.FSStream=function(){this.shared={}},FS.FSStream.prototype={},Object.defineProperties(FS.FSStream.prototype,{object:{get(){return this.node},set(val){this.node=val}},isRead:{get(){return 1!=(2097155&this.flags)}},isWrite:{get(){return 0!=(2097155&this.flags)}},isAppend:{get(){return 1024&this.flags}},flags:{get(){return this.shared.flags},set(val){this.shared.flags=val}},position:{get(){return this.shared.position},set(val){this.shared.position=val}}})),stream=Object.assign(new FS.FSStream,stream),-1==fd&&(fd=FS.nextfd()),stream.fd=fd,FS.streams[fd]=stream),closeStream:fd=>{FS.streams[fd]=null},chrdev_stream_ops:{open:stream=>{var device=FS.getDevice(stream.node.rdev);stream.stream_ops=device.stream_ops,stream.stream_ops.open&&stream.stream_ops.open(stream)},llseek:()=>{throw new FS.ErrnoError(70)}},major:dev=>dev>>8,minor:dev=>255&dev,makedev:(ma,mi)=>ma<<8|mi,registerDevice:(dev,ops)=>{FS.devices[dev]={stream_ops:ops}},getDevice:dev=>FS.devices[dev],getMounts:mount=>{for(var mounts=[],check=[mount];check.length;){var m=check.pop();mounts.push(m),check.push.apply(check,m.mounts)}return mounts},syncfs:(populate,callback)=>{"function"==typeof populate&&(callback=populate,populate=!1),FS.syncFSRequests++,1<FS.syncFSRequests&&err(`warning: ${FS.syncFSRequests} FS.syncfs operations in flight at once, probably just doing extra work`);var mounts=FS.getMounts(FS.root.mount),completed=0;function doCallback(errCode){return FS.syncFSRequests--,callback(errCode)}function done(errCode){if(errCode)return done.errored?void 0:(done.errored=!0,doCallback(errCode));++completed>=mounts.length&&doCallback(null)}mounts.forEach(mount=>{if(!mount.type.syncfs)return done(null);mount.type.syncfs(mount,populate,done)})},mount:(type,opts,mountpoint)=>{var node,root="/"===mountpoint,pseudo=!mountpoint;if(root&&FS.root)throw new FS.ErrnoError(10);if(!root&&!pseudo){pseudo=FS.lookupPath(mountpoint,{follow_mount:!1});if(mountpoint=pseudo.path,FS.isMountpoint(node=pseudo.node))throw new FS.ErrnoError(10);if(!FS.isDir(node.mode))throw new FS.ErrnoError(54)}pseudo={type:type,opts:opts,mountpoint:mountpoint,mounts:[]},opts=type.mount(pseudo);return(opts.mount=pseudo).root=opts,root?FS.root=opts:node&&(node.mounted=pseudo,node.mount)&&node.mount.mounts.push(pseudo),opts},unmount:mountpoint=>{mountpoint=FS.lookupPath(mountpoint,{follow_mount:!1});if(!FS.isMountpoint(mountpoint.node))throw new FS.ErrnoError(28);var mountpoint=mountpoint.node,mount=mountpoint.mounted,mounts=FS.getMounts(mount),mount=(Object.keys(FS.nameTable).forEach(hash=>{for(var current=FS.nameTable[hash];current;){var next=current.name_next;mounts.includes(current.mount)&&FS.destroyNode(current),current=next}}),mountpoint.mounted=null,mountpoint.mount.mounts.indexOf(mount));mountpoint.mount.mounts.splice(mount,1)},lookup:(parent,name)=>parent.node_ops.lookup(parent,name),mknod:(path,mode,dev)=>{var parent=FS.lookupPath(path,{parent:!0}).node,path=PATH.basename(path);if(!path||"."===path||".."===path)throw new FS.ErrnoError(28);var errCode=FS.mayCreate(parent,path);if(errCode)throw new FS.ErrnoError(errCode);if(parent.node_ops.mknod)return parent.node_ops.mknod(parent,path,mode,dev);throw new FS.ErrnoError(63)},create:(path,mode)=>FS.mknod(path,mode=(mode=void 0!==mode?mode:438)&4095|32768,0),mkdir:(path,mode)=>FS.mknod(path,mode=(mode=void 0!==mode?mode:511)&1023|16384,0),mkdirTree:(path,mode)=>{for(var dirs=path.split("/"),d="",i=0;i<dirs.length;++i)if(dirs[i]){d+="/"+dirs[i];try{FS.mkdir(d,mode)}catch(e){if(20!=e.errno)throw e}}},mkdev:(path,mode,dev)=>(void 0===dev&&(dev=mode,mode=438),FS.mknod(path,mode|=8192,dev)),symlink:(oldpath,newpath)=>{if(!PATH_FS.resolve(oldpath))throw new FS.ErrnoError(44);var parent=FS.lookupPath(newpath,{parent:!0}).node;if(!parent)throw new FS.ErrnoError(44);var newpath=PATH.basename(newpath),errCode=FS.mayCreate(parent,newpath);if(errCode)throw new FS.ErrnoError(errCode);if(parent.node_ops.symlink)return parent.node_ops.symlink(parent,newpath,oldpath);throw new FS.ErrnoError(63)},rename:(old_path,new_path)=>{var old_dirname=PATH.dirname(old_path),new_dirname=PATH.dirname(new_path),old_name=PATH.basename(old_path),new_name=PATH.basename(new_path),lookup=FS.lookupPath(old_path,{parent:!0}),lookup=lookup.node,new_dir=FS.lookupPath(new_path,{parent:!0}).node;if(!lookup||!new_dir)throw new FS.ErrnoError(44);if(lookup.mount!==new_dir.mount)throw new FS.ErrnoError(75);var new_node,old_node=FS.lookupNode(lookup,old_name),old_path=PATH_FS.relative(old_path,new_dirname);if("."!==old_path.charAt(0))throw new FS.ErrnoError(28);if("."!==(old_path=PATH_FS.relative(new_path,old_dirname)).charAt(0))throw new FS.ErrnoError(55);try{new_node=FS.lookupNode(new_dir,new_name)}catch(e){}if(old_node!==new_node){new_dirname=FS.isDir(old_node.mode),new_path=FS.mayDelete(lookup,old_name,new_dirname);if(new_path)throw new FS.ErrnoError(new_path);if(new_path=new_node?FS.mayDelete(new_dir,new_name,new_dirname):FS.mayCreate(new_dir,new_name))throw new FS.ErrnoError(new_path);if(!lookup.node_ops.rename)throw new FS.ErrnoError(63);if(FS.isMountpoint(old_node)||new_node&&FS.isMountpoint(new_node))throw new FS.ErrnoError(10);if(new_dir!==lookup&&(new_path=FS.nodePermissions(lookup,"w")))throw new FS.ErrnoError(new_path);FS.hashRemoveNode(old_node);try{lookup.node_ops.rename(old_node,new_dir,new_name)}catch(e){throw e}finally{FS.hashAddNode(old_node)}}},rmdir:path=>{var parent=FS.lookupPath(path,{parent:!0}).node,path=PATH.basename(path),node=FS.lookupNode(parent,path),errCode=FS.mayDelete(parent,path,!0);if(errCode)throw new FS.ErrnoError(errCode);if(!parent.node_ops.rmdir)throw new FS.ErrnoError(63);if(FS.isMountpoint(node))throw new FS.ErrnoError(10);parent.node_ops.rmdir(parent,path),FS.destroyNode(node)},readdir:path=>{path=FS.lookupPath(path,{follow:!0}).node;if(path.node_ops.readdir)return path.node_ops.readdir(path);throw new FS.ErrnoError(54)},unlink:path=>{var parent=FS.lookupPath(path,{parent:!0}).node;if(!parent)throw new FS.ErrnoError(44);var path=PATH.basename(path),node=FS.lookupNode(parent,path),errCode=FS.mayDelete(parent,path,!1);if(errCode)throw new FS.ErrnoError(errCode);if(!parent.node_ops.unlink)throw new FS.ErrnoError(63);if(FS.isMountpoint(node))throw new FS.ErrnoError(10);parent.node_ops.unlink(parent,path),FS.destroyNode(node)},readlink:path=>{path=FS.lookupPath(path).node;if(!path)throw new FS.ErrnoError(44);if(path.node_ops.readlink)return PATH_FS.resolve(FS.getPath(path.parent),path.node_ops.readlink(path));throw new FS.ErrnoError(28)},stat:(path,dontFollow)=>{path=FS.lookupPath(path,{follow:!dontFollow}).node;if(!path)throw new FS.ErrnoError(44);if(path.node_ops.getattr)return path.node_ops.getattr(path);throw new FS.ErrnoError(63)},lstat:path=>FS.stat(path,!0),chmod:(path,mode,dontFollow)=>{if(!(dontFollow="string"==typeof path?FS.lookupPath(path,{follow:!dontFollow}).node:path).node_ops.setattr)throw new FS.ErrnoError(63);dontFollow.node_ops.setattr(dontFollow,{mode:4095&mode|-4096&dontFollow.mode,timestamp:Date.now()})},lchmod:(path,mode)=>{FS.chmod(path,mode,!0)},fchmod:(fd,mode)=>{fd=FS.getStreamChecked(fd);FS.chmod(fd.node,mode)},chown:(path,uid,gid,dontFollow)=>{if(!(dontFollow="string"==typeof path?FS.lookupPath(path,{follow:!dontFollow}).node:path).node_ops.setattr)throw new FS.ErrnoError(63);dontFollow.node_ops.setattr(dontFollow,{timestamp:Date.now()})},lchown:(path,uid,gid)=>{FS.chown(path,uid,gid,!0)},fchown:(fd,uid,gid)=>{fd=FS.getStreamChecked(fd);FS.chown(fd.node,uid,gid)},truncate:(path,len)=>{if(len<0)throw new FS.ErrnoError(28);if(!(path="string"==typeof path?FS.lookupPath(path,{follow:!0}).node:path).node_ops.setattr)throw new FS.ErrnoError(63);if(FS.isDir(path.mode))throw new FS.ErrnoError(31);if(!FS.isFile(path.mode))throw new FS.ErrnoError(28);var errCode=FS.nodePermissions(path,"w");if(errCode)throw new FS.ErrnoError(errCode);path.node_ops.setattr(path,{size:len,timestamp:Date.now()})},ftruncate:(fd,len)=>{fd=FS.getStreamChecked(fd);if(0==(2097155&fd.flags))throw new FS.ErrnoError(28);FS.truncate(fd.node,len)},utime:(path,atime,mtime)=>{path=FS.lookupPath(path,{follow:!0}).node;path.node_ops.setattr(path,{timestamp:Math.max(atime,mtime)})},open:(path,flags,mode)=>{if(""===path)throw new FS.ErrnoError(44);if(mode=void 0===mode?438:mode,mode=64&(flags="string"==typeof flags?FS_modeStringToFlags(flags):flags)?4095&mode|32768:0,"object"==typeof path)node=path;else{path=PATH.normalize(path);try{var node=FS.lookupPath(path,{follow:!(131072&flags)}).node}catch(e){}}var created=!1;if(64&flags)if(node){if(128&flags)throw new FS.ErrnoError(20)}else node=FS.mknod(path,mode,0),created=!0;if(!node)throw new FS.ErrnoError(44);if(FS.isChrdev(node.mode)&&(flags&=-513),65536&flags&&!FS.isDir(node.mode))throw new FS.ErrnoError(54);if(!created){mode=FS.mayOpen(node,flags);if(mode)throw new FS.ErrnoError(mode)}512&flags&&!created&&FS.truncate(node,0),flags&=-131713;mode=FS.createStream({node:node,path:FS.getPath(node),flags:flags,seekable:!0,position:0,stream_ops:node.stream_ops,ungotten:[],error:!1});return mode.stream_ops.open&&mode.stream_ops.open(mode),!Module.logReadFiles||1&flags||(FS.readFiles||(FS.readFiles={}),path in FS.readFiles)||(FS.readFiles[path]=1),mode},close:stream=>{if(FS.isClosed(stream))throw new FS.ErrnoError(8);stream.getdents&&(stream.getdents=null);try{stream.stream_ops.close&&stream.stream_ops.close(stream)}catch(e){throw e}finally{FS.closeStream(stream.fd)}stream.fd=null},isClosed:stream=>null===stream.fd,llseek:(stream,offset,whence)=>{if(FS.isClosed(stream))throw new FS.ErrnoError(8);if(!stream.seekable||!stream.stream_ops.llseek)throw new FS.ErrnoError(70);if(0!=whence&&1!=whence&&2!=whence)throw new FS.ErrnoError(28);return stream.position=stream.stream_ops.llseek(stream,offset,whence),stream.ungotten=[],stream.position},read:(stream,buffer,offset,length,position)=>{if(length<0||position<0)throw new FS.ErrnoError(28);if(FS.isClosed(stream))throw new FS.ErrnoError(8);if(1==(2097155&stream.flags))throw new FS.ErrnoError(8);if(FS.isDir(stream.node.mode))throw new FS.ErrnoError(31);if(!stream.stream_ops.read)throw new FS.ErrnoError(28);var seeking=void 0!==position;if(seeking){if(!stream.seekable)throw new FS.ErrnoError(70)}else position=stream.position;buffer=stream.stream_ops.read(stream,buffer,offset,length,position);return seeking||(stream.position+=buffer),buffer},write:(stream,buffer,offset,length,position,canOwn)=>{if(length<0||position<0)throw new FS.ErrnoError(28);if(FS.isClosed(stream))throw new FS.ErrnoError(8);if(0==(2097155&stream.flags))throw new FS.ErrnoError(8);if(FS.isDir(stream.node.mode))throw new FS.ErrnoError(31);if(!stream.stream_ops.write)throw new FS.ErrnoError(28);stream.seekable&&1024&stream.flags&&FS.llseek(stream,0,2);var seeking=void 0!==position;if(seeking){if(!stream.seekable)throw new FS.ErrnoError(70)}else position=stream.position;buffer=stream.stream_ops.write(stream,buffer,offset,length,position,canOwn);return seeking||(stream.position+=buffer),buffer},allocate:(stream,offset,length)=>{if(FS.isClosed(stream))throw new FS.ErrnoError(8);if(offset<0||length<=0)throw new FS.ErrnoError(28);if(0==(2097155&stream.flags))throw new FS.ErrnoError(8);if(!FS.isFile(stream.node.mode)&&!FS.isDir(stream.node.mode))throw new FS.ErrnoError(43);if(!stream.stream_ops.allocate)throw new FS.ErrnoError(138);stream.stream_ops.allocate(stream,offset,length)},mmap:(stream,length,position,prot,flags)=>{if(0!=(2&prot)&&0==(2&flags)&&2!=(2097155&stream.flags))throw new FS.ErrnoError(2);if(1==(2097155&stream.flags))throw new FS.ErrnoError(2);if(stream.stream_ops.mmap)return stream.stream_ops.mmap(stream,length,position,prot,flags);throw new FS.ErrnoError(43)},msync:(stream,buffer,offset,length,mmapFlags)=>stream.stream_ops.msync?stream.stream_ops.msync(stream,buffer,offset,length,mmapFlags):0,munmap:stream=>0,ioctl:(stream,cmd,arg)=>{if(stream.stream_ops.ioctl)return stream.stream_ops.ioctl(stream,cmd,arg);throw new FS.ErrnoError(59)},readFile:(path,opts={})=>{if(opts.flags=opts.flags||0,opts.encoding=opts.encoding||"binary","utf8"!==opts.encoding&&"binary"!==opts.encoding)throw new Error(`Invalid encoding type "${opts.encoding}"`);var ret,stream=FS.open(path,opts.flags),path=FS.stat(path).size,buf=new Uint8Array(path);return FS.read(stream,buf,0,path,0),"utf8"===opts.encoding?ret=UTF8ArrayToString(buf,0):"binary"===opts.encoding&&(ret=buf),FS.close(stream),ret},writeFile:(path,data,opts={})=>{opts.flags=opts.flags||577;path=FS.open(path,opts.flags,opts.mode);if("string"==typeof data){var buf=new Uint8Array(lengthBytesUTF8(data)+1),actualNumBytes=stringToUTF8Array(data,buf,0,buf.length);FS.write(path,buf,0,actualNumBytes,void 0,opts.canOwn)}else{if(!ArrayBuffer.isView(data))throw new Error("Unsupported data type");FS.write(path,data,0,data.byteLength,void 0,opts.canOwn)}FS.close(path)},cwd:()=>FS.currentPath,chdir:path=>{path=FS.lookupPath(path,{follow:!0});if(null===path.node)throw new FS.ErrnoError(44);if(!FS.isDir(path.node.mode))throw new FS.ErrnoError(54);var errCode=FS.nodePermissions(path.node,"x");if(errCode)throw new FS.ErrnoError(errCode);FS.currentPath=path.path},createDefaultDirectories:()=>{FS.mkdir("/tmp"),FS.mkdir("/home"),FS.mkdir("/home/web_user")},createDefaultDevices:()=>{FS.mkdir("/dev"),FS.registerDevice(FS.makedev(1,3),{read:()=>0,write:(stream,buffer,offset,length,pos)=>length}),FS.mkdev("/dev/null",FS.makedev(1,3)),TTY.register(FS.makedev(5,0),TTY.default_tty_ops),TTY.register(FS.makedev(6,0),TTY.default_tty1_ops),FS.mkdev("/dev/tty",FS.makedev(5,0)),FS.mkdev("/dev/tty1",FS.makedev(6,0));var randomBuffer=new Uint8Array(1024),randomLeft=0,randomByte=()=>(0===randomLeft&&(randomLeft=randomFill(randomBuffer).byteLength),randomBuffer[--randomLeft]);FS.createDevice("/dev","random",randomByte),FS.createDevice("/dev","urandom",randomByte),FS.mkdir("/dev/shm"),FS.mkdir("/dev/shm/tmp")},createSpecialDirectories:()=>{FS.mkdir("/proc");var proc_self=FS.mkdir("/proc/self");FS.mkdir("/proc/self/fd"),FS.mount({mount:()=>{var node=FS.createNode(proc_self,"fd",16895,73);return node.node_ops={lookup:(parent,name)=>{var stream=FS.getStreamChecked(+name),name={parent:null,mount:{mountpoint:"fake"},node_ops:{readlink:()=>stream.path}};return name.parent=name}},node}},{},"/proc/self/fd")},createStandardStreams:()=>{Module.stdin?FS.createDevice("/dev","stdin",Module.stdin):FS.symlink("/dev/tty","/dev/stdin"),Module.stdout?FS.createDevice("/dev","stdout",null,Module.stdout):FS.symlink("/dev/tty","/dev/stdout"),Module.stderr?FS.createDevice("/dev","stderr",null,Module.stderr):FS.symlink("/dev/tty1","/dev/stderr");FS.open("/dev/stdin",0),FS.open("/dev/stdout",1),FS.open("/dev/stderr",1)},ensureErrnoError:()=>{FS.ErrnoError||(FS.ErrnoError=function(errno,node){this.name="ErrnoError",this.node=node,this.setErrno=function(errno){this.errno=errno},this.setErrno(errno),this.message="FS error"},FS.ErrnoError.prototype=new Error,FS.ErrnoError.prototype.constructor=FS.ErrnoError,[44].forEach(code=>{FS.genericErrors[code]=new FS.ErrnoError(code),FS.genericErrors[code].stack="<generic error, no stack>"}))},staticInit:()=>{FS.ensureErrnoError(),FS.nameTable=new Array(4096),FS.mount(MEMFS,{},"/"),FS.createDefaultDirectories(),FS.createDefaultDevices(),FS.createSpecialDirectories(),FS.filesystems={MEMFS:MEMFS}},init:(input,output,error)=>{FS.init.initialized=!0,FS.ensureErrnoError(),Module.stdin=input||Module.stdin,Module.stdout=output||Module.stdout,Module.stderr=error||Module.stderr,FS.createStandardStreams()},quit:()=>{FS.init.initialized=!1;for(var i=0;i<FS.streams.length;i++){var stream=FS.streams[i];stream&&FS.close(stream)}},findObject:(path,dontResolveLastLink)=>{path=FS.analyzePath(path,dontResolveLastLink);return path.exists?path.object:null},analyzePath:(path,dontResolveLastLink)=>{try{path=(lookup=FS.lookupPath(path,{follow:!dontResolveLastLink})).path}catch(e){}var ret={isRoot:!1,exists:!1,error:0,name:null,path:null,object:null,parentExists:!1,parentPath:null,parentObject:null};try{var lookup=FS.lookupPath(path,{parent:!0});ret.parentExists=!0,ret.parentPath=lookup.path,ret.parentObject=lookup.node,ret.name=PATH.basename(path),lookup=FS.lookupPath(path,{follow:!dontResolveLastLink}),ret.exists=!0,ret.path=lookup.path,ret.object=lookup.node,ret.name=lookup.node.name,ret.isRoot="/"===lookup.path}catch(e){ret.error=e.errno}return ret},createPath:(parent,path,canRead,canWrite)=>{parent="string"==typeof parent?parent:FS.getPath(parent);for(var parts=path.split("/").reverse();parts.length;){var part=parts.pop();if(part){var current=PATH.join2(parent,part);try{FS.mkdir(current)}catch(e){}parent=current}}return current},createFile:(parent,name,properties,canRead,canWrite)=>{parent=PATH.join2("string"==typeof parent?parent:FS.getPath(parent),name),name=FS_getMode(canRead,canWrite);return FS.create(parent,name)},createDataFile:(parent,name,data,canRead,canWrite,canOwn)=>{var path=name,name=(parent&&(parent="string"==typeof parent?parent:FS.getPath(parent),path=name?PATH.join2(parent,name):parent),FS_getMode(canRead,canWrite)),parent=FS.create(path,name);if(data){if("string"==typeof data){for(var arr=new Array(data.length),i=0,len=data.length;i<len;++i)arr[i]=data.charCodeAt(i);data=arr}FS.chmod(parent,146|name);canRead=FS.open(parent,577);FS.write(canRead,data,0,data.length,0,canOwn),FS.close(canRead),FS.chmod(parent,name)}return parent},createDevice:(parent,name,input,output)=>{var parent=PATH.join2("string"==typeof parent?parent:FS.getPath(parent),name),name=FS_getMode(!!input,!!output),dev=(FS.createDevice.major||(FS.createDevice.major=64),FS.makedev(FS.createDevice.major++,0));return FS.registerDevice(dev,{open:stream=>{stream.seekable=!1},close:stream=>{output&&output.buffer&&output.buffer.length&&output(10)},read:(stream,buffer,offset,length,pos)=>{for(var result,bytesRead=0,i=0;i<length;i++){try{result=input()}catch(e){throw new FS.ErrnoError(29)}if(void 0===result&&0===bytesRead)throw new FS.ErrnoError(6);if(null==result)break;bytesRead++,buffer[offset+i]=result}return bytesRead&&(stream.node.timestamp=Date.now()),bytesRead},write:(stream,buffer,offset,length,pos)=>{for(var i=0;i<length;i++)try{output(buffer[offset+i])}catch(e){throw new FS.ErrnoError(29)}return length&&(stream.node.timestamp=Date.now()),i}}),FS.mkdev(parent,name,dev)},forceLoadFile:obj=>{if(obj.isDevice||obj.isFolder||obj.link||obj.contents)return!0;if("undefined"!=typeof XMLHttpRequest)throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");if(!read_)throw new Error("Cannot load without read() or XMLHttpRequest.");try{obj.contents=intArrayFromString(read_(obj.url),!0),obj.usedBytes=obj.contents.length}catch(e){throw new FS.ErrnoError(29)}},createLazyFile:(parent,name,url,canRead,canWrite)=>{function LazyUint8Array(){this.lengthKnown=!1,this.chunks=[]}if(LazyUint8Array.prototype.get=function(idx){var chunkOffset;if(!(idx>this.length-1||idx<0))return chunkOffset=idx%this.chunkSize,idx=idx/this.chunkSize|0,this.getter(idx)[chunkOffset]},LazyUint8Array.prototype.setDataGetter=function(getter){this.getter=getter},LazyUint8Array.prototype.cacheLength=function(){var xhr=new XMLHttpRequest;if(xhr.open("HEAD",url,!1),xhr.send(null),!(200<=xhr.status&&xhr.status<300||304===xhr.status))throw new Error("Couldn't load "+url+". Status: "+xhr.status);var header,datalength=Number(xhr.getResponseHeader("Content-length")),hasByteServing=(header=xhr.getResponseHeader("Accept-Ranges"))&&"bytes"===header,xhr=(header=xhr.getResponseHeader("Content-Encoding"))&&"gzip"===header,chunkSize=1048576,lazyArray=(hasByteServing||(chunkSize=datalength),this);lazyArray.setDataGetter(chunkNum=>{var start=chunkNum*chunkSize,end=(chunkNum+1)*chunkSize-1,end=Math.min(end,datalength-1);if(void 0===lazyArray.chunks[chunkNum]&&(lazyArray.chunks[chunkNum]=((from,to)=>{if(to<from)throw new Error("invalid range ("+from+", "+to+") or no bytes requested!");if(datalength-1<to)throw new Error("only "+datalength+" bytes available! programmer error!");var xhr=new XMLHttpRequest;if(xhr.open("GET",url,!1),datalength!==chunkSize&&xhr.setRequestHeader("Range","bytes="+from+"-"+to),xhr.responseType="arraybuffer",xhr.overrideMimeType&&xhr.overrideMimeType("text/plain; charset=x-user-defined"),xhr.send(null),200<=xhr.status&&xhr.status<300||304===xhr.status)return void 0!==xhr.response?new Uint8Array(xhr.response||[]):intArrayFromString(xhr.responseText||"",!0);throw new Error("Couldn't load "+url+". Status: "+xhr.status)})(start,end)),void 0===lazyArray.chunks[chunkNum])throw new Error("doXHR failed!");return lazyArray.chunks[chunkNum]}),!xhr&&datalength||(chunkSize=datalength=1,datalength=this.getter(0).length,chunkSize=datalength,out("LazyFiles on gzip forces download of the whole file when length is accessed")),this._length=datalength,this._chunkSize=chunkSize,this.lengthKnown=!0},"undefined"!=typeof XMLHttpRequest){if(!ENVIRONMENT_IS_WORKER)throw"Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc";var lazyArray=new LazyUint8Array,lazyArray=(Object.defineProperties(lazyArray,{length:{get:function(){return this.lengthKnown||this.cacheLength(),this._length}},chunkSize:{get:function(){return this.lengthKnown||this.cacheLength(),this._chunkSize}}}),{isDevice:!1,contents:lazyArray})}else lazyArray={isDevice:!1,url:url};var node=FS.createFile(parent,name,lazyArray,canRead,canWrite),stream_ops=(lazyArray.contents?node.contents=lazyArray.contents:lazyArray.url&&(node.contents=null,node.url=lazyArray.url),Object.defineProperties(node,{usedBytes:{get:function(){return this.contents.length}}}),{});function writeChunks(stream,buffer,offset,length,position){var contents=stream.node.contents;if(position>=contents.length)return 0;var size=Math.min(contents.length-position,length);if(contents.slice)for(var i=0;i<size;i++)buffer[offset+i]=contents[position+i];else for(i=0;i<size;i++)buffer[offset+i]=contents.get(position+i);return size}return Object.keys(node.stream_ops).forEach(key=>{var fn=node.stream_ops[key];stream_ops[key]=function(){return FS.forceLoadFile(node),fn.apply(null,arguments)}}),stream_ops.read=(stream,buffer,offset,length,position)=>(FS.forceLoadFile(node),writeChunks(stream,buffer,offset,length,position)),stream_ops.mmap=(stream,length,position,prot,flags)=>{FS.forceLoadFile(node);var ptr=mmapAlloc(length);if(ptr)return writeChunks(stream,HEAP8,ptr,length,position),{ptr:ptr,allocated:!0};throw new FS.ErrnoError(48)},node.stream_ops=stream_ops,node}},SYSCALLS={DEFAULT_POLLMASK:5,calculateAt:function(dirfd,path,allowEmpty){if(PATH.isAbs(path))return path;if(dirfd=-100===dirfd?FS.cwd():SYSCALLS.getStreamFromFD(dirfd).path,0!=path.length)return PATH.join2(dirfd,path);if(allowEmpty)return dirfd;throw new FS.ErrnoError(44)},doStat:function(func,path,buf){try{var stat=func(path)}catch(e){if(e&&e.node&&PATH.normalize(path)!==PATH.normalize(FS.getPath(e.node)))return-54;throw e}HEAP32[buf>>>2]=stat.dev,HEAP32[buf+4>>>2]=stat.mode,HEAPU32[buf+8>>>2]=stat.nlink,HEAP32[buf+12>>>2]=stat.uid,HEAP32[buf+16>>>2]=stat.gid,HEAP32[buf+20>>>2]=stat.rdev,tempI64=[stat.size>>>0,(tempDouble=stat.size,1<=+Math.abs(tempDouble)?0<tempDouble?+Math.floor(tempDouble/4294967296)>>>0:~~+Math.ceil((tempDouble-(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[buf+24>>>2]=tempI64[0],HEAP32[buf+28>>>2]=tempI64[1],HEAP32[buf+32>>>2]=4096,HEAP32[buf+36>>>2]=stat.blocks;var func=stat.atime.getTime(),path=stat.mtime.getTime(),ctime=stat.ctime.getTime();return tempI64=[Math.floor(func/1e3)>>>0,(tempDouble=Math.floor(func/1e3),1<=+Math.abs(tempDouble)?0<tempDouble?+Math.floor(tempDouble/4294967296)>>>0:~~+Math.ceil((tempDouble-(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[buf+40>>>2]=tempI64[0],HEAP32[buf+44>>>2]=tempI64[1],HEAPU32[buf+48>>>2]=func%1e3*1e3,tempI64=[Math.floor(path/1e3)>>>0,(tempDouble=Math.floor(path/1e3),1<=+Math.abs(tempDouble)?0<tempDouble?+Math.floor(tempDouble/4294967296)>>>0:~~+Math.ceil((tempDouble-(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[buf+56>>>2]=tempI64[0],HEAP32[buf+60>>>2]=tempI64[1],HEAPU32[buf+64>>>2]=path%1e3*1e3,tempI64=[Math.floor(ctime/1e3)>>>0,(tempDouble=Math.floor(ctime/1e3),1<=+Math.abs(tempDouble)?0<tempDouble?+Math.floor(tempDouble/4294967296)>>>0:~~+Math.ceil((tempDouble-(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[buf+72>>>2]=tempI64[0],HEAP32[buf+76>>>2]=tempI64[1],HEAPU32[buf+80>>>2]=ctime%1e3*1e3,tempI64=[stat.ino>>>0,(tempDouble=stat.ino,1<=+Math.abs(tempDouble)?0<tempDouble?+Math.floor(tempDouble/4294967296)>>>0:~~+Math.ceil((tempDouble-(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[buf+88>>>2]=tempI64[0],HEAP32[buf+92>>>2]=tempI64[1],0},doMsync:function(addr,stream,len,flags,offset){if(!FS.isFile(stream.node.mode))throw new FS.ErrnoError(43);if(2&flags)return 0;addr=HEAPU8.slice(addr,addr+len);FS.msync(stream,addr,offset,len,flags)},varargs:void 0,get(){return SYSCALLS.varargs+=4,HEAP32[SYSCALLS.varargs-4>>>2]},getStr(ptr){return UTF8ToString(ptr)},getStreamFromFD:function(fd){return FS.getStreamChecked(fd)}};function _environ_get(__environ,environ_buf){__environ>>>=0,environ_buf>>>=0;var bufSize=0;return getEnvStrings().forEach(function(string,i){var ptr=environ_buf+bufSize;HEAPU32[__environ+4*i>>>2]=ptr,stringToAscii(string,ptr),bufSize+=string.length+1}),0}function _environ_sizes_get(penviron_count,penviron_buf_size){penviron_count>>>=0,penviron_buf_size>>>=0;var strings=getEnvStrings(),bufSize=(HEAPU32[penviron_count>>>2]=strings.length,0);return strings.forEach(function(string){bufSize+=string.length+1}),HEAPU32[penviron_buf_size>>>2]=bufSize,0}function _fd_close(fd){try{var stream=SYSCALLS.getStreamFromFD(fd);return FS.close(stream),0}catch(e){if(void 0===FS||"ErrnoError"!==e.name)throw e;return e.errno}}var doReadv=(stream,iov,iovcnt,offset)=>{for(var ret=0,i=0;i<iovcnt;i++){var ptr=HEAPU32[iov>>>2],len=HEAPU32[iov+4>>>2],ptr=(iov+=8,FS.read(stream,HEAP8,ptr,len,offset));if(ptr<0)return-1;if(ret+=ptr,ptr<len)break;void 0!==offset&&(offset+=ptr)}return ret};function _fd_read(fd,iov,iovcnt,pnum){iov>>>=0,iovcnt>>>=0,pnum>>>=0;try{var stream=SYSCALLS.getStreamFromFD(fd),num=doReadv(stream,iov,iovcnt);return HEAPU32[pnum>>>2]=num,0}catch(e){if(void 0===FS||"ErrnoError"!==e.name)throw e;return e.errno}}function _fd_seek(fd,offset_low,offset_high,whence,newOffset){var stream,offset_low=convertI32PairToI53Checked(offset_low,offset_high);newOffset>>>=0;try{return isNaN(offset_low)?61:(stream=SYSCALLS.getStreamFromFD(fd),FS.llseek(stream,offset_low,whence),tempI64=[stream.position>>>0,(tempDouble=stream.position,1<=+Math.abs(tempDouble)?0<tempDouble?+Math.floor(tempDouble/4294967296)>>>0:~~+Math.ceil((tempDouble-(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[newOffset>>>2]=tempI64[0],HEAP32[newOffset+4>>>2]=tempI64[1],stream.getdents&&0===offset_low&&0===whence&&(stream.getdents=null),0)}catch(e){if(void 0===FS||"ErrnoError"!==e.name)throw e;return e.errno}}var doWritev=(stream,iov,iovcnt,offset)=>{for(var ret=0,i=0;i<iovcnt;i++){var ptr=HEAPU32[iov>>>2],len=HEAPU32[iov+4>>>2],ptr=(iov+=8,FS.write(stream,HEAP8,ptr,len,offset));if(ptr<0)return-1;ret+=ptr,void 0!==offset&&(offset+=ptr)}return ret};function _fd_write(fd,iov,iovcnt,pnum){iov>>>=0,iovcnt>>>=0,pnum>>>=0;try{var stream=SYSCALLS.getStreamFromFD(fd),num=doWritev(stream,iov,iovcnt);return HEAPU32[pnum>>>2]=num,0}catch(e){if(void 0===FS||"ErrnoError"!==e.name)throw e;return e.errno}}var arraySum=(array,index)=>{for(var sum=0,i=0;i<=index;sum+=array[i++]);return sum},MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31],MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31],addDays=(date,days)=>{for(var newDate=new Date(date.getTime());0<days;){var leap=isLeapYear(newDate.getFullYear()),currentMonth=newDate.getMonth(),leap=(leap?MONTH_DAYS_LEAP:MONTH_DAYS_REGULAR)[currentMonth];if(!(days>leap-newDate.getDate()))return newDate.setDate(newDate.getDate()+days),newDate;days-=leap-newDate.getDate()+1,newDate.setDate(1),currentMonth<11?newDate.setMonth(currentMonth+1):(newDate.setMonth(0),newDate.setFullYear(newDate.getFullYear()+1))}return newDate},writeArrayToMemory=(array,buffer)=>{HEAP8.set(array,buffer>>>0)};function _strftime(s,maxsize,format,tm){s>>>=0,maxsize>>>=0,format>>>=0;var tm_zone=HEAP32[(tm>>>=0)+40>>>2],date={tm_sec:HEAP32[tm>>>2],tm_min:HEAP32[tm+4>>>2],tm_hour:HEAP32[tm+8>>>2],tm_mday:HEAP32[tm+12>>>2],tm_mon:HEAP32[tm+16>>>2],tm_year:HEAP32[tm+20>>>2],tm_wday:HEAP32[tm+24>>>2],tm_yday:HEAP32[tm+28>>>2],tm_isdst:HEAP32[tm+32>>>2],tm_gmtoff:HEAP32[tm+36>>>2],tm_zone:tm_zone?UTF8ToString(tm_zone):""},pattern=UTF8ToString(format),EXPANSION_RULES_1={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(rule in EXPANSION_RULES_1)pattern=pattern.replace(new RegExp(rule,"g"),EXPANSION_RULES_1[rule]);var WEEKDAYS=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],MONTHS=["January","February","March","April","May","June","July","August","September","October","November","December"];function leadingSomething(value,digits,character){for(var str="number"==typeof value?value.toString():value||"";str.length<digits;)str=character[0]+str;return str}function leadingNulls(value,digits){return leadingSomething(value,digits,"0")}function compareByDay(date1,date2){function sgn(value){return value<0?-1:0<value?1:0}var compare;return compare=0===(compare=sgn(date1.getFullYear()-date2.getFullYear()))&&0===(compare=sgn(date1.getMonth()-date2.getMonth()))?sgn(date1.getDate()-date2.getDate()):compare}function getFirstWeekStartDate(janFourth){switch(janFourth.getDay()){case 0:return new Date(janFourth.getFullYear()-1,11,29);case 1:return janFourth;case 2:return new Date(janFourth.getFullYear(),0,3);case 3:return new Date(janFourth.getFullYear(),0,2);case 4:return new Date(janFourth.getFullYear(),0,1);case 5:return new Date(janFourth.getFullYear()-1,11,31);case 6:return new Date(janFourth.getFullYear()-1,11,30)}}function getWeekBasedYear(date){var date=addDays(new Date(date.tm_year+1900,0,1),date.tm_yday),janFourthThisYear=new Date(date.getFullYear(),0,4),janFourthNextYear=new Date(date.getFullYear()+1,0,4),janFourthThisYear=getFirstWeekStartDate(janFourthThisYear),janFourthNextYear=getFirstWeekStartDate(janFourthNextYear);return compareByDay(janFourthThisYear,date)<=0?compareByDay(janFourthNextYear,date)<=0?date.getFullYear()+1:date.getFullYear():date.getFullYear()-1}var rule,EXPANSION_RULES_2={"%a":date=>WEEKDAYS[date.tm_wday].substring(0,3),"%A":date=>WEEKDAYS[date.tm_wday],"%b":date=>MONTHS[date.tm_mon].substring(0,3),"%B":date=>MONTHS[date.tm_mon],"%C":date=>leadingNulls((date.tm_year+1900)/100|0,2),"%d":date=>leadingNulls(date.tm_mday,2),"%e":date=>leadingSomething(date.tm_mday,2," "),"%g":date=>getWeekBasedYear(date).toString().substring(2),"%G":date=>getWeekBasedYear(date),"%H":date=>leadingNulls(date.tm_hour,2),"%I":date=>{date=date.tm_hour;return 0==date?date=12:12<date&&(date-=12),leadingNulls(date,2)},"%j":date=>leadingNulls(date.tm_mday+arraySum(isLeapYear(date.tm_year+1900)?MONTH_DAYS_LEAP:MONTH_DAYS_REGULAR,date.tm_mon-1),3),"%m":date=>leadingNulls(date.tm_mon+1,2),"%M":date=>leadingNulls(date.tm_min,2),"%n":()=>"\n","%p":date=>0<=date.tm_hour&&date.tm_hour<12?"AM":"PM","%S":date=>leadingNulls(date.tm_sec,2),"%t":()=>"\t","%u":date=>date.tm_wday||7,"%U":date=>{date=date.tm_yday+7-date.tm_wday;return leadingNulls(Math.floor(date/7),2)},"%V":date=>{var jan1,val=Math.floor((date.tm_yday+7-(date.tm_wday+6)%7)/7);return(date.tm_wday+371-date.tm_yday-2)%7<=2&&val++,val?53!=val||4==(jan1=(date.tm_wday+371-date.tm_yday)%7)||3==jan1&&isLeapYear(date.tm_year)||(val=1):(val=52,(4==(jan1=(date.tm_wday+7-date.tm_yday-1)%7)||5==jan1&&isLeapYear(date.tm_year%400-1))&&val++),leadingNulls(val,2)},"%w":date=>date.tm_wday,"%W":date=>{date=date.tm_yday+7-(date.tm_wday+6)%7;return leadingNulls(Math.floor(date/7),2)},"%y":date=>(date.tm_year+1900).toString().substring(2),"%Y":date=>date.tm_year+1900,"%z":date=>{var ahead=0<=(date=date.tm_gmtoff),date=Math.abs(date)/60;return(ahead?"+":"-")+String("0000"+(date/60*100+date%60)).slice(-4)},"%Z":date=>date.tm_zone,"%%":()=>"%"},pattern=pattern.replace(/%%/g,"\0\0");for(rule in EXPANSION_RULES_2)pattern.includes(rule)&&(pattern=pattern.replace(new RegExp(rule,"g"),EXPANSION_RULES_2[rule](date)));tm=intArrayFromString(pattern=pattern.replace(/\0\0/g,"%"),!1);return tm.length>maxsize?0:(writeArrayToMemory(tm,s),tm.length-1)}function _strftime_l(s,maxsize,format,tm,loc){return _strftime(s>>>=0,maxsize>>>=0,format>>>=0,tm>>>=0)}function uleb128Encode(n,target){n<128?target.push(n):target.push(n%128|128,n>>7)}function sigToWasmTypes(sig){for(var typeNames={i:"i32",j:"i64",f:"f32",d:"f64",p:"i32"},type={parameters:[],results:"v"==sig[0]?[]:[typeNames[sig[0]]]},i=1;i<sig.length;++i)type.parameters.push(typeNames[sig[i]]);return type}function generateFuncType(sig,target){var sigRet=sig.slice(0,1),sigParam=sig.slice(1),typeCodes={i:127,p:127,j:126,f:125,d:124};target.push(96),uleb128Encode(sigParam.length,target);for(var i=0;i<sigParam.length;++i)target.push(typeCodes[sigParam[i]]);"v"==sigRet?target.push(0):target.push(1,typeCodes[sigRet])}function convertJsFunctionToWasm(func,sig){var bytes;return"function"==typeof WebAssembly.Function?new WebAssembly.Function(sigToWasmTypes(sig),func):(generateFuncType(sig,sig=[1]),uleb128Encode(sig.length,bytes=[0,97,115,109,1,0,0,0,1]),bytes.push.apply(bytes,sig),bytes.push(2,7,1,1,101,1,102,0,0,7,5,1,1,102,0,0),sig=new WebAssembly.Module(new Uint8Array(bytes)),new WebAssembly.Instance(sig,{e:{f:func}}).exports.f)}function updateTableMap(offset,count){if(functionsInTableMap)for(var i=offset;i<offset+count;i++){var item=getWasmTableEntry(i);item&&functionsInTableMap.set(item,i)}}var functionsInTableMap=void 0;function getFunctionAddress(func){return functionsInTableMap||(functionsInTableMap=new WeakMap,updateTableMap(0,wasmTable.length)),functionsInTableMap.get(func)||0}var freeTableIndexes=[];function getEmptyTableSlot(){if(freeTableIndexes.length)return freeTableIndexes.pop();try{wasmTable.grow(1)}catch(err){if(err instanceof RangeError)throw"Unable to grow wasm table. Set ALLOW_TABLE_GROWTH.";throw err}return wasmTable.length-1}var setWasmTableEntry=(idx,func)=>{wasmTable.set(idx,func),wasmTableMirror[idx]=wasmTable.get(idx)};function addFunction(func,sig){var rtn=getFunctionAddress(func);if(rtn)return rtn;rtn=getEmptyTableSlot();try{setWasmTableEntry(rtn,func)}catch(err){if(!(err instanceof TypeError))throw err;sig=convertJsFunctionToWasm(func,sig);setWasmTableEntry(rtn,sig)}return functionsInTableMap.set(func,rtn),rtn}function removeFunction(index){functionsInTableMap.delete(getWasmTableEntry(index)),freeTableIndexes.push(index)}function getCFunc(ident){return Module["_"+ident]}var stringToUTF8OnStack=str=>{var size=lengthBytesUTF8(str)+1,ret=stackAlloc(size);return stringToUTF8(str,ret,size),ret},ccall=function(ident,returnType,argTypes,args,opts){var toC={string:str=>{var ret=0;return ret=null!=str&&0!==str?stringToUTF8OnStack(str):ret},array:arr=>{var ret=stackAlloc(arr.length);return writeArrayToMemory(arr,ret),ret}};var ident=getCFunc(ident),cArgs=[],stack=0;if(args)for(var i=0;i<args.length;i++){var converter=toC[argTypes[i]];converter?(0===stack&&(stack=stackSave()),cArgs[i]=converter(args[i])):cArgs[i]=args[i]}return function(ret){return 0!==stack&&stackRestore(stack),function(ret){return"string"===returnType?UTF8ToString(ret):"boolean"===returnType?Boolean(ret):ret}(ret)}(ident.apply(null,cArgs))},cwrap=function(ident,returnType,argTypes,opts){var numericArgs=!argTypes||argTypes.every(type=>"number"===type||"boolean"===type);return"string"!==returnType&&numericArgs&&!opts?getCFunc(ident):function(){return ccall(ident,returnType,argTypes,arguments,opts)}},InternalError=Module.InternalError=class InternalError extends Error{constructor(message){super(message),this.name="InternalError"}},FSNode=(embind_init_charCodes(),BindingError=Module.BindingError=class BindingError extends Error{constructor(message){super(message),this.name="BindingError"}},init_ClassHandle(),init_embind(),init_RegisteredPointer(),UnboundTypeError=Module.UnboundTypeError=extendError(Error,"UnboundTypeError"),handleAllocatorInit(),init_emval(),function(parent,name,mode,rdev){this.parent=parent=parent||this,this.mount=parent.mount,this.mounted=null,this.id=FS.nextInode++,this.name=name,this.mode=mode,this.node_ops={},this.stream_ops={},this.rdev=rdev}),readMode=365,writeMode=146,wasmImports=(Object.defineProperties(FSNode.prototype,{read:{get:function(){return(this.mode&readMode)===readMode},set:function(val){val?this.mode|=readMode:this.mode&=~readMode}},write:{get:function(){return(this.mode&writeMode)===writeMode},set:function(val){val?this.mode|=writeMode:this.mode&=~writeMode}},isFolder:{get:function(){return FS.isDir(this.mode)}},isDevice:{get:function(){return FS.isChrdev(this.mode)}}}),FS.FSNode=FSNode,FS.createPreloadedFile=FS_createPreloadedFile,FS.staticInit(),{b:___assert_fail,e:___cxa_throw,n:__embind_finalize_value_object,B:__embind_register_bigint,M:__embind_register_bool,p:__embind_register_class,o:__embind_register_class_constructor,f:__embind_register_class_function,L:__embind_register_emval,y:__embind_register_float,c:__embind_register_function,m:__embind_register_integer,j:__embind_register_memory_view,x:__embind_register_std_string,t:__embind_register_std_wstring,l:__embind_register_value_object,d:__embind_register_value_object_field,N:__embind_register_void,i:__emval_decref,k:__emval_incref,r:__emval_new_cstring,u:__emval_new_object,q:__emval_set_property,g:__emval_take_value,A:__localtime_js,F:__tzset_js,s:_abort,w:_emscripten_date_now,K:_emscripten_memcpy_big,E:_emscripten_resize_heap,h:_emscripten_run_script,I:_environ_get,J:_environ_sizes_get,H:_fd_close,D:_fd_read,z:_fd_seek,v:_fd_write,a:wasmMemory,G:_strftime,C:_strftime_l}),asm=createWasm(),___wasm_call_ctors=asm.O,_backtest=Module._backtest=asm.P,_free=Module._free=asm.Q,_malloc=Module._malloc=asm.R,___errno_location=asm.__errno_location,_TA_ForEachFunc=Module._TA_ForEachFunc=asm.T,_TA_GetFuncHandle=Module._TA_GetFuncHandle=asm.U,_TA_GetFuncInfo=Module._TA_GetFuncInfo=asm.V,_TA_GetInputParameterInfo=Module._TA_GetInputParameterInfo=asm.W,_TA_GetOptInputParameterInfo=Module._TA_GetOptInputParameterInfo=asm.X,_TA_GetOutputParameterInfo=Module._TA_GetOutputParameterInfo=asm.Y,_TA_ParamHolderAlloc=Module._TA_ParamHolderAlloc=asm.Z,_TA_ParamHolderFree=Module._TA_ParamHolderFree=asm._,_TA_SetInputParamIntegerPtr=Module._TA_SetInputParamIntegerPtr=asm.$,_TA_SetInputParamRealPtr=Module._TA_SetInputParamRealPtr=asm.aa,_TA_SetInputParamPricePtr=Module._TA_SetInputParamPricePtr=asm.ba,_TA_SetOptInputParamInteger=Module._TA_SetOptInputParamInteger=asm.ca,_TA_SetOptInputParamReal=Module._TA_SetOptInputParamReal=asm.da,_TA_SetOutputParamIntegerPtr=Module._TA_SetOutputParamIntegerPtr=asm.ea,_TA_SetOutputParamRealPtr=Module._TA_SetOutputParamRealPtr=asm.fa,_TA_CallFunc=Module._TA_CallFunc=asm.ga,_TA_Initialize=Module._TA_Initialize=asm.ha,_TA_Shutdown=Module._TA_Shutdown=asm.ia,_TA_SetRetCodeInfo=Module._TA_SetRetCodeInfo=asm.ja,_TA_GetVersionString=Module._TA_GetVersionString=asm.ka,___getTypeName=asm.la,__embind_initialize_bindings=Module.__embind_initialize_bindings=asm.ma,stackSave=asm.na,stackRestore=asm.oa,stackAlloc=asm.pa,___cxa_is_pointer_type=asm.qa,dynCall_viijii=Module.dynCall_viijii=asm.ra,dynCall_jiji=Module.dynCall_jiji=asm.sa,dynCall_iiiiij=Module.dynCall_iiiiij=asm.ta,dynCall_iiiiijj=Module.dynCall_iiiiijj=asm.ua,dynCall_iiiiiijj=Module.dynCall_iiiiiijj=asm.va,calledRun;function applySignatureConversions(exports){var makeWrapper_pp=f=>a0=>f(a0)>>>0,makeWrapper_p=f=>()=>f()>>>0;return(exports=Object.assign({},exports)).malloc=makeWrapper_pp(exports.malloc),exports.__errno_location=makeWrapper_p(exports.__errno_location),exports.__getTypeName=makeWrapper_pp(exports.__getTypeName),exports.stackSave=makeWrapper_p(exports.stackSave),exports.stackAlloc=makeWrapper_pp(exports.stackAlloc),exports}function run(){function doRun(){calledRun||(calledRun=!0,Module.calledRun=!0,ABORT)||(initRuntime(),readyPromiseResolve(Module),Module.onRuntimeInitialized&&Module.onRuntimeInitialized(),postRun())}0<runDependencies||(preRun(),0<runDependencies)||(Module.setStatus?(Module.setStatus("Running..."),setTimeout(function(){setTimeout(function(){Module.setStatus("")},1),doRun()},1)):doRun())}if(Module.ccall=ccall,Module.cwrap=cwrap,Module.addFunction=addFunction,Module.removeFunction=removeFunction,dependenciesFulfilled=function runCaller(){calledRun||run(),calledRun||(dependenciesFulfilled=runCaller)},Module.preInit)for("function"==typeof Module.preInit&&(Module.preInit=[Module.preInit]);0<Module.preInit.length;)Module.preInit.pop()();function evalScope(locals,code){with(locals)eval(code)}function utf8_encode(s){if("undefined"!=typeof TextEncoder)return(new TextEncoder).encode(s);for(var pos=0,len=s.length,at=0,tlen=Math.max(32,len+(len>>1)+7),target=new Uint8Array(tlen>>3<<3);pos<len;){var extra,value=s.charCodeAt(pos++);if(55296<=value&&value<=56319)if(pos<len&&56320==(64512&(extra=s.charCodeAt(pos)))&&(++pos,value=((1023&value)<<10)+(1023&extra)+65536),55296<=value&&value<=56319)continue;if(at+4>target.length&&(tlen=(tlen=(tlen+=8)*(1+pos/s.length*2))>>3<<3,(extra=new Uint8Array(tlen)).set(target),target=extra),0==(4294967168&value))target[at++]=value;else{if(0==(4294965248&value))target[at++]=value>>6&31|192;else{if(0==(4294901760&value))target[at++]=value>>12&15|224;else{if(0!=(4292870144&value))continue;target[at++]=value>>18&7|240,target[at++]=value>>12&63|128}target[at++]=value>>6&63|128}target[at++]=63&value|128}}return target.slice(0,at)}function valuesToString(values,pos,ch){void 0===ch&&(ch=" ");for(var result="",i=pos=void 0===pos?0:pos;i<values.length;i++)pos<i&&(result+=ch),null==values[i]?result+="null":"string"==typeof values[i]?result+=values[i]:"number"==typeof values[i]||"function"==typeof values[i].getFullYear?result+=values[i].toString():void 0!==values[i].cols&&"string"==typeof values[i].type&&"table"==values[i].type?result+="`"+JSON.stringify(values[i])+"`":result+=JSON.stringify(values[i]);return result=0<result.length?utf8_encode(result):result}function Vector2Array(obj){for(var arr=[],arrSize=obj.size(),i=0;i<arrSize;i++)arr.push(obj.get(i));return arr}function toNonExponential(value){var sign,e;return"number"!=typeof value&&(value=parseFloat(value),isNaN(value))?"":(value<0?(sign="-",value=Math.abs(value)):sign="",value<1?(e=parseInt(value.toString().split("e-")[1]))&&(value*=Math.pow(10,e-1),value="0."+new Array(e).join("0")+value.toString().substring(2)):(e=parseInt(value.toString().split("e+")[1]))&&(value=(value/=Math.pow(10,e))+new Array(e+1).join("0")),sign+value)}function initThread(env){function Thread(func,args){this.tid=void 0===func?0:nextId++,this.terminated=!1,this.ts=0,this.te=0,this.ret=null,this.funcs=[],Array.isArray(func)?(this.funcs.push(func),this.funcs=this.funcs.concat(args)):this.funcs.push([func].concat(args)),this.data={},this.messageQueue=[],this.run=function(){pending++;var prevThreadId=currentThreadId,ctx=(currentThreadId=this.tid,this.ts=env.UnixNano()/1e6,{});for(let i=this.funcs.length-1;0<=i;i--){"string"==typeof this.funcs[i][0]&&(this.funcs[i][0]=new Function(this.funcs[i][0]));var ret=this.funcs[i][0].apply(ctx,this.funcs[i].slice(1));0==i&&(this.ret=ret)}this.te=env.UnixNano()/1e6,totalElapsed+=this.te-this.ts,this.terminated=!1,currentThreadId=prevThreadId,pending--},this.id=function(){return this.tid},this.name=function(){return 0==this.tid?"MainThread":"Thread-"+this.tid},this.terminate=function(){this.terminated=!0},this.release=function(){delete threads[this.tid]},this.postMessage=function(msg){this.messageQueue.push(msg)},this.peekMessage=function(){return this.messageQueue.shift()||null},this.join=function(timeout){var now=env.UnixNano()/1e6-totalElapsed;if("number"==typeof timeout)if(0<timeout){if(now+timeout<this.te)return void env.Sleep(timeout);env.Sleep(this.te-now)}else if(timeout<0&&now<this.te)return;return this.release(),{id:this.tid,terminated:this.terminated,elapsed:this.te-this.ts,ret:this.ret}},this.eventLoop=function(){env.LogError("sandbox not support eventLoop")}}let threads={},nextId=1,pending=0,totalElapsed=0,currentThreadId=0;function run_forever(){for(;;)env.Sleep(10)}threads[0]=new Thread,env.threading={Thread:function(f){var thread=new Thread(f,1<arguments.length?Array.prototype.slice.call(arguments,1):[]);return(threads[thread.tid]=thread).run(),thread},getThread:function(tid){return threads[tid]},mainThread:function(){return threads[0]},currentThread:function(){return threads[currentThreadId]},pending:function(){return pending},Lock:function(){let locked=!1;return{acquire:function(){locked&&run_forever(),locked=!0},release:function(){locked=!1}}},Event:function(){return{set:function(){return!0},clear:function(){return!0},isSet:function(){return!1},wait:function(timeout){return!0}}},Condition:function(){let locked=!1;return{wait:function(){return!0},notify:function(){return!0},notifyAll:function(){return!0},acquire:function(){locked&&run_forever(),locked=!0},release:function(){locked=!1}}},Dict:function(){let dict={};return{get:function(key){return dict[key]},set:function(key,value){dict[key]=value}}}},env.__Thread=function(f){var thread=new Thread(f,1<arguments.length?Array.prototype.slice.call(arguments,1):[]);return(threads[thread.tid]=thread).run(),thread.tid},env.__threadPeekMessage=function(timeout=0){var currentThreadId=nextId-1,currentThreadId=threads[currentThreadId];return currentThreadId&&0!=currentThreadId.messageQueue.length?currentThreadId.receiveMessage():null},env.__threadPostMessage=function(threadId,msg){threadId=threads[threadId];threadId&&threadId.sendMessage(msg)},env.__threadJoin=function(threadId,timeout){var thread=threads[threadId];if(thread)return thread.join(timeout);throw"thread #"+threadId.toString()+" not found"},env.__threadTerminate=function(threadId){threadId=threads[threadId];threadId&&(threadId.terminate(),threadId.release())},env.__threadGetData=function(threadId,key){threadId=threads[threadId];return threadId&&threadId.data[key]||null},env.__threadSetData=function(threadId,key,value){threadId=threads[threadId];threadId&&(threadId.data[key]=value)},env.__threadId=function(){return nextId-1},env.__threadPending=function(running=0){return 0}}return run(),Module.talib=function(){function ReadDouble(p,idx){return getValue(p+4*idx,"double")}function ReadInt(p,idx){return getValue(p+4*idx,"i32")}function ReadStr(p,idx){return UTF8ToString(getValue(p+4*idx,"i32"))}function GetArr(arr,attr,isInteger){var ret=[],tmp=0;isInteger=void 0!==isInteger&&isInteger;for(var i=0;i<arr.length;i++)"number"!=typeof(tmp=arr[i])&&(tmp=arr[i][attr]),isInteger?ret.push(parseInt(tmp)):ret.push(tmp);var data=isInteger?new Uint8Array(new Int32Array(ret).buffer):new Uint8Array(new Float64Array(ret).buffer),ret=Module._malloc(data.length);return writeArrayToMemory(data,ret),ret}Module._TA_Initialize();function throwError(errCode){var retCodeInfo;if(0!==errCode)throw retCodeInfo=Module._malloc(8),TA_SetRetCodeInfo(errCode,retCodeInfo),errCode=ReadStr(retCodeInfo,0)+": "+ReadStr(retCodeInfo,1),Module._free(retCodeInfo),current_func+": "+errCode}var obj={help:function(n){return obj["h_"+n]()},list:[]},TA_GetInputParameterInfo=Module._TA_GetInputParameterInfo,TA_GetOptInputParameterInfo=Module._TA_GetOptInputParameterInfo,TA_GetOutputParameterInfo=Module._TA_GetOutputParameterInfo,TA_ParamHolderAlloc=Module._TA_ParamHolderAlloc,TA_ParamHolderFree=Module._TA_ParamHolderFree,TA_SetInputParamRealPtr=Module._TA_SetInputParamRealPtr,TA_SetInputParamIntegerPtr=Module._TA_SetInputParamIntegerPtr,TA_SetInputParamPricePtr=Module._TA_SetInputParamPricePtr,TA_SetOptInputParamReal=Module._TA_SetOptInputParamReal,TA_SetOptInputParamInteger=Module._TA_SetOptInputParamInteger,TA_SetOutputParamIntegerPtr=Module._TA_SetOutputParamIntegerPtr,TA_SetOutputParamRealPtr=Module._TA_SetOutputParamRealPtr,TA_CallFunc=Module._TA_CallFunc,TA_SetRetCodeInfo=Module._TA_SetRetCodeInfo,current_func="obj",funcCallback=addFunction(function(ptr){var name=ReadStr(ptr,0),group=ReadStr(ptr,1),hint=ReadStr(ptr,2),nbInput=(ReadInt(ptr,4),ReadInt(ptr,5));if(!(1<nbInput&&"OBV"!==name)){for(var nbOptInput=ReadInt(ptr,6),nbOutput=ReadInt(ptr,7),funcHandle=ReadInt(ptr,8),pInfo=Module._malloc(4),inputs=[],optInputs=[],outputs=[],i=0;i<nbInput;i++){throwError(TA_GetInputParameterInfo(funcHandle,i,pInfo));ptr=ReadInt(pInfo,0);inputs.push({type:ReadInt(ptr,0),paramName:ReadStr(ptr,1),flags:ReadInt(ptr,2)})}for(i=0;i<nbOptInput;i++){throwError(TA_GetOptInputParameterInfo(funcHandle,i,pInfo));ptr=ReadInt(pInfo,0);optInputs.push({type:ReadInt(ptr,0),paramName:ReadStr(ptr,1),flags:ReadInt(ptr,2),displayName:ReadStr(ptr,3),defaultValue:ReadDouble(ptr,6),hint:ReadStr(ptr,8)})}for(i=0;i<nbOutput;i++){throwError(TA_GetOutputParameterInfo(funcHandle,i,pInfo));ptr=ReadInt(pInfo,0);outputs.push({type:ReadInt(ptr,0),paramName:ReadStr(ptr,1),flags:ReadInt(ptr,2)})}Module._free(pInfo),obj["h_"+name]=function(){for(var args=[],i=0;i<inputs.length;i++){var type=inputs[i].type,flags=inputs[i].flags,paramName=inputs[i].paramName;1===type?args.push(["Array[Real]",paramName]):2===type?args.push(["Array[Integer]",paramName]):0===type&&(type=[],1&flags&&type.push("Open"),2&flags&&type.push("High"),4&flags&&type.push("Low"),8&flags&&type.push("Close"),16&flags&&type.push("Volume"),32&flags&&type.push("OpenInterest"),64&flags&&type.push("Time"),args.push(["Records["+type.join(",")+"]",paramName]))}for(i=0;i<optInputs.length;i++){var optType="NA";0===optInputs[i].type?optType="RealRange":1===optInputs[i].type?optType="RealList":2===optInputs[i].type?optType="IntegerRange":3===optInputs[i].type&&(optType="IntegerList"),args.push([optType,optInputs[i].paramName,optInputs[i].defaultValue])}for(var rets=[],i=0;i<outputs.length;i++){var outType="Real";1===outputs[i].type&&(outType="Integer"),rets.push([outType,outputs[i].paramName])}return[name,args,rets,hint]},obj.list.push(name);for(var needArg=0,i=0;i<inputs.length;i++){var type=inputs[i].type,flags=inputs[i].flags;(1===type||2===type||0===type&&(1&flags&&needArg++,2&flags&&needArg++,4&flags&&needArg++,8&flags&&needArg++,16&flags))&&needArg++}obj[name]=function(records){var info={handle:funcHandle,name:current_func=name,needArg:needArg,hint:hint,group:group,inputs:inputs,optInputs:optInputs,outputs:outputs};if(void 0===records&&throwError(2),0===records.length){if(0===info.outputs.length)return[];for(var outputArr=[],i=0;i<info.outputs.length;i++)outputArr.push([]);return outputArr}var argPos=0,argv=arguments,moveStep="number"==typeof records[0]?1:0,allocatedParams=(1==moveStep&&arguments.length<info.needArg&&throwError(2),Module._malloc(4)),openPrice=(throwError(TA_ParamHolderAlloc(info.handle,allocatedParams)),null),highPrice=null,lowPrice=null,closePrice=null,volume=null,ints=[],paramsPtr=ReadInt(allocatedParams,0);Module._free(allocatedParams);for(var i=0;i<info.inputs.length;i++){var tmp,type=info.inputs[i].type,flags=info.inputs[i].flags;1===type?(closePrice||(closePrice=GetArr(argv[argPos],"Close"),argPos+=moveStep),throwError(TA_SetInputParamRealPtr(paramsPtr,i,closePrice))):2===type?(tmp=GetArr(argv[argPos],"Close",!0),argPos+=moveStep,ints.push(tmp),throwError(TA_SetInputParamIntegerPtr(paramsPtr,i,tmp))):0===type&&(1&flags&&(openPrice||(openPrice=GetArr(argv[argPos],"Open"),argPos+=moveStep)),2&flags&&(highPrice||(highPrice=GetArr(argv[argPos],"High"),argPos+=moveStep)),4&flags&&(lowPrice||(lowPrice=GetArr(argv[argPos],"Low"),argPos+=moveStep)),8&flags&&(closePrice||(closePrice=GetArr(argv[argPos],"Close"),argPos+=moveStep)),16&flags&&(volume||(volume=GetArr(argv[argPos],"Volume"),argPos+=moveStep)),throwError(TA_SetInputParamPricePtr(paramsPtr,i,openPrice,highPrice,lowPrice,closePrice,volume,null)))}for(0==moveStep&&argPos++,i=0;i<info.optInputs.length;i++)switch(v=argPos+i<arguments.length?arguments[i+argPos]:info.optInputs[i].defaultValue,info.optInputs[i].type){case 0:case 1:TA_SetOptInputParamReal(paramsPtr,i,v);break;case 2:case 3:TA_SetOptInputParamInteger(paramsPtr,i,v);break;default:throw"error"}outputArr=[];for(i=0;i<info.outputs.length;i++){var ptr=null;1===info.outputs[i].type?(ptr=Module._malloc(4*records.length),throwError(TA_SetOutputParamIntegerPtr(paramsPtr,i,ptr))):0===info.outputs[i].type&&(ptr=Module._malloc(8*records.length),throwError(TA_SetOutputParamRealPtr(paramsPtr,i,ptr))),outputArr.push(ptr)}var allocatedParams=Module._malloc(4),outNbElement=Module._malloc(4),beg=(TA_CallFunc(paramsPtr,0,records.length-1,allocatedParams,outNbElement),ReadInt(allocatedParams,0)),num=ReadInt(outNbElement,0),ret=(Module._free(allocatedParams),Module._free(outNbElement),[]);for(i=0;i<info.outputs.length;i++){ptr=outputArr[i];ret[i]=[];for(var v,j=0;j<records.length;j++)j<beg||num<=j-beg?ret[i].push(NaN):(1===info.outputs[i].type?v=ReadInt(ptr,j-beg):0===info.outputs[i].type&&(v=ReadDouble(ptr,2*(j-beg))),ret[i].push(v));Module._free(ptr)}for(throwError(TA_ParamHolderFree(paramsPtr)),openPrice&&Module._free(openPrice),highPrice&&Module._free(highPrice),lowPrice&&Module._free(lowPrice),closePrice&&Module._free(closePrice),volume&&Module._free(volume),i=0;i<ints.length;i++)Module._free(ints[i]);return 1===ret.length?ret[0]:ret}}},"vii");if(0!==ccall("TA_ForEachFunc","number",["pointer","number"],[funcCallback,0]))throw"error";return removeFunction(funcCallback),obj},Module.VMain=function(task){for(var exchanges=[],i=0;i<task.Exchanges.length;i++)exchanges[i]=function(eIdx){var self={},idx=eIdx;return self.cache=[],self.ct="",self.period=task.Options.Period,self.currency=Module.js_Exchange_GetCurrency(eIdx),self.maxBarLen=task.Exchanges[idx].MaxBarLen,self.lastRawJSON="",self.GetName=function(){return Module.js_Exchange_GetName(eIdx)},self.SetData=function(pair,detail){return"string"!=typeof detail&&(detail=JSON.stringify(detail)),Module.js_Exchange_SetData(eIdx,pair,detail)},self.GetPeriod=function(){return self.period/1e3},self.GetCurrency=function(){return self.currency},self.GetLabel=function(){return Module.js_Exchange_GetLabel(eIdx)},self.GetUSDCNY=function(){return Module.js_Exchange_GetUSDCNY(eIdx)},self.GetRate=function(){return Module.js_Exchange_GetRate(eIdx)},self.SetRate=function(n){return Module.js_Exchange_SetRate(eIdx,n=void 0===n?1:n)},self.SetCurrency=function(s){Module.js_Exchange_SetCurrency(eIdx,s),self.currency=Module.js_Exchange_GetCurrency(eIdx)},self.SetBase=function(s){return Module.js_Exchange_SetBase(eIdx,s)},self.GetBase=function(){return Module.js_Exchange_GetBase(eIdx)},self.SetTimeout=function(n){},self.IO=function(k,v){return void 0===v&&(v=1),"currency"==k?self.SetCurrency(v):Module.js_Exchange_IO(eIdx,k,v)},self.SetPrecision=function(a,b){Module.js_Exchange_SetPrecision(eIdx,a,b)},self.SetProxy=function(){},self.GetQuoteCurrency=function(){return Module.js_Exchange_GetQuoteCurrency(eIdx)},self.GetBaseCurrency=function(){return Module.js_Exchange_GetBaseCurrency(eIdx)},self.GetDepth=function(symbol){self.lastRawJSON="";var ret=Module.js_Exchange_GetDepth(eIdx,symbol||"");if(!ret)return null;for(var arr=Vector2Array(ret.Orders),d={Asks:[],Bids:[]},i=0;i<arr.length;i++)(i<ret.AsksLen?d.Asks:d.Bids).push(arr[i]);return d},self.GetTickers=function(){self.lastRawJSON="";var ret=Module.js_Exchange_GetTickers(eIdx);return ret?Vector2Array(ret):null},self.GetMarkets=function(){return JSON.parse(Module.js_Exchange_GetMarkets(eIdx))},self.GetTicker=function(symbol){return self.lastRawJSON="",Module.js_Exchange_GetTicker(eIdx,symbol||"")},self.GetData=function(pair,timeout,offset){"number"!=typeof timeout&&(timeout=6e4),"number"!=typeof offset&&(offset=0),self.lastRawJSON="";pair=Module.js_Exchange_GetData(eIdx,pair,timeout,offset);return 0<pair.Data.length?pair.Data=JSON.parse(pair.Data):pair.Data=null,pair},self.GetTrades=function(symbol){self.lastRawJSON="";symbol=Module.js_Exchange_GetTrades(eIdx,symbol||"");return symbol?Vector2Array(symbol):null},self.SetMaxBarLen=function(n){self.maxBarLen=n},self.GetRecords=function(symbol,period,limit){"number"==typeof symbol?(limit=period,period=symbol,symbol=""):void 0===symbol&&(symbol="",period=-1,limit=0),self.lastRawJSON="";symbol=Module.js_Exchange_GetRecords(eIdx,symbol||"",period=void 0!==period&&-1!=period?period:self.period/1e3,limit="number"!=typeof limit?0:limit);if(!symbol)return null;var records=Vector2Array(symbol),symbol=self.currency+"/"+self.ct+"/"+period.toString();if(void 0===self.cache[symbol])records.length>self.maxBarLen&&(records=records.slice(records.length-self.maxBarLen)),self.cache[symbol]=records;else for(var c=self.cache[symbol],preTime=0<c.length?c[c.length-1].Time:0,i=0;i<records.length;i++)records[i].Time==preTime&&0<c.length?c[c.length-1]=records[i]:records[i].Time>preTime&&(c.push(records[i]),preTime=c[c.length-1].Time,c.length>self.maxBarLen)&&c.shift();let bars=self.cache[symbol];return bars=0<limit&&bars.length>limit?bars.slice(bars.length-limit):bars},self.GetAccount=function(){return self.lastRawJSON="ctpAccount",Module.js_Exchange_GetAccount(eIdx)},self.GetRawJSON=function(){return"ctpAccount"!=self.lastRawJSON?self.lastRawJSON:Module.js_Exchange_GetCTPAccountJSON(eIdx)},self.Buy=function(price,amount){return self.lastRawJSON="",Module.js_Exchange_Buy(eIdx,price,amount,valuesToString(Array.prototype.slice.call(arguments),2))},self.Sell=function(price,amount){return self.lastRawJSON="",Module.js_Exchange_Sell(eIdx,price,amount,valuesToString(Array.prototype.slice.call(arguments),2))},self.CreateOrder=function(symbol,side,price,amount){return self.lastRawJSON="",Module.js_Exchange_CreateOrder(eIdx,symbol,side,price,amount,valuesToString(Array.prototype.slice.call(arguments),4))},self.Log=function(orderType,price,amount){Module.js_Exchange_Log(eIdx,orderType,price,2==orderType?0:amount,valuesToString(Array.prototype.slice.call(arguments),2==orderType?2:3))},self.GetOrders=function(symbol){self.lastRawJSON="";symbol=Module.js_Exchange_GetOrders(eIdx,symbol||"");return symbol?Vector2Array(symbol):null},self.GetHistoryOrders=function(symbol,since,limit){"number"==typeof symbol&&(limit=since,since=symbol,symbol=""),self.lastRawJSON="",void 0===limit&&(limit=0);symbol=Module.js_Exchange_GetHistoryOrders(eIdx,symbol||"",(since=void 0===since?0:since).toString(),limit);return symbol?Vector2Array(symbol):null},self.GetAssets=function(){self.lastRawJSON="";var ret=Module.js_Exchange_GetAssets(eIdx);return ret?Vector2Array(ret):null},self.GetOrder=function(orderId){return self.lastRawJSON="",Module.js_Exchange_GetOrder(eIdx,orderId)},self.CancelOrder=function(orderId){return self.lastRawJSON="",Module.js_Exchange_CancelOrder(eIdx,orderId,valuesToString(Array.prototype.slice.call(arguments),1))},self.SetDirection=function(s){return Module.js_Exchange_SetDirection(eIdx,s)},self.SetMarginLevel=function(symbol,marginLevel){var tmp;return"number"==typeof symbol&&(tmp=marginLevel||"",marginLevel=symbol,symbol=tmp),Module.js_Exchange_SetMarginLevel(eIdx,symbol,marginLevel)},self.SetContractType=function(symbol){var r=Module.js_Exchange_SetContractType(eIdx,symbol);return"string"==typeof r?(self.ct=symbol,JSON.parse(r)):null},self.GetContractType=function(){return self.ct},self.GetFundings=function(symbol){self.lastRawJSON="";symbol=Module.js_Exchange_GetFundings(eIdx,symbol||"");return symbol?Vector2Array(symbol):null},self.GetPosition=self.GetPositions=function(symbol){self.lastRawJSON="";symbol=Module.js_Exchange_GetPositions(eIdx,symbol||"");return symbol?Vector2Array(symbol):null},self.Go=function(){var args=Array.prototype.slice.call(arguments),ret=self[args[0]].apply(self,args.slice(1));return{wait:function(){return ret}}},self}(i);function countLines(s){for(var count=1,i=0;i<s.length;i++)"\n"==s[i]&&count++;return count}var k,gApis={kvdb:{}},__realDate=(initThread(gApis),Date),__cRetryDelay=3e3,runtime=(gApis.RDate=__realDate,gApis.Benchmark=Module.js_Benchmark,gApis._T=function(a,b){return"[trans]"+("string"==typeof b?a+"|"+b:a)+"[/trans]"},gApis._D=function(date,fmt){void 0===fmt&&(fmt="yyyy-MM-dd hh:mm:ss"),"number"==typeof date?date=new __realDate(date):void 0===date&&(date=new __realDate(Module.js_UnixNano()/1e6));var y=date.getFullYear(),yy=(y%100).toString();1==yy.length&&(yy="0"+yy);var M=(M="0"+(date.getMonth()+1)).substring(M.length-2),d=(d="0"+date.getDate()).substring(d.length-2),h=(h="0"+date.getHours()).substring(h.length-2),m=(m="0"+date.getMinutes()).substring(m.length-2),date=(date="0"+date.getSeconds()).substring(date.length-2);return fmt.replace("yyyy",y).replace("MM",M).replace("dd",d).replace("hh",h).replace("mm",m).replace("ss",date).replace("yy",yy)},gApis.Unix=function(){return Module.js_Unix()},gApis.UnixNano=function(){return Module.js_UnixNano()},gApis.Sleep=function(n){Module.js_Sleep(n)},gApis.Log=function(){Module.js_Log(valuesToString(Array.prototype.slice.call(arguments)))},gApis.LogError=function(){Module.js_LogError(valuesToString(Array.prototype.slice.call(arguments)))},gApis.LogStatus=function(){Module.js_LogStatus(valuesToString(Array.prototype.slice.call(arguments)))},gApis.LogProfit=function(profit){Module.js_LogProfit(profit,valuesToString(Array.prototype.slice.call(arguments),1))},gApis.LogReset=function(keep){Module.js_LogReset(keep=void 0===keep?0:keep)},gApis.EnableLog=function(flag){Module.js_EnableLog(flag=void 0===flag?!0:flag)},gApis.LogProfitReset=function(keep){Module.js_LogProfitReset(keep=void 0===keep?0:keep)},gApis.Date=function(s){return void 0===s&&(s=Module.js_UnixNano()/1e6),new __realDate(s)},gApis.Date.UTC=__realDate.UTC,gApis.Date.parse=__realDate.parse,gApis.Date.now=function(){return Module.js_UnixNano()/1e6},gApis._Cross=function(arr1,arr2){if(arr1.length!==arr2.length)throw"cross array length not equal";for(var n=0,i=arr1.length-1;0<=i&&"number"==typeof arr1[i]&&"number"==typeof arr2[i];i--)if(arr1[i]<arr2[i]){if(0<n)break;n--}else{if(!(arr1[i]>arr2[i]))break;if(n<0)break;n++}return n},gApis._N=function(v,precision){"number"!=typeof precision&&(precision=4);var v=parseFloat(v.toFixed(Math.max(10,precision+5))),s=toNonExponential(v).split(".");return!(0<=precision&&(s.length<2||s[1].length<=precision))&&((s=v<0)&&(v=-v),precision=Math.pow(10,precision),v=Math.floor(v*precision)/precision,s)&&0!=v?-v:v},gApis._C=function(method){for(var r;!(r=method.apply(this,Array.prototype.slice.call(arguments).slice(1)));)gApis.Sleep(__cRetryDelay);return r},gApis._CDelay=function(n){0<n&&(__cRetryDelay=n)},gApis.GetPid=function(){return 1},gApis.GetOS=function(){return"linux/amd64"},gApis.GetLastError=function(){return Module.js_GetLastError()},gApis.SetErrorFilter=function(s){},gApis.MD5=function(s){return Module.js_MD5(s)},gApis.UUID=function(){return Math.random().toString(36).substring(2,15)+Math.random().toString(36).substring(2,15)},gApis.GetCommand=function(){return""},gApis.GetMeta=function(){return""},gApis.Mail=function(){return!0},gApis.Mail_Go=function(){return{wait:function(){return!0}}},gApis.EventLoop=function(){gApis.LogError("sandbox not support EventLoop")},gApis.Dial=function(){gApis.LogError("sandbox not support Dial")},gApis.DBExec=function(){gApis.LogError("sandbox not support DBExec")},gApis.Encode=function(){gApis.LogError("sandbox not support Encode")},gApis.HttpQuery=function(url){return Module.js_HttpQuery(url)},gApis.HttpQuery_Go=function(url){return{wait:function(){return Module.js_HttpQuery(url)}}},gApis.JSONParse=function(s){return JSON.parse(s)},gApis.StrDecode=function(s){gApis.LogError("sandbox not support StrDecode")},gApis.IsVirtual=function(){return!0},gApis.EnableLogLocal=function(){},gApis.LogVacuum=function(){},gApis.Version=function(){return"3.6"},gApis._G=function(k,v){if(void 0===k)return 1;if(null==k)gApis.kvdb={};else{if(k=k.toLowerCase(),void 0===v)return void 0===gApis.kvdb[k]?null:gApis.kvdb[k];null==v?delete gApis.kvdb[k]:gApis.kvdb[k]=v}},gApis.Chart=function(js){var self={update:function(cfg){Module.js_Chart_New(utf8_encode(JSON.stringify(cfg)))},add:function(seriesIdx,d,replaceId){var arr=[];"number"!=typeof seriesIdx?arr=seriesIdx:(arr=[seriesIdx,d],void 0!==replaceId&&arr.push(replaceId)),Module.js_Chart_Add(utf8_encode(JSON.stringify(arr)))},reset:function(reverse){Module.js_Chart_Reset("number"!=typeof reverse?0:reverse)}};return self.update(js),self},gApis.KLineChart=function(options){(options=void 0===options?{}:options).__isCandle=!0;function newPlot(shape){return void 0===shape.overlay&&(shape.overlay=scope.overlay),"shape"!=shape.type&&"bgcolor"!=shape.type&&"barcolor"!=shape.type&&(shape.title&&!scope.runtime.titles[shape.title]||(shape.title="<"+(shape.title||"plot")+"_"+scope.runtime.count.toString()+">"),scope.runtime.count+=1,shape.title)&&(scope.runtime.titles[shape.title]=!0),shape}var scope={chart:gApis.Chart(options),bar:{},overlay:options.overlay||!1,preTime:0,runtime:{plots:[],signals:[],titles:{},count:0}};return scope.register=function(name,args,pfn){var dic={},names=[];args.forEach(function(s,i){Array.isArray(s)?(names.push(s[0]),dic[s[0]]={pos:i,val:s[1]}):(names.push(s),dic[s]={pos:i})}),scope[name]=function(){if(!(scope.bar.Time<scope.preTime)){var argv={};for(k in dic)void 0!==dic[k].val&&(argv[k]=dic[k].val);for(var i=0;i<arguments.length;i++)if(i==arguments.length-1&&"object"==typeof arguments[i])for(var k in arguments[i])void 0!==dic[k]&&(argv[k]=arguments[i][k]);else void 0!==dic[names[i]]&&(argv[names[i]]=arguments[i]);return pfn(argv)}}},scope.begin=function(bar){scope.bar=bar},scope.reset=function(remain){scope.chart.reset(remain),scope.preTime=0},scope.close=function(){var data;scope.bar.Time<scope.preTime||(data={timestamp:scope.bar.Time,open:scope.bar.Open,high:scope.bar.High,low:scope.bar.Low,close:scope.bar.Close,volume:scope.bar.Volume},0<scope.runtime.plots.length&&(data.runtime||(data.runtime={}),data.runtime.plots=scope.runtime.plots),0<scope.runtime.signals.length&&(data.runtime||(data.runtime={}),data.runtime.signals=scope.runtime.signals),scope.preTime==scope.bar.Time?scope.chart.add(0,data,-1):scope.chart.add(0,data),scope.preTime=scope.bar.Time,scope.runtime.plots=[],scope.runtime.signals=[],scope.runtime.titles={},scope.runtime.count=0)},scope.register("plot",[["series",NaN],"title","color","linewidth",["style","line"],"trackprice",["histbase",0],["offset",0],["join",!1],"editable","show_last",["display","all"],"overlay"],function(argv,idx){if(!isNaN(argv.series))return scope.runtime.plots.push(newPlot({series:argv.series,overlay:argv.overlay,title:argv.title,join:argv.join,color:argv.color,histbase:argv.histbase,type:argv.style,lineWidth:argv.linewidth,display:argv.display,offset:argv.offset})),scope.runtime.plots.length-1}),scope.register("barcolor",["color","offset","editable","show_last","title",["display","all"]],function(argv,idx){"string"==typeof argv.color&&"all"==argv.display&&scope.runtime.plots.push({type:"barcolor",title:argv.title,color:argv.color,offset:argv.offset,showLast:argv.show_last,display:argv.display})}),scope.register("plotarrow",["series","title",["colorup","#00ff00"],["colordown","#ff0000"],["offset",0],["minheight",5],["maxheight",100],["editable",!0],"show_last",["display","all"],"overlay"],function(argv){"all"!=argv.display||isNaN(argv.series)||scope.runtime.plots.push(newPlot({series:argv.series,title:argv.title,colorup:argv.colorup,colordown:argv.colordown,offset:argv.offset,minheight:argv.minheight,maxheight:argv.maxheight,showLast:argv.show_last,type:"shape",style:"arrow",display:argv.display,overlay:argv.overlay}))}),scope.register("hline",["price","title","color",["linestyle","dashed"],"linewidth","editable",["display","all"],"overlay"],function(argv){return scope.runtime.plots.push(newPlot({title:argv.title,price:argv.price,overlay:argv.overlay,color:argv.color,type:"hline",lineStyle:argv.linestyle,lineWidth:argv.linewidth,display:argv.display})),scope.runtime.plots.length-1}),scope.register("bgcolor",["color","offset","editable","show_last","title",["display","all"],"overlay"],function(argv){"string"==typeof argv.color&&"all"==argv.display&&scope.runtime.plots.push(newPlot({title:argv.title,overlay:argv.overlay,color:argv.color,type:"bgcolor",showLast:argv.show_last,offset:argv.offset}))}),scope.register("plotchar",["series","title","char",["location","abovebar"],"color","offset","text","textcolor","editable",["size","auto"],"show_last","display","overlay"],function(argv){"absolute"!=argv.location&&!argv.series||"absolute"==argv.location&&isNaN(argv.series)||!argv.char||scope.runtime.plots.push(newPlot({overlay:argv.overlay,type:"shape",style:"char",char:argv.char,series:argv.series,location:argv.location,color:argv.color,offset:argv.offset,size:argv.size,text:argv.text,textColor:argv.textcolor}))}),scope.register("plotshape",["series","title","style",["location","abovebar"],"color","offset","text","textcolor","editable",["size","auto"],"show_last","display","overlay"],function(argv){"absolute"!=argv.location&&!argv.series||"absolute"==argv.location&&isNaN(argv.series)||scope.runtime.plots.push(newPlot({type:"shape",overlay:argv.overlay,title:argv.title,size:argv.size,style:argv.style,series:argv.series,location:argv.location,color:argv.color,offset:argv.offset,text:argv.text,textColor:argv.textcolor}))}),scope.register("plotcandle",["open","high","low","close","title","color","wickcolor","editable","show_last","bordercolor",["display","all"],"overlay"],function(argv){"all"==argv.display&&scope.runtime.plots.push(newPlot({price:argv.high,open:argv.open,high:argv.high,low:argv.low,close:argv.close,title:argv.title,color:argv.color,wickColor:argv.wickcolor,showLast:argv.show_last,borderColor:argv.bordercolor,type:"candle",display:argv.display,overlay:argv.overlay}))}),scope.register("fill",["plot1","plot2","color","title","editable","show_last","fillgaps",["display","all"]],function(argv){var dst;0<=argv.plot1&&0<=argv.plot2&&argv.plot1<scope.runtime.plots.length&&argv.plot2<scope.runtime.plots.length&&"all"==argv.display&&void 0!==(dst=scope.runtime.plots[argv.plot1])&&(void 0===dst.fill&&(dst.fill=[]),dst.fill.push({value:scope.runtime.plots[argv.plot2].series,color:argv.color,showLast:argv.show_last}))}),scope.register("signal",["direction","price","qty","id"],function(argv){var task={id:argv.id||argv.direction,qty:argv.qty,avgPrice:argv.price};"buy"==argv.direction||"long"==argv.direction?task.direction="long":"sell"==argv.direction||"short"==argv.direction?task.direction="short":"closesell"==argv.direction||"closeshort"==argv.direction?(task.direction="close",task.closeDirection="short"):"closebuy"!=argv.direction&&"closelong"!=argv.direction||(task.direction="close",task.closeDirection="long"),(task.direction||task.closeDirection)&&scope.runtime.signals.push(task)}),scope},gApis.$={},gApis.ORDER_STATE_PENDING=0,gApis.ORDER_STATE_CLOSED=1,gApis.ORDER_STATE_CANCELED=2,gApis.ORDER_STATE_UNKNOWN=3,gApis.ORDER_TYPE_BUY=0,gApis.ORDER_TYPE_SELL=1,gApis.ORDER_OFFSET_OPEN=0,gApis.ORDER_OFFSET_CLOSE=1,gApis.PD_LONG=0,gApis.PD_SHORT=1,gApis.PD_LONG_YD=2,gApis.PD_SHORT_YD=3,gApis.LOG_TYPE_BUY=0,gApis.LOG_TYPE_SELL=1,gApis.LOG_TYPE_CANCEL=2,gApis.LOG_TYPE_ERROR=3,gApis.LOG_TYPE_PROFIT=4,gApis.LOG_TYPE_LOG=5,gApis.LOG_TYPE_RESTART=6,gApis.PERIOD_M1=60,gApis.PERIOD_M3=180,gApis.PERIOD_M5=300,gApis.PERIOD_M15=900,gApis.PERIOD_M30=1800,gApis.PERIOD_H1=3600,gApis.PERIOD_H2=7200,gApis.PERIOD_H4=14400,gApis.PERIOD_H6=21600,gApis.PERIOD_H12=43200,gApis.PERIOD_D1=86400,gApis.PERIOD_D3=259200,gApis.PERIOD_W1=604800,gApis.exchanges=exchanges,gApis.exchange=exchanges[0],gApis.talib=Module.talib(),gApis.TA=TAInstance(function(name){Module.js_LogTA(name,valuesToString(Array.prototype.slice.call(arguments),1,","))}),null),tpls=(gApis.__runtime__=function(obj){runtime=obj},task.Code),scope={};for(k in gApis)scope[k]=gApis[k];for(var endPos,rawTxt,mapLinesPos,fullSource="",sourceMapObj=[],i=0;i<tpls.length;i++){var tpl=tpls[i],argsLine="",argDic={},suffix=(tpl[1].forEach(function(pair){argsLine+="var "+pair[0]+" = "+JSON.stringify(pair[1])+";",argDic[pair[0]]=pair[1]}),argsLine+="var __arguments = "+JSON.stringify(argDic)+";","\n;if(typeof(init)==='function')init();"),fileName=tpl[2];if(i==tpls.length-1){if(fileName="__FILE__",void 0!==Module.__ret__){scope.__arguments=argDic,tpl[1].forEach(function(pair){scope[pair[0]]=pair[1]}),Module.__ret__.scope=scope,Module.__ret__.Join=Module.js_Join;continue}suffix+=";;main()\nif(typeof(onexit)==='function'){onexit()}"}sourceMapObj.push({baseLine:countLines(fullSource),codeLine:countLines(tpl[0]),fileName:fileName,mapLines:(fileName=tpl[0],mapLinesPos=rawTxt=endPos=void 0,-1!=(mapLinesPos=fileName.indexOf("//# sourceMappingObj="))?(rawTxt="",rawTxt=-1==(endPos=fileName.indexOf("\n",mapLinesPos+1))?fileName.slice(mapLinesPos+"//# sourceMappingObj=".length):fileName.slice(mapLinesPos+"//# sourceMappingObj=".length,endPos),JSON.parse(rawTxt)):[])}),fullSource+="(function(){"+argsLine+tpl[0]+suffix+"})();\n"}function dumpStack(err){let stacks=[],errMsg="";return void 0===err?err=new Error:(err.stack&&(console.log("\nStacktrace:"),console.log("===================="),console.log(err.stack)),errMsg=err.toString(),stacks.push(errMsg)),-1==errMsg.indexOf("line:")&&err.stack&&err.stack.split("\n").forEach(function(stackLine){var posSearch=stackLine.indexOf("(eval at evalScope ");if(0<posSearch){var pos=stackLine.indexOf("<anonymous>:",posSearch),posSearch=(0<pos&&(e=stackLine.indexOf(")",pos)),stackLine.substring(0,posSearch).split("\n")),stackLine=stackLine.substring(pos+"<anonymous>:".length,e).split(":");if(0<stackLine.length){for(var vLine=parseInt(stackLine[0]),fileName=null,mapLines=[],pIndex=0;pIndex<sourceMapObj.length;pIndex++)if(vLine>=sourceMapObj[pIndex].baseLine&&vLine<sourceMapObj[pIndex].baseLine+sourceMapObj[pIndex].codeLine){fileName=sourceMapObj[pIndex].fileName,mapLines=sourceMapObj[pIndex].mapLines,vLine-=sourceMapObj[pIndex].baseLine-1;break}if(fileName){for(var pItem=0;pItem<mapLines.length;pItem++)if(vLine>=mapLines[pItem][0]&&vLine<=mapLines[pItem][1]){vLine-=mapLines[pItem][2];break}stacks.push(posSearch[posSearch.length-1]+"("+fileName+":"+vLine.toString()+")")}}}}),stacks.join("\n")}Module.__dumpStack__=dumpStack;try{evalScope(scope,fullSource)}catch(err){"EOF"!=err&&Module.js_LogError(utf8_encode(dumpStack(err)))}try{void 0!==task.Step&&task.Step||Module.js_Close(JSON.stringify(runtime))}catch(e){}},Module.VTask=function(task,httpCache,httpGet,callBack,onEnd,retScope){void 0!==retScope&&(Module.__ret__=retScope),void 0!==httpCache&&httpCache||(httpCache={});var retScope=addFunction(function(a,b,c,d){var jsString,a=UTF8ToString(a),a=(void 0!==httpCache[a]?jsString=httpCache[a]:(jsString=httpGet(a),httpCache[a]=jsString),lengthBytesUTF8(jsString)+1),ptr=_malloc(a);return stringToUTF8(jsString,ptr,a+1),setValue(b,ptr,"i32"),setValue(c,a,"i32"),setValue(d,1,"i32"),0},"iiiii"),progressCallback=addFunction(function(st){callBack(JSON.parse(UTF8ToString(st)))},"vi"),dumpStack=addFunction(function(b,c,d){var lengthBytes,ptr,pfn=Module.__dumpStack__;return"function"!=typeof pfn?1:(pfn=pfn(),lengthBytes=lengthBytesUTF8(pfn)+1,ptr=_malloc(lengthBytes),stringToUTF8(pfn,ptr,lengthBytes+1),setValue(b,ptr,"i32"),setValue(c,lengthBytes,"i32"),setValue(d,1,"i32"),0)},"iiii");ccall("backtest","number",["string","string","pointer","pointer"],[JSON.stringify(task),null,retScope,progressCallback,dumpStack]),"function"==typeof onEnd&&onEnd()},moduleArg}})(),fs,os,crypto,httpGet,_session,toUnix,fmtTime,toHTML,pdObj,htmlResult,__m;function md5(text){return crypto.createHash("md5").update(text).digest("hex")}function fetchSync(url){var sab=new SharedArrayBuffer(10256),int32=new Int32Array(sab),url=new(require("worker_threads").Worker)(`
    const { workerData } = require('worker_threads');
    const int32 = new Int32Array(workerData);
    const uint8Array = new Uint8Array(workerData);
    
    function next(dataLen, hasMore) {
        Atomics.store(int32, 2, dataLen);
        Atomics.store(int32, 3, hasMore);
        Atomics.store(int32, 0, 1);
        Atomics.notify(int32, 0);
        // wait for main thread to consume the data
        Atomics.wait(int32, 1, 0);
        Atomics.store(int32, 1, 0);
        Atomics.notify(int32, 1);
    }
    
    function postBuffer(text) {
        if (text.length == 0) {
            next(0, 0);
            return;
        }
        const bufLen = 10240;
        let counter = 0;
        for (let i = 0; i < text.length; i++) {
            uint8Array[16 + counter] = text.charCodeAt(i);
            counter++;
            let hasMore = i == text.length - 1 ? 0 : 1;
            if (counter == bufLen || i == text.length - 1) {
                // notify
                next(counter, hasMore)
                counter = 0;
            }
        }
    }
    
    let url = '${url}';
    let finalData = '';
    require(url.split('://')[0]).get(url, function(response) {
        response.setEncoding('utf8');
        response.on('data', function(data) {
            finalData += data;
        });
        response.on('error', function(err) {
            postBuffer('')
        })
        response.on('end', function() {
            postBuffer(finalData)
        })
    });
    `,{workerData:sab,eval:!0}),uint8Array=new Uint8Array(sab);let str="";for(;;){Atomics.wait(int32,0,0),Atomics.store(int32,0,0);var totalLen=Atomics.load(int32,2),hasMore=Atomics.load(int32,3);for(let i=0;i<totalLen;i++)str+=String.fromCharCode(uint8Array[16+i]);if(Atomics.store(int32,1,1),Atomics.notify(int32,1),0==totalLen||0==hasMore)break}return url.terminate(),str}function notify(msgType,msg){var msg=Buffer.from(msg),h=Buffer.allocUnsafe(8);h.writeUInt32BE(msgType,0),h.writeUInt32BE(msg.length,4),_session.write(Buffer.concat([h,msg]))}"object"==typeof exports&&"object"==typeof module?module.exports=VBacktest:"function"==typeof define&&define.amd&&define([],()=>VBacktest),"undefined"!=typeof self&&void 0!==self.onmessage?self.onmessage=function(event){var event=event.data,task=event[0],httpCache=event[1],lastProgress=0,lastSummary="";VBacktest().VTask(task,httpCache,function(path){var r=XMLHttpRequest?new XMLHttpRequest:new ActiveXObject("Microsoft.XMLHTTP");return r.open("GET",path,!1),r.send(null),r.responseText},function(st){var nowProgress;void 0!==st.TaskStatus&&1==st.TaskStatus&&(st.httpCache=httpCache),1==st.TaskStatus?self.postMessage({ret:st}):(nowProgress=st.Progress.toFixed(1))==lastProgress&&lastSummary===st.statusStr||(lastProgress=nowProgress,lastSummary=st.statusStr,self.postMessage({ret:st}))})}:(fs=require("fs"),os=require("os"),crypto=require("crypto"),httpGet=function(url){var tmpCache=os.tmpdir()+"/cache",tmpCache=(fs.existsSync(tmpCache)||fs.mkdirSync(tmpCache),tmpCache+"/botvs_kline_"+md5(url));return fs.existsSync(tmpCache)?fs.readFileSync(tmpCache,"utf-8"):((url=fetchSync(url))&&-1!==url.indexOf(",")&&fs.writeFileSync(tmpCache,url,"utf-8"),url)},"undefined"!=typeof s?(_session=s,VBacktest().VTask(__cfg__,null,httpGet,function(st){notify(st.TaskStatus,JSON.stringify(st))},function(){try{_session.end()}catch(e){}})):(toUnix=function(s){var n=parseInt(new Date(s).getTime()/1e3);return-1==s.indexOf(" ")&&(n-=28800),n},fmtTime=function(date,fmt){void 0===fmt&&(fmt="yyyy-MM-dd hh:mm:ss");var y=date.getFullYear(),yy=(y%100).toString();1==yy.length&&(yy="0"+yy);var M=(M="0"+(date.getMonth()+1)).substring(M.length-2),d=(d="0"+date.getDate()).substring(d.length-2),h=(h="0"+date.getHours()).substring(h.length-2),m=(m="0"+date.getMinutes()).substring(m.length-2),date=(date="0"+date.getSeconds()).substring(date.length-2);return fmt.replace("yyyy",y).replace("MM",M).replace("dd",d).replace("hh",h).replace("mm",m).replace("ss",date).replace("yy",yy)},toHTML=function(data){var html="<table><tr><td>";for(i in data.columns)html+="<td>"+data.columns[i]+"</td>";html+="</tr>";for(var rows=[],i=0;i<data.rows.length;i++){for(var rowSkip="",row=(5<=i&&i<data.rows.length-5&&(i=data.rows.length-5,rowSkip="<tr><td>...</td>"),"<tr><td>"+data.index[i]+"</td>"),j=0;j<data.columns.length;j++)0<rowSkip.length&&(rowSkip+="<td>...</td>"),row+="<td>"+data.rows[i][j]+"</td>";0<rowSkip.length&&rows.push(rowSkip+"</tr>"),rows.push(row+"</tr>")}return html=(html+=rows.join("")+"</table>")+("<p>"+data.rows.length+" rows x "+data.columns.length+" columns<p>")},pdObj=function(data){var p=this;p.index=data.index,p.columns=data.columns,data.columns.forEach(function(c){p[c]=[]}),data.rows.forEach(function(row){row.forEach(function(f,idx){idx<data.columns.length&&p[data.columns[idx]].push(f)})}),p._toHtml=function(){return toHTML(data)}},__ctx.exports.get_bars=function(symbol,unit,start,end,count){void 0===count&&(count=1e3),"string"==typeof(unit=void 0===unit?"1d":unit)&&(ec=unit[unit.length-1],unit=parseInt(unit.slice(0,unit.length-1)),"d"==ec?unit*=1440:"h"==ec?unit*=60:"s"==ec&&(unit/=60));var key,ec=parseInt((new Date).getTime()/1e3),params=(void 0!==end&&(ec=toUnix(end)),void 0!==start?(ts_from=toUnix(start),void 0===end&&(ec=ts_from+100*unit*(count+10))):void 0===end?(ts_from=0,ts_end=0):ts_from=ec-100*unit*(count+10),{symbol:symbol,resolution:unit,from:ts_from,to:ec,size:count}),arr=[];for(key in params)arr.push(encodeURIComponent(key)+"="+encodeURIComponent(params[key]));for(var data=JSON.parse(httpGet("https://q.fmz.com/data/history?"+arr.join("&"))),rows=[],index=[],i=0;i<data.length;i++)index.push(fmtTime(new Date(1e3*data[i][0]))),rows.push(data[i].slice(1,data[i].length));return new pdObj({index:index,rows:rows,columns:["open","high","low","close","volume"]})},htmlResult=function(s){var s=JSON.parse(s),pnl=[],index=[];return s.Snapshots.forEach(function(ele){var acc=ele[1][0];pnl.push([acc.PnL,100*acc.Utilization]),index.push(fmtTime(new Date(ele[0])))}),columns=["PnL","Utilization(%)"],new pdObj({columns:columns,index:index,rows:pnl})},__m=VBacktest(),void 0===global.talib&&(global.talib=__m.talib(),global.TA=__m.TA,global.plot=function(data,layout){void 0!==data.index&&void 0!==data.columns&&(arr=[],data.columns.forEach(function(c){arr.push({name:c,x:data.index,y:data[c]})}),data=arr),Array.isArray(data)&&0<data.length&&"number"==typeof data[0]&&(obj={x:[],y:data},data.forEach(function(ele,idx){obj.x.push(idx+1)}),data=[obj]),void 0===layout&&(layout={});var arr,obj,timestamp=(new Date).getTime(),timestamp=["<div class='plotly-plot'>","<div id='notebook-plot-"+timestamp+"'></div>","<script>","function plot(){","Plotly.plot('notebook-plot-"+timestamp+"',",JSON.stringify(data),",",JSON.stringify(layout),",",JSON.stringify({displaylogo:!1}),");","}","if(window.Plotly){","plot();","}else{","var head = document.head || document.getElementsByTagName('head')[0];","var s = document.createElement('script');","s.charset='utf-8';","s.src = 'https://www.fmz.com/pkg/plotly-latest.min.js';","s.type = 'text/javascript';","s.async = false;","s.onreadystatechange = s.onload = plot;","head.appendChild(s);","}","<\/script>","</div>"].join("");$$.html(timestamp)}),__ctx.exports.VCtx=function(obj){function periodToMs(s,def){var tmp;return s.length<2||(tmp=parseInt(s.slice(0,s.length-1)),"d"==(s=s[s.length-1])?def=6e4*tmp*60*24:"m"==s?def=6e4*tmp:"h"==s&&(def=36e4*tmp)),def}function dicGet(obj,k,v){return void 0!==obj[k]?obj[k]:v}var k,period=periodToMs(obj.period,36e5),basePeriod=36e5,exchanges=("string"==typeof obj.basePeriod?basePeriod=periodToMs(obj.basePeriod,basePeriod):864e5==period?basePeriod=36e5:36e5==period?basePeriod=18e5:18e5==period?basePeriod=9e5:9e5==period?basePeriod=3e5:3e5==period&&(basePeriod=6e4),[]),feeDef={Huobi:[150,200],OKX:[150,200],Binance:[150,200],Futures_BitMEX:[8,10],Futures_OKX:[30,30],Futures_HuobiDM:[30,30],Futures_CTP:[25,25],Futures_XTP:[30,130]},isCNY=!1,period=(obj.exchanges.forEach(function(e){var arr=e.currency.toUpperCase().split("_"),fee=(1==arr.length&&arr.push(-1!=e.eid.indexOf("CTP")?"CNY":"USD"),[200,200]),v=e.fee,fee=void 0!==v?[1e3*v[0],1e3*v[1]]:feeDef[e.eid]||[200,200];cfg={Balance:dicGet(e,"balance",1e4),BaseCurrency:arr[0],BasePeriod:basePeriod,DepthDeep:5,DepthAmount:20,FaultTolerant:0,PreBarLen:1e3,FeeDenominator:5,FeeMaker:fee[0],FeeTaker:fee[1],FeeMin:dicGet(e,"feeMin",0),Id:e.eid,Label:e.eid,QuoteCurrency:arr[1],SlipPoint:0,Stocks:dicGet(e,"stocks",3)},"Futures_CTP"==e.eid||"Futures_XTP"==e.eid?(cfg.DepthDeep=1,isCNY=!0):"Futures_OKX"!=e.eid&&"Futures_HuobiDM"!=e.eid&&"Bitfinex"!=e.eid&&"Binance"!=e.eid&&("Futures_BitMEX"==e.eid?15!=(v=cfg.BasePeriod/6e4)&&30!=v||(cfg.BasePeriod=3e5):e.eid.indexOf("Futures")),exchanges.push(cfg)}),(options={DataServer:obj.dataServer||(isCNY?"https://q.youquant.com":"https://q.fmz.com"),MaxChartLogs:800,MaxProfitLogs:800,MaxRuntimeLogs:800,NetDelay:200,Period:period,RetFlags:189,UpdatePeriod:5e3}).TimeBegin=toUnix(obj.start),options.TimeEnd=toUnix(obj.end),86400),obj=options.TimeEnd-options.TimeBegin,ctx=(obj/3600<=2?period=60:obj/86400<=2?period=300:obj/86400<30&&(period=3600),options.SnapshotPeriod=1e3*period,options.RetFlags|=256,{});for(k in __m.VTask({Code:[["function main() {}",[],"main"]],Exchanges:exchanges,Options:options,Step:!0},null,httpGet,function(st){},function(){},ctx),ctx.scope)"Date"!=k&&(global[k]=ctx.scope[k]);var realJoin=ctx.Join;return ctx.Join=function(report){var r=realJoin();return report?htmlResult(r):r},ctx}));