"undefined"==typeof __ctx&&(__ctx={}),__ctx.INITIAL_MEMORY=335544320,"undefined"!=typeof module&&(__ctx.module=module),"undefined"!=typeof exports&&(__ctx.exports=exports),"undefined"==typeof module&&"undefined"==typeof exports||(module=void 0,exports=void 0,print=console.log),!function(n,r){var t,e;"object"==typeof exports&&"undefined"!=typeof module?module.exports=r():"function"==typeof define&&define.amd?define("underscore",r):(n="undefined"!=typeof globalThis?globalThis:n||self,t=n._,(e=n._=r()).noConflict=function(){return n._=t,e})}(this,function(){var n="1.13.7",r="object"==typeof self&&self.self===self&&self||"object"==typeof global&&global.global===global&&global||Function("return this")()||{},t=Array.prototype,e=Object.prototype,u="undefined"!=typeof Symbol?Symbol.prototype:null,i=t.push,o=t.slice,a=e.toString,f=e.hasOwnProperty,c="undefined"!=typeof ArrayBuffer,l="undefined"!=typeof DataView,s=Array.isArray,p=Object.keys,v=Object.create,h=c&&ArrayBuffer.isView,y=isNaN,d=isFinite,g=!{toString:null}.propertyIsEnumerable("toString"),b=["valueOf","isPrototypeOf","toString","propertyIsEnumerable","hasOwnProperty","toLocaleString"],m=Math.pow(2,53)-1;function j(n,r){return r=null==r?n.length-1:+r,function(){for(var t=Math.max(arguments.length-r,0),e=Array(t),u=0;u<t;u++)e[u]=arguments[u+r];switch(r){case 0:return n.call(this,e);case 1:return n.call(this,arguments[0],e);case 2:return n.call(this,arguments[0],arguments[1],e)}for(var i=Array(r+1),u=0;u<r;u++)i[u]=arguments[u];return i[r]=e,n.apply(this,i)}}function w(n){var r=typeof n;return"function"==r||"object"==r&&!!n}function _(n){return void 0===n}function A(n){return!0===n||!1===n||"[object Boolean]"===a.call(n)}function x(n){var r="[object "+n+"]";return function(n){return a.call(n)===r}}var S=x("String"),O=x("Number"),M=x("Date"),E=x("RegExp"),B=x("Error"),N=x("Symbol"),I=x("ArrayBuffer"),T=x("Function"),r=r.document&&r.document.childNodes,D=T="function"!=typeof/./&&"object"!=typeof Int8Array&&"function"!=typeof r?function(n){return"function"==typeof n||!1}:T,r=x("Object"),V=l&&(!/\[native code\]/.test(String(DataView))||r(new DataView(new ArrayBuffer(8)))),T="undefined"!=typeof Map&&r(new Map),l=x("DataView"),q=V?function(n){return null!=n&&D(n.getInt8)&&I(n.buffer)}:l,U=s||x("Array");function W(n,r){return null!=n&&f.call(n,r)}var z=x("Arguments"),L=(!function(){z(arguments)||(z=function(n){return W(n,"callee")})}(),z);function $(n){return O(n)&&y(n)}function C(n){return function(){return n}}function K(n){return function(r){r=n(r);return"number"==typeof r&&0<=r&&r<=m}}function J(n){return function(r){return null==r?void 0:r[n]}}var G=J("byteLength"),H=K(G),Q=/\[object ((I|Ui)nt(8|16|32)|Float(32|64)|Uint8Clamped|Big(I|Ui)nt64)Array\]/,X=c?function(n){return h?h(n)&&!q(n):H(n)&&Q.test(a.call(n))}:C(!1),Y=J("length");function Z(n,r){r=function(n){for(var r={},t=n.length,e=0;e<t;++e)r[n[e]]=!0;return{contains:function(n){return!0===r[n]},push:function(t){return r[t]=!0,n.push(t)}}}(r);var t=b.length,u=n.constructor,i=D(u)&&u.prototype||e,o="constructor";for(W(n,o)&&!r.contains(o)&&r.push(o);t--;)(o=b[t])in n&&n[o]!==i[o]&&!r.contains(o)&&r.push(o)}function nn(n){if(!w(n))return[];if(p)return p(n);var t,r=[];for(t in n)W(n,t)&&r.push(t);return g&&Z(n,r),r}function rn(n,r){var t=nn(r),e=t.length;if(null==n)return!e;for(var u=Object(n),i=0;i<e;i++){var o=t[i];if(r[o]!==u[o]||!(o in u))return!1}return!0}function tn(n){return n instanceof tn?n:this instanceof tn?void(this._wrapped=n):new tn(n)}function en(n){return new Uint8Array(n.buffer||n,n.byteOffset||0,G(n))}tn.VERSION=n,tn.prototype.valueOf=tn.prototype.toJSON=tn.prototype.value=function(){return this._wrapped},tn.prototype.toString=function(){return String(this._wrapped)};var un="[object DataView]";function an(n){if(!w(n))return[];var t,r=[];for(t in n)r.push(t);return g&&Z(n,r),r}function fn(n){var r=Y(n);return function(t){if(null==t)return!1;var e=an(t);if(Y(e))return!1;for(var u=0;u<r;u++)if(!D(t[n[u]]))return!1;return n!==hn||!D(t[cn])}}var cn="forEach",r=["clear","delete"],l=["get","has","set"],s=r.concat(cn,l),hn=r.concat(l),c=["add"].concat(r,cn,"has"),l=T?fn(s):x("Map"),r=T?fn(hn):x("WeakMap"),s=T?fn(c):x("Set"),T=x("WeakSet");function jn(n){for(var r=nn(n),t=r.length,e=Array(t),u=0;u<t;u++)e[u]=n[r[u]];return e}function wn(n){for(var r={},t=nn(n),e=0,u=t.length;e<u;e++)r[n[t[e]]]=t[e];return r}function _n(n){var t,r=[];for(t in n)D(n[t])&&r.push(t);return r.sort()}function An(n,r){return function(t){var e=arguments.length;if(r&&(t=Object(t)),!(e<2||null==t))for(var u=1;u<e;u++)for(var i=arguments[u],o=n(i),a=o.length,f=0;f<a;f++){var c=o[f];r&&void 0!==t[c]||(t[c]=i[c])}return t}}var xn=An(an),Sn=An(nn),On=An(an,!0);function Mn(n){var r;return w(n)?v?v(n):((r=function(){}).prototype=n,n=new r,r.prototype=null,n):{}}function En(n){return U(n)?n:[n]}function Bn(n){return tn.toPath(n)}function Nn(n,r){for(var t=r.length,e=0;e<t;e++){if(null==n)return;n=n[r[e]]}return t?n:void 0}function In(n,r,t){n=Nn(n,Bn(r));return _(n)?t:n}function Tn(n){return n}function kn(n){return n=Sn({},n),function(r){return rn(r,n)}}function Dn(n){return n=Bn(n),function(r){return Nn(r,n)}}function Rn(n,r,t){if(void 0===r)return n;switch(null==t?3:t){case 1:return function(t){return n.call(r,t)};case 3:return function(t,e,u){return n.call(r,t,e,u)};case 4:return function(t,e,u,i){return n.call(r,t,e,u,i)}}return function(){return n.apply(r,arguments)}}function Vn(n,r,t){return null==n?Tn:D(n)?Rn(n,r,t):(w(n)&&!U(n)?kn:Dn)(n)}function Fn(n,r){return Vn(n,r,1/0)}function Pn(n,r,t){return tn.iteratee!==Fn?tn.iteratee(n,r):Vn(n,r,t)}function qn(){}function Un(n,r){return null==r&&(r=n,n=0),n+Math.floor(Math.random()*(r-n+1))}tn.toPath=En,tn.iteratee=Fn;var Wn=Date.now||function(){return(new Date).getTime()};function zn(n){function r(r){return n[r]}var t="(?:"+nn(n).join("|")+")",e=RegExp(t),u=RegExp(t,"g");return function(n){return e.test(n=null==n?"":""+n)?n.replace(u,r):n}}var c={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","`":"&#x60;"},$n=zn(c),c=zn(wn(c)),Kn=tn.templateSettings={evaluate:/<%([\s\S]+?)%>/g,interpolate:/<%=([\s\S]+?)%>/g,escape:/<%-([\s\S]+?)%>/g},Jn=/(.)^/,Gn={"'":"'","\\":"\\","\r":"r","\n":"n","\u2028":"u2028","\u2029":"u2029"},Hn=/\\|'|\r|\n|\u2028|\u2029/g;function Qn(n){return"\\"+Gn[n]}var Xn=/^\s*(\w|\$)+\s*$/,Yn=0;function Zn(n,r,t,e,u){return e instanceof r?(e=Mn(n.prototype),w(r=n.apply(e,u))?r:e):n.apply(t,u)}var nr=j(function(n,r){function e(){for(var u=0,i=r.length,o=Array(i),a=0;a<i;a++)o[a]=r[a]===t?arguments[u++]:r[a];for(;u<arguments.length;)o.push(arguments[u++]);return Zn(n,e,this,this,o)}var t=nr.placeholder;return e}),rr=(nr.placeholder=tn,j(function(n,r,t){var e;if(D(n))return e=j(function(u){return Zn(n,e,r,this,t.concat(u))});throw new TypeError("Bind must be called on a function")})),tr=K(Y);function er(n,r,t,e){if(e=e||[],r||0===r){if(r<=0)return e.concat(n)}else r=1/0;for(var u=e.length,i=0,o=Y(n);i<o;i++){var a=n[i];if(tr(a)&&(U(a)||L(a)))if(1<r)er(a,r-1,t,e),u=e.length;else for(var f=0,c=a.length;f<c;)e[u++]=a[f++];else t||(e[u++]=a)}return e}var ur=j(function(n,r){var t=(r=er(r,!1,!1)).length;if(t<1)throw new Error("bindAll must be passed function names");for(;t--;){var e=r[t];n[e]=rr(n[e],n)}return n}),ir=j(function(n,r,t){return setTimeout(function(){return n.apply(null,t)},r)}),or=nr(ir,tn,1);function ar(n){return function(){return!n.apply(this,arguments)}}function fr(n,r){var t;return function(){return 0<--n&&(t=r.apply(this,arguments)),n<=1&&(r=null),t}}var cr=nr(fr,2);function lr(n,r,t){r=Pn(r,t);for(var e,u=nn(n),i=0,o=u.length;i<o;i++)if(r(n[e=u[i]],e,n))return e}function sr(n){return function(r,t,e){t=Pn(t,e);for(var u=Y(r),i=0<n?0:u-1;0<=i&&i<u;i+=n)if(t(r[i],i,r))return i;return-1}}var pr=sr(1),vr=sr(-1);function hr(n,r,t,e){for(var u=(t=Pn(t,e,1))(r),i=0,o=Y(n);i<o;){var a=Math.floor((i+o)/2);t(n[a])<u?i=a+1:o=a}return i}function yr(n,r,t){return function(e,u,i){var a=0,f=Y(e);if("number"==typeof i)0<n?a=0<=i?i:Math.max(i+f,a):f=0<=i?Math.min(i+1,f):i+f+1;else if(t&&i&&f)return e[i=t(e,u)]===u?i:-1;if(u!=u)return 0<=(i=r(o.call(e,a,f),$))?i+a:-1;for(i=0<n?a:f-1;0<=i&&i<f;i+=n)if(e[i]===u)return i;return-1}}var dr=yr(1,pr,hr),gr=yr(-1,vr);function br(n,r,t){r=(tr(n)?pr:lr)(n,r,t);if(void 0!==r&&-1!==r)return n[r]}function mr(n,r,t){if(r=Rn(r,t),tr(n))for(e=0,u=n.length;e<u;e++)r(n[e],e,n);else for(var i=nn(n),e=0,u=i.length;e<u;e++)r(n[i[e]],i[e],n);return n}function jr(n,r,t){r=Pn(r,t);for(var e=!tr(n)&&nn(n),u=(e||n).length,i=Array(u),o=0;o<u;o++){var a=e?e[o]:o;i[o]=r(n[a],a,n)}return i}function wr(n){function r(r,t,e,u){var i=!tr(r)&&nn(r),o=(i||r).length,a=0<n?0:o-1;for(u||(e=r[i?i[a]:a],a+=n);0<=a&&a<o;a+=n){var f=i?i[a]:a;e=t(e,r[f],f,r)}return e}return function(n,t,e,u){var i=3<=arguments.length;return r(n,Rn(t,u,4),e,i)}}var _r=wr(1),Ar=wr(-1);function xr(n,r,t){var e=[];return r=Pn(r,t),mr(n,function(n,t,u){r(n,t,u)&&e.push(n)}),e}function Sr(n,r,t){r=Pn(r,t);for(var e=!tr(n)&&nn(n),u=(e||n).length,i=0;i<u;i++){var o=e?e[i]:i;if(!r(n[o],o,n))return!1}return!0}function Or(n,r,t){r=Pn(r,t);for(var e=!tr(n)&&nn(n),u=(e||n).length,i=0;i<u;i++){var o=e?e[i]:i;if(r(n[o],o,n))return!0}return!1}function Mr(n,r,t,e){return tr(n)||(n=jn(n)),0<=dr(n,r,t="number"==typeof t&&!e?t:0)}var Er=j(function(n,r,t){var e,u;return D(r)?u=r:(r=Bn(r),e=r.slice(0,-1),r=r[r.length-1]),jr(n,function(n){var i=u;if(!i){if(null==(n=e&&e.length?Nn(n,e):n))return;i=n[r]}return null==i?i:i.apply(n,t)})});function Br(n,r){return jr(n,Dn(r))}function Nr(n,r,t){var e,u,i=-1/0,o=-1/0;if(null==r||"number"==typeof r&&"object"!=typeof n[0]&&null!=n)for(var a=0,f=(n=tr(n)?n:jn(n)).length;a<f;a++)null!=(e=n[a])&&i<e&&(i=e);else r=Pn(r,t),mr(n,function(n,t,e){((u=r(n,t,e))>o||u===-1/0&&i===-1/0)&&(i=n,o=u)});return i}var Ir=/[^\ud800-\udfff]|[\ud800-\udbff][\udc00-\udfff]|[\ud800-\udfff]/g;function Tr(n){return n?U(n)?o.call(n):S(n)?n.match(Ir):tr(n)?jr(n,Tn):jn(n):[]}function kr(n,r,t){if(null==r||t)return(n=tr(n)?n:jn(n))[Un(n.length-1)];var e=Tr(n),t=Y(e);r=Math.max(Math.min(r,t),0);for(var i=t-1,o=0;o<r;o++){var a=Un(o,i),f=e[o];e[o]=e[a],e[a]=f}return e.slice(0,r)}function Dr(n,r){return function(t,e,u){var i=r?[[],[]]:{};return e=Pn(e,u),mr(t,function(r,u){u=e(r,u,t);n(i,r,u)}),i}}var Rr=Dr(function(n,r,t){W(n,t)?n[t].push(r):n[t]=[r]}),Vr=Dr(function(n,r,t){n[t]=r}),Fr=Dr(function(n,r,t){W(n,t)?n[t]++:n[t]=1}),Pr=Dr(function(n,r,t){n[t?0:1].push(r)},!0);function qr(n,r,t){return r in t}var Ur=j(function(n,r){var t={},e=r[0];if(null!=n){D(e)?(1<r.length&&(e=Rn(e,r[1])),r=an(n)):(e=qr,r=er(r,!1,!1),n=Object(n));for(var u=0,i=r.length;u<i;u++){var o=r[u],a=n[o];e(a,o,n)&&(t[o]=a)}}return t}),Wr=j(function(n,r){var t,e=r[0];return D(e)?(e=ar(e),1<r.length&&(t=r[1])):(r=jr(er(r,!1,!1),String),e=function(n,t){return!Mr(r,t)}),Ur(n,e,t)});function zr(n,r,t){return o.call(n,0,Math.max(0,n.length-(null==r||t?1:r)))}function Lr(n,r,t){return null==n||n.length<1?null==r||t?void 0:[]:null==r||t?n[0]:zr(n,n.length-r)}function $r(n,r,t){return o.call(n,null==r||t?1:r)}var Cr=j(function(n,r){return r=er(r,!0,!0),xr(n,function(n){return!Mr(r,n)})}),Kr=j(function(n,r){return Cr(n,r)});function Jr(n,r,t,e){A(r)||(e=t,t=r,r=!1),null!=t&&(t=Pn(t,e));for(var u=[],i=[],o=0,a=Y(n);o<a;o++){var f=n[o],c=t?t(f,o,n):f;r&&!t?(o&&i===c||u.push(f),i=c):t?Mr(i,c)||(i.push(c),u.push(f)):Mr(u,f)||u.push(f)}return u}var Gr=j(function(n){return Jr(er(n,!0,!0))});function Hr(n){for(var r=n&&Nr(n,Y).length||0,t=Array(r),e=0;e<r;e++)t[e]=Br(n,e);return t}var Qr=j(Hr);function Xr(n,r){return n._chain?tn(r).chain():r}function Yr(n){return mr(_n(n),function(r){var t=tn[r]=n[r];tn.prototype[r]=function(){var n=[this._wrapped];return i.apply(n,arguments),Xr(this,t.apply(tn,n))}}),tn}mr(["pop","push","reverse","shift","sort","splice","unshift"],function(n){var r=t[n];tn.prototype[n]=function(){var t=this._wrapped;return null!=t&&(r.apply(t,arguments),"shift"!==n&&"splice"!==n||0!==t.length||delete t[0]),Xr(this,t)}}),mr(["concat","join","slice"],function(n){var r=t[n];tn.prototype[n]=function(){var n=this._wrapped;return Xr(this,n=null!=n?r.apply(n,arguments):n)}});n=Yr({__proto__:null,VERSION:n,restArguments:j,isObject:w,isNull:function(n){return null===n},isUndefined:_,isBoolean:A,isElement:function(n){return!(!n||1!==n.nodeType)},isString:S,isNumber:O,isDate:M,isRegExp:E,isError:B,isSymbol:N,isArrayBuffer:I,isDataView:q,isArray:U,isFunction:D,isArguments:L,isFinite:function(n){return!N(n)&&d(n)&&!isNaN(parseFloat(n))},isNaN:$,isTypedArray:X,isEmpty:function(n){var r;return null==n||("number"==typeof(r=Y(n))&&(U(n)||S(n)||L(n))?0===r:0===Y(nn(n)))},isMatch:rn,isEqual:function(n,r){return function on(n,r,t,e){var i;return n===r?0!==n||1/n==1/r:null!=n&&null!=r&&(n!=n?r!=r:("function"==(i=typeof n)||"object"==i||"object"==typeof r)&&function n(r,t,e,i){r instanceof tn&&(r=r._wrapped),t instanceof tn&&(t=t._wrapped);var o=a.call(r);if(o!==a.call(t))return!1;if(V&&"[object Object]"==o&&q(r)){if(!q(t))return!1;o=un}switch(o){case"[object RegExp]":case"[object String]":return""+r==""+t;case"[object Number]":return+r!=+r?+t!=+t:0==+r?1/+r==1/t:+r==+t;case"[object Date]":case"[object Boolean]":return+r==+t;case"[object Symbol]":return u.valueOf.call(r)===u.valueOf.call(t);case"[object ArrayBuffer]":case un:return n(en(r),en(t),e,i)}if(!(o="[object Array]"===o)&&X(r)){if(G(r)!==G(t))return!1;if(r.buffer===t.buffer&&r.byteOffset===t.byteOffset)return!0;o=!0}if(!o){if("object"!=typeof r||"object"!=typeof t)return!1;var c=r.constructor,l=t.constructor;if(c!==l&&!(D(c)&&c instanceof c&&D(l)&&l instanceof l)&&"constructor"in r&&"constructor"in t)return!1}i=i||[];for(var s=(e=e||[]).length;s--;)if(e[s]===r)return i[s]===t;if(e.push(r),i.push(t),o){if((s=r.length)!==t.length)return!1;for(;s--;)if(!on(r[s],t[s],e,i))return!1}else{var p,v=nn(r),s=v.length;if(nn(t).length!==s)return!1;for(;s--;)if(!W(t,p=v[s])||!on(r[p],t[p],e,i))return!1}return e.pop(),i.pop(),!0}(n,r,t,e))}(n,r)},isMap:l,isWeakMap:r,isSet:s,isWeakSet:T,keys:nn,allKeys:an,values:jn,pairs:function(n){for(var r=nn(n),t=r.length,e=Array(t),u=0;u<t;u++)e[u]=[r[u],n[r[u]]];return e},invert:wn,functions:_n,methods:_n,extend:xn,extendOwn:Sn,assign:Sn,defaults:On,create:function(n,r){n=Mn(n);return r&&Sn(n,r),n},clone:function(n){return w(n)?U(n)?n.slice():xn({},n):n},tap:function(n,r){return r(n),n},get:In,has:function(n,r){for(var t=(r=Bn(r)).length,e=0;e<t;e++){var u=r[e];if(!W(n,u))return!1;n=n[u]}return!!t},mapObject:function(n,r,t){r=Pn(r,t);for(var e=nn(n),u=e.length,i={},o=0;o<u;o++){var a=e[o];i[a]=r(n[a],a,n)}return i},identity:Tn,constant:C,noop:qn,toPath:En,property:Dn,propertyOf:function(n){return null==n?qn:function(r){return In(n,r)}},matcher:kn,matches:kn,times:function(n,r,t){var e=Array(Math.max(0,n));r=Rn(r,t,1);for(var u=0;u<n;u++)e[u]=r(u);return e},random:Un,now:Wn,escape:$n,unescape:c,templateSettings:Kn,template:function(n,r,t){r=On({},r=!r&&t?t:r,tn.templateSettings);var t=RegExp([(r.escape||Jn).source,(r.interpolate||Jn).source,(r.evaluate||Jn).source].join("|")+"|$","g"),u=0,i="__p+='";n.replace(t,function(r,t,e,o,a){return i+=n.slice(u,a).replace(Hn,Qn),u=a+r.length,t?i+="'+\n((__t=("+t+"))==null?'':_.escape(__t))+\n'":e?i+="'+\n((__t=("+e+"))==null?'':__t)+\n'":o&&(i+="';\n"+o+"\n__p+='"),r}),i+="';\n";var o,t=r.variable;if(t){if(!Xn.test(t))throw new Error("variable is not a bare identifier: "+t)}else i="with(obj||{}){\n"+i+"}\n",t="obj";i="var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};\n"+i+"return __p;\n";try{o=new Function(t,"_",i)}catch(n){throw n.source=i,n}function f(n){return o.call(this,n,tn)}return f.source="function("+t+"){\n"+i+"}",f},result:function(n,r,t){var e=(r=Bn(r)).length;if(!e)return D(t)?t.call(n):t;for(var u=0;u<e;u++){var i=null==n?void 0:n[r[u]];void 0===i&&(i=t,u=e),n=D(i)?i.call(n):i}return n},uniqueId:function(n){var r=++Yn+"";return n?n+r:r},chain:function(n){n=tn(n);return n._chain=!0,n},iteratee:Fn,partial:nr,bind:rr,bindAll:ur,memoize:function(n,r){function t(e){var u=t.cache,i=""+(r?r.apply(this,arguments):e);return W(u,i)||(u[i]=n.apply(this,arguments)),u[i]}return t.cache={},t},delay:ir,defer:or,throttle:function(n,r,t){function f(){a=!1===t.leading?0:Wn(),e=null,o=n.apply(u,i),e||(u=i=null)}function c(){var c=Wn(),l=(a||!1!==t.leading||(a=c),r-(c-a));return u=this,i=arguments,l<=0||r<l?(e&&(clearTimeout(e),e=null),a=c,o=n.apply(u,i),e||(u=i=null)):e||!1===t.trailing||(e=setTimeout(f,l)),o}var e,u,i,o,a=0;t=t||{};return c.cancel=function(){clearTimeout(e),a=0,e=u=i=null},c},debounce:function(n,r,t){function f(){var c=Wn()-u;c<r?e=setTimeout(f,r-c):(e=null,t||(o=n.apply(a,i)),e||(i=a=null))}var e,u,i,o,a,c=j(function(c){return a=this,i=c,u=Wn(),e||(e=setTimeout(f,r),t&&(o=n.apply(a,i))),o});return c.cancel=function(){clearTimeout(e),e=i=a=null},c},wrap:function(n,r){return nr(r,n)},negate:ar,compose:function(){var n=arguments,r=n.length-1;return function(){for(var t=r,e=n[r].apply(this,arguments);t--;)e=n[t].call(this,e);return e}},after:function(n,r){return function(){if(--n<1)return r.apply(this,arguments)}},before:fr,once:cr,findKey:lr,findIndex:pr,findLastIndex:vr,sortedIndex:hr,indexOf:dr,lastIndexOf:gr,find:br,detect:br,findWhere:function(n,r){return br(n,kn(r))},each:mr,forEach:mr,map:jr,collect:jr,reduce:_r,foldl:_r,inject:_r,reduceRight:Ar,foldr:Ar,filter:xr,select:xr,reject:function(n,r,t){return xr(n,ar(Pn(r)),t)},every:Sr,all:Sr,some:Or,any:Or,contains:Mr,includes:Mr,include:Mr,invoke:Er,pluck:Br,where:function(n,r){return xr(n,kn(r))},max:Nr,min:function(n,r,t){var e,u,i=1/0,o=1/0;if(null==r||"number"==typeof r&&"object"!=typeof n[0]&&null!=n)for(var a=0,f=(n=tr(n)?n:jn(n)).length;a<f;a++)null!=(e=n[a])&&e<i&&(i=e);else r=Pn(r,t),mr(n,function(n,t,e){((u=r(n,t,e))<o||u===1/0&&i===1/0)&&(i=n,o=u)});return i},shuffle:function(n){return kr(n,1/0)},sample:kr,sortBy:function(n,r,t){var e=0;return r=Pn(r,t),Br(jr(n,function(n,t,u){return{value:n,index:e++,criteria:r(n,t,u)}}).sort(function(n,r){var t=n.criteria,e=r.criteria;if(t!==e){if(e<t||void 0===t)return 1;if(t<e||void 0===e)return-1}return n.index-r.index}),"value")},groupBy:Rr,indexBy:Vr,countBy:Fr,partition:Pr,toArray:Tr,size:function(n){return null==n?0:(tr(n)?n:nn(n)).length},pick:Ur,omit:Wr,first:Lr,head:Lr,take:Lr,initial:zr,last:function(n,r,t){return null==n||n.length<1?null==r||t?void 0:[]:null==r||t?n[n.length-1]:$r(n,Math.max(0,n.length-r))},rest:$r,tail:$r,drop:$r,compact:function(n){return xr(n,Boolean)},flatten:function(n,r){return er(n,r,!1)},without:Kr,uniq:Jr,unique:Jr,union:Gr,intersection:function(n){for(var r=[],t=arguments.length,e=0,u=Y(n);e<u;e++){var i=n[e];if(!Mr(r,i)){for(var o=1;o<t&&Mr(arguments[o],i);o++);o===t&&r.push(i)}}return r},difference:Cr,unzip:Hr,transpose:Hr,zip:Qr,object:function(n,r){for(var t={},e=0,u=Y(n);e<u;e++)r?t[n[e]]=r[e]:t[n[e][0]]=n[e][1];return t},range:function(n,r,t){null==r&&(r=n||0,n=0),t=t||(r<n?-1:1);for(var e=Math.max(Math.ceil((r-n)/t),0),u=Array(e),i=0;i<e;i++,n+=t)u[i]=n;return u},chunk:function(n,r){if(null==r||r<1)return[];for(var t=[],e=0,u=n.length;e<u;)t.push(o.call(n,e,e+=r));return t},mixin:Yr,default:tn});return n._=n}),!function(globalScope){var Decimal,inexact,noConflict,quadrant,EXP_LIMIT=9e15,MAX_DIGITS=1e9,NUMERALS="0123456789abcdef",LN10="2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058",PI="3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789",DEFAULTS={precision:20,rounding:4,modulo:1,toExpNeg:-7,toExpPos:21,minE:-EXP_LIMIT,maxE:EXP_LIMIT,crypto:!1},external=!0,decimalError="[DecimalError] ",invalidArgument=decimalError+"Invalid argument: ",precisionLimitExceeded=decimalError+"Precision limit exceeded",cryptoUnavailable=decimalError+"crypto unavailable",tag="[object Decimal]",mathfloor=Math.floor,mathpow=Math.pow,isBinary=/^0b([01]+(\.[01]*)?|\.[01]+)(p[+-]?\d+)?$/i,isHex=/^0x([0-9a-f]+(\.[0-9a-f]*)?|\.[0-9a-f]+)(p[+-]?\d+)?$/i,isOctal=/^0o([0-7]+(\.[0-7]*)?|\.[0-7]+)(p[+-]?\d+)?$/i,isDecimal=/^(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,BASE=1e7,LOG_BASE=7,LN10_PRECISION=LN10.length-1,PI_PRECISION=PI.length-1,P={toStringTag:tag};function digitsToString(d){var i,k,ws,indexOfLastWord=d.length-1,str="",w=d[0];if(0<indexOfLastWord){for(str+=w,i=1;i<indexOfLastWord;i++)ws=d[i]+"",(k=LOG_BASE-ws.length)&&(str+=getZeroString(k)),str+=ws;w=d[i],(k=LOG_BASE-(ws=w+"").length)&&(str+=getZeroString(k))}else if(0===w)return"0";for(;w%10==0;)w/=10;return str+w}function checkInt32(i,min,max){if(i!==~~i||i<min||max<i)throw Error(invalidArgument+i)}function checkRoundingDigits(d,i,rm,repeating){for(var di,rd,k=d[0];10<=k;k/=10)--i;return--i<0?(i+=LOG_BASE,di=0):(di=Math.ceil((i+1)/LOG_BASE),i%=LOG_BASE),k=mathpow(10,LOG_BASE-i),rd=d[di]%k|0,null==repeating?i<3?(0==i?rd=rd/100|0:1==i&&(rd=rd/10|0),rm<4&&99999==rd||3<rm&&49999==rd||5e4==rd||0==rd):(rm<4&&rd+1==k||3<rm&&rd+1==k/2)&&(d[di+1]/k/100|0)==mathpow(10,i-2)-1||(rd==k/2||0==rd)&&0==(d[di+1]/k/100|0):i<4?(0==i?rd=rd/1e3|0:1==i?rd=rd/100|0:2==i&&(rd=rd/10|0),(repeating||rm<4)&&9999==rd||!repeating&&3<rm&&4999==rd):((repeating||rm<4)&&rd+1==k||!repeating&&3<rm&&rd+1==k/2)&&(d[di+1]/k/1e3|0)==mathpow(10,i-3)-1}function convertBase(str,baseIn,baseOut){for(var j,arrL,arr=[0],i=0,strL=str.length;i<strL;){for(arrL=arr.length;arrL--;)arr[arrL]*=baseIn;for(arr[0]+=NUMERALS.indexOf(str.charAt(i++)),j=0;j<arr.length;j++)baseOut-1<arr[j]&&(void 0===arr[j+1]&&(arr[j+1]=0),arr[j+1]+=arr[j]/baseOut|0,arr[j]%=baseOut)}return arr.reverse()}P.absoluteValue=P.abs=function(){var x=new this.constructor(this);return x.s<0&&(x.s=1),finalise(x)},P.ceil=function(){return finalise(new this.constructor(this),this.e+1,2)},P.clampedTo=P.clamp=function(min,max){var x=this,Ctor=x.constructor;if(min=new Ctor(min),max=new Ctor(max),!min.s||!max.s)return new Ctor(NaN);if(min.gt(max))throw Error(invalidArgument+max);return x.cmp(min)<0?min:0<x.cmp(max)?max:new Ctor(x)},P.comparedTo=P.cmp=function(y){var i,j,x=this,xd=x.d,yd=(y=new x.constructor(y)).d,xs=x.s,ys=y.s;if(!xd||!yd)return xs&&ys?xs!==ys?xs:xd===yd?0:!xd^xs<0?1:-1:NaN;if(!xd[0]||!yd[0])return xd[0]?xs:yd[0]?-ys:0;if(xs!==ys)return xs;if(x.e!==y.e)return x.e>y.e^xs<0?1:-1;for(i=0,j=(ys=xd.length)<(x=yd.length)?ys:x;i<j;++i)if(xd[i]!==yd[i])return xd[i]>yd[i]^xs<0?1:-1;return ys===x?0:x<ys^xs<0?1:-1},P.cosine=P.cos=function(){var pr,rm,x=this,Ctor=x.constructor;return x.d?x.d[0]?(pr=Ctor.precision,rm=Ctor.rounding,Ctor.precision=pr+Math.max(x.e,x.sd())+LOG_BASE,Ctor.rounding=1,x=function(Ctor,x){var k,len;if(!x.isZero()){len=x.d.length,len=len<32?(1/tinyPow(4,k=Math.ceil(len/3))).toString():(k=16,"2.3283064365386962890625e-10"),Ctor.precision+=k,x=taylorSeries(Ctor,1,x.times(len),new Ctor(1));for(var i=k;i--;){var cos2x=x.times(x);x=cos2x.times(cos2x).minus(cos2x).times(8).plus(1)}Ctor.precision-=k}return x}(Ctor,toLessThanHalfPi(Ctor,x)),Ctor.precision=pr,Ctor.rounding=rm,finalise(2==quadrant||3==quadrant?x.neg():x,pr,rm,!0)):new Ctor(1):new Ctor(NaN)},P.cubeRoot=P.cbrt=function(){var e,m,n,r,rep,s,sd,t,t3,t3plusx,x=this,Ctor=x.constructor;if(!x.isFinite()||x.isZero())return new Ctor(x);for(external=!1,(s=x.s*mathpow(x.s*x,1/3))&&Math.abs(s)!=1/0?r=new Ctor(s.toString()):(n=digitsToString(x.d),(s=((e=x.e)-n.length+1)%3)&&(n+=1==s||-2==s?"0":"00"),s=mathpow(n,1/3),e=mathfloor((e+1)/3)-(e%3==(e<0?-1:2)),(r=new Ctor(n=s==1/0?"5e"+e:(n=s.toExponential()).slice(0,n.indexOf("e")+1)+e)).s=x.s),sd=(e=Ctor.precision)+3;;)if(t3plusx=(t3=(t=r).times(t).times(t)).plus(x),r=divide(t3plusx.plus(x).times(t),t3plusx.plus(t3),sd+2,1),digitsToString(t.d).slice(0,sd)===(n=digitsToString(r.d)).slice(0,sd)){if("9999"!=(n=n.slice(sd-3,sd+1))&&(rep||"4999"!=n)){+n&&(+n.slice(1)||"5"!=n.charAt(0))||(finalise(r,e+1,1),m=!r.times(r).times(r).eq(x));break}if(!rep&&(finalise(t,e+1,0),t.times(t).times(t).eq(x))){r=t;break}sd+=4,rep=1}return external=!0,finalise(r,e,Ctor.rounding,m)},P.decimalPlaces=P.dp=function(){var w,d=this.d,n=NaN;if(d){if(n=((w=d.length-1)-mathfloor(this.e/LOG_BASE))*LOG_BASE,w=d[w])for(;w%10==0;w/=10)n--;n<0&&(n=0)}return n},P.dividedBy=P.div=function(y){return divide(this,new this.constructor(y))},P.dividedToIntegerBy=P.divToInt=function(y){var Ctor=this.constructor;return finalise(divide(this,new Ctor(y),0,1,1),Ctor.precision,Ctor.rounding)},P.equals=P.eq=function(y){return 0===this.cmp(y)},P.floor=function(){return finalise(new this.constructor(this),this.e+1,3)},P.greaterThan=P.gt=function(y){return 0<this.cmp(y)},P.greaterThanOrEqualTo=P.gte=function(y){y=this.cmp(y);return 1==y||0===y},P.hyperbolicCosine=P.cosh=function(){var k,pr,rm,Ctor=(x=this).constructor,one=new Ctor(1);if(!x.isFinite())return new Ctor(x.s?1/0:NaN);if(x.isZero())return one;pr=Ctor.precision,rm=Ctor.rounding,Ctor.precision=pr+Math.max(x.e,x.sd())+4,Ctor.rounding=1;for(var cosh2_x,len=(len=x.d.length)<32?(1/tinyPow(4,k=Math.ceil(len/3))).toString():(k=16,"2.3283064365386962890625e-10"),x=taylorSeries(Ctor,1,x.times(len),new Ctor(1),!0),i=k,d8=new Ctor(8);i--;)cosh2_x=x.times(x),x=one.minus(cosh2_x.times(d8.minus(cosh2_x.times(d8))));return finalise(x,Ctor.precision=pr,Ctor.rounding=rm,!0)},P.hyperbolicSine=P.sinh=function(){var pr,rm,len,Ctor=(x=this).constructor;if(!x.isFinite()||x.isZero())return new Ctor(x);if(pr=Ctor.precision,rm=Ctor.rounding,Ctor.precision=pr+Math.max(x.e,x.sd())+4,Ctor.rounding=1,(len=x.d.length)<3)x=taylorSeries(Ctor,2,x,x,!0);else for(var sinh2_x,k=1.4*Math.sqrt(len),x=taylorSeries(Ctor,2,x=x.times(1/tinyPow(5,k=16<k?16:0|k)),x,!0),d5=new Ctor(5),d16=new Ctor(16),d20=new Ctor(20);k--;)sinh2_x=x.times(x),x=x.times(d5.plus(sinh2_x.times(d16.times(sinh2_x).plus(d20))));return finalise(x,Ctor.precision=pr,Ctor.rounding=rm,!0)},P.hyperbolicTangent=P.tanh=function(){var pr,rm,x=this,Ctor=x.constructor;return x.isFinite()?x.isZero()?new Ctor(x):(pr=Ctor.precision,rm=Ctor.rounding,Ctor.precision=pr+7,Ctor.rounding=1,divide(x.sinh(),x.cosh(),Ctor.precision=pr,Ctor.rounding=rm)):new Ctor(x.s)},P.inverseCosine=P.acos=function(){var x=this,Ctor=x.constructor,k=x.abs().cmp(1),pr=Ctor.precision,rm=Ctor.rounding;return-1!==k?0===k?x.isNeg()?getPi(Ctor,pr,rm):new Ctor(0):new Ctor(NaN):x.isZero()?getPi(Ctor,pr+4,rm).times(.5):(Ctor.precision=pr+6,Ctor.rounding=1,x=x.asin(),k=getPi(Ctor,pr+4,rm).times(.5),Ctor.precision=pr,Ctor.rounding=rm,k.minus(x))},P.inverseHyperbolicCosine=P.acosh=function(){var pr,rm,x=this,Ctor=x.constructor;return x.lte(1)?new Ctor(x.eq(1)?0:NaN):x.isFinite()?(pr=Ctor.precision,rm=Ctor.rounding,Ctor.precision=pr+Math.max(Math.abs(x.e),x.sd())+4,Ctor.rounding=1,external=!1,x=x.times(x).minus(1).sqrt().plus(x),external=!0,Ctor.precision=pr,Ctor.rounding=rm,x.ln()):new Ctor(x)},P.inverseHyperbolicSine=P.asinh=function(){var pr,rm,x=this,Ctor=x.constructor;return!x.isFinite()||x.isZero()?new Ctor(x):(pr=Ctor.precision,rm=Ctor.rounding,Ctor.precision=pr+2*Math.max(Math.abs(x.e),x.sd())+6,Ctor.rounding=1,external=!1,x=x.times(x).plus(1).sqrt().plus(x),external=!0,Ctor.precision=pr,Ctor.rounding=rm,x.ln())},P.inverseHyperbolicTangent=P.atanh=function(){var pr,rm,xsd,x=this,Ctor=x.constructor;return x.isFinite()?0<=x.e?new Ctor(x.abs().eq(1)?x.s/0:x.isZero()?x:NaN):(pr=Ctor.precision,rm=Ctor.rounding,xsd=x.sd(),Math.max(xsd,pr)<2*-x.e-1?finalise(new Ctor(x),pr,rm,!0):(Ctor.precision=xsd=xsd-x.e,x=divide(x.plus(1),new Ctor(1).minus(x),xsd+pr,1),Ctor.precision=pr+4,Ctor.rounding=1,x=x.ln(),Ctor.precision=pr,Ctor.rounding=rm,x.times(.5))):new Ctor(NaN)},P.inverseSine=P.asin=function(){var k,pr,rm,x=this,Ctor=x.constructor;return x.isZero()?new Ctor(x):(k=x.abs().cmp(1),pr=Ctor.precision,rm=Ctor.rounding,-1!==k?0===k?((k=getPi(Ctor,pr+4,rm).times(.5)).s=x.s,k):new Ctor(NaN):(Ctor.precision=pr+6,Ctor.rounding=1,x=x.div(new Ctor(1).minus(x.times(x)).sqrt().plus(1)).atan(),Ctor.precision=pr,Ctor.rounding=rm,x.times(2)))},P.inverseTangent=P.atan=function(){var i,j,k,n,px,t,r,wpr,x2,x=this,Ctor=x.constructor,pr=Ctor.precision,rm=Ctor.rounding;if(x.isFinite()){if(x.isZero())return new Ctor(x);if(x.abs().eq(1)&&pr+4<=PI_PRECISION)return(r=getPi(Ctor,pr+4,rm).times(.25)).s=x.s,r}else{if(!x.s)return new Ctor(NaN);if(pr+4<=PI_PRECISION)return(r=getPi(Ctor,pr+4,rm).times(.5)).s=x.s,r}for(Ctor.precision=wpr=pr+10,Ctor.rounding=1,i=k=Math.min(28,wpr/LOG_BASE+2|0);i;--i)x=x.div(x.times(x).plus(1).sqrt().plus(1));for(external=!1,j=Math.ceil(wpr/LOG_BASE),n=1,x2=x.times(x),r=new Ctor(x),px=x;-1!==i;)if(px=px.times(x2),t=r.minus(px.div(n+=2)),px=px.times(x2),void 0!==(r=t.plus(px.div(n+=2))).d[j])for(i=j;r.d[i]===t.d[i]&&i--;);return k&&(r=r.times(2<<k-1)),external=!0,finalise(r,Ctor.precision=pr,Ctor.rounding=rm,!0)},P.isFinite=function(){return!!this.d},P.isInteger=P.isInt=function(){return!!this.d&&mathfloor(this.e/LOG_BASE)>this.d.length-2},P.isNaN=function(){return!this.s},P.isNegative=P.isNeg=function(){return this.s<0},P.isPositive=P.isPos=function(){return 0<this.s},P.isZero=function(){return!!this.d&&0===this.d[0]},P.lessThan=P.lt=function(y){return this.cmp(y)<0},P.lessThanOrEqualTo=P.lte=function(y){return this.cmp(y)<1},P.logarithm=P.log=function(base){var isBase10,d,denominator,k,inf,num,sd,r,Ctor=this.constructor,pr=Ctor.precision,rm=Ctor.rounding;if(null==base)base=new Ctor(10),isBase10=!0;else{if(d=(base=new Ctor(base)).d,base.s<0||!d||!d[0]||base.eq(1))return new Ctor(NaN);isBase10=base.eq(10)}if(d=this.d,this.s<0||!d||!d[0]||this.eq(1))return new Ctor(d&&!d[0]?-1/0:1!=this.s?NaN:d?0:1/0);if(isBase10)if(1<d.length)inf=!0;else{for(k=d[0];k%10==0;)k/=10;inf=1!==k}if(external=!1,num=naturalLogarithm(this,sd=pr+5),denominator=isBase10?getLn10(Ctor,sd+10):naturalLogarithm(base,sd),checkRoundingDigits((r=divide(num,denominator,sd,1)).d,k=pr,rm))do{if(num=naturalLogarithm(this,sd+=10),denominator=isBase10?getLn10(Ctor,sd+10):naturalLogarithm(base,sd),r=divide(num,denominator,sd,1),!inf){+digitsToString(r.d).slice(k+1,k+15)+1==1e14&&(r=finalise(r,pr+1,0));break}}while(checkRoundingDigits(r.d,k+=10,rm));return external=!0,finalise(r,pr,rm)},P.minus=P.sub=function(y){var d,e,i,j,k,len,pr,rm,xd,xe,xLTy,yd,x=this,Ctor=x.constructor;if(y=new Ctor(y),!x.d||!y.d)return x.s&&y.s?x.d?y.s=-y.s:y=new Ctor(y.d||x.s!==y.s?x:NaN):y=new Ctor(NaN),y;if(x.s!=y.s)return y.s=-y.s,x.plus(y);if(xd=x.d,yd=y.d,pr=Ctor.precision,rm=Ctor.rounding,xd[0]&&yd[0]){if(e=mathfloor(y.e/LOG_BASE),xe=mathfloor(x.e/LOG_BASE),xd=xd.slice(),k=xe-e){for(len=((xLTy=k<0)?(d=xd,k=-k,yd):(d=yd,e=xe,xd)).length,(i=Math.max(Math.ceil(pr/LOG_BASE),len)+2)<k&&(k=i,d.length=1),d.reverse(),i=k;i--;)d.push(0);d.reverse()}else{for((xLTy=(i=xd.length)<(len=yd.length))&&(len=i),i=0;i<len;i++)if(xd[i]!=yd[i]){xLTy=xd[i]<yd[i];break}k=0}for(xLTy&&(d=xd,xd=yd,yd=d,y.s=-y.s),len=xd.length,i=yd.length-len;0<i;--i)xd[len++]=0;for(i=yd.length;k<i;){if(xd[--i]<yd[i]){for(j=i;j&&0===xd[--j];)xd[j]=BASE-1;--xd[j],xd[i]+=BASE}xd[i]-=yd[i]}for(;0===xd[--len];)xd.pop();for(;0===xd[0];xd.shift())--e;if(!xd[0])return new Ctor(3===rm?-0:0);y.d=xd,y.e=getBase10Exponent(xd,e)}else if(yd[0])y.s=-y.s;else{if(!xd[0])return new Ctor(3===rm?-0:0);y=new Ctor(x)}return external?finalise(y,pr,rm):y},P.modulo=P.mod=function(y){var q,x=this,Ctor=x.constructor;return y=new Ctor(y),!x.d||!y.s||y.d&&!y.d[0]?new Ctor(NaN):!y.d||x.d&&!x.d[0]?finalise(new Ctor(x),Ctor.precision,Ctor.rounding):(external=!1,9==Ctor.modulo?(q=divide(x,y.abs(),0,3,1)).s*=y.s:q=divide(x,y,0,Ctor.modulo,1),q=q.times(y),external=!0,x.minus(q))},P.naturalExponential=P.exp=function(){return naturalExponential(this)},P.naturalLogarithm=P.ln=function(){return naturalLogarithm(this)},P.negated=P.neg=function(){var x=new this.constructor(this);return x.s=-x.s,finalise(x)},P.plus=P.add=function(y){var carry,d,e,i,k,len,pr,rm,xd,yd,x=this,Ctor=x.constructor;if(y=new Ctor(y),!x.d||!y.d)return x.s&&y.s?x.d||(y=new Ctor(y.d||x.s===y.s?x:NaN)):y=new Ctor(NaN),y;if(x.s!=y.s)return y.s=-y.s,x.minus(y);if(xd=x.d,yd=y.d,pr=Ctor.precision,rm=Ctor.rounding,xd[0]&&yd[0]){if(k=mathfloor(x.e/LOG_BASE),e=mathfloor(y.e/LOG_BASE),xd=xd.slice(),i=k-e){for((len=(len=(i<0?(d=xd,i=-i,yd):(d=yd,e=k,xd)).length)<(k=Math.ceil(pr/LOG_BASE))?k+1:len+1)<i&&(i=len,d.length=1),d.reverse();i--;)d.push(0);d.reverse()}for((len=xd.length)-(i=yd.length)<0&&(i=len,d=yd,yd=xd,xd=d),carry=0;i;)carry=(xd[--i]=xd[i]+yd[i]+carry)/BASE|0,xd[i]%=BASE;for(carry&&(xd.unshift(carry),++e),len=xd.length;0==xd[--len];)xd.pop();y.d=xd,y.e=getBase10Exponent(xd,e)}else yd[0]||(y=new Ctor(x));return external?finalise(y,pr,rm):y},P.precision=P.sd=function(z){var k,x=this;if(void 0!==z&&z!==!!z&&1!==z&&0!==z)throw Error(invalidArgument+z);return x.d?(k=getPrecision(x.d),z&&x.e+1>k&&(k=x.e+1)):k=NaN,k},P.round=function(){var x=this,Ctor=x.constructor;return finalise(new Ctor(x),x.e+1,Ctor.rounding)},P.sine=P.sin=function(){var pr,rm,x=this,Ctor=x.constructor;return x.isFinite()?x.isZero()?new Ctor(x):(pr=Ctor.precision,rm=Ctor.rounding,Ctor.precision=pr+Math.max(x.e,x.sd())+LOG_BASE,Ctor.rounding=1,x=function(Ctor,x){var k,len=x.d.length;if(len<3)return x.isZero()?x:taylorSeries(Ctor,2,x,x);k=16<(k=1.4*Math.sqrt(len))?16:0|k,x=x.times(1/tinyPow(5,k)),x=taylorSeries(Ctor,2,x,x);for(var sin2_x,d5=new Ctor(5),d16=new Ctor(16),d20=new Ctor(20);k--;)sin2_x=x.times(x),x=x.times(d5.plus(sin2_x.times(d16.times(sin2_x).minus(d20))));return x}(Ctor,toLessThanHalfPi(Ctor,x)),Ctor.precision=pr,Ctor.rounding=rm,finalise(2<quadrant?x.neg():x,pr,rm,!0)):new Ctor(NaN)},P.squareRoot=P.sqrt=function(){var m,n,sd,r,rep,t,x=this,d=x.d,e=x.e,s=x.s,Ctor=x.constructor;if(1!==s||!d||!d[0])return new Ctor(!s||s<0&&(!d||d[0])?NaN:d?x:1/0);for(external=!1,r=0==(s=Math.sqrt(+x))||s==1/0?(((n=digitsToString(d)).length+e)%2==0&&(n+="0"),s=Math.sqrt(n),e=mathfloor((e+1)/2)-(e<0||e%2),new Ctor(n=s==1/0?"5e"+e:(n=s.toExponential()).slice(0,n.indexOf("e")+1)+e)):new Ctor(s.toString()),sd=(e=Ctor.precision)+3;;)if(r=(t=r).plus(divide(x,t,sd+2,1)).times(.5),digitsToString(t.d).slice(0,sd)===(n=digitsToString(r.d)).slice(0,sd)){if("9999"!=(n=n.slice(sd-3,sd+1))&&(rep||"4999"!=n)){+n&&(+n.slice(1)||"5"!=n.charAt(0))||(finalise(r,e+1,1),m=!r.times(r).eq(x));break}if(!rep&&(finalise(t,e+1,0),t.times(t).eq(x))){r=t;break}sd+=4,rep=1}return external=!0,finalise(r,e,Ctor.rounding,m)},P.tangent=P.tan=function(){var pr,rm,x=this,Ctor=x.constructor;return x.isFinite()?x.isZero()?new Ctor(x):(pr=Ctor.precision,rm=Ctor.rounding,Ctor.precision=pr+10,Ctor.rounding=1,(x=x.sin()).s=1,x=divide(x,new Ctor(1).minus(x.times(x)).sqrt(),pr+10,0),Ctor.precision=pr,Ctor.rounding=rm,finalise(2==quadrant||4==quadrant?x.neg():x,pr,rm,!0)):new Ctor(NaN)},P.times=P.mul=function(y){var carry,i,k,r,rL,t,xdL,ydL,x=this,Ctor=x.constructor,xd=x.d,yd=(y=new Ctor(y)).d;if(y.s*=x.s,!(xd&&xd[0]&&yd&&yd[0]))return new Ctor(!y.s||xd&&!xd[0]&&!yd||yd&&!yd[0]&&!xd?NaN:xd&&yd?0*y.s:y.s/0);for(x=mathfloor(x.e/LOG_BASE)+mathfloor(y.e/LOG_BASE),(xdL=xd.length)<(ydL=yd.length)&&(r=xd,xd=yd,yd=r,rL=xdL,xdL=ydL,ydL=rL),r=[],i=rL=xdL+ydL;i--;)r.push(0);for(i=ydL;0<=--i;){for(carry=0,k=xdL+i;i<k;)t=r[k]+yd[i]*xd[k-i-1]+carry,r[k--]=t%BASE|0,carry=t/BASE|0;r[k]=(r[k]+carry)%BASE|0}for(;!r[--rL];)r.pop();return carry?++x:r.shift(),y.d=r,y.e=getBase10Exponent(r,x),external?finalise(y,Ctor.precision,Ctor.rounding):y},P.toBinary=function(sd,rm){return toStringBinary(this,2,sd,rm)},P.toDecimalPlaces=P.toDP=function(dp,rm){var Ctor=this.constructor,x=new Ctor(this);return void 0===dp?x:(checkInt32(dp,0,MAX_DIGITS),void 0===rm?rm=Ctor.rounding:checkInt32(rm,0,8),finalise(x,dp+x.e+1,rm))},P.toExponential=function(dp,rm){var x=this,Ctor=x.constructor,Ctor=void 0===dp?finiteToString(x,!0):(checkInt32(dp,0,MAX_DIGITS),void 0===rm?rm=Ctor.rounding:checkInt32(rm,0,8),finiteToString(x=finalise(new Ctor(x),dp+1,rm),!0,dp+1));return x.isNeg()&&!x.isZero()?"-"+Ctor:Ctor},P.toFixed=function(dp,rm){var x=this,Ctor=x.constructor,rm=void 0===dp?finiteToString(x):(checkInt32(dp,0,MAX_DIGITS),void 0===rm?rm=Ctor.rounding:checkInt32(rm,0,8),finiteToString(Ctor=finalise(new Ctor(x),dp+x.e+1,rm),!1,dp+Ctor.e+1));return x.isNeg()&&!x.isZero()?"-"+rm:rm},P.toFraction=function(maxD){var d,d0,d1,d2,e,n,n0,n1,k,q,x=this,xd=x.d,Ctor=x.constructor;if(!xd)return new Ctor(x);if(n1=d0=new Ctor(1),d1=n0=new Ctor(0),e=(d=new Ctor(d1)).e=getPrecision(xd)-x.e-1,d.d[0]=mathpow(10,(k=e%LOG_BASE)<0?LOG_BASE+k:k),null==maxD)maxD=0<e?d:n1;else{if(!(n=new Ctor(maxD)).isInt()||n.lt(n1))throw Error(invalidArgument+n);maxD=n.gt(d)?0<e?d:n1:n}for(external=!1,n=new Ctor(digitsToString(xd)),k=Ctor.precision,Ctor.precision=e=xd.length*LOG_BASE*2;q=divide(n,d,0,1,1),1!=(d2=d0.plus(q.times(d1))).cmp(maxD);)d0=d1,d1=d2,d2=n1,n1=n0.plus(q.times(d2)),n0=d2,d2=d,d=n.minus(q.times(d2)),n=d2;return d2=divide(maxD.minus(d0),d1,0,1,1),n0=n0.plus(d2.times(n1)),d0=d0.plus(d2.times(d1)),n0.s=n1.s=x.s,xd=divide(n1,d1,e,1).minus(x).abs().cmp(divide(n0,d0,e,1).minus(x).abs())<1?[n1,d1]:[n0,d0],Ctor.precision=k,external=!0,xd},P.toHexadecimal=P.toHex=function(sd,rm){return toStringBinary(this,16,sd,rm)},P.toNearest=function(y,rm){var Ctor=(x=this).constructor,x=new Ctor(x);if(null==y){if(!x.d)return x;y=new Ctor(1),rm=Ctor.rounding}else{if(y=new Ctor(y),void 0===rm?rm=Ctor.rounding:checkInt32(rm,0,8),!x.d)return y.s?x:y;if(!y.d)return y.s&&(y.s=x.s),y}return y.d[0]?(external=!1,x=divide(x,y,0,rm,1).times(y),external=!0,finalise(x)):(y.s=x.s,x=y),x},P.toNumber=function(){return+this},P.toOctal=function(sd,rm){return toStringBinary(this,8,sd,rm)},P.toPower=P.pow=function(y){var e,k,pr,r,rm,s,x=this,Ctor=x.constructor,yn=+(y=new Ctor(y));if(!(x.d&&y.d&&x.d[0]&&y.d[0]))return new Ctor(mathpow(+x,yn));if((x=new Ctor(x)).eq(1))return x;if(pr=Ctor.precision,rm=Ctor.rounding,y.eq(1))return finalise(x,pr,rm);if((e=mathfloor(y.e/LOG_BASE))>=y.d.length-1&&(k=yn<0?-yn:yn)<=9007199254740991)return r=intPow(Ctor,x,k,pr),y.s<0?new Ctor(1).div(r):finalise(r,pr,rm);if((s=x.s)<0){if(e<y.d.length-1)return new Ctor(NaN);if(0==(1&y.d[e])&&(s=1),0==x.e&&1==x.d[0]&&1==x.d.length)return x.s=s,x}return(e=0!=(k=mathpow(+x,yn))&&isFinite(k)?new Ctor(k+"").e:mathfloor(yn*(Math.log("0."+digitsToString(x.d))/Math.LN10+x.e+1)))>Ctor.maxE+1||e<Ctor.minE-1?new Ctor(0<e?s/0:0):(external=!1,Ctor.rounding=x.s=1,k=Math.min(12,(e+"").length),(r=(r=naturalExponential(y.times(naturalLogarithm(x,pr+k)),pr)).d&&checkRoundingDigits((r=finalise(r,pr+5,1)).d,pr,rm)&&+digitsToString((r=finalise(naturalExponential(y.times(naturalLogarithm(x,(e=pr+10)+k)),e),e+5,1)).d).slice(pr+1,pr+15)+1==1e14?finalise(r,pr+1,0):r).s=s,external=!0,finalise(r,pr,Ctor.rounding=rm))},P.toPrecision=function(sd,rm){var x=this,Ctor=x.constructor,rm=void 0===sd?finiteToString(x,x.e<=Ctor.toExpNeg||x.e>=Ctor.toExpPos):(checkInt32(sd,1,MAX_DIGITS),void 0===rm?rm=Ctor.rounding:checkInt32(rm,0,8),finiteToString(x=finalise(new Ctor(x),sd,rm),sd<=x.e||x.e<=Ctor.toExpNeg,sd));return x.isNeg()&&!x.isZero()?"-"+rm:rm},P.toSignificantDigits=P.toSD=function(sd,rm){var Ctor=this.constructor;return void 0===sd?(sd=Ctor.precision,rm=Ctor.rounding):(checkInt32(sd,1,MAX_DIGITS),void 0===rm?rm=Ctor.rounding:checkInt32(rm,0,8)),finalise(new Ctor(this),sd,rm)},P.toString=function(){var x=this,Ctor=x.constructor,Ctor=finiteToString(x,x.e<=Ctor.toExpNeg||x.e>=Ctor.toExpPos);return x.isNeg()&&!x.isZero()?"-"+Ctor:Ctor},P.truncated=P.trunc=function(){return finalise(new this.constructor(this),this.e+1,1)},P.valueOf=P.toJSON=function(){var x=this,Ctor=x.constructor,Ctor=finiteToString(x,x.e<=Ctor.toExpNeg||x.e>=Ctor.toExpPos);return x.isNeg()?"-"+Ctor:Ctor};var divide=function(x,y,pr,rm,dp,base){var cmp,e,i,k,logBase,more,prod,prodL,qd,rem,remL,rem0,sd,t,xi,xL,yd0,yL,yz,Ctor=x.constructor,sign=x.s==y.s?1:-1,xd=x.d,yd=y.d;if(!(xd&&xd[0]&&yd&&yd[0]))return new Ctor(x.s&&y.s&&(xd?!yd||xd[0]!=yd[0]:yd)?xd&&0==xd[0]||!yd?0*sign:sign/0:NaN);for(e=base?(logBase=1,x.e-y.e):(base=BASE,mathfloor(x.e/(logBase=LOG_BASE))-mathfloor(y.e/logBase)),yL=yd.length,xL=xd.length,qd=(sign=new Ctor(sign)).d=[],i=0;yd[i]==(xd[i]||0);i++);if(yd[i]>(xd[i]||0)&&e--,null==pr?(sd=pr=Ctor.precision,rm=Ctor.rounding):sd=dp?pr+(x.e-y.e)+1:pr,sd<0)qd.push(1),more=!0;else{if(sd=sd/logBase+2|0,i=0,1==yL){for(yd=yd[k=0],sd++;(i<xL||k)&&sd--;i++)t=k*base+(xd[i]||0),qd[i]=t/yd|0,k=t%yd|0;more=k||i<xL}else{for(1<(k=base/(yd[0]+1)|0)&&(yd=multiplyInteger(yd,k,base),xd=multiplyInteger(xd,k,base),yL=yd.length,xL=xd.length),xi=yL,remL=(rem=xd.slice(0,yL)).length;remL<yL;)rem[remL++]=0;for((yz=yd.slice()).unshift(0),yd0=yd[0],yd[1]>=base/2&&++yd0;k=0,(cmp=compare(yd,rem,yL,remL))<0?(rem0=rem[0],1<(k=(rem0=yL!=remL?rem0*base+(rem[1]||0):rem0)/yd0|0)?1==(cmp=compare(prod=multiplyInteger(yd,k=base<=k?base-1:k,base),rem,prodL=prod.length,remL=rem.length))&&(k--,subtract(prod,yL<prodL?yz:yd,prodL,base)):(0==k&&(cmp=k=1),prod=yd.slice()),(prodL=prod.length)<remL&&prod.unshift(0),subtract(rem,prod,remL,base),-1==cmp&&(cmp=compare(yd,rem,yL,remL=rem.length))<1&&(k++,subtract(rem,yL<remL?yz:yd,remL,base)),remL=rem.length):0===cmp&&(k++,rem=[0]),qd[i++]=k,cmp&&rem[0]?rem[remL++]=xd[xi]||0:(rem=[xd[xi]],remL=1),(xi++<xL||void 0!==rem[0])&&sd--;);more=void 0!==rem[0]}qd[0]||qd.shift()}if(1==logBase)sign.e=e,inexact=more;else{for(i=1,k=qd[0];10<=k;k/=10)i++;sign.e=i+e*logBase-1,finalise(sign,dp?pr+sign.e+1:pr,rm,more)}return sign};function multiplyInteger(x,k,base){var temp,carry=0,i=x.length;for(x=x.slice();i--;)temp=x[i]*k+carry,x[i]=temp%base|0,carry=temp/base|0;return carry&&x.unshift(carry),x}function compare(a,b,aL,bL){var i,r;if(aL!=bL)r=bL<aL?1:-1;else for(i=r=0;i<aL;i++)if(a[i]!=b[i]){r=a[i]>b[i]?1:-1;break}return r}function subtract(a,b,aL,base){for(var i=0;aL--;)a[aL]-=i,i=a[aL]<b[aL]?1:0,a[aL]=i*base+a[aL]-b[aL];for(;!a[0]&&1<a.length;)a.shift()}function finalise(x,sd,rm,isTruncated){var digits,i,j,k,rd,w,xd,xdi,Ctor=x.constructor;out:if(null!=sd){if(!(xd=x.d))return x;for(digits=1,k=xd[0];10<=k;k/=10)digits++;if((i=sd-digits)<0)i+=LOG_BASE,j=sd,rd=(w=xd[xdi=0])/mathpow(10,digits-j-1)%10|0;else if(xdi=Math.ceil((i+1)/LOG_BASE),(k=xd.length)<=xdi){if(!isTruncated)break out;for(;k++<=xdi;)xd.push(0);w=rd=0,j=(i%=LOG_BASE)-LOG_BASE+(digits=1)}else{for(w=k=xd[xdi],digits=1;10<=k;k/=10)digits++;rd=(j=(i%=LOG_BASE)-LOG_BASE+digits)<0?0:w/mathpow(10,digits-j-1)%10|0}if(isTruncated=isTruncated||sd<0||void 0!==xd[xdi+1]||(j<0?w:w%mathpow(10,digits-j-1)),rd=rm<4?(rd||isTruncated)&&(0==rm||rm==(x.s<0?3:2)):5<rd||5==rd&&(4==rm||isTruncated||6==rm&&(0<i?0<j?w/mathpow(10,digits-j):0:xd[xdi-1])%10&1||rm==(x.s<0?8:7)),sd<1||!xd[0])return xd.length=0,rd?(sd-=x.e+1,xd[0]=mathpow(10,(LOG_BASE-sd%LOG_BASE)%LOG_BASE),x.e=-sd||0):xd[0]=x.e=0,x;if(0==i?(xd.length=xdi,k=1,xdi--):(xd.length=xdi+1,k=mathpow(10,LOG_BASE-i),xd[xdi]=0<j?(w/mathpow(10,digits-j)%mathpow(10,j)|0)*k:0),rd)for(;;){if(0==xdi){for(i=1,j=xd[0];10<=j;j/=10)i++;for(j=xd[0]+=k,k=1;10<=j;j/=10)k++;i!=k&&(x.e++,xd[0]==BASE)&&(xd[0]=1);break}if(xd[xdi]+=k,xd[xdi]!=BASE)break;xd[xdi--]=0,k=1}for(i=xd.length;0===xd[--i];)xd.pop()}return external&&(x.e>Ctor.maxE?(x.d=null,x.e=NaN):x.e<Ctor.minE&&(x.e=0,x.d=[0])),x}function finiteToString(x,isExp,sd){var k,e,str,len;return x.isFinite()?(e=x.e,len=(str=digitsToString(x.d)).length,isExp?(sd&&0<(k=sd-len)?str=str.charAt(0)+"."+str.slice(1)+getZeroString(k):1<len&&(str=str.charAt(0)+"."+str.slice(1)),str=str+(x.e<0?"e":"e+")+x.e):e<0?(str="0."+getZeroString(-e-1)+str,sd&&0<(k=sd-len)&&(str+=getZeroString(k))):len<=e?(str+=getZeroString(e+1-len),sd&&0<(k=sd-e-1)&&(str=str+"."+getZeroString(k))):((k=e+1)<len&&(str=str.slice(0,k)+"."+str.slice(k)),sd&&0<(k=sd-len)&&(e+1===len&&(str+="."),str+=getZeroString(k))),str):nonFiniteToString(x)}function getBase10Exponent(digits,e){var w=digits[0];for(e*=LOG_BASE;10<=w;w/=10)e++;return e}function getLn10(Ctor,sd,pr){if(LN10_PRECISION<sd)throw external=!0,pr&&(Ctor.precision=pr),Error(precisionLimitExceeded);return finalise(new Ctor(LN10),sd,1,!0)}function getPi(Ctor,sd,rm){if(PI_PRECISION<sd)throw Error(precisionLimitExceeded);return finalise(new Ctor(PI),sd,rm,!0)}function getPrecision(digits){var w=digits.length-1,len=w*LOG_BASE+1;if(w=digits[w]){for(;w%10==0;w/=10)len--;for(w=digits[0];10<=w;w/=10)len++}return len}function getZeroString(k){for(var zs="";k--;)zs+="0";return zs}function intPow(Ctor,x,n,pr){var isTruncated,r=new Ctor(1),k=Math.ceil(pr/LOG_BASE+4);for(external=!1;;){if(n%2&&truncate((r=r.times(x)).d,k)&&(isTruncated=!0),0===(n=mathfloor(n/2))){n=r.d.length-1,isTruncated&&0===r.d[n]&&++r.d[n];break}truncate((x=x.times(x)).d,k)}return external=!0,r}function isOdd(n){return 1&n.d[n.d.length-1]}function maxOrMin(Ctor,args,ltgt){for(var y,x=new Ctor(args[0]),i=0;++i<args.length;){if(!(y=new Ctor(args[i])).s){x=y;break}x[ltgt](y)&&(x=y)}return x}function naturalExponential(x,sd){var denominator,guard,j,pow,sum,t,wpr,rep=0,i=0,k=0,Ctor=x.constructor,rm=Ctor.rounding,pr=Ctor.precision;if(!x.d||!x.d[0]||17<x.e)return new Ctor(x.d?x.d[0]?x.s<0?0:1/0:1:x.s?x.s<0?0:x:NaN);for(wpr=null==sd?(external=!1,pr):sd,t=new Ctor(.03125);-2<x.e;)x=x.times(t),k+=5;for(wpr+=guard=Math.log(mathpow(2,k))/Math.LN10*2+5|0,denominator=pow=sum=new Ctor(1),Ctor.precision=wpr;;){if(pow=finalise(pow.times(x),wpr,1),denominator=denominator.times(++i),digitsToString((t=sum.plus(divide(pow,denominator,wpr,1))).d).slice(0,wpr)===digitsToString(sum.d).slice(0,wpr)){for(j=k;j--;)sum=finalise(sum.times(sum),wpr,1);if(null!=sd)return Ctor.precision=pr,sum;if(!(rep<3&&checkRoundingDigits(sum.d,wpr-guard,rm,rep)))return finalise(sum,Ctor.precision=pr,rm,external=!0);Ctor.precision=wpr+=10,denominator=pow=t=new Ctor(1),i=0,rep++}sum=t}}function naturalLogarithm(y,sd){var c,c0,denominator,e,numerator,rep,sum,t,wpr,x1,x2,n=1,x=y,xd=x.d,Ctor=x.constructor,rm=Ctor.rounding,pr=Ctor.precision;if(x.s<0||!xd||!xd[0]||!x.e&&1==xd[0]&&1==xd.length)return new Ctor(xd&&!xd[0]?-1/0:1!=x.s?NaN:xd?0:x);if(wpr=null==sd?(external=!1,pr):sd,Ctor.precision=wpr+=10,c0=(c=digitsToString(xd)).charAt(0),!(Math.abs(e=x.e)<15e14))return t=getLn10(Ctor,wpr+2,pr).times(e+""),x=naturalLogarithm(new Ctor(c0+"."+c.slice(1)),wpr-10).plus(t),Ctor.precision=pr,null==sd?finalise(x,pr,rm,external=!0):x;for(;c0<7&&1!=c0||1==c0&&3<c.charAt(1);)c0=(c=digitsToString((x=x.times(y)).d)).charAt(0),n++;for(e=x.e,1<c0?(x=new Ctor("0."+c),e++):x=new Ctor(c0+"."+c.slice(1)),sum=numerator=x=divide((x1=x).minus(1),x.plus(1),wpr,1),x2=finalise(x.times(x),wpr,1),denominator=3;;){if(numerator=finalise(numerator.times(x2),wpr,1),digitsToString((t=sum.plus(divide(numerator,new Ctor(denominator),wpr,1))).d).slice(0,wpr)===digitsToString(sum.d).slice(0,wpr)){if(sum=sum.times(2),0!==e&&(sum=sum.plus(getLn10(Ctor,wpr+2,pr).times(e+""))),sum=divide(sum,new Ctor(n),wpr,1),null!=sd)return Ctor.precision=pr,sum;if(!checkRoundingDigits(sum.d,wpr-10,rm,rep))return finalise(sum,Ctor.precision=pr,rm,external=!0);Ctor.precision=wpr+=10,t=numerator=x=divide(x1.minus(1),x1.plus(1),wpr,1),x2=finalise(x.times(x),wpr,1),denominator=rep=1}sum=t,denominator+=2}}function nonFiniteToString(x){return String(x.s*x.s/0)}function parseDecimal(x,str){var e,i,len;for(0<(i=(str=-1<(e=str.indexOf("."))?str.replace(".",""):str).search(/e/i))?(e<0&&(e=i),e+=+str.slice(i+1),str=str.substring(0,i)):e<0&&(e=str.length),i=0;48===str.charCodeAt(i);i++);for(len=str.length;48===str.charCodeAt(len-1);--len);if(str=str.slice(i,len)){if(len-=i,x.e=e=e-i-1,x.d=[],i=(e+1)%LOG_BASE,e<0&&(i+=LOG_BASE),i<len){for(i&&x.d.push(+str.slice(0,i)),len-=LOG_BASE;i<len;)x.d.push(+str.slice(i,i+=LOG_BASE));str=str.slice(i),i=LOG_BASE-str.length}else i-=len;for(;i--;)str+="0";x.d.push(+str),external&&(x.e>x.constructor.maxE?(x.d=null,x.e=NaN):x.e<x.constructor.minE&&(x.e=0,x.d=[0]))}else x.e=0,x.d=[0];return x}function parseOther(x,str){var base,Ctor,divisor,i,isFloat,len,p,xd;if(-1<str.indexOf("_")){if(str=str.replace(/(\d)_(?=\d)/g,"$1"),isDecimal.test(str))return parseDecimal(x,str)}else if("Infinity"===str||"NaN"===str)return+str||(x.s=NaN),x.e=NaN,x.d=null,x;if(isHex.test(str))base=16,str=str.toLowerCase();else if(isBinary.test(str))base=2;else{if(!isOctal.test(str))throw Error(invalidArgument+str);base=8}for(i=(str=0<(i=str.search(/p/i))?(p=+str.slice(i+1),str.substring(2,i)):str.slice(2)).indexOf("."),Ctor=x.constructor,(isFloat=0<=i)&&(i=(len=(str=str.replace(".","")).length)-i,divisor=intPow(Ctor,new Ctor(base),i,2*i)),i=str=(xd=convertBase(str,base,BASE)).length-1;0===xd[i];--i)xd.pop();return i<0?new Ctor(0*x.s):(x.e=getBase10Exponent(xd,str),x.d=xd,external=!1,isFloat&&(x=divide(x,divisor,4*len)),p&&(x=x.times(Math.abs(p)<54?mathpow(2,p):Decimal.pow(2,p))),external=!0,x)}function taylorSeries(Ctor,n,x,y,isHyperbolic){var j,t,u,x2,pr=Ctor.precision,k=Math.ceil(pr/LOG_BASE);for(external=!1,x2=x.times(x),u=new Ctor(y);;){if(t=divide(u.times(x2),new Ctor(n++*n++),pr,1),u=isHyperbolic?y.plus(t):y.minus(t),y=divide(t.times(x2),new Ctor(n++*n++),pr,1),void 0!==(t=u.plus(y)).d[k]){for(j=k;t.d[j]===u.d[j]&&j--;);if(-1==j)break}j=u,u=y,y=t,t=j,0}return external=!0,t.d.length=k+1,t}function tinyPow(b,e){for(var n=b;--e;)n*=b;return n}function toLessThanHalfPi(Ctor,x){var t,isNeg=x.s<0,Ctor=getPi(Ctor,Ctor.precision,1),halfPi=Ctor.times(.5);if((x=x.abs()).lte(halfPi))return quadrant=isNeg?4:1,x;if((t=x.divToInt(Ctor)).isZero())quadrant=isNeg?3:2;else{if((x=x.minus(t.times(Ctor))).lte(halfPi))return quadrant=isOdd(t)?isNeg?2:3:isNeg?4:1,x;quadrant=isOdd(t)?isNeg?1:4:isNeg?3:2}return x.minus(Ctor).abs()}function toStringBinary(x,baseOut,sd,rm){var base,e,i,len,roundUp,str,xd,y,Ctor=x.constructor,isExp=void 0!==sd;if(isExp?(checkInt32(sd,1,MAX_DIGITS),void 0===rm?rm=Ctor.rounding:checkInt32(rm,0,8)):(sd=Ctor.precision,rm=Ctor.rounding),x.isFinite()){for(isExp?(base=2,16==baseOut?sd=4*sd-3:8==baseOut&&(sd=3*sd-2)):base=baseOut,0<=(i=(str=finiteToString(x)).indexOf("."))&&(str=str.replace(".",""),(y=new Ctor(1)).e=str.length-i,y.d=convertBase(finiteToString(y),10,base),y.e=y.d.length),e=len=(xd=convertBase(str,10,base)).length;0==xd[--len];)xd.pop();if(xd[0]){if(i<0?e--:((x=new Ctor(x)).d=xd,x.e=e,xd=(x=divide(x,y,sd,rm,0,base)).d,e=x.e,roundUp=inexact),i=xd[sd],Ctor=base/2,roundUp=roundUp||void 0!==xd[sd+1],roundUp=rm<4?(void 0!==i||roundUp)&&(0===rm||rm===(x.s<0?3:2)):Ctor<i||i===Ctor&&(4===rm||roundUp||6===rm&&1&xd[sd-1]||rm===(x.s<0?8:7)),xd.length=sd,roundUp)for(;++xd[--sd]>base-1;)xd[sd]=0,sd||(++e,xd.unshift(1));for(len=xd.length;!xd[len-1];--len);for(i=0,str="";i<len;i++)str+=NUMERALS.charAt(xd[i]);if(isExp){if(1<len)if(16==baseOut||8==baseOut){for(i=16==baseOut?4:3,--len;len%i;len++)str+="0";for(len=(xd=convertBase(str,base,baseOut)).length;!xd[len-1];--len);for(i=1,str="1.";i<len;i++)str+=NUMERALS.charAt(xd[i])}else str=str.charAt(0)+"."+str.slice(1);str=str+(e<0?"p":"p+")+e}else if(e<0){for(;++e;)str="0"+str;str="0."+str}else if(++e>len)for(e-=len;e--;)str+="0";else e<len&&(str=str.slice(0,e)+"."+str.slice(e))}else str=isExp?"0p+0":"0";str=(16==baseOut?"0x":2==baseOut?"0b":8==baseOut?"0o":"")+str}else str=nonFiniteToString(x);return x.s<0?"-"+str:str}function truncate(arr,len){return arr.length>len&&(arr.length=len,1)}function abs(x){return new this(x).abs()}function acos(x){return new this(x).acos()}function acosh(x){return new this(x).acosh()}function add(x,y){return new this(x).plus(y)}function asin(x){return new this(x).asin()}function asinh(x){return new this(x).asinh()}function atan(x){return new this(x).atan()}function atanh(x){return new this(x).atanh()}function atan2(y,x){y=new this(y),x=new this(x);var r,pr=this.precision,rm=this.rounding,wpr=pr+4;return y.s&&x.s?y.d||x.d?!x.d||y.isZero()?(r=x.s<0?getPi(this,pr,rm):new this(0)).s=y.s:!y.d||x.isZero()?(r=getPi(this,wpr,1).times(.5)).s=y.s:r=x.s<0?(this.precision=wpr,this.rounding=1,r=this.atan(divide(y,x,wpr,1)),x=getPi(this,wpr,1),this.precision=pr,this.rounding=rm,y.s<0?r.minus(x):r.plus(x)):this.atan(divide(y,x,wpr,1)):(r=getPi(this,wpr,1).times(0<x.s?.25:.75)).s=y.s:r=new this(NaN),r}function cbrt(x){return new this(x).cbrt()}function ceil(x){return finalise(x=new this(x),x.e+1,2)}function clamp(x,min,max){return new this(x).clamp(min,max)}function config(obj){if(!obj||"object"!=typeof obj)throw Error(decimalError+"Object expected");for(var p,v,useDefaults=!0===obj.defaults,ps=["precision",1,MAX_DIGITS,"rounding",0,8,"toExpNeg",-EXP_LIMIT,0,"toExpPos",0,EXP_LIMIT,"maxE",0,EXP_LIMIT,"minE",-EXP_LIMIT,0,"modulo",0,9],i=0;i<ps.length;i+=3)if(p=ps[i],useDefaults&&(this[p]=DEFAULTS[p]),void 0!==(v=obj[p])){if(!(mathfloor(v)===v&&ps[i+1]<=v&&v<=ps[i+2]))throw Error(invalidArgument+p+": "+v);this[p]=v}if(p="crypto",useDefaults&&(this[p]=DEFAULTS[p]),void 0!==(v=obj[p])){if(!0!==v&&!1!==v&&0!==v&&1!==v)throw Error(invalidArgument+p+": "+v);if(v){if(void 0===crypto||!crypto||!crypto.getRandomValues&&!crypto.randomBytes)throw Error(cryptoUnavailable);this[p]=!0}else this[p]=!1}return this}function cos(x){return new this(x).cos()}function cosh(x){return new this(x).cosh()}function div(x,y){return new this(x).div(y)}function exp(x){return new this(x).exp()}function floor(x){return finalise(x=new this(x),x.e+1,3)}function hypot(){var i,n,t=new this(0);for(external=!1,i=0;i<arguments.length;)if((n=new this(arguments[i++])).d)t.d&&(t=t.plus(n.times(n)));else{if(n.s)return external=!0,new this(1/0);t=n}return external=!0,t.sqrt()}function isDecimalInstance(obj){return obj instanceof Decimal||obj&&obj.toStringTag===tag||!1}function ln(x){return new this(x).ln()}function log(x,y){return new this(x).log(y)}function log2(x){return new this(x).log(2)}function log10(x){return new this(x).log(10)}function max(){return maxOrMin(this,arguments,"lt")}function min(){return maxOrMin(this,arguments,"gt")}function mod(x,y){return new this(x).mod(y)}function mul(x,y){return new this(x).mul(y)}function pow(x,y){return new this(x).pow(y)}function random(sd){var d,e,k,n,i=0,r=new this(1),rd=[];if(void 0===sd?sd=this.precision:checkInt32(sd,1,MAX_DIGITS),k=Math.ceil(sd/LOG_BASE),this.crypto)if(crypto.getRandomValues)for(d=crypto.getRandomValues(new Uint32Array(k));i<k;)429e7<=(n=d[i])?d[i]=crypto.getRandomValues(new Uint32Array(1))[0]:rd[i++]=n%1e7;else{if(!crypto.randomBytes)throw Error(cryptoUnavailable);for(d=crypto.randomBytes(k*=4);i<k;)214e7<=(n=d[i]+(d[i+1]<<8)+(d[i+2]<<16)+((127&d[i+3])<<24))?crypto.randomBytes(4).copy(d,i):(rd.push(n%1e7),i+=4);i=k/4}else for(;i<k;)rd[i++]=1e7*Math.random()|0;for(k=rd[--i],sd%=LOG_BASE,k&&sd&&(n=mathpow(10,LOG_BASE-sd),rd[i]=(k/n|0)*n);0===rd[i];i--)rd.pop();if(i<0)rd=[e=0];else{for(e=-1;0===rd[0];e-=LOG_BASE)rd.shift();for(k=1,n=rd[0];10<=n;n/=10)k++;k<LOG_BASE&&(e-=LOG_BASE-k)}return r.e=e,r.d=rd,r}function round(x){return finalise(x=new this(x),x.e+1,this.rounding)}function sign(x){return(x=new this(x)).d?x.d[0]?x.s:0*x.s:x.s||NaN}function sin(x){return new this(x).sin()}function sinh(x){return new this(x).sinh()}function sqrt(x){return new this(x).sqrt()}function sub(x,y){return new this(x).sub(y)}function sum(){var i=0,args=arguments,x=new this(args[i]);for(external=!1;x.s&&++i<args.length;)x=x.plus(args[i]);return external=!0,finalise(x,this.precision,this.rounding)}function tan(x){return new this(x).tan()}function tanh(x){return new this(x).tanh()}function trunc(x){return finalise(x=new this(x),x.e+1,1)}((Decimal=function clone(obj){var i,p,ps;function Decimal(v){var e,i,t,x=this;if(!(x instanceof Decimal))return new Decimal(v);if(x.constructor=Decimal,!isDecimalInstance(v)){if("number"==(t=typeof v)){if(0===v)return x.s=1/v<0?-1:1,x.e=0,void(x.d=[0]);if(v<0?(v=-v,x.s=-1):x.s=1,v===~~v&&v<1e7){for(e=0,i=v;10<=i;i/=10)e++;return void(external?Decimal.maxE<e?(x.e=NaN,x.d=null):e<Decimal.minE?(x.e=0,x.d=[0]):(x.e=e,x.d=[v]):(x.e=e,x.d=[v]))}return 0*v!=0?(v||(x.s=NaN),x.e=NaN,void(x.d=null)):parseDecimal(x,v.toString())}if("string"!=t)throw Error(invalidArgument+v);return 45===(i=v.charCodeAt(0))?(v=v.slice(1),x.s=-1):(43===i&&(v=v.slice(1)),x.s=1),(isDecimal.test(v)?parseDecimal:parseOther)(x,v)}x.s=v.s,external?!v.d||v.e>Decimal.maxE?(x.e=NaN,x.d=null):v.e<Decimal.minE?(x.e=0,x.d=[0]):(x.e=v.e,x.d=v.d.slice()):(x.e=v.e,x.d=v.d&&v.d.slice())}if(Decimal.prototype=P,Decimal.ROUND_UP=0,Decimal.ROUND_DOWN=1,Decimal.ROUND_CEIL=2,Decimal.ROUND_FLOOR=3,Decimal.ROUND_HALF_UP=4,Decimal.ROUND_HALF_DOWN=5,Decimal.ROUND_HALF_EVEN=6,Decimal.ROUND_HALF_CEIL=7,Decimal.ROUND_HALF_FLOOR=8,Decimal.EUCLID=9,Decimal.config=Decimal.set=config,Decimal.clone=clone,Decimal.isDecimal=isDecimalInstance,Decimal.abs=abs,Decimal.acos=acos,Decimal.acosh=acosh,Decimal.add=add,Decimal.asin=asin,Decimal.asinh=asinh,Decimal.atan=atan,Decimal.atanh=atanh,Decimal.atan2=atan2,Decimal.cbrt=cbrt,Decimal.ceil=ceil,Decimal.clamp=clamp,Decimal.cos=cos,Decimal.cosh=cosh,Decimal.div=div,Decimal.exp=exp,Decimal.floor=floor,Decimal.hypot=hypot,Decimal.ln=ln,Decimal.log=log,Decimal.log10=log10,Decimal.log2=log2,Decimal.max=max,Decimal.min=min,Decimal.mod=mod,Decimal.mul=mul,Decimal.pow=pow,Decimal.random=random,Decimal.round=round,Decimal.sign=sign,Decimal.sin=sin,Decimal.sinh=sinh,Decimal.sqrt=sqrt,Decimal.sub=sub,Decimal.sum=sum,Decimal.tan=tan,Decimal.tanh=tanh,Decimal.trunc=trunc,(obj=void 0===obj?{}:obj)&&!0!==obj.defaults)for(ps=["precision","rounding","toExpNeg","toExpPos","maxE","minE","modulo","crypto"],i=0;i<ps.length;)obj.hasOwnProperty(p=ps[i++])||(obj[p]=this[p]);return Decimal.config(obj),Decimal}(DEFAULTS)).prototype.constructor=Decimal).default=Decimal.Decimal=Decimal,LN10=new Decimal(LN10),PI=new Decimal(PI),"function"==typeof define&&define.amd?define(function(){return Decimal}):"undefined"!=typeof module&&module.exports?("function"==typeof Symbol&&"symbol"==typeof Symbol.iterator&&(P[Symbol.for("nodejs.util.inspect.custom")]=P.toString,P[Symbol.toStringTag]="Decimal"),module.exports=Decimal):(globalScope=globalScope||("undefined"!=typeof self&&self&&self.self==self?self:window),noConflict=globalScope.Decimal,Decimal.noConflict=function(){return globalScope.Decimal=noConflict,Decimal},globalScope.Decimal=Decimal)}(this);var VBacktest=(()=>{var _scriptDir="undefined"!=typeof document&&document.currentScript?document.currentScript.src:void 0;return"undefined"!=typeof __filename&&(_scriptDir=_scriptDir||__filename),function(moduleArg={}){var Module=moduleArg,readyPromiseResolve,readyPromiseReject,Std=(Module.ready=new Promise((resolve,reject)=>{readyPromiseResolve=resolve,readyPromiseReject=reject}),{_skip:function(arr,period){for(var j=0,k=0;j<arr.length&&(isNaN(arr[j])||k++,k!=period);j++);return j},_sum:function(arr,num){for(var sum=0,i=0;i<num;i++)isNaN(arr[i])||(sum+=arr[i]);return sum},_avg:function(arr,num){for(var n=0,sum=0,i=0;i<num;i++)isNaN(arr[i])||(sum+=arr[i],n++);return sum/n},_zeros:function(len){for(var n=[],i=0;i<len;i++)n.push(0);return n},_set:function(arr,start,end,value){for(var e=Math.min(arr.length,end),i=start;i<e;i++)arr[i]=value},_diff:function(a,b){for(var d=[],i=0;i<b.length;i++)isNaN(a[i])||isNaN(b[i])?d.push(NaN):d.push(a[i]-b[i]);return d},_move_diff:function(a){for(var d=[],i=1;i<a.length;i++)d.push(a[i]-a[i-1]);return d},_sma:function(S,period){var R=Std._zeros(S.length),j=Std._skip(S,period);if(Std._set(R,0,j,NaN),j<S.length)for(var sum=0,i=j;i<S.length;i++)i==j?sum=Std._sum(S,i+1):sum+=S[i]-S[i-period],R[i]=sum/period;return R},_smma:function(S,period){var R=Std._zeros(S.length),j=Std._skip(S,period);if(Std._set(R,0,j,NaN),j<S.length){R[j]=Std._avg(S,j+1);for(var i=j+1;i<S.length;i++)R[i]=(R[i-1]*(period-1)+S[i])/period}return R},_ema:function(S,period){var R=Std._zeros(S.length),multiplier=2/(period+1),period=Std._skip(S,period);if(Std._set(R,0,period,NaN),period<S.length){R[period]=Std._avg(S,period+1);for(var i=period+1;i<S.length;i++)R[i]=(S[i]-R[i-1])*multiplier+R[i-1]}return R},_cmp:function(arr,start,end,cmpFunc){for(var v=arr[start],i=start;i<end;i++)v=cmpFunc(arr[i],v);return v},_filt:function(records,n,attr,iv,cmpFunc){if(records.length<2)return NaN;for(var v=iv,pos=0!==n?records.length-Math.min(records.length-1,n)-1:0,i=records.length-2;pos<=i;i--)v=cmpFunc(v,void 0!==attr?records[i][attr]:records[i]);return v},_ticks:function(records){if(0===records.length)return[];var ticks=[];if(void 0!==records[0].Close)for(var i=0;i<records.length;i++)ticks.push(records[i].Close);else ticks=records;return ticks}});function TAInstance(logPtr){var self={_log:logPtr="function"!=typeof logPtr?function(){}:logPtr,Highest:function(records,n,attr){return Std._filt(records,n,attr,Number.MIN_VALUE,Math.max)},Lowest:function(records,n,attr){return Std._filt(records,n,attr,Number.MAX_VALUE,Math.min)},MA:function(records,period){return self._log("MA",period=void 0===period?9:period),Std._sma(Std._ticks(records),period)},SMA:function(records,period){return self._log("SMA",period=void 0===period?9:period),Std._sma(Std._ticks(records),period)},EMA:function(records,period){return self._log("EMA",period=void 0===period?9:period),Std._ema(Std._ticks(records),period)},MACD:function(records,fastEMA,slowEMA,signalEMA){self._log("MACD",fastEMA=void 0===fastEMA?12:fastEMA,slowEMA=void 0===slowEMA?26:slowEMA,signalEMA=void 0===signalEMA?9:signalEMA);records=Std._ticks(records),slowEMA=Std._ema(records,slowEMA),records=Std._ema(records,fastEMA),fastEMA=Std._diff(records,slowEMA),records=Std._ema(fastEMA,signalEMA);return[fastEMA,records,Std._diff(fastEMA,records)]},BOLL:function(records,period,multiplier){self._log("BOLL",period=void 0===period?20:period,multiplier=void 0===multiplier?2:multiplier);for(var S=Std._ticks(records),j=period-1;j<S.length&&isNaN(S[j]);j++);for(var UP=Std._zeros(S.length),MB=Std._zeros(S.length),DN=Std._zeros(S.length),sum=(Std._set(UP,0,j,NaN),Std._set(MB,0,j,NaN),Std._set(DN,0,j,NaN),0),i=j;i<S.length;i++){if(i==j)for(var k=0;k<period;k++)sum+=S[k];else sum=sum+S[i]-S[i-period];for(var ma=sum/period,d=0,m=i+1-period;m<=i;m++)d+=(S[m]-ma)*(S[m]-ma);var stdev=Math.sqrt(d/period),dn=ma-multiplier*stdev;UP[i]=ma+multiplier*stdev,MB[i]=ma,DN[i]=dn}return[UP,MB,DN]},KDJ:function(records,n,k,d){self._log("KDJ",n=void 0===n?9:n,k=void 0===k?3:k,d=void 0===d?3:d);for(var RSV=Std._zeros(records.length),K=(Std._set(RSV,0,n-1,NaN),Std._zeros(records.length)),D=Std._zeros(records.length),J=Std._zeros(records.length),hs=Std._zeros(records.length),ls=Std._zeros(records.length),j=0;j<records.length;j++)hs[j]=records[j].High,ls[j]=records[j].Low;for(var c,h,l,i=0;i<records.length;i++)n-1<=i?(c=records[i].Close,h=Std._cmp(hs,i-(n-1),i+1,Math.max),l=Std._cmp(ls,i-(n-1),i+1,Math.min),RSV[i]=h!=l?(c-l)/(h-l)*100:100,K[i]=(+RSV[i]+(k-1)*K[i-1])/k,D[i]=(+K[i]+(d-1)*D[i-1])/d):(K[i]=D[i]=50,RSV[i]=0),J[i]=3*K[i]-2*D[i];for(var m=0;m<n-1;m++)K[m]=D[m]=J[m]=NaN;return[K,D,J]},RSI:function(records,period){self._log("RSI",period=void 0===period?14:period);var n=period,rsi=Std._zeros(records.length);if(Std._set(rsi,0,rsi.length,NaN),!(records.length<n)){for(var ticks=Std._ticks(records),deltas=Std._move_diff(ticks),seed=deltas.slice(0,n),up=0,down=0,i=0;i<seed.length;i++)0<=seed[i]?up+=seed[i]:down+=seed[i];up/=n;var delta,down=-down/n,upval=(rsi[n]=100-100/(1+(0!=down?up/down:0)),0),downval=0;for(i=n+1;i<ticks.length;i++)downval=0<(delta=deltas[i-1])?(upval=delta,0):(upval=0,-delta),rsi[i]=100-100/(1+(up=(up*(n-1)+upval)/n)/(down=(down*(n-1)+downval)/n))}return rsi},OBV:function(records){if(self._log("OBV"),0===records.length)return[];if(void 0===records[0].Close)throw"argument must KLine";for(var R=[],i=0;i<records.length;i++)0===i?R[i]=records[i].Volume:records[i].Close>=records[i-1].Close?R[i]=R[i-1]+records[i].Volume:R[i]=R[i-1]-records[i].Volume;return R},ATR:function(records,period){if(self._log("ATR",period=void 0===period?14:period),0===records.length)return[];if(void 0===records[0].Close)throw"argument must KLine";for(var R=Std._zeros(records.length),sum=0,n=0,i=0;i<records.length;i++){var TR=0;sum+=TR=0==i?records[i].High-records[i].Low:Math.max(records[i].High-records[i].Low,Math.abs(records[i].High-records[i-1].Close),Math.abs(records[i-1].Close-records[i].Low)),R[i]=n=i<period?sum/(i+1):((period-1)*n+TR)/period}return R},Alligator:function(records,jawLength,teethLength,lipsLength){self._log("Alligator",jawLength=void 0===jawLength?13:jawLength,teethLength=void 0===teethLength?8:teethLength,lipsLength=void 0===lipsLength?5:lipsLength);for(var ticks=[],i=0;i<records.length;i++)ticks.push((records[i].High+records[i].Low)/2);return[[NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN].concat(Std._smma(ticks,jawLength)),[NaN,NaN,NaN,NaN,NaN].concat(Std._smma(ticks,teethLength)),[NaN,NaN,NaN].concat(Std._smma(ticks,lipsLength))]},CMF:function(records,periods){self._log("CMF",periods=periods||20);for(var ret=[],sumD=0,sumV=0,arrD=[],arrV=[],i=0;i<records.length;i++){var d=records[i].High==records[i].Low?0:(2*records[i].Close-records[i].Low-records[i].High)/(records[i].High-records[i].Low)*records[i].Volume;arrD.push(d),arrV.push(records[i].Volume),sumD+=d,sumV+=records[i].Volume,periods<=i&&(sumD-=arrD.shift(),sumV-=arrV.shift()),ret.push(sumD/sumV)}return ret}};return self}var TA=TAInstance();function init_pako(){"use strict";function zswap32(q){return(q>>>24&255)+(q>>>8&65280)+((65280&q)<<8)+((255&q)<<24)}var exports={},adler32_1=function(adler,buf,len,pos){for(var s1=65535&adler|0,s2=adler>>>16&65535|0,n=0;0!==len;){for(len-=n=2e3<len?2e3:len;s2=s2+(s1=s1+buf[pos++]|0)|0,--n;);s1%=65521,s2%=65521}return s1|s2<<16|0},crcTable=new Uint32Array(function(){for(var table=[],n=0;n<256;n++){for(var c=n,k=0;k<8;k++)c=1&c?3988292384^c>>>1:c>>>1;table[n]=c}return table}()),crc32_1=function(crc,buf,len,pos){var t=crcTable,end=pos+len;crc^=-1;for(var i=pos;i<end;i++)crc=crc>>>8^t[255&(crc^buf[i])];return-1^crc},BAD$1=16209,TYPE$1=16191,lbase=new Uint16Array([3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0]),lext=new Uint8Array([16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78]),dbase=new Uint16Array([1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0]),dext=new Uint8Array([16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64]),inftrees=function(type,lens,lens_index,codes,table,table_index,work,opts){for(var incr,fill,low,mask,next,match,here_bits,here_op,here_val,bits=opts.bits,len=0,sym=0,min=0,max=0,root=0,curr=0,drop=0,left=0,used=0,huff=0,base=null,count=new Uint16Array(16),offs=new Uint16Array(16),extra=null,len=0;len<=15;len++)count[len]=0;for(sym=0;sym<codes;sym++)count[lens[lens_index+sym]]++;for(root=bits,max=15;1<=max&&0===count[max];max--);if(max<root&&(root=max),0===max)table[table_index++]=20971520,table[table_index++]=20971520,opts.bits=1;else{for(min=1;min<max&&0===count[min];min++);for(root<min&&(root=min),len=left=1;len<=15;len++)if((left=(left<<=1)-count[len])<0)return-1;if(0<left&&(0===type||1!==max))return-1;for(offs[1]=0,len=1;len<15;len++)offs[len+1]=offs[len]+count[len];for(sym=0;sym<codes;sym++)0!==lens[lens_index+sym]&&(work[offs[lens[lens_index+sym]]++]=sym);if(match=0===type?(base=extra=work,20):1===type?(base=lbase,extra=lext,257):(base=dbase,extra=dext,0),len=min,next=table_index,drop=sym=huff=0,low=-1,mask=(used=1<<(curr=root))-1,1===type&&852<used||2===type&&592<used)return 1;for(;;){for(here_val=work[sym]+1<match?(here_op=0,work[sym]):work[sym]>=match?(here_op=extra[work[sym]-match],base[work[sym]-match]):(here_op=96,0),incr=1<<(here_bits=len-drop),min=fill=1<<curr;table[next+(huff>>drop)+(fill-=incr)]=here_bits<<24|here_op<<16|here_val|0,0!==fill;);for(incr=1<<len-1;huff&incr;)incr>>=1;if(huff=0!==incr?(huff&incr-1)+incr:0,sym++,0==--count[len]){if(len===max)break;len=lens[lens_index+work[sym]]}if(root<len&&(huff&mask)!==low){for(next+=min,left=1<<(curr=len-(drop=0===drop?root:drop));curr+drop<max&&!((left-=count[curr+drop])<=0);)curr++,left<<=1;if(used+=1<<curr,1===type&&852<used||2===type&&592<used)return 1;table[low=huff&mask]=root<<24|curr<<16|next-table_index|0}}0!==huff&&(table[next+huff]=len-drop<<24|64<<16|0),opts.bits=root}return 0},constants$1={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_MEM_ERROR:-4,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8},LENS=1,DISTS=2,Z_FINISH$1=constants$1.Z_FINISH,Z_BLOCK=constants$1.Z_BLOCK,Z_TREES=constants$1.Z_TREES,Z_OK$1=constants$1.Z_OK,Z_STREAM_END$1=constants$1.Z_STREAM_END,Z_NEED_DICT$1=constants$1.Z_NEED_DICT,Z_STREAM_ERROR$1=constants$1.Z_STREAM_ERROR,Z_DATA_ERROR$1=constants$1.Z_DATA_ERROR,Z_MEM_ERROR$1=constants$1.Z_MEM_ERROR,Z_BUF_ERROR=constants$1.Z_BUF_ERROR,Z_DEFLATED=constants$1.Z_DEFLATED,HEAD=16180,BAD=16209,SYNC=16211,ENOUGH_LENS=852,ENOUGH_DISTS=592;function InflateState(){this.strm=null,this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new Uint16Array(320),this.work=new Uint16Array(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}function inflateResetKeep(strm){var state;return inflateStateCheck(strm)?Z_STREAM_ERROR$1:(state=strm.state,strm.total_in=strm.total_out=state.total=0,strm.msg="",state.wrap&&(strm.adler=1&state.wrap),state.mode=HEAD,state.last=0,state.havedict=0,state.flags=-1,state.dmax=32768,state.head=null,state.hold=0,state.bits=0,state.lencode=state.lendyn=new Int32Array(ENOUGH_LENS),state.distcode=state.distdyn=new Int32Array(ENOUGH_DISTS),state.sane=1,state.back=-1,Z_OK$1)}function inflateReset(strm){var state;return inflateStateCheck(strm)?Z_STREAM_ERROR$1:((state=strm.state).wsize=0,state.whave=0,state.wnext=0,inflateResetKeep(strm))}function inflateInit2(strm,windowBits){var state;return strm?(state=new InflateState,(strm.state=state).strm=strm,state.window=null,state.mode=HEAD,(state=inflateReset2(strm,windowBits))!==Z_OK$1&&(strm.state=null),state):Z_STREAM_ERROR$1}function updatewindow(strm,src,end,copy){var dist;return null===(strm=strm.state).window&&(strm.wsize=1<<strm.wbits,strm.wnext=0,strm.whave=0,strm.window=new Uint8Array(strm.wsize)),strm.wsize<=copy?(strm.window.set(src.subarray(end-strm.wsize,end),0),strm.wnext=0,strm.whave=strm.wsize):(copy<(dist=strm.wsize-strm.wnext)&&(dist=copy),strm.window.set(src.subarray(end-copy,end-copy+dist),strm.wnext),(copy-=dist)?(strm.window.set(src.subarray(end-copy,end),0),strm.wnext=copy,strm.whave=strm.wsize):(strm.wnext+=dist,strm.wnext===strm.wsize&&(strm.wnext=0),strm.whave<strm.wsize&&(strm.whave+=dist))),0}var lenfix,distfix,inflateStateCheck=function(strm){var state;return!strm||!(state=strm.state)||state.strm!==strm||state.mode<HEAD||state.mode>SYNC?1:0},inflateReset2=function(strm,windowBits){var wrap,state;return inflateStateCheck(strm)||(state=strm.state,windowBits<0?(wrap=0,windowBits=-windowBits):(wrap=5+(windowBits>>4),windowBits<48&&(windowBits&=15)),windowBits&&(windowBits<8||15<windowBits))?Z_STREAM_ERROR$1:(null!==state.window&&state.wbits!==windowBits&&(state.window=null),state.wrap=wrap,state.wbits=windowBits,inflateReset(strm))},virgin=!0,inflate_1$1={inflateReset:inflateReset,inflateReset2:inflateReset2,inflateResetKeep:inflateResetKeep,inflateInit:function(strm){return inflateInit2(strm,15)},inflateInit2:inflateInit2,inflate:function(strm,flush){var state,input,output,next,put,have,left,hold,bits,_in,_out,copy,from,from_source,here_bits,here_op,here_val,last_bits,last_op,last_val,len,ret,opts,n,here=0,hbuf=new Uint8Array(4),order=new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);if(inflateStateCheck(strm)||!strm.output||!strm.input&&0!==strm.avail_in)return Z_STREAM_ERROR$1;16191===(state=strm.state).mode&&(state.mode=16192),put=strm.next_out,output=strm.output,next=strm.next_in,input=strm.input,hold=state.hold,bits=state.bits,_in=have=strm.avail_in,_out=left=strm.avail_out,ret=Z_OK$1;inf_leave:for(;;)switch(state.mode){case HEAD:if(0===state.wrap)state.mode=16192;else{for(;bits<16;){if(0===have)break inf_leave;have--,hold+=input[next++]<<bits,bits+=8}2&state.wrap&&35615===hold?(0===state.wbits&&(state.wbits=15),hbuf[state.check=0]=255&hold,hbuf[1]=hold>>>8&255,state.check=crc32_1(state.check,hbuf,2,0),bits=hold=0,state.mode=16181):(state.head&&(state.head.done=!1),!(1&state.wrap)||(((255&hold)<<8)+(hold>>8))%31?(strm.msg="incorrect header check",state.mode=BAD):(15&hold)!==Z_DEFLATED?(strm.msg="unknown compression method",state.mode=BAD):(bits-=4,len=8+(15&(hold>>>=4)),0===state.wbits&&(state.wbits=len),15<len||len>state.wbits?(strm.msg="invalid window size",state.mode=BAD):(state.dmax=1<<state.wbits,state.flags=0,strm.adler=state.check=1,state.mode=512&hold?16189:16191,bits=hold=0)))}break;case 16181:for(;bits<16;){if(0===have)break inf_leave;have--,hold+=input[next++]<<bits,bits+=8}if(state.flags=hold,(255&state.flags)!==Z_DEFLATED){strm.msg="unknown compression method",state.mode=BAD;break}if(57344&state.flags){strm.msg="unknown header flags set",state.mode=BAD;break}state.head&&(state.head.text=hold>>8&1),512&state.flags&&4&state.wrap&&(hbuf[0]=255&hold,hbuf[1]=hold>>>8&255,state.check=crc32_1(state.check,hbuf,2,0)),bits=hold=0,state.mode=16182;case 16182:for(;bits<32;){if(0===have)break inf_leave;have--,hold+=input[next++]<<bits,bits+=8}state.head&&(state.head.time=hold),512&state.flags&&4&state.wrap&&(hbuf[0]=255&hold,hbuf[1]=hold>>>8&255,hbuf[2]=hold>>>16&255,hbuf[3]=hold>>>24&255,state.check=crc32_1(state.check,hbuf,4,0)),bits=hold=0,state.mode=16183;case 16183:for(;bits<16;){if(0===have)break inf_leave;have--,hold+=input[next++]<<bits,bits+=8}state.head&&(state.head.xflags=255&hold,state.head.os=hold>>8),512&state.flags&&4&state.wrap&&(hbuf[0]=255&hold,hbuf[1]=hold>>>8&255,state.check=crc32_1(state.check,hbuf,2,0)),bits=hold=0,state.mode=16184;case 16184:if(1024&state.flags){for(;bits<16;){if(0===have)break inf_leave;have--,hold+=input[next++]<<bits,bits+=8}state.length=hold,state.head&&(state.head.extra_len=hold),512&state.flags&&4&state.wrap&&(hbuf[0]=255&hold,hbuf[1]=hold>>>8&255,state.check=crc32_1(state.check,hbuf,2,0)),bits=hold=0}else state.head&&(state.head.extra=null);state.mode=16185;case 16185:if(1024&state.flags&&((copy=have<(copy=state.length)?have:copy)&&(state.head&&(len=state.head.extra_len-state.length,state.head.extra||(state.head.extra=new Uint8Array(state.head.extra_len)),state.head.extra.set(input.subarray(next,next+copy),len)),512&state.flags&&4&state.wrap&&(state.check=crc32_1(state.check,input,copy,next)),have-=copy,next+=copy,state.length-=copy),state.length))break inf_leave;state.length=0,state.mode=16186;case 16186:if(2048&state.flags){if(0===have)break inf_leave;for(copy=0;len=input[next+copy++],state.head&&len&&state.length<65536&&(state.head.name+=String.fromCharCode(len)),len&&copy<have;);if(512&state.flags&&4&state.wrap&&(state.check=crc32_1(state.check,input,copy,next)),have-=copy,next+=copy,len)break inf_leave}else state.head&&(state.head.name=null);state.length=0,state.mode=16187;case 16187:if(4096&state.flags){if(0===have)break inf_leave;for(copy=0;len=input[next+copy++],state.head&&len&&state.length<65536&&(state.head.comment+=String.fromCharCode(len)),len&&copy<have;);if(512&state.flags&&4&state.wrap&&(state.check=crc32_1(state.check,input,copy,next)),have-=copy,next+=copy,len)break inf_leave}else state.head&&(state.head.comment=null);state.mode=16188;case 16188:if(512&state.flags){for(;bits<16;){if(0===have)break inf_leave;have--,hold+=input[next++]<<bits,bits+=8}if(4&state.wrap&&hold!==(65535&state.check)){strm.msg="header crc mismatch",state.mode=BAD;break}bits=hold=0}state.head&&(state.head.hcrc=state.flags>>9&1,state.head.done=!0),strm.adler=state.check=0,state.mode=16191;break;case 16189:for(;bits<32;){if(0===have)break inf_leave;have--,hold+=input[next++]<<bits,bits+=8}strm.adler=state.check=zswap32(hold),bits=hold=0,state.mode=16190;case 16190:if(0===state.havedict)return strm.next_out=put,strm.avail_out=left,strm.next_in=next,strm.avail_in=have,state.hold=hold,state.bits=bits,Z_NEED_DICT$1;strm.adler=state.check=1,state.mode=16191;case 16191:if(flush===Z_BLOCK||flush===Z_TREES)break inf_leave;case 16192:if(state.last)hold>>>=7&bits,bits-=7&bits,state.mode=16206;else{for(;bits<3;){if(0===have)break inf_leave;have--,hold+=input[next++]<<bits,bits+=8}switch(state.last=1&hold,--bits,3&(hold>>>=1)){case 0:state.mode=16193;break;case 1:if(!function(state){if(virgin){lenfix=new Int32Array(512),distfix=new Int32Array(32);for(var sym=0;sym<144;)state.lens[sym++]=8;for(;sym<256;)state.lens[sym++]=9;for(;sym<280;)state.lens[sym++]=7;for(;sym<288;)state.lens[sym++]=8;for(inftrees(LENS,state.lens,0,288,lenfix,0,state.work,{bits:9}),sym=0;sym<32;)state.lens[sym++]=5;inftrees(DISTS,state.lens,0,32,distfix,0,state.work,{bits:5}),virgin=!1}state.lencode=lenfix,state.lenbits=9,state.distcode=distfix,state.distbits=5}(state),state.mode=16199,flush!==Z_TREES)break;hold>>>=2,bits-=2;break inf_leave;case 2:state.mode=16196;break;case 3:strm.msg="invalid block type",state.mode=BAD}hold>>>=2,bits-=2}break;case 16193:for(hold>>>=7&bits,bits-=7&bits;bits<32;){if(0===have)break inf_leave;have--,hold+=input[next++]<<bits,bits+=8}if((65535&hold)!=(hold>>>16^65535)){strm.msg="invalid stored block lengths",state.mode=BAD;break}if(state.length=65535&hold,bits=hold=0,state.mode=16194,flush===Z_TREES)break inf_leave;case 16194:state.mode=16195;case 16195:if(copy=state.length){if(0===(copy=left<(copy=have<copy?have:copy)?left:copy))break inf_leave;output.set(input.subarray(next,next+copy),put),have-=copy,next+=copy,left-=copy,put+=copy,state.length-=copy}else state.mode=16191;break;case 16196:for(;bits<14;){if(0===have)break inf_leave;have--,hold+=input[next++]<<bits,bits+=8}if(state.nlen=257+(31&hold),hold>>>=5,bits-=5,state.ndist=1+(31&hold),hold>>>=5,bits-=5,state.ncode=4+(15&hold),hold>>>=4,bits-=4,286<state.nlen||30<state.ndist){strm.msg="too many length or distance symbols",state.mode=BAD;break}state.have=0,state.mode=16197;case 16197:for(;state.have<state.ncode;){for(;bits<3;){if(0===have)break inf_leave;have--,hold+=input[next++]<<bits,bits+=8}state.lens[order[state.have++]]=7&hold,hold>>>=3,bits-=3}for(;state.have<19;)state.lens[order[state.have++]]=0;if(state.lencode=state.lendyn,state.lenbits=7,opts={bits:state.lenbits},ret=inftrees(0,state.lens,0,19,state.lencode,0,state.work,opts),state.lenbits=opts.bits,ret){strm.msg="invalid code lengths set",state.mode=BAD;break}state.have=0,state.mode=16198;case 16198:for(;state.have<state.nlen+state.ndist;){for(;here_op=(here=state.lencode[hold&(1<<state.lenbits)-1])>>>16&255,here_val=65535&here,!((here_bits=here>>>24)<=bits);){if(0===have)break inf_leave;have--,hold+=input[next++]<<bits,bits+=8}if(here_val<16)hold>>>=here_bits,bits-=here_bits,state.lens[state.have++]=here_val;else{if(16===here_val){for(n=here_bits+2;bits<n;){if(0===have)break inf_leave;have--,hold+=input[next++]<<bits,bits+=8}if(hold>>>=here_bits,bits-=here_bits,0===state.have){strm.msg="invalid bit length repeat",state.mode=BAD;break}len=state.lens[state.have-1],copy=3+(3&hold),hold>>>=2,bits-=2}else if(17===here_val){for(n=here_bits+3;bits<n;){if(0===have)break inf_leave;have--,hold+=input[next++]<<bits,bits+=8}len=0,copy=3+(7&(hold>>>=here_bits)),hold>>>=3,bits=bits-here_bits-3}else{for(n=here_bits+7;bits<n;){if(0===have)break inf_leave;have--,hold+=input[next++]<<bits,bits+=8}len=0,copy=11+(127&(hold>>>=here_bits)),hold>>>=7,bits=bits-here_bits-7}if(state.have+copy>state.nlen+state.ndist){strm.msg="invalid bit length repeat",state.mode=BAD;break}for(;copy--;)state.lens[state.have++]=len}}if(state.mode===BAD)break;if(0===state.lens[256]){strm.msg="invalid code -- missing end-of-block",state.mode=BAD;break}if(state.lenbits=9,opts={bits:state.lenbits},ret=inftrees(LENS,state.lens,0,state.nlen,state.lencode,0,state.work,opts),state.lenbits=opts.bits,ret){strm.msg="invalid literal/lengths set",state.mode=BAD;break}if(state.distbits=6,state.distcode=state.distdyn,opts={bits:state.distbits},ret=inftrees(DISTS,state.lens,state.nlen,state.ndist,state.distcode,0,state.work,opts),state.distbits=opts.bits,ret){strm.msg="invalid distances set",state.mode=BAD;break}if(state.mode=16199,flush===Z_TREES)break inf_leave;case 16199:state.mode=16200;case 16200:if(6<=have&&258<=left){strm.next_out=put,strm.avail_out=left,strm.next_in=next,strm.avail_in=have,state.hold=hold,state.bits=bits,!function(strm,start){var here,op,len,dist,from,from_source,state=strm.state,_in=strm.next_in,input=strm.input,last=_in+(strm.avail_in-5),_out=strm.next_out,output=strm.output,beg=_out-(start-strm.avail_out),end=_out+(strm.avail_out-257),dmax=state.dmax,wsize=state.wsize,whave=state.whave,wnext=state.wnext,s_window=state.window,hold=state.hold,bits=state.bits,lcode=state.lencode,dcode=state.distcode,lmask=(1<<state.lenbits)-1,dmask=(1<<state.distbits)-1;top:do{for(bits<15&&(hold+=input[_in++]<<bits,bits+=8,hold+=input[_in++]<<bits,bits+=8),here=lcode[hold&lmask];;){if(hold>>>=op=here>>>24,bits-=op,0===(op=here>>>16&255))output[_out++]=65535&here;else{if(!(16&op)){if(0==(64&op)){here=lcode[(65535&here)+(hold&(1<<op)-1)];continue}if(32&op){state.mode=TYPE$1;break top}strm.msg="invalid literal/length code",state.mode=BAD$1;break top}for(len=65535&here,(op&=15)&&(bits<op&&(hold+=input[_in++]<<bits,bits+=8),len+=hold&(1<<op)-1,hold>>>=op,bits-=op),bits<15&&(hold+=input[_in++]<<bits,bits+=8,hold+=input[_in++]<<bits,bits+=8),here=dcode[hold&dmask];;){if(hold>>>=op=here>>>24,bits-=op,!(16&(op=here>>>16&255))){if(0==(64&op)){here=dcode[(65535&here)+(hold&(1<<op)-1)];continue}strm.msg="invalid distance code",state.mode=BAD$1;break top}if(dist=65535&here,bits<(op&=15)&&(hold+=input[_in++]<<bits,(bits+=8)<op)&&(hold+=input[_in++]<<bits,bits+=8),dmax<(dist+=hold&(1<<op)-1)){strm.msg="invalid distance too far back",state.mode=BAD$1;break top}if(hold>>>=op,bits-=op,(op=_out-beg)<dist){if(whave<(op=dist-op)&&state.sane){strm.msg="invalid distance too far back",state.mode=BAD$1;break top}if(from_source=s_window,(from=0)===wnext){if(from+=wsize-op,op<len){for(len-=op;output[_out++]=s_window[from++],--op;);from=_out-dist,from_source=output}}else if(wnext<op){if(from+=wsize+wnext-op,(op-=wnext)<len){for(len-=op;output[_out++]=s_window[from++],--op;);if(from=0,wnext<len){for(len-=op=wnext;output[_out++]=s_window[from++],--op;);from=_out-dist,from_source=output}}}else if(from+=wnext-op,op<len){for(len-=op;output[_out++]=s_window[from++],--op;);from=_out-dist,from_source=output}for(;2<len;)output[_out++]=from_source[from++],output[_out++]=from_source[from++],output[_out++]=from_source[from++],len-=3;len&&(output[_out++]=from_source[from++],1<len)&&(output[_out++]=from_source[from++])}else{for(from=_out-dist;output[_out++]=output[from++],output[_out++]=output[from++],output[_out++]=output[from++],2<(len-=3););len&&(output[_out++]=output[from++],1<len)&&(output[_out++]=output[from++])}break}}break}}while(_in<last&&_out<end);hold&=(1<<(bits-=(len=bits>>3)<<3))-1,strm.next_in=_in-=len,strm.next_out=_out,strm.avail_in=_in<last?last-_in+5:5-(_in-last),strm.avail_out=_out<end?end-_out+257:257-(_out-end),state.hold=hold,state.bits=bits}(strm,_out),put=strm.next_out,output=strm.output,left=strm.avail_out,next=strm.next_in,input=strm.input,have=strm.avail_in,hold=state.hold,bits=state.bits,16191===state.mode&&(state.back=-1);break}for(state.back=0;here_op=(here=state.lencode[hold&(1<<state.lenbits)-1])>>>16&255,here_val=65535&here,!((here_bits=here>>>24)<=bits);){if(0===have)break inf_leave;have--,hold+=input[next++]<<bits,bits+=8}if(here_op&&0==(240&here_op)){for(last_bits=here_bits,last_op=here_op,last_val=here_val;here_op=(here=state.lencode[last_val+((hold&(1<<last_bits+last_op)-1)>>last_bits)])>>>16&255,here_val=65535&here,!(last_bits+(here_bits=here>>>24)<=bits);){if(0===have)break inf_leave;have--,hold+=input[next++]<<bits,bits+=8}hold>>>=last_bits,bits-=last_bits,state.back+=last_bits}if(hold>>>=here_bits,bits-=here_bits,state.back+=here_bits,state.length=here_val,0===here_op){state.mode=16205;break}if(32&here_op){state.back=-1,state.mode=16191;break}if(64&here_op){strm.msg="invalid literal/length code",state.mode=BAD;break}state.extra=15&here_op,state.mode=16201;case 16201:if(state.extra){for(n=state.extra;bits<n;){if(0===have)break inf_leave;have--,hold+=input[next++]<<bits,bits+=8}state.length+=hold&(1<<state.extra)-1,hold>>>=state.extra,bits-=state.extra,state.back+=state.extra}state.was=state.length,state.mode=16202;case 16202:for(;here_op=(here=state.distcode[hold&(1<<state.distbits)-1])>>>16&255,here_val=65535&here,!((here_bits=here>>>24)<=bits);){if(0===have)break inf_leave;have--,hold+=input[next++]<<bits,bits+=8}if(0==(240&here_op)){for(last_bits=here_bits,last_op=here_op,last_val=here_val;here_op=(here=state.distcode[last_val+((hold&(1<<last_bits+last_op)-1)>>last_bits)])>>>16&255,here_val=65535&here,!(last_bits+(here_bits=here>>>24)<=bits);){if(0===have)break inf_leave;have--,hold+=input[next++]<<bits,bits+=8}hold>>>=last_bits,bits-=last_bits,state.back+=last_bits}if(hold>>>=here_bits,bits-=here_bits,state.back+=here_bits,64&here_op){strm.msg="invalid distance code",state.mode=BAD;break}state.offset=here_val,state.extra=15&here_op,state.mode=16203;case 16203:if(state.extra){for(n=state.extra;bits<n;){if(0===have)break inf_leave;have--,hold+=input[next++]<<bits,bits+=8}state.offset+=hold&(1<<state.extra)-1,hold>>>=state.extra,bits-=state.extra,state.back+=state.extra}if(state.offset>state.dmax){strm.msg="invalid distance too far back",state.mode=BAD;break}state.mode=16204;case 16204:if(0===left)break inf_leave;if(state.offset>(copy=_out-left)){if((copy=state.offset-copy)>state.whave&&state.sane){strm.msg="invalid distance too far back",state.mode=BAD;break}from=copy>state.wnext?(copy-=state.wnext,state.wsize-copy):state.wnext-copy,copy>state.length&&(copy=state.length),from_source=state.window}else from_source=output,from=put-state.offset,copy=state.length;for(left-=copy=left<copy?left:copy,state.length-=copy;output[put++]=from_source[from++],--copy;);0===state.length&&(state.mode=16200);break;case 16205:if(0===left)break inf_leave;output[put++]=state.length,left--,state.mode=16200;break;case 16206:if(state.wrap){for(;bits<32;){if(0===have)break inf_leave;have--,hold|=input[next++]<<bits,bits+=8}if(_out-=left,strm.total_out+=_out,state.total+=_out,4&state.wrap&&_out&&(strm.adler=state.check=(state.flags?crc32_1:adler32_1)(state.check,output,_out,put-_out)),_out=left,4&state.wrap&&(state.flags?hold:zswap32(hold))!==state.check){strm.msg="incorrect data check",state.mode=BAD;break}bits=hold=0}state.mode=16207;case 16207:if(state.wrap&&state.flags){for(;bits<32;){if(0===have)break inf_leave;have--,hold+=input[next++]<<bits,bits+=8}if(4&state.wrap&&hold!==(4294967295&state.total)){strm.msg="incorrect length check",state.mode=BAD;break}bits=hold=0}state.mode=16208;case 16208:ret=Z_STREAM_END$1;break inf_leave;case BAD:ret=Z_DATA_ERROR$1;break inf_leave;case 16210:return Z_MEM_ERROR$1;default:return Z_STREAM_ERROR$1}return strm.next_out=put,strm.avail_out=left,strm.next_in=next,strm.avail_in=have,state.hold=hold,state.bits=bits,(state.wsize||_out!==strm.avail_out&&state.mode<BAD&&(state.mode<16206||flush!==Z_FINISH$1))&&updatewindow(strm,strm.output,strm.next_out,_out-strm.avail_out),_out-=strm.avail_out,strm.total_in+=_in-=strm.avail_in,strm.total_out+=_out,state.total+=_out,4&state.wrap&&_out&&(strm.adler=state.check=(state.flags?crc32_1:adler32_1)(state.check,output,_out,strm.next_out-_out)),strm.data_type=state.bits+(state.last?64:0)+(16191===state.mode?128:0)+(16199===state.mode||16194===state.mode?256:0),ret=(0==_in&&0===_out||flush===Z_FINISH$1)&&ret===Z_OK$1?Z_BUF_ERROR:ret},inflateEnd:function(strm){var state;return inflateStateCheck(strm)?Z_STREAM_ERROR$1:((state=strm.state).window&&(state.window=null),strm.state=null,Z_OK$1)},inflateGetHeader:function(strm,head){return inflateStateCheck(strm)||0==(2&(strm=strm.state).wrap)?Z_STREAM_ERROR$1:((strm.head=head).done=!1,Z_OK$1)},inflateSetDictionary:function(strm,dictionary){var state,dictLength=dictionary.length;return inflateStateCheck(strm)||0!==(state=strm.state).wrap&&16190!==state.mode?Z_STREAM_ERROR$1:16190===state.mode&&adler32_1(1,dictionary,dictLength,0)!==state.check?Z_DATA_ERROR$1:updatewindow(strm,dictionary,dictLength,dictLength)?(state.mode=16210,Z_MEM_ERROR$1):(state.havedict=1,Z_OK$1)},inflateInfo:"pako inflate (from Nodeca project)"};function _typeof(obj){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj})(obj)}var common_assign=function(obj){for(var sources=Array.prototype.slice.call(arguments,1);sources.length;){var source=sources.shift();if(source){if("object"!==_typeof(source))throw new TypeError(source+"must be non-object");for(var p in source)!function(obj,key){return Object.prototype.hasOwnProperty.call(obj,key)}(source,p)||(obj[p]=source[p])}}return obj},common_flattenChunks=function(chunks){for(var len=0,i=0,l=chunks.length;i<l;i++)len+=chunks[i].length;for(var result=new Uint8Array(len),_i=0,pos=0,_l=chunks.length;_i<_l;_i++){var chunk=chunks[_i];result.set(chunk,pos),pos+=chunk.length}return result},STR_APPLY_UIA_OK=!0;try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(__){STR_APPLY_UIA_OK=!1}for(var _utf8len=new Uint8Array(256),q=0;q<256;q++)_utf8len[q]=252<=q?6:248<=q?5:240<=q?4:224<=q?3:192<=q?2:1;_utf8len[254]=_utf8len[254]=1;var strings_string2buf=function(str){if("function"==typeof TextEncoder&&TextEncoder.prototype.encode)return(new TextEncoder).encode(str);for(var buf,c,c2,i,str_len=str.length,buf_len=0,m_pos=0;m_pos<str_len;m_pos++)55296==(64512&(c=str.charCodeAt(m_pos)))&&m_pos+1<str_len&&56320==(64512&(c2=str.charCodeAt(m_pos+1)))&&(c=65536+(c-55296<<10)+(c2-56320),m_pos++),buf_len+=c<128?1:c<2048?2:c<65536?3:4;for(buf=new Uint8Array(buf_len),m_pos=i=0;i<buf_len;m_pos++)55296==(64512&(c=str.charCodeAt(m_pos)))&&m_pos+1<str_len&&56320==(64512&(c2=str.charCodeAt(m_pos+1)))&&(c=65536+(c-55296<<10)+(c2-56320),m_pos++),c<128?buf[i++]=c:(c<2048?buf[i++]=192|c>>>6:(c<65536?buf[i++]=224|c>>>12:(buf[i++]=240|c>>>18,buf[i++]=128|c>>>12&63),buf[i++]=128|c>>>6&63),buf[i++]=128|63&c);return buf},strings_buf2string=function(buf,max){var len=max||buf.length;if("function"==typeof TextDecoder&&TextDecoder.prototype.decode)return(new TextDecoder).decode(buf.subarray(0,max));for(var utf16buf=new Array(2*len),out=0,i=0;i<len;){var c=buf[i++];if(c<128)utf16buf[out++]=c;else{var c_len=_utf8len[c];if(4<c_len)utf16buf[out++]=65533,i+=c_len-1;else{for(c&=2===c_len?31:3===c_len?15:7;1<c_len&&i<len;)c=c<<6|63&buf[i++],c_len--;1<c_len?utf16buf[out++]=65533:c<65536?utf16buf[out++]=c:(c-=65536,utf16buf[out++]=55296|c>>10&1023,utf16buf[out++]=56320|1023&c)}}}return function(buf,len){if(len<65534&&buf.subarray&&STR_APPLY_UIA_OK)return String.fromCharCode.apply(null,buf.length===len?buf:buf.subarray(0,len));for(var result="",i=0;i<len;i++)result+=String.fromCharCode(buf[i]);return result}(utf16buf,out)},strings_utf8border=function(buf,max){for(var pos=(max=(max=max||buf.length)>buf.length?buf.length:max)-1;0<=pos&&128==(192&buf[pos]);)pos--;return!(pos<0)&&0!==pos&&pos+_utf8len[buf[pos]]>max?pos:max},messages={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"};var zstream=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0};var gzheader=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1},toString=Object.prototype.toString,Z_NO_FLUSH=constants$1.Z_NO_FLUSH,Z_FINISH=constants$1.Z_FINISH,Z_OK=constants$1.Z_OK,Z_STREAM_END=constants$1.Z_STREAM_END,Z_NEED_DICT=constants$1.Z_NEED_DICT,Z_STREAM_ERROR=constants$1.Z_STREAM_ERROR,Z_DATA_ERROR=constants$1.Z_DATA_ERROR,Z_MEM_ERROR=constants$1.Z_MEM_ERROR;function Inflate(options){this.options=common_assign({chunkSize:65536,windowBits:15,to:""},options||{});var opt=this.options,options=(opt.raw&&0<=opt.windowBits&&opt.windowBits<16&&(opt.windowBits=-opt.windowBits,0===opt.windowBits)&&(opt.windowBits=-15),!(0<=opt.windowBits&&opt.windowBits<16)||options&&options.windowBits||(opt.windowBits+=32),15<opt.windowBits&&opt.windowBits<48&&0==(15&opt.windowBits)&&(opt.windowBits|=15),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new zstream,this.strm.avail_out=0,inflate_1$1.inflateInit2(this.strm,opt.windowBits));if(options!==Z_OK)throw new Error(messages[options]);if(this.header=new gzheader,inflate_1$1.inflateGetHeader(this.strm,this.header),opt.dictionary&&("string"==typeof opt.dictionary?opt.dictionary=strings_string2buf(opt.dictionary):"[object ArrayBuffer]"===toString.call(opt.dictionary)&&(opt.dictionary=new Uint8Array(opt.dictionary)),opt.raw)&&(options=inflate_1$1.inflateSetDictionary(this.strm,opt.dictionary))!==Z_OK)throw new Error(messages[options])}function inflate(input,options){options=new Inflate(options);if(options.push(input),options.err)throw options.msg||messages[options.err];return options.result}Inflate.prototype.push=function(data,flush_mode){var status,_flush_mode,strm=this.strm,chunkSize=this.options.chunkSize,dictionary=this.options.dictionary;if(this.ended)return!1;for(_flush_mode=flush_mode===~~flush_mode?flush_mode:!0===flush_mode?Z_FINISH:Z_NO_FLUSH,"[object ArrayBuffer]"===toString.call(data)?strm.input=new Uint8Array(data):strm.input=data,strm.next_in=0,strm.avail_in=strm.input.length;;){for(0===strm.avail_out&&(strm.output=new Uint8Array(chunkSize),strm.next_out=0,strm.avail_out=chunkSize),(status=inflate_1$1.inflate(strm,_flush_mode))===Z_NEED_DICT&&dictionary&&((status=inflate_1$1.inflateSetDictionary(strm,dictionary))===Z_OK?status=inflate_1$1.inflate(strm,_flush_mode):status===Z_DATA_ERROR&&(status=Z_NEED_DICT));0<strm.avail_in&&status===Z_STREAM_END&&0<strm.state.wrap&&0!==data[strm.next_in];)inflate_1$1.inflateReset(strm),status=inflate_1$1.inflate(strm,_flush_mode);switch(status){case Z_STREAM_ERROR:case Z_DATA_ERROR:case Z_NEED_DICT:case Z_MEM_ERROR:return this.onEnd(status),!(this.ended=!0)}var next_out_utf8,tail,utf8str,last_avail_out=strm.avail_out;if(!strm.next_out||0!==strm.avail_out&&status!==Z_STREAM_END||("string"===this.options.to?(next_out_utf8=strings_utf8border(strm.output,strm.next_out),tail=strm.next_out-next_out_utf8,utf8str=strings_buf2string(strm.output,next_out_utf8),strm.next_out=tail,strm.avail_out=chunkSize-tail,tail&&strm.output.set(strm.output.subarray(next_out_utf8,next_out_utf8+tail),0),this.onData(utf8str)):this.onData(strm.output.length===strm.next_out?strm.output:strm.output.subarray(0,strm.next_out))),status!==Z_OK||0!==last_avail_out){if(status===Z_STREAM_END)return status=inflate_1$1.inflateEnd(this.strm),this.onEnd(status),this.ended=!0;if(0===strm.avail_in)break}}return!0},Inflate.prototype.onData=function(chunk){this.chunks.push(chunk)},Inflate.prototype.onEnd=function(status){status===Z_OK&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=common_flattenChunks(this.chunks)),this.chunks=[],this.err=status,this.msg=this.strm.msg};function inflateRaw_1(input,options){return(options=options||{}).raw=!0,inflate(input,options)}var inflate_2=inflate,ungzip=inflate,inflate_1={Inflate:Inflate,inflate:inflate_2,inflateRaw:inflateRaw_1,ungzip:ungzip,constants:constants$1};return exports.Inflate=Inflate,exports.constants=constants$1,exports.default=inflate_1,exports.inflate=inflate_2,exports.inflateRaw=inflateRaw_1,exports.ungzip=ungzip,exports}void 0!==Module&&(Module.TA=TA);var browserFix=browserFix||{},wasmString;function inflateBase64(base64){var binaryString=function(string){var b64="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",string=String(string).replace(/[\t\n\f\r ]+/g,"");string+="==".slice(2-(3&string.length));for(var bitmap,r1,r2,result="",i=0;i<string.length;)bitmap=b64.indexOf(string.charAt(i++))<<18|b64.indexOf(string.charAt(i++))<<12|(r1=b64.indexOf(string.charAt(i++)))<<6|(r2=b64.indexOf(string.charAt(i++))),result+=64===r1?String.fromCharCode(bitmap>>16&255):64===r2?String.fromCharCode(bitmap>>16&255,bitmap>>8&255):String.fromCharCode(bitmap>>16&255,bitmap>>8&255,255&bitmap);return result}(base64),length=binaryString.length,bytes=new Uint8Array(length);for(let i=0;i<length;i++)bytes[i]=binaryString.charCodeAt(i);return init_pako().inflate(bytes)}browserFix.sliceTypedArray=function(array,sliceBegin,sliceEnd){var bpe=array.BYTES_PER_ELEMENT,boff=array.byteOffset,len=array.length;return(sliceBegin=0|sliceBegin||0)<0&&(sliceBegin+=len),(sliceEnd=void 0===sliceEnd?len:0|sliceEnd)<0&&(sliceEnd+=len),new array.constructor(array.buffer.slice(boff+bpe*sliceBegin,boff+bpe*sliceEnd))},void 0===Uint8Array.prototype.slice&&(console.warn("The TypedArray.slice method is not supported in this browser. This may impair performance. "),Uint16Array.prototype.slice=function(begin,end){return browserFix.sliceTypedArray(this,begin,end)},Int16Array.prototype.slice=function(begin,end){return browserFix.sliceTypedArray(this,begin,end)},Uint8Array.prototype.slice=function(begin,end){return browserFix.sliceTypedArray(this,begin,end)},Int8Array.prototype.slice=function(begin,end){return browserFix.sliceTypedArray(this,begin,end)}),void 0!==Module&&(wasmString="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",100<wasmString.length)&&(Module.wasmBinary=inflateBase64(wasmString),Module.__haswasmBinary__=!0),"undefined"!=typeof __ctx&&void 0!==__ctx.INITIAL_MEMORY&&(Module.INITIAL_MEMORY=__ctx.INITIAL_MEMORY),"undefined"==typeof print&&(print=console.log);var JSHttpGet=null,crypto,fs,os,process,CLUSTER_IP,CLUSTER_DOMAIN,JSHttpGet;function md5(text){return crypto.createHash("md5").update(text).digest("hex")}JSHttpGet="undefined"!=typeof self&&void 0!==self.onmessage?function(path){var r=XMLHttpRequest?new XMLHttpRequest:new ActiveXObject("Microsoft.XMLHTTP");return r.open("GET","https://www.fmz.com"+path,!1),r.send(null),r.responseText}:(crypto=require("crypto"),fs=require("fs"),os=require("os"),process=require("process"),CLUSTER_IP=process.env.CLUSTER_IP||"q.fmz.com",CLUSTER_DOMAIN=process.env.CLUSTER_DOMAIN||"q.fmz.com",function(url){var tmpCache=os.tmpdir()+"/cache",tmpCache=(fs.existsSync(tmpCache)||fs.mkdirSync(tmpCache),tmpCache+"/botvs_kline_"+md5(url="http://"+CLUSTER_IP+url));return fs.existsSync(tmpCache)?fs.readFileSync(tmpCache,"utf-8"):((url=require("sync-request")("GET",url,{headers:{Host:CLUSTER_DOMAIN}}).getBody("utf8"))&&-1!==url.indexOf(",")&&fs.writeFileSync(tmpCache,url,"utf-8"),url)});var moduleOverrides=Object.assign({},Module),arguments_=[],thisProgram="./this.program",quit_=(status,toThrow)=>{throw toThrow},ENVIRONMENT_IS_WEB="object"==typeof window,ENVIRONMENT_IS_WORKER="function"==typeof importScripts,ENVIRONMENT_IS_NODE="object"==typeof process&&"object"==typeof process.versions&&"string"==typeof process.versions.node,scriptDirectory="",read_,readAsync,readBinary,setWindowTitle,fs,nodePath,scriptDirectory,read_,readBinary,readAsync;function locateFile(path){return Module.locateFile?Module.locateFile(path,scriptDirectory):scriptDirectory+path}ENVIRONMENT_IS_NODE?(fs=require("fs"),nodePath=require("path"),scriptDirectory=ENVIRONMENT_IS_WORKER?nodePath.dirname(scriptDirectory)+"/":__dirname+"/",read_=(filename,binary)=>(filename=isFileURI(filename)?new URL(filename):nodePath.normalize(filename),fs.readFileSync(filename,binary?void 0:"utf8")),readBinary=filename=>{filename=read_(filename,!0);return filename=filename.buffer?filename:new Uint8Array(filename)},readAsync=(filename,onload,onerror,binary=!0)=>{filename=isFileURI(filename)?new URL(filename):nodePath.normalize(filename),fs.readFile(filename,binary?void 0:"utf8",(err,data)=>{err?onerror(err):onload(binary?data.buffer:data)})},!Module.thisProgram&&1<process.argv.length&&(thisProgram=process.argv[1].replace(/\\/g,"/")),arguments_=process.argv.slice(2),quit_=(status,toThrow)=>{throw process.exitCode=status,toThrow},Module.inspect=()=>"[Emscripten Module object]"):(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER)&&(ENVIRONMENT_IS_WORKER?scriptDirectory=self.location.href:"undefined"!=typeof document&&document.currentScript&&(scriptDirectory=document.currentScript.src),_scriptDir&&(scriptDirectory=_scriptDir),scriptDirectory=0!==scriptDirectory.indexOf("blob:")?scriptDirectory.substr(0,scriptDirectory.replace(/[?#].*/,"").lastIndexOf("/")+1):"",read_=url=>{var xhr=new XMLHttpRequest;return xhr.open("GET",url,!1),xhr.send(null),xhr.responseText},ENVIRONMENT_IS_WORKER&&(readBinary=url=>{var xhr=new XMLHttpRequest;return xhr.open("GET",url,!1),xhr.responseType="arraybuffer",xhr.send(null),new Uint8Array(xhr.response)}),readAsync=(url,onload,onerror)=>{var xhr=new XMLHttpRequest;xhr.open("GET",url,!0),xhr.responseType="arraybuffer",xhr.onload=()=>{200==xhr.status||0==xhr.status&&xhr.response?onload(xhr.response):onerror()},xhr.onerror=onerror,xhr.send(null)},setWindowTitle=title=>document.title=title);var out=Module.print||console.log.bind(console),err=Module.printErr||console.error.bind(console),wasmBinary,noExitRuntime=(Object.assign(Module,moduleOverrides),moduleOverrides=null,Module.arguments&&(arguments_=Module.arguments),Module.thisProgram&&(thisProgram=Module.thisProgram),Module.quit&&(quit_=Module.quit),Module.wasmBinary&&(wasmBinary=Module.wasmBinary),Module.noExitRuntime||!0),wasmMemory,wasmExports,ABORT=("object"!=typeof WebAssembly&&abort("no native wasm support detected"),!1),EXITSTATUS,HEAP8,HEAPU8,HEAP16,HEAPU16,HEAP32,HEAPU32,HEAPF32,HEAPF64;function assert(condition,text){condition||abort(text)}function updateMemoryViews(){var b=wasmMemory.buffer;Module.HEAP8=HEAP8=new Int8Array(b),Module.HEAP16=HEAP16=new Int16Array(b),Module.HEAP32=HEAP32=new Int32Array(b),Module.HEAPU8=HEAPU8=new Uint8Array(b),Module.HEAPU16=HEAPU16=new Uint16Array(b),Module.HEAPU32=HEAPU32=new Uint32Array(b),Module.HEAPF32=HEAPF32=new Float32Array(b),Module.HEAPF64=HEAPF64=new Float64Array(b)}var INITIAL_MEMORY=Module.INITIAL_MEMORY||314572800,wasmTable,__ATPRERUN__=(assert(5242880<=INITIAL_MEMORY,"INITIAL_MEMORY should be larger than STACK_SIZE, was "+INITIAL_MEMORY+"! (STACK_SIZE=5242880)"),wasmMemory=Module.wasmMemory||new WebAssembly.Memory({initial:INITIAL_MEMORY/65536,maximum:65536}),updateMemoryViews(),INITIAL_MEMORY=wasmMemory.buffer.byteLength,[]),__ATINIT__=[],__ATPOSTRUN__=[],runtimeInitialized=!1;function preRun(){if(Module.preRun)for("function"==typeof Module.preRun&&(Module.preRun=[Module.preRun]);Module.preRun.length;)addOnPreRun(Module.preRun.shift());callRuntimeCallbacks(__ATPRERUN__)}function initRuntime(){runtimeInitialized=!0,Module.noFSInit||FS.init.initialized||FS.init(),FS.ignorePermissions=!1,TTY.init(),callRuntimeCallbacks(__ATINIT__)}function postRun(){if(Module.postRun)for("function"==typeof Module.postRun&&(Module.postRun=[Module.postRun]);Module.postRun.length;)addOnPostRun(Module.postRun.shift());callRuntimeCallbacks(__ATPOSTRUN__)}function addOnPreRun(cb){__ATPRERUN__.unshift(cb)}function addOnInit(cb){__ATINIT__.unshift(cb)}function addOnPostRun(cb){__ATPOSTRUN__.unshift(cb)}var runDependencies=0,runDependencyWatcher=null,dependenciesFulfilled=null;function getUniqueRunDependency(id){return id}function addRunDependency(id){runDependencies++,Module.monitorRunDependencies&&Module.monitorRunDependencies(runDependencies)}function removeRunDependency(id){var callback;runDependencies--,Module.monitorRunDependencies&&Module.monitorRunDependencies(runDependencies),0==runDependencies&&(null!==runDependencyWatcher&&(clearInterval(runDependencyWatcher),runDependencyWatcher=null),dependenciesFulfilled)&&(callback=dependenciesFulfilled,dependenciesFulfilled=null,callback())}function abort(what){Module.onAbort&&Module.onAbort(what),err(what="Aborted("+what+")"),ABORT=!0,EXITSTATUS=1,what+=". Build with -sASSERTIONS for more info.";what=new WebAssembly.RuntimeError(what);throw readyPromiseReject(what),what}var dataURIPrefix="data:application/octet-stream;base64,",wasmBinaryFile,tempDouble,tempI64;function isDataURI(filename){return filename.startsWith(dataURIPrefix)}function isFileURI(filename){return filename.startsWith("file://")}function getBinarySync(file){if(file==wasmBinaryFile&&wasmBinary)return new Uint8Array(wasmBinary);if(readBinary)return readBinary(file);throw"sync fetching of the wasm failed: you can preload it to Module['wasmBinary'] manually, or emcc.py will do that for you when generating HTML (but not JS)"}function instantiateSync(file,info){file=getBinarySync(file),file=new WebAssembly.Module(file);return[new WebAssembly.Instance(file,info),file]}function createWasm(){var info={a:wasmImports};function receiveInstance(instance,module){instance=applySignatureConversions(instance.exports);return wasmTable=(wasmExports=instance).S,addOnInit(wasmExports.O),removeRunDependency("wasm-instantiate"),instance}if(addRunDependency("wasm-instantiate"),Module.instantiateWasm)try{return Module.instantiateWasm(info,receiveInstance)}catch(e){err("Module.instantiateWasm callback failed with error: "+e),readyPromiseReject(e)}return receiveInstance(instantiateSync(wasmBinaryFile,info)[0])}wasmBinaryFile="sandbox_cpp_wasm.wasm",isDataURI(wasmBinaryFile)||(wasmBinaryFile=locateFile(wasmBinaryFile));var callRuntimeCallbacks=callbacks=>{for(;0<callbacks.length;)callbacks.shift()(Module)};function getValue(ptr,type="i8"){switch(type=type.endsWith("*")?"*":type){case"i1":case"i8":return HEAP8[ptr>>>0];case"i16":return HEAP16[ptr>>>1];case"i32":return HEAP32[ptr>>>2];case"i64":abort("to do getValue(i64) use WASM_BIGINT");case"float":return HEAPF32[ptr>>>2];case"double":return HEAPF64[ptr>>>3];case"*":return HEAPU32[ptr>>>2];default:abort("invalid type for getValue: "+type)}}function setValue(ptr,value,type="i8"){switch(type=type.endsWith("*")?"*":type){case"i1":case"i8":HEAP8[ptr>>>0]=value;break;case"i16":HEAP16[ptr>>>1]=value;break;case"i32":HEAP32[ptr>>>2]=value;break;case"i64":abort("to do setValue(i64) use WASM_BIGINT");case"float":HEAPF32[ptr>>>2]=value;break;case"double":HEAPF64[ptr>>>3]=value;break;case"*":HEAPU32[ptr>>>2]=value;break;default:abort("invalid type for setValue: "+type)}}function convertI32PairToI53Checked(lo,hi){return hi+2097152>>>0<4194305-!!lo?(lo>>>0)+4294967296*hi:NaN}var UTF8Decoder="undefined"!=typeof TextDecoder?new TextDecoder("utf8"):void 0,UTF8ArrayToString=(heapOrArray,idx,maxBytesToRead)=>{for(var endIdx=(idx>>>=0)+maxBytesToRead,endPtr=idx;heapOrArray[endPtr]&&!(endIdx<=endPtr);)++endPtr;if(16<endPtr-idx&&heapOrArray.buffer&&UTF8Decoder)return UTF8Decoder.decode(heapOrArray.subarray(idx,endPtr));for(var str="";idx<endPtr;){var u2,u1,u0=heapOrArray[idx++];128&u0?(u1=63&heapOrArray[idx++],192==(224&u0)?str+=String.fromCharCode((31&u0)<<6|u1):(u2=63&heapOrArray[idx++],(u0=224==(240&u0)?(15&u0)<<12|u1<<6|u2:(7&u0)<<18|u1<<12|u2<<6|63&heapOrArray[idx++])<65536?str+=String.fromCharCode(u0):(u1=u0-65536,str+=String.fromCharCode(55296|u1>>10,56320|1023&u1)))):str+=String.fromCharCode(u0)}return str},UTF8ToString=(ptr,maxBytesToRead)=>(ptr>>>=0)?UTF8ArrayToString(HEAPU8,ptr,maxBytesToRead):"";function ___assert_fail(condition,filename,line,func){filename>>>=0,func>>>=0,abort(`Assertion failed: ${UTF8ToString(condition>>>=0)}, at: `+[filename?UTF8ToString(filename):"unknown filename",line,func?UTF8ToString(func):"unknown function"])}function ExceptionInfo(excPtr){this.excPtr=excPtr,this.ptr=excPtr-24,this.set_type=function(type){HEAPU32[this.ptr+4>>>2]=type},this.get_type=function(){return HEAPU32[this.ptr+4>>>2]},this.set_destructor=function(destructor){HEAPU32[this.ptr+8>>>2]=destructor},this.get_destructor=function(){return HEAPU32[this.ptr+8>>>2]},this.set_caught=function(caught){HEAP8[this.ptr+12>>>0]=caught=caught?1:0},this.get_caught=function(){return 0!=HEAP8[this.ptr+12>>>0]},this.set_rethrown=function(rethrown){HEAP8[this.ptr+13>>>0]=rethrown=rethrown?1:0},this.get_rethrown=function(){return 0!=HEAP8[this.ptr+13>>>0]},this.init=function(type,destructor){this.set_adjusted_ptr(0),this.set_type(type),this.set_destructor(destructor)},this.set_adjusted_ptr=function(adjustedPtr){HEAPU32[this.ptr+16>>>2]=adjustedPtr},this.get_adjusted_ptr=function(){return HEAPU32[this.ptr+16>>>2]},this.get_exception_ptr=function(){var adjusted;return ___cxa_is_pointer_type(this.get_type())?HEAPU32[this.excPtr>>>2]:0!==(adjusted=this.get_adjusted_ptr())?adjusted:this.excPtr}}var exceptionLast=0,uncaughtExceptionCount=0;function ___cxa_throw(ptr,type,destructor){throw type>>>=0,destructor>>>=0,new ExceptionInfo(ptr>>>=0).init(type,destructor),uncaughtExceptionCount++,ptr}var structRegistrations={};function runDestructors(destructors){for(;destructors.length;){var ptr=destructors.pop();destructors.pop()(ptr)}}function simpleReadValueFromPointer(pointer){return this.fromWireType(HEAP32[pointer>>>2])}var awaitingDependencies={},registeredTypes={},typeDependencies={},InternalError=void 0;function throwInternalError(message){throw new InternalError(message)}function whenDependentTypesAreResolved(myTypes,dependentTypes,getTypeConverters){function onComplete(typeConverters){var myTypeConverters=getTypeConverters(typeConverters);myTypeConverters.length!==myTypes.length&&throwInternalError("Mismatched type converter count");for(var i=0;i<myTypes.length;++i)registerType(myTypes[i],myTypeConverters[i])}myTypes.forEach(function(type){typeDependencies[type]=dependentTypes});var typeConverters=new Array(dependentTypes.length),unregisteredTypes=[],registered=0;dependentTypes.forEach((dt,i)=>{registeredTypes.hasOwnProperty(dt)?typeConverters[i]=registeredTypes[dt]:(unregisteredTypes.push(dt),awaitingDependencies.hasOwnProperty(dt)||(awaitingDependencies[dt]=[]),awaitingDependencies[dt].push(()=>{typeConverters[i]=registeredTypes[dt],++registered===unregisteredTypes.length&&onComplete(typeConverters)}))}),0===unregisteredTypes.length&&onComplete(typeConverters)}var __embind_finalize_value_object=function(structType){var reg=structRegistrations[structType>>>=0],rawConstructor=(delete structRegistrations[structType],reg.rawConstructor),rawDestructor=reg.rawDestructor,fieldRecords=reg.fields;whenDependentTypesAreResolved([structType],fieldRecords.map(field=>field.getterReturnType).concat(fieldRecords.map(field=>field.setterArgumentType)),fieldTypes=>{var fields={};return fieldRecords.forEach((field,i)=>{var fieldName=field.fieldName,getterReturnType=fieldTypes[i],getter=field.getter,getterContext=field.getterContext,setterArgumentType=fieldTypes[i+fieldRecords.length],setter=field.setter,setterContext=field.setterContext;fields[fieldName]={read:ptr=>getterReturnType.fromWireType(getter(getterContext,ptr)),write:(ptr,o)=>{var destructors=[];setter(setterContext,ptr,setterArgumentType.toWireType(destructors,o)),runDestructors(destructors)}}}),[{name:reg.name,fromWireType:function(ptr){var i,rv={};for(i in fields)rv[i]=fields[i].read(ptr);return rawDestructor(ptr),rv},toWireType:function(destructors,o){for(var fieldName in fields)if(!(fieldName in o))throw new TypeError(`Missing field: "${fieldName}"`);var ptr=rawConstructor();for(fieldName in fields)fields[fieldName].write(ptr,o[fieldName]);return null!==destructors&&destructors.push(rawDestructor,ptr),ptr},argPackAdvance:8,readValueFromPointer:simpleReadValueFromPointer,destructorFunction:rawDestructor}]})};function __embind_register_bigint(primitiveType,name,size,minRange,maxRange){}function getShiftFromSize(size){switch(size){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError("Unknown type size: "+size)}}function embind_init_charCodes(){for(var codes=new Array(256),i=0;i<256;++i)codes[i]=String.fromCharCode(i);embind_charCodes=codes}var embind_charCodes=void 0;function readLatin1String(ptr){for(var ret="",c=ptr;HEAPU8[c>>>0];)ret+=embind_charCodes[HEAPU8[c++>>>0]];return ret}var BindingError=void 0;function throwBindingError(message){throw new BindingError(message)}function sharedRegisterType(rawType,registeredInstance,options={}){var name=registeredInstance.name;if(rawType||throwBindingError(`type "${name}" must have a positive integer typeid pointer`),registeredTypes.hasOwnProperty(rawType)){if(options.ignoreDuplicateRegistrations)return;throwBindingError(`Cannot register type '${name}' twice`)}registeredTypes[rawType]=registeredInstance,delete typeDependencies[rawType],awaitingDependencies.hasOwnProperty(rawType)&&(options=awaitingDependencies[rawType],delete awaitingDependencies[rawType],options.forEach(cb=>cb()))}function registerType(rawType,registeredInstance,options={}){if(!("argPackAdvance"in registeredInstance))throw new TypeError("registerType registeredInstance requires argPackAdvance");sharedRegisterType(rawType,registeredInstance,options)}function __embind_register_bool(rawType,name,size,trueValue,falseValue){rawType>>>=0,name>>>=0;var shift=getShiftFromSize(size>>>=0);registerType(rawType,{name:name=readLatin1String(name),fromWireType:function(wt){return!!wt},toWireType:function(destructors,o){return o?trueValue:falseValue},argPackAdvance:8,readValueFromPointer:function(pointer){var heap;if(1===size)heap=HEAP8;else if(2===size)heap=HEAP16;else{if(4!==size)throw new TypeError("Unknown boolean type size: "+name);heap=HEAP32}return this.fromWireType(heap[pointer>>>shift])},destructorFunction:null})}function ClassHandle_isAliasOf(other){if(!(this instanceof ClassHandle))return!1;if(!(other instanceof ClassHandle))return!1;for(var leftClass=this.$$.ptrType.registeredClass,left=this.$$.ptr,rightClass=other.$$.ptrType.registeredClass,right=other.$$.ptr;leftClass.baseClass;)left=leftClass.upcast(left),leftClass=leftClass.baseClass;for(;rightClass.baseClass;)right=rightClass.upcast(right),rightClass=rightClass.baseClass;return leftClass===rightClass&&left===right}function shallowCopyInternalPointer(o){return{count:o.count,deleteScheduled:o.deleteScheduled,preservePointerOnDelete:o.preservePointerOnDelete,ptr:o.ptr,ptrType:o.ptrType,smartPtr:o.smartPtr,smartPtrType:o.smartPtrType}}function throwInstanceAlreadyDeleted(obj){throwBindingError(obj.$$.ptrType.registeredClass.name+" instance already deleted")}var finalizationRegistry=!1;function detachFinalizer(handle){}function runDestructor($$){$$.smartPtr?$$.smartPtrType.rawDestructor($$.smartPtr):$$.ptrType.registeredClass.rawDestructor($$.ptr)}function releaseClassHandle($$){--$$.count.value,0===$$.count.value&&runDestructor($$)}function downcastPointer(ptr,ptrClass,desiredClass){return ptrClass===desiredClass?ptr:void 0===desiredClass.baseClass||null===(ptr=downcastPointer(ptr,ptrClass,desiredClass.baseClass))?null:desiredClass.downcast(ptr)}var registeredPointers={};function getInheritedInstanceCount(){return Object.keys(registeredInstances).length}function getLiveInheritedInstances(){var k,rv=[];for(k in registeredInstances)registeredInstances.hasOwnProperty(k)&&rv.push(registeredInstances[k]);return rv}var deletionQueue=[];function flushPendingDeletes(){for(;deletionQueue.length;){var obj=deletionQueue.pop();obj.$$.deleteScheduled=!1,obj.delete()}}var delayFunction=void 0;function setDelayFunction(fn){delayFunction=fn,deletionQueue.length&&delayFunction&&delayFunction(flushPendingDeletes)}function init_embind(){Module.getInheritedInstanceCount=getInheritedInstanceCount,Module.getLiveInheritedInstances=getLiveInheritedInstances,Module.flushPendingDeletes=flushPendingDeletes,Module.setDelayFunction=setDelayFunction}var registeredInstances={};function getBasestPointer(class_,ptr){for(void 0===ptr&&throwBindingError("ptr should not be undefined");class_.baseClass;)ptr=class_.upcast(ptr),class_=class_.baseClass;return ptr}function getInheritedInstance(class_,ptr){return ptr=getBasestPointer(class_,ptr),registeredInstances[ptr]}function makeClassHandle(prototype,record){return record.ptrType&&record.ptr||throwInternalError("makeClassHandle requires ptr and ptrType"),!!record.smartPtrType!=!!record.smartPtr&&throwInternalError("Both smartPtrType and smartPtr must be specified"),record.count={value:1},attachFinalizer(Object.create(prototype,{$$:{value:record}}))}function RegisteredPointer_fromWireType(ptr){var registeredInstance,dp,rawPointer=this.getPointee(ptr);return rawPointer?void 0!==(registeredInstance=getInheritedInstance(this.registeredClass,rawPointer))?0===registeredInstance.$$.count.value?(registeredInstance.$$.ptr=rawPointer,registeredInstance.$$.smartPtr=ptr,registeredInstance.clone()):(registeredInstance=registeredInstance.clone(),this.destructor(ptr),registeredInstance):(registeredInstance=this.registeredClass.getActualType(rawPointer),!(registeredInstance=registeredPointers[registeredInstance])||(registeredInstance=this.isConst?registeredInstance.constPointerType:registeredInstance.pointerType,null===(dp=downcastPointer(rawPointer,this.registeredClass,registeredInstance.registeredClass)))?makeDefaultHandle.call(this):this.isSmartPointer?makeClassHandle(registeredInstance.registeredClass.instancePrototype,{ptrType:registeredInstance,ptr:dp,smartPtrType:this,smartPtr:ptr}):makeClassHandle(registeredInstance.registeredClass.instancePrototype,{ptrType:registeredInstance,ptr:dp})):(this.destructor(ptr),null);function makeDefaultHandle(){return this.isSmartPointer?makeClassHandle(this.registeredClass.instancePrototype,{ptrType:this.pointeeType,ptr:rawPointer,smartPtrType:this,smartPtr:ptr}):makeClassHandle(this.registeredClass.instancePrototype,{ptrType:this,ptr:ptr})}}var attachFinalizer=function(handle){return"undefined"==typeof FinalizationRegistry?(attachFinalizer=handle=>handle,handle):(finalizationRegistry=new FinalizationRegistry(info=>{releaseClassHandle(info.$$)}),detachFinalizer=handle=>finalizationRegistry.unregister(handle),(attachFinalizer=handle=>{var $$=handle.$$;return!!$$.smartPtr&&finalizationRegistry.register(handle,{$$:$$},handle),handle})(handle))};function ClassHandle_clone(){var clone;return this.$$.ptr||throwInstanceAlreadyDeleted(this),this.$$.preservePointerOnDelete?(this.$$.count.value+=1,this):((clone=attachFinalizer(Object.create(Object.getPrototypeOf(this),{$$:{value:shallowCopyInternalPointer(this.$$)}}))).$$.count.value+=1,clone.$$.deleteScheduled=!1,clone)}function ClassHandle_delete(){this.$$.ptr||throwInstanceAlreadyDeleted(this),this.$$.deleteScheduled&&!this.$$.preservePointerOnDelete&&throwBindingError("Object already scheduled for deletion"),detachFinalizer(this),releaseClassHandle(this.$$),this.$$.preservePointerOnDelete||(this.$$.smartPtr=void 0,this.$$.ptr=void 0)}function ClassHandle_isDeleted(){return!this.$$.ptr}function ClassHandle_deleteLater(){return this.$$.ptr||throwInstanceAlreadyDeleted(this),this.$$.deleteScheduled&&!this.$$.preservePointerOnDelete&&throwBindingError("Object already scheduled for deletion"),deletionQueue.push(this),1===deletionQueue.length&&delayFunction&&delayFunction(flushPendingDeletes),this.$$.deleteScheduled=!0,this}function init_ClassHandle(){ClassHandle.prototype.isAliasOf=ClassHandle_isAliasOf,ClassHandle.prototype.clone=ClassHandle_clone,ClassHandle.prototype.delete=ClassHandle_delete,ClassHandle.prototype.isDeleted=ClassHandle_isDeleted,ClassHandle.prototype.deleteLater=ClassHandle_deleteLater}function ClassHandle(){}var char_0=48,char_9=57;function makeLegalFunctionName(name){var f;return void 0===name?"_unknown":(f=(name=name.replace(/[^a-zA-Z0-9_]/g,"$")).charCodeAt(0),char_0<=f&&f<=char_9?"_"+name:name)}function createNamedFunction(name,body){return{[name=makeLegalFunctionName(name)]:function(){return body.apply(this,arguments)}}[name]}function ensureOverloadTable(proto,methodName,humanName){var prevFunc;void 0===proto[methodName].overloadTable&&(prevFunc=proto[methodName],proto[methodName]=function(){return proto[methodName].overloadTable.hasOwnProperty(arguments.length)||throwBindingError(`Function '${humanName}' called with an invalid number of arguments (${arguments.length}) - expects one of (${proto[methodName].overloadTable})!`),proto[methodName].overloadTable[arguments.length].apply(this,arguments)},proto[methodName].overloadTable=[],proto[methodName].overloadTable[prevFunc.argCount]=prevFunc)}function exposePublicSymbol(name,value,numArguments){Module.hasOwnProperty(name)?((void 0===numArguments||void 0!==Module[name].overloadTable&&void 0!==Module[name].overloadTable[numArguments])&&throwBindingError(`Cannot register public name '${name}' twice`),ensureOverloadTable(Module,name,name),Module.hasOwnProperty(numArguments)&&throwBindingError(`Cannot register multiple overloads of a function with the same number of arguments (${numArguments})!`),Module[name].overloadTable[numArguments]=value):(Module[name]=value,void 0!==numArguments&&(Module[name].numArguments=numArguments))}function RegisteredClass(name,constructor,instancePrototype,rawDestructor,baseClass,getActualType,upcast,downcast){this.name=name,this.constructor=constructor,this.instancePrototype=instancePrototype,this.rawDestructor=rawDestructor,this.baseClass=baseClass,this.getActualType=getActualType,this.upcast=upcast,this.downcast=downcast,this.pureVirtualFunctions=[]}function upcastPointer(ptr,ptrClass,desiredClass){for(;ptrClass!==desiredClass;)ptrClass.upcast||throwBindingError(`Expected null or instance of ${desiredClass.name}, got an instance of `+ptrClass.name),ptr=ptrClass.upcast(ptr),ptrClass=ptrClass.baseClass;return ptr}function constNoSmartPtrRawPointerToWireType(destructors,handle){if(null===handle)return this.isReference&&throwBindingError("null is not a valid "+this.name),0;handle.$$||throwBindingError(`Cannot pass "${embindRepr(handle)}" as a `+this.name),handle.$$.ptr||throwBindingError("Cannot pass deleted object as a pointer of type "+this.name);var handleClass=handle.$$.ptrType.registeredClass;return upcastPointer(handle.$$.ptr,handleClass,this.registeredClass)}function genericPointerToWireType(destructors,handle){if(null===handle)return this.isReference&&throwBindingError("null is not a valid "+this.name),this.isSmartPointer?(ptr=this.rawConstructor(),null!==destructors&&destructors.push(this.rawDestructor,ptr),ptr):0;handle.$$||throwBindingError(`Cannot pass "${embindRepr(handle)}" as a `+this.name),handle.$$.ptr||throwBindingError("Cannot pass deleted object as a pointer of type "+this.name),!this.isConst&&handle.$$.ptrType.isConst&&throwBindingError(`Cannot convert argument of type ${(handle.$$.smartPtrType||handle.$$.ptrType).name} to parameter type `+this.name);var clonedHandle,ptr,handleClass=handle.$$.ptrType.registeredClass;if(ptr=upcastPointer(handle.$$.ptr,handleClass,this.registeredClass),this.isSmartPointer)switch(void 0===handle.$$.smartPtr&&throwBindingError("Passing raw pointer to smart pointer is illegal"),this.sharingPolicy){case 0:handle.$$.smartPtrType===this?ptr=handle.$$.smartPtr:throwBindingError(`Cannot convert argument of type ${(handle.$$.smartPtrType||handle.$$.ptrType).name} to parameter type `+this.name);break;case 1:ptr=handle.$$.smartPtr;break;case 2:handle.$$.smartPtrType===this?ptr=handle.$$.smartPtr:(clonedHandle=handle.clone(),ptr=this.rawShare(ptr,Emval.toHandle(function(){clonedHandle.delete()})),null!==destructors&&destructors.push(this.rawDestructor,ptr));break;default:throwBindingError("Unsupporting sharing policy")}return ptr}function nonConstNoSmartPtrRawPointerToWireType(destructors,handle){if(null===handle)return this.isReference&&throwBindingError("null is not a valid "+this.name),0;handle.$$||throwBindingError(`Cannot pass "${embindRepr(handle)}" as a `+this.name),handle.$$.ptr||throwBindingError("Cannot pass deleted object as a pointer of type "+this.name),handle.$$.ptrType.isConst&&throwBindingError(`Cannot convert argument of type ${handle.$$.ptrType.name} to parameter type `+this.name);var handleClass=handle.$$.ptrType.registeredClass;return upcastPointer(handle.$$.ptr,handleClass,this.registeredClass)}function RegisteredPointer_getPointee(ptr){return ptr=this.rawGetPointee?this.rawGetPointee(ptr):ptr}function RegisteredPointer_destructor(ptr){this.rawDestructor&&this.rawDestructor(ptr)}function RegisteredPointer_deleteObject(handle){null!==handle&&handle.delete()}function init_RegisteredPointer(){RegisteredPointer.prototype.getPointee=RegisteredPointer_getPointee,RegisteredPointer.prototype.destructor=RegisteredPointer_destructor,RegisteredPointer.prototype.argPackAdvance=8,RegisteredPointer.prototype.readValueFromPointer=simpleReadValueFromPointer,RegisteredPointer.prototype.deleteObject=RegisteredPointer_deleteObject,RegisteredPointer.prototype.fromWireType=RegisteredPointer_fromWireType}function RegisteredPointer(name,registeredClass,isReference,isConst,isSmartPointer,pointeeType,sharingPolicy,rawGetPointee,rawConstructor,rawShare,rawDestructor){this.name=name,this.registeredClass=registeredClass,this.isReference=isReference,this.isConst=isConst,this.isSmartPointer=isSmartPointer,this.pointeeType=pointeeType,this.sharingPolicy=sharingPolicy,this.rawGetPointee=rawGetPointee,this.rawConstructor=rawConstructor,this.rawShare=rawShare,this.rawDestructor=rawDestructor,isSmartPointer||void 0!==registeredClass.baseClass?this.toWireType=genericPointerToWireType:(this.toWireType=isConst?constNoSmartPtrRawPointerToWireType:nonConstNoSmartPtrRawPointerToWireType,this.destructorFunction=null)}function replacePublicSymbol(name,value,numArguments){Module.hasOwnProperty(name)||throwInternalError("Replacing nonexistant public symbol"),void 0!==Module[name].overloadTable&&void 0!==numArguments?Module[name].overloadTable[numArguments]=value:(Module[name]=value,Module[name].argCount=numArguments)}var dynCallLegacy=(sig,ptr,args)=>{sig=Module["dynCall_"+sig];return args&&args.length?sig.apply(null,[ptr].concat(args)):sig.call(null,ptr)},wasmTableMirror=[],getWasmTableEntry=funcPtr=>{var func=wasmTableMirror[funcPtr];return func||(funcPtr>=wasmTableMirror.length&&(wasmTableMirror.length=funcPtr+1),wasmTableMirror[funcPtr]=func=wasmTable.get(funcPtr)),func},dynCall=(sig,ptr,args)=>sig.includes("j")?dynCallLegacy(sig,ptr,args):getWasmTableEntry(ptr).apply(null,args),getDynCaller=(sig,ptr)=>{var argCache=[];return function(){return argCache.length=0,Object.assign(argCache,arguments),dynCall(sig,ptr,argCache)}};function embind__requireFunction(signature,rawFunction){var fp=(signature=readLatin1String(signature)).includes("j")?getDynCaller(signature,rawFunction):getWasmTableEntry(rawFunction);return"function"!=typeof fp&&throwBindingError(`unknown function pointer with signature ${signature}: `+rawFunction),fp}function extendError(baseErrorType,errorName){var errorClass=createNamedFunction(errorName,function(message){this.name=errorName,this.message=message;message=new Error(message).stack;void 0!==message&&(this.stack=this.toString()+"\n"+message.replace(/^Error(:[^\n]*)?\n/,""))});return errorClass.prototype=Object.create(baseErrorType.prototype),(errorClass.prototype.constructor=errorClass).prototype.toString=function(){return void 0===this.message?this.name:this.name+": "+this.message},errorClass}var UnboundTypeError=void 0;function getTypeName(type){var type=___getTypeName(type),rv=readLatin1String(type);return _free(type),rv}function throwUnboundTypeError(message,types){var unboundTypes=[],seen={};throw types.forEach(function visit(type){seen[type]||registeredTypes[type]||(typeDependencies[type]?typeDependencies[type].forEach(visit):(unboundTypes.push(type),seen[type]=!0))}),new UnboundTypeError(message+": "+unboundTypes.map(getTypeName).join([", "]))}function __embind_register_class(rawType,rawPointerType,rawConstPointerType,baseClassRawType,getActualTypeSignature,getActualType,upcastSignature,upcast,downcastSignature,downcast,name,destructorSignature,rawDestructor){rawType>>>=0,rawPointerType>>>=0,rawConstPointerType>>>=0,baseClassRawType>>>=0,getActualTypeSignature>>>=0,getActualType>>>=0,upcastSignature>>>=0,upcast>>>=0,downcastSignature>>>=0,downcast>>>=0,destructorSignature>>>=0,rawDestructor>>>=0,name=readLatin1String(name>>>=0),getActualType=embind__requireFunction(getActualTypeSignature,getActualType),upcast=upcast&&embind__requireFunction(upcastSignature,upcast),downcast=downcast&&embind__requireFunction(downcastSignature,downcast),rawDestructor=embind__requireFunction(destructorSignature,rawDestructor);var legalFunctionName=makeLegalFunctionName(name);exposePublicSymbol(legalFunctionName,function(){throwUnboundTypeError(`Cannot construct ${name} due to unbound types`,[baseClassRawType])}),whenDependentTypesAreResolved([rawType,rawPointerType,rawConstPointerType],baseClassRawType?[baseClassRawType]:[],function(base){base=base[0],base=baseClassRawType?(baseClass=base.registeredClass).instancePrototype:ClassHandle.prototype;var constructor=createNamedFunction(legalFunctionName,function(){if(Object.getPrototypeOf(this)!==instancePrototype)throw new BindingError("Use 'new' to construct "+name);if(void 0===registeredClass.constructor_body)throw new BindingError(name+" has no accessible constructor");var body=registeredClass.constructor_body[arguments.length];if(void 0===body)throw new BindingError(`Tried to invoke ctor of ${name} with invalid number of parameters (${arguments.length}) - expected (${Object.keys(registeredClass.constructor_body).toString()}) parameters instead!`);return body.apply(this,arguments)}),instancePrototype=Object.create(base,{constructor:{value:constructor}}),registeredClass=(constructor.prototype=instancePrototype,new RegisteredClass(name,constructor,instancePrototype,rawDestructor,baseClass,getActualType,upcast,downcast)),base=(registeredClass.baseClass&&(void 0===registeredClass.baseClass.__derivedClasses&&(registeredClass.baseClass.__derivedClasses=[]),registeredClass.baseClass.__derivedClasses.push(registeredClass)),new RegisteredPointer(name,registeredClass,!0,!1,!1)),baseClass=new RegisteredPointer(name+"*",registeredClass,!1,!1,!1),constPointerConverter=new RegisteredPointer(name+" const*",registeredClass,!1,!0,!1);return registeredPointers[rawType]={pointerType:baseClass,constPointerType:constPointerConverter},replacePublicSymbol(legalFunctionName,constructor),[base,baseClass,constPointerConverter]})}function heap32VectorToArray(count,firstElement){for(var array=[],i=0;i<count;i++)array.push(HEAPU32[firstElement+4*i>>>2]);return array}function newFunc(constructor,argumentList){var dummy;if(constructor instanceof Function)return(dummy=createNamedFunction(constructor.name||"unknownFunctionName",function(){})).prototype=constructor.prototype,dummy=new dummy,(argumentList=constructor.apply(dummy,argumentList))instanceof Object?argumentList:dummy;throw new TypeError(`new_ called with constructor type ${typeof constructor} which is not a function`)}function craftInvokerFunction(humanName,argTypes,classType,cppInvokerFunc,cppTargetFunc,isAsync){for(var argCount=argTypes.length,isClassMethodFunc=(argCount<2&&throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!"),null!==argTypes[1]&&null!==classType),needsDestructorStack=!1,i=1;i<argTypes.length;++i)if(null!==argTypes[i]&&void 0===argTypes[i].destructorFunction){needsDestructorStack=!0;break}for(var returns="void"!==argTypes[0].name,argsList="",argsListWired="",i=0;i<argCount-2;++i)argsList+=(0!==i?", ":"")+"arg"+i,argsListWired+=(0!==i?", ":"")+"arg"+i+"Wired";var invokerFnBody=`
        return function ${makeLegalFunctionName(humanName)}(${argsList}) {
        if (arguments.length !== ${argCount-2}) {
          throwBindingError('function ${humanName} called with ${arguments.length} arguments, expected ${argCount-2} args!');
        }`,dtorStack=(needsDestructorStack&&(invokerFnBody+="var destructors = [];\n"),needsDestructorStack?"destructors":"null"),args1=["throwBindingError","invoker","fn","runDestructors","retType","classParam"],args2=[throwBindingError,cppInvokerFunc,cppTargetFunc,runDestructors,argTypes[0],argTypes[1]];isClassMethodFunc&&(invokerFnBody+="var thisWired = classParam.toWireType("+dtorStack+", this);\n");for(i=0;i<argCount-2;++i)invokerFnBody+="var arg"+i+"Wired = argType"+i+".toWireType("+dtorStack+", arg"+i+"); // "+argTypes[i+2].name+"\n",args1.push("argType"+i),args2.push(argTypes[i+2]);if(invokerFnBody+=(returns||isAsync?"var rv = ":"")+"invoker(fn"+(0<(argsListWired=isClassMethodFunc?"thisWired"+(0<argsListWired.length?", ":"")+argsListWired:argsListWired).length?", ":"")+argsListWired+");\n",needsDestructorStack)invokerFnBody+="runDestructors(destructors);\n";else for(i=isClassMethodFunc?1:2;i<argTypes.length;++i){var paramName=1===i?"thisWired":"arg"+(i-2)+"Wired";null!==argTypes[i].destructorFunction&&(invokerFnBody+=paramName+"_dtor("+paramName+"); // "+argTypes[i].name+"\n",args1.push(paramName+"_dtor"),args2.push(argTypes[i].destructorFunction))}return returns&&(invokerFnBody+="var ret = retType.fromWireType(rv);\nreturn ret;\n"),args1.push(invokerFnBody+="}\n"),newFunc(Function,args1).apply(null,args2)}function __embind_register_class_constructor(rawClassType,argCount,rawArgTypesAddr,invokerSignature,invoker,rawConstructor){rawClassType>>>=0,invokerSignature>>>=0,invoker>>>=0,rawConstructor>>>=0;var rawArgTypes=heap32VectorToArray(argCount,rawArgTypesAddr>>>=0);invoker=embind__requireFunction(invokerSignature,invoker),whenDependentTypesAreResolved([],[rawClassType],function(classType){var humanName="constructor "+(classType=classType[0]).name;if(void 0===classType.registeredClass.constructor_body&&(classType.registeredClass.constructor_body=[]),void 0!==classType.registeredClass.constructor_body[argCount-1])throw new BindingError(`Cannot register multiple constructors with identical number of parameters (${argCount-1}) for class '${classType.name}'! Overload resolution is currently only performed using the parameter count, not actual type info!`);return classType.registeredClass.constructor_body[argCount-1]=()=>{throwUnboundTypeError(`Cannot construct ${classType.name} due to unbound types`,rawArgTypes)},whenDependentTypesAreResolved([],rawArgTypes,function(argTypes){return argTypes.splice(1,0,null),classType.registeredClass.constructor_body[argCount-1]=craftInvokerFunction(humanName,argTypes,null,invoker,rawConstructor),[]}),[]})}function __embind_register_class_function(rawClassType,methodName,argCount,rawArgTypesAddr,invokerSignature,rawInvoker,context,isPureVirtual,isAsync){rawClassType>>>=0,methodName>>>=0,invokerSignature>>>=0,rawInvoker>>>=0,context>>>=0;var rawArgTypes=heap32VectorToArray(argCount,rawArgTypesAddr>>>=0);methodName=readLatin1String(methodName),rawInvoker=embind__requireFunction(invokerSignature,rawInvoker),whenDependentTypesAreResolved([],[rawClassType],function(classType){var humanName=(classType=classType[0]).name+"."+methodName;function unboundTypesHandler(){throwUnboundTypeError(`Cannot call ${humanName} due to unbound types`,rawArgTypes)}methodName.startsWith("@@")&&(methodName=Symbol[methodName.substring(2)]),isPureVirtual&&classType.registeredClass.pureVirtualFunctions.push(methodName);var proto=classType.registeredClass.instancePrototype,method=proto[methodName];return void 0===method||void 0===method.overloadTable&&method.className!==classType.name&&method.argCount===argCount-2?(unboundTypesHandler.argCount=argCount-2,unboundTypesHandler.className=classType.name,proto[methodName]=unboundTypesHandler):(ensureOverloadTable(proto,methodName,humanName),proto[methodName].overloadTable[argCount-2]=unboundTypesHandler),whenDependentTypesAreResolved([],rawArgTypes,function(argTypes){argTypes=craftInvokerFunction(humanName,argTypes,classType,rawInvoker,context,isAsync);return void 0===proto[methodName].overloadTable?(argTypes.argCount=argCount-2,proto[methodName]=argTypes):proto[methodName].overloadTable[argCount-2]=argTypes,[]}),[]})}function handleAllocatorInit(){Object.assign(HandleAllocator.prototype,{get(id){return this.allocated[id]},has(id){return void 0!==this.allocated[id]},allocate(handle){var id=this.freelist.pop()||this.allocated.length;return this.allocated[id]=handle,id},free(id){this.allocated[id]=void 0,this.freelist.push(id)}})}function HandleAllocator(){this.allocated=[void 0],this.freelist=[]}var emval_handles=new HandleAllocator;function __emval_decref(handle){(handle>>>=0)>=emval_handles.reserved&&0==--emval_handles.get(handle).refcount&&emval_handles.free(handle)}function count_emval_handles(){for(var count=0,i=emval_handles.reserved;i<emval_handles.allocated.length;++i)void 0!==emval_handles.allocated[i]&&++count;return count}function init_emval(){emval_handles.allocated.push({value:void 0},{value:null},{value:!0},{value:!1}),emval_handles.reserved=emval_handles.allocated.length,Module.count_emval_handles=count_emval_handles}var Emval={toValue:handle=>(handle||throwBindingError("Cannot use deleted val. handle = "+handle),emval_handles.get(handle).value),toHandle:value=>{switch(value){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:return emval_handles.allocate({refcount:1,value:value})}}};function __embind_register_emval(rawType,name){registerType(rawType>>>=0,{name:name=readLatin1String(name>>>=0),fromWireType:function(handle){var rv=Emval.toValue(handle);return __emval_decref(handle),rv},toWireType:function(destructors,value){return Emval.toHandle(value)},argPackAdvance:8,readValueFromPointer:simpleReadValueFromPointer,destructorFunction:null})}function embindRepr(v){var t;return null===v?"null":"object"==(t=typeof v)||"array"==t||"function"==t?v.toString():""+v}function floatReadValueFromPointer(name,shift){switch(shift){case 2:return function(pointer){return this.fromWireType(HEAPF32[pointer>>>2])};case 3:return function(pointer){return this.fromWireType(HEAPF64[pointer>>>3])};default:throw new TypeError("Unknown float type: "+name)}}function __embind_register_float(rawType,name,size){rawType>>>=0,name>>>=0;size=getShiftFromSize(size>>>=0);registerType(rawType,{name:name=readLatin1String(name),fromWireType:function(value){return value},toWireType:function(destructors,value){return value},argPackAdvance:8,readValueFromPointer:floatReadValueFromPointer(name,size),destructorFunction:null})}function __embind_register_function(name,argCount,rawArgTypesAddr,signature,rawInvoker,fn,isAsync){name>>>=0,signature>>>=0,rawInvoker>>>=0,fn>>>=0;var argTypes=heap32VectorToArray(argCount,rawArgTypesAddr>>>=0);name=readLatin1String(name),rawInvoker=embind__requireFunction(signature,rawInvoker),exposePublicSymbol(name,function(){throwUnboundTypeError(`Cannot call ${name} due to unbound types`,argTypes)},argCount-1),whenDependentTypesAreResolved([],argTypes,function(argTypes){argTypes=[argTypes[0],null].concat(argTypes.slice(1));return replacePublicSymbol(name,craftInvokerFunction(name,argTypes,null,rawInvoker,fn,isAsync),argCount-1),[]})}function integerReadValueFromPointer(name,shift,signed){switch(shift){case 0:return signed?function(pointer){return HEAP8[pointer>>>0]}:function(pointer){return HEAPU8[pointer>>>0]};case 1:return signed?function(pointer){return HEAP16[pointer>>>1]}:function(pointer){return HEAPU16[pointer>>>1]};case 2:return signed?function(pointer){return HEAP32[pointer>>>2]}:function(pointer){return HEAPU32[pointer>>>2]};default:throw new TypeError("Unknown integer type: "+name)}}function __embind_register_integer(primitiveType,name,size,minRange,maxRange){primitiveType>>>=0,size>>>=0,name=readLatin1String(name>>>=0),-1===maxRange&&(maxRange=4294967295);var bitshift,maxRange=getShiftFromSize(size),fromWireType=value=>value,size=(0===minRange&&(bitshift=32-8*size,fromWireType=value=>value<<bitshift>>>bitshift),name.includes("unsigned")),size=size?function(destructors,value){return this.name,value>>>0}:function(destructors,value){return this.name,value};registerType(primitiveType,{name:name,fromWireType:fromWireType,toWireType:size,argPackAdvance:8,readValueFromPointer:integerReadValueFromPointer(name,maxRange,0!==minRange),destructorFunction:null})}function __embind_register_memory_view(rawType,dataTypeIndex,name){rawType>>>=0,name>>>=0;var TA=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array][dataTypeIndex];function decodeMemoryView(handle){var heap=HEAPU32,size=heap[(handle>>=2)>>>0];return new TA(heap.buffer,heap[handle+1>>>0],size)}registerType(rawType,{name:name=readLatin1String(name),fromWireType:decodeMemoryView,argPackAdvance:8,readValueFromPointer:decodeMemoryView},{ignoreDuplicateRegistrations:!0})}var stringToUTF8Array=(str,heap,outIdx,maxBytesToWrite)=>{if(!(0<maxBytesToWrite))return 0;for(var startIdx=outIdx>>>=0,endIdx=outIdx+maxBytesToWrite-1,i=0;i<str.length;++i){var u=str.charCodeAt(i);if((u=55296<=u&&u<=57343?65536+((1023&u)<<10)|1023&str.charCodeAt(++i):u)<=127){if(endIdx<=outIdx)break;heap[outIdx++>>>0]=u}else{if(u<=2047){if(endIdx<=outIdx+1)break;heap[outIdx++>>>0]=192|u>>6}else{if(u<=65535){if(endIdx<=outIdx+2)break;heap[outIdx++>>>0]=224|u>>12}else{if(endIdx<=outIdx+3)break;heap[outIdx++>>>0]=240|u>>18,heap[outIdx++>>>0]=128|u>>12&63}heap[outIdx++>>>0]=128|u>>6&63}heap[outIdx++>>>0]=128|63&u}}return heap[outIdx>>>0]=0,outIdx-startIdx},stringToUTF8=(str,outPtr,maxBytesToWrite)=>stringToUTF8Array(str,HEAPU8,outPtr,maxBytesToWrite),lengthBytesUTF8=str=>{for(var len=0,i=0;i<str.length;++i){var c=str.charCodeAt(i);c<=127?len++:c<=2047?len+=2:55296<=c&&c<=57343?(len+=4,++i):len+=3}return len};function __embind_register_std_string(rawType,name){rawType>>>=0;var stdStringIsUTF8="std::string"===(name=readLatin1String(name>>>=0));registerType(rawType,{name:name,fromWireType:function(value){var length=HEAPU32[value>>>2],payload=value+4;if(stdStringIsUTF8)for(var decodeStartPtr=payload,i=0;i<=length;++i){var stringSegment,str,currentBytePtr=payload+i;i!=length&&0!=HEAPU8[currentBytePtr>>>0]||(stringSegment=UTF8ToString(decodeStartPtr,currentBytePtr-decodeStartPtr),str=void 0===str?stringSegment:str+String.fromCharCode(0)+stringSegment,decodeStartPtr=currentBytePtr+1)}else{for(var a=new Array(length),i=0;i<length;++i)a[i]=String.fromCharCode(HEAPU8[payload+i>>>0]);str=a.join("")}return _free(value),str},toWireType:function(destructors,value){var length,valueIsOfTypeString="string"==typeof(value=value instanceof ArrayBuffer?new Uint8Array(value):value),base=(valueIsOfTypeString||value instanceof Uint8Array||value instanceof Uint8ClampedArray||value instanceof Int8Array||throwBindingError("Cannot pass non-string to std::string"),length=stdStringIsUTF8&&valueIsOfTypeString?lengthBytesUTF8(value):value.length,_malloc(4+length+1)),ptr=base+4;if(HEAPU32[base>>>2]=length,stdStringIsUTF8&&valueIsOfTypeString)stringToUTF8(value,ptr,length+1);else if(valueIsOfTypeString)for(var i=0;i<length;++i){var charCode=value.charCodeAt(i);255<charCode&&(_free(ptr),throwBindingError("String has UTF-16 code units that do not fit in 8 bits")),HEAPU8[ptr+i>>>0]=charCode}else for(i=0;i<length;++i)HEAPU8[ptr+i>>>0]=value[i];return null!==destructors&&destructors.push(_free,base),base},argPackAdvance:8,readValueFromPointer:simpleReadValueFromPointer,destructorFunction:function(ptr){_free(ptr)}})}var UTF16Decoder="undefined"!=typeof TextDecoder?new TextDecoder("utf-16le"):void 0,UTF16ToString=(ptr,maxBytesToRead)=>{for(var endPtr,idx=ptr>>1,maxIdx=idx+maxBytesToRead/2;!(maxIdx<=idx)&&HEAPU16[idx>>>0];)++idx;if(32<(endPtr=idx<<1)-ptr&&UTF16Decoder)return UTF16Decoder.decode(HEAPU8.subarray(ptr>>>0,endPtr>>>0));for(var str="",i=0;!(maxBytesToRead/2<=i);++i){var codeUnit=HEAP16[ptr+2*i>>>1];if(0==codeUnit)break;str+=String.fromCharCode(codeUnit)}return str},stringToUTF16=(str,outPtr,maxBytesToWrite)=>{if((maxBytesToWrite=void 0===maxBytesToWrite?2147483647:maxBytesToWrite)<2)return 0;for(var startPtr=outPtr,numCharsToWrite=(maxBytesToWrite-=2)<2*str.length?maxBytesToWrite/2:str.length,i=0;i<numCharsToWrite;++i){var codeUnit=str.charCodeAt(i);HEAP16[outPtr>>>1]=codeUnit,outPtr+=2}return HEAP16[outPtr>>>1]=0,outPtr-startPtr},lengthBytesUTF16=str=>2*str.length,UTF32ToString=(ptr,maxBytesToRead)=>{for(var i=0,str="";!(maxBytesToRead/4<=i);){var ch,utf32=HEAP32[ptr+4*i>>>2];if(0==utf32)break;++i,65536<=utf32?(ch=utf32-65536,str+=String.fromCharCode(55296|ch>>10,56320|1023&ch)):str+=String.fromCharCode(utf32)}return str},stringToUTF32=(str,outPtr,maxBytesToWrite)=>{if((maxBytesToWrite=void 0===maxBytesToWrite?2147483647:maxBytesToWrite)<4)return 0;for(var startPtr=outPtr>>>=0,endPtr=startPtr+maxBytesToWrite-4,i=0;i<str.length;++i){var codeUnit=str.charCodeAt(i);if(55296<=codeUnit&&codeUnit<=57343&&(codeUnit=65536+((1023&codeUnit)<<10)|1023&str.charCodeAt(++i)),HEAP32[outPtr>>>2]=codeUnit,endPtr<(outPtr+=4)+4)break}return HEAP32[outPtr>>>2]=0,outPtr-startPtr},lengthBytesUTF32=str=>{for(var len=0,i=0;i<str.length;++i){var codeUnit=str.charCodeAt(i);55296<=codeUnit&&codeUnit<=57343&&++i,len+=4}return len},__embind_register_std_wstring=function(rawType,charSize,name){var decodeString,encodeString,getHeap,lengthBytesUTF,shift;rawType>>>=0,charSize>>>=0,name=readLatin1String(name>>>=0),2===charSize?(decodeString=UTF16ToString,encodeString=stringToUTF16,lengthBytesUTF=lengthBytesUTF16,getHeap=()=>HEAPU16,shift=1):4===charSize&&(decodeString=UTF32ToString,encodeString=stringToUTF32,lengthBytesUTF=lengthBytesUTF32,getHeap=()=>HEAPU32,shift=2),registerType(rawType,{name:name,fromWireType:function(value){for(var length=HEAPU32[value>>>2],HEAP=getHeap(),decodeStartPtr=value+4,i=0;i<=length;++i){var stringSegment,str,currentBytePtr=value+4+i*charSize;i!=length&&0!=HEAP[currentBytePtr>>>shift]||(stringSegment=decodeString(decodeStartPtr,currentBytePtr-decodeStartPtr),str=void 0===str?stringSegment:str+String.fromCharCode(0)+stringSegment,decodeStartPtr=currentBytePtr+charSize)}return _free(value),str},toWireType:function(destructors,value){"string"!=typeof value&&throwBindingError("Cannot pass non-string to C++ string type "+name);var length=lengthBytesUTF(value),ptr=_malloc(4+length+charSize);return HEAPU32[ptr>>>2]=length>>shift,encodeString(value,ptr+4,length+charSize),null!==destructors&&destructors.push(_free,ptr),ptr},argPackAdvance:8,readValueFromPointer:simpleReadValueFromPointer,destructorFunction:function(ptr){_free(ptr)}})};function __embind_register_value_object(rawType,name,constructorSignature,rawConstructor,destructorSignature,rawDestructor){constructorSignature>>>=0,rawConstructor>>>=0,destructorSignature>>>=0,rawDestructor>>>=0,structRegistrations[rawType>>>=0]={name:readLatin1String(name>>>=0),rawConstructor:embind__requireFunction(constructorSignature,rawConstructor),rawDestructor:embind__requireFunction(destructorSignature,rawDestructor),fields:[]}}function __embind_register_value_object_field(structType,fieldName,getterReturnType,getterSignature,getter,getterContext,setterArgumentType,setterSignature,setter,setterContext){getterReturnType>>>=0,getterSignature>>>=0,getter>>>=0,getterContext>>>=0,setterArgumentType>>>=0,setterSignature>>>=0,setter>>>=0,setterContext>>>=0,structRegistrations[structType>>>=0].fields.push({fieldName:readLatin1String(fieldName>>>=0),getterReturnType:getterReturnType,getter:embind__requireFunction(getterSignature,getter),getterContext:getterContext,setterArgumentType:setterArgumentType,setter:embind__requireFunction(setterSignature,setter),setterContext:setterContext})}function __embind_register_void(rawType,name){registerType(rawType>>>=0,{isVoid:!0,name:name=readLatin1String(name>>>=0),argPackAdvance:0,fromWireType:function(){},toWireType:function(destructors,o){}})}function __emval_incref(handle){4<(handle>>>=0)&&(emval_handles.get(handle).refcount+=1)}var emval_symbols={};function getStringOrSymbol(address){var symbol=emval_symbols[address];return void 0===symbol?readLatin1String(address):symbol}function __emval_new_cstring(v){return Emval.toHandle(getStringOrSymbol(v>>>=0))}function __emval_new_object(){return Emval.toHandle({})}function __emval_set_property(handle,key,value){key>>>=0,value>>>=0,handle=Emval.toValue(handle>>>=0),key=Emval.toValue(key),value=Emval.toValue(value),handle[key]=value}function requireRegisteredType(rawType,humanName){var impl=registeredTypes[rawType];return void 0===impl&&throwBindingError(humanName+" has unknown type "+getTypeName(rawType)),impl}function __emval_take_value(type,arg){arg>>>=0;type=(type=requireRegisteredType(type>>>=0,"_emval_take_value")).readValueFromPointer(arg);return Emval.toHandle(type)}var isLeapYear=year=>year%4==0&&(year%100!=0||year%400==0),MONTH_DAYS_LEAP_CUMULATIVE=[0,31,60,91,121,152,182,213,244,274,305,335],MONTH_DAYS_REGULAR_CUMULATIVE=[0,31,59,90,120,151,181,212,243,273,304,334],ydayFromDate=date=>(isLeapYear(date.getFullYear())?MONTH_DAYS_LEAP_CUMULATIVE:MONTH_DAYS_REGULAR_CUMULATIVE)[date.getMonth()]+date.getDate()-1;function __localtime_js(time_low,time_high,tmPtr){var time_low=convertI32PairToI53Checked(time_low,time_high),time_high=(tmPtr>>>=0,new Date(1e3*time_low)),time_low=(HEAP32[tmPtr>>>2]=time_high.getSeconds(),HEAP32[tmPtr+4>>>2]=time_high.getMinutes(),HEAP32[tmPtr+8>>>2]=time_high.getHours(),HEAP32[tmPtr+12>>>2]=time_high.getDate(),HEAP32[tmPtr+16>>>2]=time_high.getMonth(),HEAP32[tmPtr+20>>>2]=time_high.getFullYear()-1900,HEAP32[tmPtr+24>>>2]=time_high.getDay(),0|ydayFromDate(time_high)),time_low=(HEAP32[tmPtr+28>>>2]=time_low,HEAP32[tmPtr+36>>>2]=-60*time_high.getTimezoneOffset(),new Date(time_high.getFullYear(),0,1)),summerOffset=new Date(time_high.getFullYear(),6,1).getTimezoneOffset(),time_low=time_low.getTimezoneOffset(),time_high=0|(summerOffset!=time_low&&time_high.getTimezoneOffset()==Math.min(time_low,summerOffset));HEAP32[tmPtr+32>>>2]=time_high}var stringToNewUTF8=str=>{var size=lengthBytesUTF8(str)+1,ret=_malloc(size);return ret&&stringToUTF8(str,ret,size),ret};function __tzset_js(timezone,daylight,tzname){timezone>>>=0,daylight>>>=0,tzname>>>=0;var currentYear=(new Date).getFullYear(),winter=new Date(currentYear,0,1),currentYear=new Date(currentYear,6,1),winterOffset=winter.getTimezoneOffset(),summerOffset=currentYear.getTimezoneOffset(),stdTimezoneOffset=Math.max(winterOffset,summerOffset);function extractZone(date){date=date.toTimeString().match(/\(([A-Za-z ]+)\)$/);return date?date[1]:"GMT"}HEAPU32[timezone>>>2]=60*stdTimezoneOffset,HEAP32[daylight>>>2]=Number(winterOffset!=summerOffset);timezone=extractZone(winter),stdTimezoneOffset=extractZone(currentYear),daylight=stringToNewUTF8(timezone),winter=stringToNewUTF8(stdTimezoneOffset);summerOffset<winterOffset?(HEAPU32[tzname>>>2]=daylight,HEAPU32[tzname+4>>>2]=winter):(HEAPU32[tzname>>>2]=winter,HEAPU32[tzname+4>>>2]=daylight)}var _abort=()=>{abort("")};function _emscripten_date_now(){return Date.now()}function _emscripten_memcpy_big(dest,src,num){return HEAPU8.copyWithin((dest>>>=0)>>>0,(src>>>=0)>>>0,src+(num>>>=0)>>>0)}var getHeapMax=()=>4294901760,growMemory=size=>{size=size-wasmMemory.buffer.byteLength+65535>>>16;try{return wasmMemory.grow(size),updateMemoryViews(),1}catch(e){}};function _emscripten_resize_heap(requestedSize){requestedSize>>>=0;var oldSize=HEAPU8.length,maxHeapSize=getHeapMax();if(!(maxHeapSize<requestedSize))for(var multiple,cutDown=1;cutDown<=4;cutDown*=2){var overGrownHeapSize=oldSize*(1+.2/cutDown),overGrownHeapSize=Math.min(overGrownHeapSize,requestedSize+100663296),overGrownHeapSize=Math.min(maxHeapSize,(overGrownHeapSize=Math.max(requestedSize,overGrownHeapSize))+((multiple=65536)-overGrownHeapSize%multiple)%multiple);if(growMemory(overGrownHeapSize))return!0}return!1}function _emscripten_run_script(ptr){ptr>>>=0,eval(UTF8ToString(ptr))}var ENV={},getExecutableName=()=>thisProgram||"./this.program",getEnvStrings=()=>{if(!getEnvStrings.strings){var env={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:("object"==typeof navigator&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:getExecutableName()};for(x in ENV)void 0===ENV[x]?delete env[x]:env[x]=ENV[x];var x,strings=[];for(x in env)strings.push(x+"="+env[x]);getEnvStrings.strings=strings}return getEnvStrings.strings},stringToAscii=(str,buffer)=>{for(var i=0;i<str.length;++i)HEAP8[buffer++>>>0]=str.charCodeAt(i);HEAP8[buffer>>>0]=0},PATH={isAbs:path=>"/"===path.charAt(0),splitPath:filename=>/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/.exec(filename).slice(1),normalizeArray:(parts,allowAboveRoot)=>{for(var up=0,i=parts.length-1;0<=i;i--){var last=parts[i];"."===last?parts.splice(i,1):".."===last?(parts.splice(i,1),up++):up&&(parts.splice(i,1),up--)}if(allowAboveRoot)for(;up;up--)parts.unshift("..");return parts},normalize:path=>{var isAbsolute=PATH.isAbs(path),trailingSlash="/"===path.substr(-1);return(path=(path=PATH.normalizeArray(path.split("/").filter(p=>!!p),!isAbsolute).join("/"))||isAbsolute?path:".")&&trailingSlash&&(path+="/"),(isAbsolute?"/":"")+path},dirname:path=>{var path=PATH.splitPath(path),root=path[0],path=path[1];return root||path?root+(path=path&&path.substr(0,path.length-1)):"."},basename:path=>{var lastSlash;return"/"===path?"/":-1===(lastSlash=(path=(path=PATH.normalize(path)).replace(/\/$/,"")).lastIndexOf("/"))?path:path.substr(lastSlash+1)},join:function(){var paths=Array.prototype.slice.call(arguments);return PATH.normalize(paths.join("/"))},join2:(l,r)=>PATH.normalize(l+"/"+r)},initRandomFill=()=>{if("object"==typeof crypto&&"function"==typeof crypto.getRandomValues)return view=>crypto.getRandomValues(view);if(ENVIRONMENT_IS_NODE)try{var randomBytes,crypto_module=require("crypto");return crypto_module.randomFillSync?view=>crypto_module.randomFillSync(view):(randomBytes=crypto_module.randomBytes,view=>(view.set(randomBytes(view.byteLength)),view))}catch(e){}abort("initRandomDevice")},randomFill=view=>(randomFill=initRandomFill())(view),PATH_FS={resolve:function(){for(var resolvedPath="",resolvedAbsolute=!1,i=arguments.length-1;-1<=i&&!resolvedAbsolute;i--){var path=0<=i?arguments[i]:FS.cwd();if("string"!=typeof path)throw new TypeError("Arguments to path.resolve must be strings");if(!path)return"";resolvedPath=path+"/"+resolvedPath,resolvedAbsolute=PATH.isAbs(path)}return(resolvedAbsolute?"/":"")+(resolvedPath=PATH.normalizeArray(resolvedPath.split("/").filter(p=>!!p),!resolvedAbsolute).join("/"))||"."},relative:(from,to)=>{function trim(arr){for(var start=0;start<arr.length&&""===arr[start];start++);for(var end=arr.length-1;0<=end&&""===arr[end];end--);return end<start?[]:arr.slice(start,end-start+1)}from=PATH_FS.resolve(from).substr(1),to=PATH_FS.resolve(to).substr(1);for(var fromParts=trim(from.split("/")),toParts=trim(to.split("/")),length=Math.min(fromParts.length,toParts.length),samePartsLength=length,i=0;i<length;i++)if(fromParts[i]!==toParts[i]){samePartsLength=i;break}for(var outputParts=[],i=samePartsLength;i<fromParts.length;i++)outputParts.push("..");return(outputParts=outputParts.concat(toParts.slice(samePartsLength))).join("/")}},FS_stdin_getChar_buffer=[];function intArrayFromString(stringy,dontAddNull,length){length=0<length?length:lengthBytesUTF8(stringy)+1,length=new Array(length),stringy=stringToUTF8Array(stringy,length,0,length.length);return dontAddNull&&(length.length=stringy),length}var FS_stdin_getChar=()=>{if(!FS_stdin_getChar_buffer.length){var result=null;if(ENVIRONMENT_IS_NODE){var buf=Buffer.alloc(256),bytesRead=0,fd=process.stdin.fd;try{bytesRead=fs.readSync(fd,buf,0,256,-1)}catch(e){if(!e.toString().includes("EOF"))throw e;bytesRead=0}result=0<bytesRead?buf.slice(0,bytesRead).toString("utf-8"):null}else"undefined"!=typeof window&&"function"==typeof window.prompt?null!==(result=window.prompt("Input: "))&&(result+="\n"):"function"==typeof readline&&null!==(result=readline())&&(result+="\n");if(!result)return null;FS_stdin_getChar_buffer=intArrayFromString(result,!0)}return FS_stdin_getChar_buffer.shift()},TTY={ttys:[],init:function(){},shutdown:function(){},register:function(dev,ops){TTY.ttys[dev]={input:[],output:[],ops:ops},FS.registerDevice(dev,TTY.stream_ops)},stream_ops:{open:function(stream){var tty=TTY.ttys[stream.node.rdev];if(!tty)throw new FS.ErrnoError(43);stream.tty=tty,stream.seekable=!1},close:function(stream){stream.tty.ops.fsync(stream.tty)},fsync:function(stream){stream.tty.ops.fsync(stream.tty)},read:function(stream,buffer,offset,length,pos){if(!stream.tty||!stream.tty.ops.get_char)throw new FS.ErrnoError(60);for(var result,bytesRead=0,i=0;i<length;i++){try{result=stream.tty.ops.get_char(stream.tty)}catch(e){throw new FS.ErrnoError(29)}if(void 0===result&&0===bytesRead)throw new FS.ErrnoError(6);if(null==result)break;bytesRead++,buffer[offset+i]=result}return bytesRead&&(stream.node.timestamp=Date.now()),bytesRead},write:function(stream,buffer,offset,length,pos){if(!stream.tty||!stream.tty.ops.put_char)throw new FS.ErrnoError(60);try{for(var i=0;i<length;i++)stream.tty.ops.put_char(stream.tty,buffer[offset+i])}catch(e){throw new FS.ErrnoError(29)}return length&&(stream.node.timestamp=Date.now()),i}},default_tty_ops:{get_char:function(tty){return FS_stdin_getChar()},put_char:function(tty,val){null===val||10===val?(out(UTF8ArrayToString(tty.output,0)),tty.output=[]):0!=val&&tty.output.push(val)},fsync:function(tty){tty.output&&0<tty.output.length&&(out(UTF8ArrayToString(tty.output,0)),tty.output=[])},ioctl_tcgets:function(tty){return{c_iflag:25856,c_oflag:5,c_cflag:191,c_lflag:35387,c_cc:[3,28,127,21,4,0,1,0,17,19,26,0,18,15,23,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}},ioctl_tcsets:function(tty,optional_actions,data){return 0},ioctl_tiocgwinsz:function(tty){return[24,80]}},default_tty1_ops:{put_char:function(tty,val){null===val||10===val?(err(UTF8ArrayToString(tty.output,0)),tty.output=[]):0!=val&&tty.output.push(val)},fsync:function(tty){tty.output&&0<tty.output.length&&(err(UTF8ArrayToString(tty.output,0)),tty.output=[])}}},mmapAlloc=size=>{abort()},MEMFS={ops_table:null,mount(mount){return MEMFS.createNode(null,"/",16895,0)},createNode(parent,name,mode,dev){if(FS.isBlkdev(mode)||FS.isFIFO(mode))throw new FS.ErrnoError(63);MEMFS.ops_table||(MEMFS.ops_table={dir:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr,lookup:MEMFS.node_ops.lookup,mknod:MEMFS.node_ops.mknod,rename:MEMFS.node_ops.rename,unlink:MEMFS.node_ops.unlink,rmdir:MEMFS.node_ops.rmdir,readdir:MEMFS.node_ops.readdir,symlink:MEMFS.node_ops.symlink},stream:{llseek:MEMFS.stream_ops.llseek}},file:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr},stream:{llseek:MEMFS.stream_ops.llseek,read:MEMFS.stream_ops.read,write:MEMFS.stream_ops.write,allocate:MEMFS.stream_ops.allocate,mmap:MEMFS.stream_ops.mmap,msync:MEMFS.stream_ops.msync}},link:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr,readlink:MEMFS.node_ops.readlink},stream:{}},chrdev:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr},stream:FS.chrdev_stream_ops}});mode=FS.createNode(parent,name,mode,dev);return FS.isDir(mode.mode)?(mode.node_ops=MEMFS.ops_table.dir.node,mode.stream_ops=MEMFS.ops_table.dir.stream,mode.contents={}):FS.isFile(mode.mode)?(mode.node_ops=MEMFS.ops_table.file.node,mode.stream_ops=MEMFS.ops_table.file.stream,mode.usedBytes=0,mode.contents=null):FS.isLink(mode.mode)?(mode.node_ops=MEMFS.ops_table.link.node,mode.stream_ops=MEMFS.ops_table.link.stream):FS.isChrdev(mode.mode)&&(mode.node_ops=MEMFS.ops_table.chrdev.node,mode.stream_ops=MEMFS.ops_table.chrdev.stream),mode.timestamp=Date.now(),parent&&(parent.contents[name]=mode,parent.timestamp=mode.timestamp),mode},getFileDataAsTypedArray(node){return node.contents?node.contents.subarray?node.contents.subarray(0,node.usedBytes):new Uint8Array(node.contents):new Uint8Array(0)},expandFileStorage(node,newCapacity){var prevCapacity=node.contents?node.contents.length:0;newCapacity<=prevCapacity||(newCapacity=Math.max(newCapacity,prevCapacity*(prevCapacity<1048576?2:1.125)>>>0),0!=prevCapacity&&(newCapacity=Math.max(newCapacity,256)),prevCapacity=node.contents,node.contents=new Uint8Array(newCapacity),0<node.usedBytes&&node.contents.set(prevCapacity.subarray(0,node.usedBytes),0))},resizeFileStorage(node,newSize){var oldContents;node.usedBytes!=newSize&&(0==newSize?(node.contents=null,node.usedBytes=0):(oldContents=node.contents,node.contents=new Uint8Array(newSize),oldContents&&node.contents.set(oldContents.subarray(0,Math.min(newSize,node.usedBytes))),node.usedBytes=newSize))},node_ops:{getattr(node){var attr={};return attr.dev=FS.isChrdev(node.mode)?node.id:1,attr.ino=node.id,attr.mode=node.mode,attr.nlink=1,attr.uid=0,attr.gid=0,attr.rdev=node.rdev,FS.isDir(node.mode)?attr.size=4096:FS.isFile(node.mode)?attr.size=node.usedBytes:FS.isLink(node.mode)?attr.size=node.link.length:attr.size=0,attr.atime=new Date(node.timestamp),attr.mtime=new Date(node.timestamp),attr.ctime=new Date(node.timestamp),attr.blksize=4096,attr.blocks=Math.ceil(attr.size/attr.blksize),attr},setattr(node,attr){void 0!==attr.mode&&(node.mode=attr.mode),void 0!==attr.timestamp&&(node.timestamp=attr.timestamp),void 0!==attr.size&&MEMFS.resizeFileStorage(node,attr.size)},lookup(parent,name){throw FS.genericErrors[44]},mknod(parent,name,mode,dev){return MEMFS.createNode(parent,name,mode,dev)},rename(old_node,new_dir,new_name){if(FS.isDir(old_node.mode)){var new_node;try{new_node=FS.lookupNode(new_dir,new_name)}catch(e){}if(new_node)for(var i in new_node.contents)throw new FS.ErrnoError(55)}delete old_node.parent.contents[old_node.name],old_node.parent.timestamp=Date.now(),old_node.name=new_name,new_dir.contents[new_name]=old_node,new_dir.timestamp=old_node.parent.timestamp,old_node.parent=new_dir},unlink(parent,name){delete parent.contents[name],parent.timestamp=Date.now()},rmdir(parent,name){for(var i in FS.lookupNode(parent,name).contents)throw new FS.ErrnoError(55);delete parent.contents[name],parent.timestamp=Date.now()},readdir(node){var key,entries=[".",".."];for(key in node.contents)node.contents.hasOwnProperty(key)&&entries.push(key);return entries},symlink(parent,newname,oldpath){parent=MEMFS.createNode(parent,newname,41471,0);return parent.link=oldpath,parent},readlink(node){if(FS.isLink(node.mode))return node.link;throw new FS.ErrnoError(28)}},stream_ops:{read(stream,buffer,offset,length,position){var contents=stream.node.contents;if(position>=stream.node.usedBytes)return 0;var size=Math.min(stream.node.usedBytes-position,length);if(8<size&&contents.subarray)buffer.set(contents.subarray(position,position+size),offset);else for(var i=0;i<size;i++)buffer[offset+i]=contents[position+i];return size},write(stream,buffer,offset,length,position,canOwn){if(buffer.buffer===HEAP8.buffer&&(canOwn=!1),!length)return 0;var node=stream.node;if(node.timestamp=Date.now(),buffer.subarray&&(!node.contents||node.contents.subarray)){if(canOwn)return node.contents=buffer.subarray(offset,offset+length),node.usedBytes=length;if(0===node.usedBytes&&0===position)return node.contents=buffer.slice(offset,offset+length),node.usedBytes=length;if(position+length<=node.usedBytes)return node.contents.set(buffer.subarray(offset,offset+length),position),length}if(MEMFS.expandFileStorage(node,position+length),node.contents.subarray&&buffer.subarray)node.contents.set(buffer.subarray(offset,offset+length),position);else for(var i=0;i<length;i++)node.contents[position+i]=buffer[offset+i];return node.usedBytes=Math.max(node.usedBytes,position+length),length},llseek(stream,offset,whence){if(1===whence?offset+=stream.position:2===whence&&FS.isFile(stream.node.mode)&&(offset+=stream.node.usedBytes),offset<0)throw new FS.ErrnoError(28);return offset},allocate(stream,offset,length){MEMFS.expandFileStorage(stream.node,offset+length),stream.node.usedBytes=Math.max(stream.node.usedBytes,offset+length)},mmap(stream,length,position,prot,flags){if(!FS.isFile(stream.node.mode))throw new FS.ErrnoError(43);var ptr,allocated,stream=stream.node.contents;if(2&flags||stream.buffer!==HEAP8.buffer){if((0<position||position+length<stream.length)&&(stream=stream.subarray?stream.subarray(position,position+length):Array.prototype.slice.call(stream,position,position+length)),allocated=!0,!(ptr=mmapAlloc(length)))throw new FS.ErrnoError(48);HEAP8.set(stream,ptr>>>0)}else allocated=!1,ptr=stream.byteOffset;return{ptr:ptr,allocated:allocated}},msync(stream,buffer,offset,length,mmapFlags){return MEMFS.stream_ops.write(stream,buffer,0,length,offset,!1),0}}},asyncLoad=(url,onload,onerror,noRunDep)=>{var dep=noRunDep?"":getUniqueRunDependency("al "+url);readAsync(url,arrayBuffer=>{assert(arrayBuffer,`Loading data file "${url}" failed (no arrayBuffer).`),onload(new Uint8Array(arrayBuffer)),dep&&removeRunDependency(dep)},event=>{if(!onerror)throw`Loading data file "${url}" failed.`;onerror()}),dep&&addRunDependency(dep)},preloadPlugins=Module.preloadPlugins||[];function FS_handledByPreloadPlugin(byteArray,fullname,finish,onerror){"undefined"!=typeof Browser&&Browser.init();var handled=!1;return preloadPlugins.forEach(function(plugin){handled||plugin.canHandle(fullname)&&(plugin.handle(byteArray,fullname,finish,onerror),handled=!0)}),handled}function FS_createPreloadedFile(parent,name,url,canRead,canWrite,onload,onerror,dontCreateFile,canOwn,preFinish){var fullname=name?PATH_FS.resolve(PATH.join2(parent,name)):parent,dep=getUniqueRunDependency("cp "+fullname);function processData(byteArray){function finish(byteArray){preFinish&&preFinish(),dontCreateFile||FS.createDataFile(parent,name,byteArray,canRead,canWrite,canOwn),onload&&onload(),removeRunDependency(dep)}FS_handledByPreloadPlugin(byteArray,fullname,finish,()=>{onerror&&onerror(),removeRunDependency(dep)})||finish(byteArray)}addRunDependency(dep),"string"==typeof url?asyncLoad(url,byteArray=>processData(byteArray),onerror):processData(url)}function FS_modeStringToFlags(str){var flags={r:0,"r+":2,w:577,"w+":578,a:1089,"a+":1090}[str];if(void 0===flags)throw new Error("Unknown file open mode: "+str);return flags}function FS_getMode(canRead,canWrite){var mode=0;return canRead&&(mode|=365),canWrite&&(mode|=146),mode}var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:!1,ignorePermissions:!0,ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,lookupPath:(path,opts={})=>{if(!(path=PATH_FS.resolve(path)))return{path:"",node:null};if(8<(opts=Object.assign({follow_mount:!0,recurse_count:0},opts)).recurse_count)throw new FS.ErrnoError(32);for(var parts=path.split("/").filter(p=>!!p),current=FS.root,current_path="/",i=0;i<parts.length;i++){var islast=i===parts.length-1;if(islast&&opts.parent)break;if(current=FS.lookupNode(current,parts[i]),current_path=PATH.join2(current_path,parts[i]),!FS.isMountpoint(current)||islast&&!opts.follow_mount||(current=current.mounted.root),!islast||opts.follow)for(var count=0;FS.isLink(current.mode);){var link=FS.readlink(current_path),current_path=PATH_FS.resolve(PATH.dirname(current_path),link),current=FS.lookupPath(current_path,{recurse_count:opts.recurse_count+1}).node;if(40<count++)throw new FS.ErrnoError(32)}}return{path:current_path,node:current}},getPath:node=>{for(var path,mount;;){if(FS.isRoot(node))return mount=node.mount.mountpoint,path?"/"!==mount[mount.length-1]?mount+"/"+path:mount+path:mount;path=path?node.name+"/"+path:node.name,node=node.parent}},hashName:(parentid,name)=>{for(var hash=0,i=0;i<name.length;i++)hash=(hash<<5)-hash+name.charCodeAt(i)|0;return(parentid+hash>>>0)%FS.nameTable.length},hashAddNode:node=>{var hash=FS.hashName(node.parent.id,node.name);node.name_next=FS.nameTable[hash],FS.nameTable[hash]=node},hashRemoveNode:node=>{var hash=FS.hashName(node.parent.id,node.name);if(FS.nameTable[hash]===node)FS.nameTable[hash]=node.name_next;else for(var current=FS.nameTable[hash];current;){if(current.name_next===node){current.name_next=node.name_next;break}current=current.name_next}},lookupNode:(parent,name)=>{var errCode=FS.mayLookup(parent);if(errCode)throw new FS.ErrnoError(errCode,parent);for(var errCode=FS.hashName(parent.id,name),node=FS.nameTable[errCode];node;node=node.name_next){var nodeName=node.name;if(node.parent.id===parent.id&&nodeName===name)return node}return FS.lookup(parent,name)},createNode:(parent,name,mode,rdev)=>{parent=new FS.FSNode(parent,name,mode,rdev);return FS.hashAddNode(parent),parent},destroyNode:node=>{FS.hashRemoveNode(node)},isRoot:node=>node===node.parent,isMountpoint:node=>!!node.mounted,isFile:mode=>32768==(61440&mode),isDir:mode=>16384==(61440&mode),isLink:mode=>40960==(61440&mode),isChrdev:mode=>8192==(61440&mode),isBlkdev:mode=>24576==(61440&mode),isFIFO:mode=>4096==(61440&mode),isSocket:mode=>49152==(49152&mode),flagsToPermissionString:flag=>{var perms=["r","w","rw"][3&flag];return 512&flag&&(perms+="w"),perms},nodePermissions:(node,perms)=>FS.ignorePermissions||(!perms.includes("r")||292&node.mode)&&(!perms.includes("w")||146&node.mode)&&(!perms.includes("x")||73&node.mode)?0:2,mayLookup:dir=>{var errCode=FS.nodePermissions(dir,"x");return errCode||(dir.node_ops.lookup?0:2)},mayCreate:(dir,name)=>{try{FS.lookupNode(dir,name);return 20}catch(e){}return FS.nodePermissions(dir,"wx")},mayDelete:(dir,name,isdir)=>{var node;try{node=FS.lookupNode(dir,name)}catch(e){return e.errno}name=FS.nodePermissions(dir,"wx");if(name)return name;if(isdir){if(!FS.isDir(node.mode))return 54;if(FS.isRoot(node)||FS.getPath(node)===FS.cwd())return 10}else if(FS.isDir(node.mode))return 31;return 0},mayOpen:(node,flags)=>node?FS.isLink(node.mode)?32:FS.isDir(node.mode)&&("r"!==FS.flagsToPermissionString(flags)||512&flags)?31:FS.nodePermissions(node,FS.flagsToPermissionString(flags)):44,MAX_OPEN_FDS:4096,nextfd:()=>{for(var fd=0;fd<=FS.MAX_OPEN_FDS;fd++)if(!FS.streams[fd])return fd;throw new FS.ErrnoError(33)},getStreamChecked:fd=>{fd=FS.getStream(fd);if(fd)return fd;throw new FS.ErrnoError(8)},getStream:fd=>FS.streams[fd],createStream:(stream,fd=-1)=>(FS.FSStream||(FS.FSStream=function(){this.shared={}},FS.FSStream.prototype={},Object.defineProperties(FS.FSStream.prototype,{object:{get(){return this.node},set(val){this.node=val}},isRead:{get(){return 1!=(2097155&this.flags)}},isWrite:{get(){return 0!=(2097155&this.flags)}},isAppend:{get(){return 1024&this.flags}},flags:{get(){return this.shared.flags},set(val){this.shared.flags=val}},position:{get(){return this.shared.position},set(val){this.shared.position=val}}})),stream=Object.assign(new FS.FSStream,stream),-1==fd&&(fd=FS.nextfd()),stream.fd=fd,FS.streams[fd]=stream),closeStream:fd=>{FS.streams[fd]=null},chrdev_stream_ops:{open:stream=>{var device=FS.getDevice(stream.node.rdev);stream.stream_ops=device.stream_ops,stream.stream_ops.open&&stream.stream_ops.open(stream)},llseek:()=>{throw new FS.ErrnoError(70)}},major:dev=>dev>>8,minor:dev=>255&dev,makedev:(ma,mi)=>ma<<8|mi,registerDevice:(dev,ops)=>{FS.devices[dev]={stream_ops:ops}},getDevice:dev=>FS.devices[dev],getMounts:mount=>{for(var mounts=[],check=[mount];check.length;){var m=check.pop();mounts.push(m),check.push.apply(check,m.mounts)}return mounts},syncfs:(populate,callback)=>{"function"==typeof populate&&(callback=populate,populate=!1),FS.syncFSRequests++,1<FS.syncFSRequests&&err(`warning: ${FS.syncFSRequests} FS.syncfs operations in flight at once, probably just doing extra work`);var mounts=FS.getMounts(FS.root.mount),completed=0;function doCallback(errCode){return FS.syncFSRequests--,callback(errCode)}function done(errCode){if(errCode)return done.errored?void 0:(done.errored=!0,doCallback(errCode));++completed>=mounts.length&&doCallback(null)}mounts.forEach(mount=>{if(!mount.type.syncfs)return done(null);mount.type.syncfs(mount,populate,done)})},mount:(type,opts,mountpoint)=>{var node,root="/"===mountpoint,pseudo=!mountpoint;if(root&&FS.root)throw new FS.ErrnoError(10);if(!root&&!pseudo){pseudo=FS.lookupPath(mountpoint,{follow_mount:!1});if(mountpoint=pseudo.path,FS.isMountpoint(node=pseudo.node))throw new FS.ErrnoError(10);if(!FS.isDir(node.mode))throw new FS.ErrnoError(54)}pseudo={type:type,opts:opts,mountpoint:mountpoint,mounts:[]},opts=type.mount(pseudo);return(opts.mount=pseudo).root=opts,root?FS.root=opts:node&&(node.mounted=pseudo,node.mount)&&node.mount.mounts.push(pseudo),opts},unmount:mountpoint=>{mountpoint=FS.lookupPath(mountpoint,{follow_mount:!1});if(!FS.isMountpoint(mountpoint.node))throw new FS.ErrnoError(28);var mountpoint=mountpoint.node,mount=mountpoint.mounted,mounts=FS.getMounts(mount),mount=(Object.keys(FS.nameTable).forEach(hash=>{for(var current=FS.nameTable[hash];current;){var next=current.name_next;mounts.includes(current.mount)&&FS.destroyNode(current),current=next}}),mountpoint.mounted=null,mountpoint.mount.mounts.indexOf(mount));mountpoint.mount.mounts.splice(mount,1)},lookup:(parent,name)=>parent.node_ops.lookup(parent,name),mknod:(path,mode,dev)=>{var parent=FS.lookupPath(path,{parent:!0}).node,path=PATH.basename(path);if(!path||"."===path||".."===path)throw new FS.ErrnoError(28);var errCode=FS.mayCreate(parent,path);if(errCode)throw new FS.ErrnoError(errCode);if(parent.node_ops.mknod)return parent.node_ops.mknod(parent,path,mode,dev);throw new FS.ErrnoError(63)},create:(path,mode)=>FS.mknod(path,mode=(mode=void 0!==mode?mode:438)&4095|32768,0),mkdir:(path,mode)=>FS.mknod(path,mode=(mode=void 0!==mode?mode:511)&1023|16384,0),mkdirTree:(path,mode)=>{for(var dirs=path.split("/"),d="",i=0;i<dirs.length;++i)if(dirs[i]){d+="/"+dirs[i];try{FS.mkdir(d,mode)}catch(e){if(20!=e.errno)throw e}}},mkdev:(path,mode,dev)=>(void 0===dev&&(dev=mode,mode=438),FS.mknod(path,mode|=8192,dev)),symlink:(oldpath,newpath)=>{if(!PATH_FS.resolve(oldpath))throw new FS.ErrnoError(44);var parent=FS.lookupPath(newpath,{parent:!0}).node;if(!parent)throw new FS.ErrnoError(44);var newpath=PATH.basename(newpath),errCode=FS.mayCreate(parent,newpath);if(errCode)throw new FS.ErrnoError(errCode);if(parent.node_ops.symlink)return parent.node_ops.symlink(parent,newpath,oldpath);throw new FS.ErrnoError(63)},rename:(old_path,new_path)=>{var old_dirname=PATH.dirname(old_path),new_dirname=PATH.dirname(new_path),old_name=PATH.basename(old_path),new_name=PATH.basename(new_path),lookup=FS.lookupPath(old_path,{parent:!0}),lookup=lookup.node,new_dir=FS.lookupPath(new_path,{parent:!0}).node;if(!lookup||!new_dir)throw new FS.ErrnoError(44);if(lookup.mount!==new_dir.mount)throw new FS.ErrnoError(75);var new_node,old_node=FS.lookupNode(lookup,old_name),old_path=PATH_FS.relative(old_path,new_dirname);if("."!==old_path.charAt(0))throw new FS.ErrnoError(28);if("."!==(old_path=PATH_FS.relative(new_path,old_dirname)).charAt(0))throw new FS.ErrnoError(55);try{new_node=FS.lookupNode(new_dir,new_name)}catch(e){}if(old_node!==new_node){new_dirname=FS.isDir(old_node.mode),new_path=FS.mayDelete(lookup,old_name,new_dirname);if(new_path)throw new FS.ErrnoError(new_path);if(new_path=new_node?FS.mayDelete(new_dir,new_name,new_dirname):FS.mayCreate(new_dir,new_name))throw new FS.ErrnoError(new_path);if(!lookup.node_ops.rename)throw new FS.ErrnoError(63);if(FS.isMountpoint(old_node)||new_node&&FS.isMountpoint(new_node))throw new FS.ErrnoError(10);if(new_dir!==lookup&&(new_path=FS.nodePermissions(lookup,"w")))throw new FS.ErrnoError(new_path);FS.hashRemoveNode(old_node);try{lookup.node_ops.rename(old_node,new_dir,new_name)}catch(e){throw e}finally{FS.hashAddNode(old_node)}}},rmdir:path=>{var parent=FS.lookupPath(path,{parent:!0}).node,path=PATH.basename(path),node=FS.lookupNode(parent,path),errCode=FS.mayDelete(parent,path,!0);if(errCode)throw new FS.ErrnoError(errCode);if(!parent.node_ops.rmdir)throw new FS.ErrnoError(63);if(FS.isMountpoint(node))throw new FS.ErrnoError(10);parent.node_ops.rmdir(parent,path),FS.destroyNode(node)},readdir:path=>{path=FS.lookupPath(path,{follow:!0}).node;if(path.node_ops.readdir)return path.node_ops.readdir(path);throw new FS.ErrnoError(54)},unlink:path=>{var parent=FS.lookupPath(path,{parent:!0}).node;if(!parent)throw new FS.ErrnoError(44);var path=PATH.basename(path),node=FS.lookupNode(parent,path),errCode=FS.mayDelete(parent,path,!1);if(errCode)throw new FS.ErrnoError(errCode);if(!parent.node_ops.unlink)throw new FS.ErrnoError(63);if(FS.isMountpoint(node))throw new FS.ErrnoError(10);parent.node_ops.unlink(parent,path),FS.destroyNode(node)},readlink:path=>{path=FS.lookupPath(path).node;if(!path)throw new FS.ErrnoError(44);if(path.node_ops.readlink)return PATH_FS.resolve(FS.getPath(path.parent),path.node_ops.readlink(path));throw new FS.ErrnoError(28)},stat:(path,dontFollow)=>{path=FS.lookupPath(path,{follow:!dontFollow}).node;if(!path)throw new FS.ErrnoError(44);if(path.node_ops.getattr)return path.node_ops.getattr(path);throw new FS.ErrnoError(63)},lstat:path=>FS.stat(path,!0),chmod:(path,mode,dontFollow)=>{if(!(dontFollow="string"==typeof path?FS.lookupPath(path,{follow:!dontFollow}).node:path).node_ops.setattr)throw new FS.ErrnoError(63);dontFollow.node_ops.setattr(dontFollow,{mode:4095&mode|-4096&dontFollow.mode,timestamp:Date.now()})},lchmod:(path,mode)=>{FS.chmod(path,mode,!0)},fchmod:(fd,mode)=>{fd=FS.getStreamChecked(fd);FS.chmod(fd.node,mode)},chown:(path,uid,gid,dontFollow)=>{if(!(dontFollow="string"==typeof path?FS.lookupPath(path,{follow:!dontFollow}).node:path).node_ops.setattr)throw new FS.ErrnoError(63);dontFollow.node_ops.setattr(dontFollow,{timestamp:Date.now()})},lchown:(path,uid,gid)=>{FS.chown(path,uid,gid,!0)},fchown:(fd,uid,gid)=>{fd=FS.getStreamChecked(fd);FS.chown(fd.node,uid,gid)},truncate:(path,len)=>{if(len<0)throw new FS.ErrnoError(28);if(!(path="string"==typeof path?FS.lookupPath(path,{follow:!0}).node:path).node_ops.setattr)throw new FS.ErrnoError(63);if(FS.isDir(path.mode))throw new FS.ErrnoError(31);if(!FS.isFile(path.mode))throw new FS.ErrnoError(28);var errCode=FS.nodePermissions(path,"w");if(errCode)throw new FS.ErrnoError(errCode);path.node_ops.setattr(path,{size:len,timestamp:Date.now()})},ftruncate:(fd,len)=>{fd=FS.getStreamChecked(fd);if(0==(2097155&fd.flags))throw new FS.ErrnoError(28);FS.truncate(fd.node,len)},utime:(path,atime,mtime)=>{path=FS.lookupPath(path,{follow:!0}).node;path.node_ops.setattr(path,{timestamp:Math.max(atime,mtime)})},open:(path,flags,mode)=>{if(""===path)throw new FS.ErrnoError(44);if(mode=void 0===mode?438:mode,mode=64&(flags="string"==typeof flags?FS_modeStringToFlags(flags):flags)?4095&mode|32768:0,"object"==typeof path)node=path;else{path=PATH.normalize(path);try{var node=FS.lookupPath(path,{follow:!(131072&flags)}).node}catch(e){}}var created=!1;if(64&flags)if(node){if(128&flags)throw new FS.ErrnoError(20)}else node=FS.mknod(path,mode,0),created=!0;if(!node)throw new FS.ErrnoError(44);if(FS.isChrdev(node.mode)&&(flags&=-513),65536&flags&&!FS.isDir(node.mode))throw new FS.ErrnoError(54);if(!created){mode=FS.mayOpen(node,flags);if(mode)throw new FS.ErrnoError(mode)}512&flags&&!created&&FS.truncate(node,0),flags&=-131713;mode=FS.createStream({node:node,path:FS.getPath(node),flags:flags,seekable:!0,position:0,stream_ops:node.stream_ops,ungotten:[],error:!1});return mode.stream_ops.open&&mode.stream_ops.open(mode),!Module.logReadFiles||1&flags||(FS.readFiles||(FS.readFiles={}),path in FS.readFiles)||(FS.readFiles[path]=1),mode},close:stream=>{if(FS.isClosed(stream))throw new FS.ErrnoError(8);stream.getdents&&(stream.getdents=null);try{stream.stream_ops.close&&stream.stream_ops.close(stream)}catch(e){throw e}finally{FS.closeStream(stream.fd)}stream.fd=null},isClosed:stream=>null===stream.fd,llseek:(stream,offset,whence)=>{if(FS.isClosed(stream))throw new FS.ErrnoError(8);if(!stream.seekable||!stream.stream_ops.llseek)throw new FS.ErrnoError(70);if(0!=whence&&1!=whence&&2!=whence)throw new FS.ErrnoError(28);return stream.position=stream.stream_ops.llseek(stream,offset,whence),stream.ungotten=[],stream.position},read:(stream,buffer,offset,length,position)=>{if(length<0||position<0)throw new FS.ErrnoError(28);if(FS.isClosed(stream))throw new FS.ErrnoError(8);if(1==(2097155&stream.flags))throw new FS.ErrnoError(8);if(FS.isDir(stream.node.mode))throw new FS.ErrnoError(31);if(!stream.stream_ops.read)throw new FS.ErrnoError(28);var seeking=void 0!==position;if(seeking){if(!stream.seekable)throw new FS.ErrnoError(70)}else position=stream.position;buffer=stream.stream_ops.read(stream,buffer,offset,length,position);return seeking||(stream.position+=buffer),buffer},write:(stream,buffer,offset,length,position,canOwn)=>{if(length<0||position<0)throw new FS.ErrnoError(28);if(FS.isClosed(stream))throw new FS.ErrnoError(8);if(0==(2097155&stream.flags))throw new FS.ErrnoError(8);if(FS.isDir(stream.node.mode))throw new FS.ErrnoError(31);if(!stream.stream_ops.write)throw new FS.ErrnoError(28);stream.seekable&&1024&stream.flags&&FS.llseek(stream,0,2);var seeking=void 0!==position;if(seeking){if(!stream.seekable)throw new FS.ErrnoError(70)}else position=stream.position;buffer=stream.stream_ops.write(stream,buffer,offset,length,position,canOwn);return seeking||(stream.position+=buffer),buffer},allocate:(stream,offset,length)=>{if(FS.isClosed(stream))throw new FS.ErrnoError(8);if(offset<0||length<=0)throw new FS.ErrnoError(28);if(0==(2097155&stream.flags))throw new FS.ErrnoError(8);if(!FS.isFile(stream.node.mode)&&!FS.isDir(stream.node.mode))throw new FS.ErrnoError(43);if(!stream.stream_ops.allocate)throw new FS.ErrnoError(138);stream.stream_ops.allocate(stream,offset,length)},mmap:(stream,length,position,prot,flags)=>{if(0!=(2&prot)&&0==(2&flags)&&2!=(2097155&stream.flags))throw new FS.ErrnoError(2);if(1==(2097155&stream.flags))throw new FS.ErrnoError(2);if(stream.stream_ops.mmap)return stream.stream_ops.mmap(stream,length,position,prot,flags);throw new FS.ErrnoError(43)},msync:(stream,buffer,offset,length,mmapFlags)=>stream.stream_ops.msync?stream.stream_ops.msync(stream,buffer,offset,length,mmapFlags):0,munmap:stream=>0,ioctl:(stream,cmd,arg)=>{if(stream.stream_ops.ioctl)return stream.stream_ops.ioctl(stream,cmd,arg);throw new FS.ErrnoError(59)},readFile:(path,opts={})=>{if(opts.flags=opts.flags||0,opts.encoding=opts.encoding||"binary","utf8"!==opts.encoding&&"binary"!==opts.encoding)throw new Error(`Invalid encoding type "${opts.encoding}"`);var ret,stream=FS.open(path,opts.flags),path=FS.stat(path).size,buf=new Uint8Array(path);return FS.read(stream,buf,0,path,0),"utf8"===opts.encoding?ret=UTF8ArrayToString(buf,0):"binary"===opts.encoding&&(ret=buf),FS.close(stream),ret},writeFile:(path,data,opts={})=>{opts.flags=opts.flags||577;path=FS.open(path,opts.flags,opts.mode);if("string"==typeof data){var buf=new Uint8Array(lengthBytesUTF8(data)+1),actualNumBytes=stringToUTF8Array(data,buf,0,buf.length);FS.write(path,buf,0,actualNumBytes,void 0,opts.canOwn)}else{if(!ArrayBuffer.isView(data))throw new Error("Unsupported data type");FS.write(path,data,0,data.byteLength,void 0,opts.canOwn)}FS.close(path)},cwd:()=>FS.currentPath,chdir:path=>{path=FS.lookupPath(path,{follow:!0});if(null===path.node)throw new FS.ErrnoError(44);if(!FS.isDir(path.node.mode))throw new FS.ErrnoError(54);var errCode=FS.nodePermissions(path.node,"x");if(errCode)throw new FS.ErrnoError(errCode);FS.currentPath=path.path},createDefaultDirectories:()=>{FS.mkdir("/tmp"),FS.mkdir("/home"),FS.mkdir("/home/web_user")},createDefaultDevices:()=>{FS.mkdir("/dev"),FS.registerDevice(FS.makedev(1,3),{read:()=>0,write:(stream,buffer,offset,length,pos)=>length}),FS.mkdev("/dev/null",FS.makedev(1,3)),TTY.register(FS.makedev(5,0),TTY.default_tty_ops),TTY.register(FS.makedev(6,0),TTY.default_tty1_ops),FS.mkdev("/dev/tty",FS.makedev(5,0)),FS.mkdev("/dev/tty1",FS.makedev(6,0));var randomBuffer=new Uint8Array(1024),randomLeft=0,randomByte=()=>(0===randomLeft&&(randomLeft=randomFill(randomBuffer).byteLength),randomBuffer[--randomLeft]);FS.createDevice("/dev","random",randomByte),FS.createDevice("/dev","urandom",randomByte),FS.mkdir("/dev/shm"),FS.mkdir("/dev/shm/tmp")},createSpecialDirectories:()=>{FS.mkdir("/proc");var proc_self=FS.mkdir("/proc/self");FS.mkdir("/proc/self/fd"),FS.mount({mount:()=>{var node=FS.createNode(proc_self,"fd",16895,73);return node.node_ops={lookup:(parent,name)=>{var stream=FS.getStreamChecked(+name),name={parent:null,mount:{mountpoint:"fake"},node_ops:{readlink:()=>stream.path}};return name.parent=name}},node}},{},"/proc/self/fd")},createStandardStreams:()=>{Module.stdin?FS.createDevice("/dev","stdin",Module.stdin):FS.symlink("/dev/tty","/dev/stdin"),Module.stdout?FS.createDevice("/dev","stdout",null,Module.stdout):FS.symlink("/dev/tty","/dev/stdout"),Module.stderr?FS.createDevice("/dev","stderr",null,Module.stderr):FS.symlink("/dev/tty1","/dev/stderr");FS.open("/dev/stdin",0),FS.open("/dev/stdout",1),FS.open("/dev/stderr",1)},ensureErrnoError:()=>{FS.ErrnoError||(FS.ErrnoError=function(errno,node){this.name="ErrnoError",this.node=node,this.setErrno=function(errno){this.errno=errno},this.setErrno(errno),this.message="FS error"},FS.ErrnoError.prototype=new Error,FS.ErrnoError.prototype.constructor=FS.ErrnoError,[44].forEach(code=>{FS.genericErrors[code]=new FS.ErrnoError(code),FS.genericErrors[code].stack="<generic error, no stack>"}))},staticInit:()=>{FS.ensureErrnoError(),FS.nameTable=new Array(4096),FS.mount(MEMFS,{},"/"),FS.createDefaultDirectories(),FS.createDefaultDevices(),FS.createSpecialDirectories(),FS.filesystems={MEMFS:MEMFS}},init:(input,output,error)=>{FS.init.initialized=!0,FS.ensureErrnoError(),Module.stdin=input||Module.stdin,Module.stdout=output||Module.stdout,Module.stderr=error||Module.stderr,FS.createStandardStreams()},quit:()=>{FS.init.initialized=!1;for(var i=0;i<FS.streams.length;i++){var stream=FS.streams[i];stream&&FS.close(stream)}},findObject:(path,dontResolveLastLink)=>{path=FS.analyzePath(path,dontResolveLastLink);return path.exists?path.object:null},analyzePath:(path,dontResolveLastLink)=>{try{path=(lookup=FS.lookupPath(path,{follow:!dontResolveLastLink})).path}catch(e){}var ret={isRoot:!1,exists:!1,error:0,name:null,path:null,object:null,parentExists:!1,parentPath:null,parentObject:null};try{var lookup=FS.lookupPath(path,{parent:!0});ret.parentExists=!0,ret.parentPath=lookup.path,ret.parentObject=lookup.node,ret.name=PATH.basename(path),lookup=FS.lookupPath(path,{follow:!dontResolveLastLink}),ret.exists=!0,ret.path=lookup.path,ret.object=lookup.node,ret.name=lookup.node.name,ret.isRoot="/"===lookup.path}catch(e){ret.error=e.errno}return ret},createPath:(parent,path,canRead,canWrite)=>{parent="string"==typeof parent?parent:FS.getPath(parent);for(var parts=path.split("/").reverse();parts.length;){var part=parts.pop();if(part){var current=PATH.join2(parent,part);try{FS.mkdir(current)}catch(e){}parent=current}}return current},createFile:(parent,name,properties,canRead,canWrite)=>{parent=PATH.join2("string"==typeof parent?parent:FS.getPath(parent),name),name=FS_getMode(canRead,canWrite);return FS.create(parent,name)},createDataFile:(parent,name,data,canRead,canWrite,canOwn)=>{var path=name,name=(parent&&(parent="string"==typeof parent?parent:FS.getPath(parent),path=name?PATH.join2(parent,name):parent),FS_getMode(canRead,canWrite)),parent=FS.create(path,name);if(data){if("string"==typeof data){for(var arr=new Array(data.length),i=0,len=data.length;i<len;++i)arr[i]=data.charCodeAt(i);data=arr}FS.chmod(parent,146|name);canRead=FS.open(parent,577);FS.write(canRead,data,0,data.length,0,canOwn),FS.close(canRead),FS.chmod(parent,name)}return parent},createDevice:(parent,name,input,output)=>{var parent=PATH.join2("string"==typeof parent?parent:FS.getPath(parent),name),name=FS_getMode(!!input,!!output),dev=(FS.createDevice.major||(FS.createDevice.major=64),FS.makedev(FS.createDevice.major++,0));return FS.registerDevice(dev,{open:stream=>{stream.seekable=!1},close:stream=>{output&&output.buffer&&output.buffer.length&&output(10)},read:(stream,buffer,offset,length,pos)=>{for(var result,bytesRead=0,i=0;i<length;i++){try{result=input()}catch(e){throw new FS.ErrnoError(29)}if(void 0===result&&0===bytesRead)throw new FS.ErrnoError(6);if(null==result)break;bytesRead++,buffer[offset+i]=result}return bytesRead&&(stream.node.timestamp=Date.now()),bytesRead},write:(stream,buffer,offset,length,pos)=>{for(var i=0;i<length;i++)try{output(buffer[offset+i])}catch(e){throw new FS.ErrnoError(29)}return length&&(stream.node.timestamp=Date.now()),i}}),FS.mkdev(parent,name,dev)},forceLoadFile:obj=>{if(obj.isDevice||obj.isFolder||obj.link||obj.contents)return!0;if("undefined"!=typeof XMLHttpRequest)throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");if(!read_)throw new Error("Cannot load without read() or XMLHttpRequest.");try{obj.contents=intArrayFromString(read_(obj.url),!0),obj.usedBytes=obj.contents.length}catch(e){throw new FS.ErrnoError(29)}},createLazyFile:(parent,name,url,canRead,canWrite)=>{function LazyUint8Array(){this.lengthKnown=!1,this.chunks=[]}if(LazyUint8Array.prototype.get=function(idx){var chunkOffset;if(!(idx>this.length-1||idx<0))return chunkOffset=idx%this.chunkSize,idx=idx/this.chunkSize|0,this.getter(idx)[chunkOffset]},LazyUint8Array.prototype.setDataGetter=function(getter){this.getter=getter},LazyUint8Array.prototype.cacheLength=function(){var xhr=new XMLHttpRequest;if(xhr.open("HEAD",url,!1),xhr.send(null),!(200<=xhr.status&&xhr.status<300||304===xhr.status))throw new Error("Couldn't load "+url+". Status: "+xhr.status);var header,datalength=Number(xhr.getResponseHeader("Content-length")),hasByteServing=(header=xhr.getResponseHeader("Accept-Ranges"))&&"bytes"===header,xhr=(header=xhr.getResponseHeader("Content-Encoding"))&&"gzip"===header,chunkSize=1048576,lazyArray=(hasByteServing||(chunkSize=datalength),this);lazyArray.setDataGetter(chunkNum=>{var start=chunkNum*chunkSize,end=(chunkNum+1)*chunkSize-1,end=Math.min(end,datalength-1);if(void 0===lazyArray.chunks[chunkNum]&&(lazyArray.chunks[chunkNum]=((from,to)=>{if(to<from)throw new Error("invalid range ("+from+", "+to+") or no bytes requested!");if(datalength-1<to)throw new Error("only "+datalength+" bytes available! programmer error!");var xhr=new XMLHttpRequest;if(xhr.open("GET",url,!1),datalength!==chunkSize&&xhr.setRequestHeader("Range","bytes="+from+"-"+to),xhr.responseType="arraybuffer",xhr.overrideMimeType&&xhr.overrideMimeType("text/plain; charset=x-user-defined"),xhr.send(null),200<=xhr.status&&xhr.status<300||304===xhr.status)return void 0!==xhr.response?new Uint8Array(xhr.response||[]):intArrayFromString(xhr.responseText||"",!0);throw new Error("Couldn't load "+url+". Status: "+xhr.status)})(start,end)),void 0===lazyArray.chunks[chunkNum])throw new Error("doXHR failed!");return lazyArray.chunks[chunkNum]}),!xhr&&datalength||(chunkSize=datalength=1,datalength=this.getter(0).length,chunkSize=datalength,out("LazyFiles on gzip forces download of the whole file when length is accessed")),this._length=datalength,this._chunkSize=chunkSize,this.lengthKnown=!0},"undefined"!=typeof XMLHttpRequest){if(!ENVIRONMENT_IS_WORKER)throw"Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc";var lazyArray=new LazyUint8Array,lazyArray=(Object.defineProperties(lazyArray,{length:{get:function(){return this.lengthKnown||this.cacheLength(),this._length}},chunkSize:{get:function(){return this.lengthKnown||this.cacheLength(),this._chunkSize}}}),{isDevice:!1,contents:lazyArray})}else lazyArray={isDevice:!1,url:url};var node=FS.createFile(parent,name,lazyArray,canRead,canWrite),stream_ops=(lazyArray.contents?node.contents=lazyArray.contents:lazyArray.url&&(node.contents=null,node.url=lazyArray.url),Object.defineProperties(node,{usedBytes:{get:function(){return this.contents.length}}}),{});function writeChunks(stream,buffer,offset,length,position){var contents=stream.node.contents;if(position>=contents.length)return 0;var size=Math.min(contents.length-position,length);if(contents.slice)for(var i=0;i<size;i++)buffer[offset+i]=contents[position+i];else for(i=0;i<size;i++)buffer[offset+i]=contents.get(position+i);return size}return Object.keys(node.stream_ops).forEach(key=>{var fn=node.stream_ops[key];stream_ops[key]=function(){return FS.forceLoadFile(node),fn.apply(null,arguments)}}),stream_ops.read=(stream,buffer,offset,length,position)=>(FS.forceLoadFile(node),writeChunks(stream,buffer,offset,length,position)),stream_ops.mmap=(stream,length,position,prot,flags)=>{FS.forceLoadFile(node);var ptr=mmapAlloc(length);if(ptr)return writeChunks(stream,HEAP8,ptr,length,position),{ptr:ptr,allocated:!0};throw new FS.ErrnoError(48)},node.stream_ops=stream_ops,node}},SYSCALLS={DEFAULT_POLLMASK:5,calculateAt:function(dirfd,path,allowEmpty){if(PATH.isAbs(path))return path;if(dirfd=-100===dirfd?FS.cwd():SYSCALLS.getStreamFromFD(dirfd).path,0!=path.length)return PATH.join2(dirfd,path);if(allowEmpty)return dirfd;throw new FS.ErrnoError(44)},doStat:function(func,path,buf){try{var stat=func(path)}catch(e){if(e&&e.node&&PATH.normalize(path)!==PATH.normalize(FS.getPath(e.node)))return-54;throw e}HEAP32[buf>>>2]=stat.dev,HEAP32[buf+4>>>2]=stat.mode,HEAPU32[buf+8>>>2]=stat.nlink,HEAP32[buf+12>>>2]=stat.uid,HEAP32[buf+16>>>2]=stat.gid,HEAP32[buf+20>>>2]=stat.rdev,tempI64=[stat.size>>>0,(tempDouble=stat.size,1<=+Math.abs(tempDouble)?0<tempDouble?+Math.floor(tempDouble/4294967296)>>>0:~~+Math.ceil((tempDouble-(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[buf+24>>>2]=tempI64[0],HEAP32[buf+28>>>2]=tempI64[1],HEAP32[buf+32>>>2]=4096,HEAP32[buf+36>>>2]=stat.blocks;var func=stat.atime.getTime(),path=stat.mtime.getTime(),ctime=stat.ctime.getTime();return tempI64=[Math.floor(func/1e3)>>>0,(tempDouble=Math.floor(func/1e3),1<=+Math.abs(tempDouble)?0<tempDouble?+Math.floor(tempDouble/4294967296)>>>0:~~+Math.ceil((tempDouble-(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[buf+40>>>2]=tempI64[0],HEAP32[buf+44>>>2]=tempI64[1],HEAPU32[buf+48>>>2]=func%1e3*1e3,tempI64=[Math.floor(path/1e3)>>>0,(tempDouble=Math.floor(path/1e3),1<=+Math.abs(tempDouble)?0<tempDouble?+Math.floor(tempDouble/4294967296)>>>0:~~+Math.ceil((tempDouble-(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[buf+56>>>2]=tempI64[0],HEAP32[buf+60>>>2]=tempI64[1],HEAPU32[buf+64>>>2]=path%1e3*1e3,tempI64=[Math.floor(ctime/1e3)>>>0,(tempDouble=Math.floor(ctime/1e3),1<=+Math.abs(tempDouble)?0<tempDouble?+Math.floor(tempDouble/4294967296)>>>0:~~+Math.ceil((tempDouble-(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[buf+72>>>2]=tempI64[0],HEAP32[buf+76>>>2]=tempI64[1],HEAPU32[buf+80>>>2]=ctime%1e3*1e3,tempI64=[stat.ino>>>0,(tempDouble=stat.ino,1<=+Math.abs(tempDouble)?0<tempDouble?+Math.floor(tempDouble/4294967296)>>>0:~~+Math.ceil((tempDouble-(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[buf+88>>>2]=tempI64[0],HEAP32[buf+92>>>2]=tempI64[1],0},doMsync:function(addr,stream,len,flags,offset){if(!FS.isFile(stream.node.mode))throw new FS.ErrnoError(43);if(2&flags)return 0;addr=HEAPU8.slice(addr,addr+len);FS.msync(stream,addr,offset,len,flags)},varargs:void 0,get(){return SYSCALLS.varargs+=4,HEAP32[SYSCALLS.varargs-4>>>2]},getStr(ptr){return UTF8ToString(ptr)},getStreamFromFD:function(fd){return FS.getStreamChecked(fd)}};function _environ_get(__environ,environ_buf){__environ>>>=0,environ_buf>>>=0;var bufSize=0;return getEnvStrings().forEach(function(string,i){var ptr=environ_buf+bufSize;HEAPU32[__environ+4*i>>>2]=ptr,stringToAscii(string,ptr),bufSize+=string.length+1}),0}function _environ_sizes_get(penviron_count,penviron_buf_size){penviron_count>>>=0,penviron_buf_size>>>=0;var strings=getEnvStrings(),bufSize=(HEAPU32[penviron_count>>>2]=strings.length,0);return strings.forEach(function(string){bufSize+=string.length+1}),HEAPU32[penviron_buf_size>>>2]=bufSize,0}function _fd_close(fd){try{var stream=SYSCALLS.getStreamFromFD(fd);return FS.close(stream),0}catch(e){if(void 0===FS||"ErrnoError"!==e.name)throw e;return e.errno}}var doReadv=(stream,iov,iovcnt,offset)=>{for(var ret=0,i=0;i<iovcnt;i++){var ptr=HEAPU32[iov>>>2],len=HEAPU32[iov+4>>>2],ptr=(iov+=8,FS.read(stream,HEAP8,ptr,len,offset));if(ptr<0)return-1;if(ret+=ptr,ptr<len)break;void 0!==offset&&(offset+=ptr)}return ret};function _fd_read(fd,iov,iovcnt,pnum){iov>>>=0,iovcnt>>>=0,pnum>>>=0;try{var stream=SYSCALLS.getStreamFromFD(fd),num=doReadv(stream,iov,iovcnt);return HEAPU32[pnum>>>2]=num,0}catch(e){if(void 0===FS||"ErrnoError"!==e.name)throw e;return e.errno}}function _fd_seek(fd,offset_low,offset_high,whence,newOffset){var stream,offset_low=convertI32PairToI53Checked(offset_low,offset_high);newOffset>>>=0;try{return isNaN(offset_low)?61:(stream=SYSCALLS.getStreamFromFD(fd),FS.llseek(stream,offset_low,whence),tempI64=[stream.position>>>0,(tempDouble=stream.position,1<=+Math.abs(tempDouble)?0<tempDouble?+Math.floor(tempDouble/4294967296)>>>0:~~+Math.ceil((tempDouble-(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[newOffset>>>2]=tempI64[0],HEAP32[newOffset+4>>>2]=tempI64[1],stream.getdents&&0===offset_low&&0===whence&&(stream.getdents=null),0)}catch(e){if(void 0===FS||"ErrnoError"!==e.name)throw e;return e.errno}}var doWritev=(stream,iov,iovcnt,offset)=>{for(var ret=0,i=0;i<iovcnt;i++){var ptr=HEAPU32[iov>>>2],len=HEAPU32[iov+4>>>2],ptr=(iov+=8,FS.write(stream,HEAP8,ptr,len,offset));if(ptr<0)return-1;ret+=ptr,void 0!==offset&&(offset+=ptr)}return ret};function _fd_write(fd,iov,iovcnt,pnum){iov>>>=0,iovcnt>>>=0,pnum>>>=0;try{var stream=SYSCALLS.getStreamFromFD(fd),num=doWritev(stream,iov,iovcnt);return HEAPU32[pnum>>>2]=num,0}catch(e){if(void 0===FS||"ErrnoError"!==e.name)throw e;return e.errno}}var arraySum=(array,index)=>{for(var sum=0,i=0;i<=index;sum+=array[i++]);return sum},MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31],MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31],addDays=(date,days)=>{for(var newDate=new Date(date.getTime());0<days;){var leap=isLeapYear(newDate.getFullYear()),currentMonth=newDate.getMonth(),leap=(leap?MONTH_DAYS_LEAP:MONTH_DAYS_REGULAR)[currentMonth];if(!(days>leap-newDate.getDate()))return newDate.setDate(newDate.getDate()+days),newDate;days-=leap-newDate.getDate()+1,newDate.setDate(1),currentMonth<11?newDate.setMonth(currentMonth+1):(newDate.setMonth(0),newDate.setFullYear(newDate.getFullYear()+1))}return newDate},writeArrayToMemory=(array,buffer)=>{HEAP8.set(array,buffer>>>0)};function _strftime(s,maxsize,format,tm){s>>>=0,maxsize>>>=0,format>>>=0;var tm_zone=HEAP32[(tm>>>=0)+40>>>2],date={tm_sec:HEAP32[tm>>>2],tm_min:HEAP32[tm+4>>>2],tm_hour:HEAP32[tm+8>>>2],tm_mday:HEAP32[tm+12>>>2],tm_mon:HEAP32[tm+16>>>2],tm_year:HEAP32[tm+20>>>2],tm_wday:HEAP32[tm+24>>>2],tm_yday:HEAP32[tm+28>>>2],tm_isdst:HEAP32[tm+32>>>2],tm_gmtoff:HEAP32[tm+36>>>2],tm_zone:tm_zone?UTF8ToString(tm_zone):""},pattern=UTF8ToString(format),EXPANSION_RULES_1={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(rule in EXPANSION_RULES_1)pattern=pattern.replace(new RegExp(rule,"g"),EXPANSION_RULES_1[rule]);var WEEKDAYS=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],MONTHS=["January","February","March","April","May","June","July","August","September","October","November","December"];function leadingSomething(value,digits,character){for(var str="number"==typeof value?value.toString():value||"";str.length<digits;)str=character[0]+str;return str}function leadingNulls(value,digits){return leadingSomething(value,digits,"0")}function compareByDay(date1,date2){function sgn(value){return value<0?-1:0<value?1:0}var compare;return compare=0===(compare=sgn(date1.getFullYear()-date2.getFullYear()))&&0===(compare=sgn(date1.getMonth()-date2.getMonth()))?sgn(date1.getDate()-date2.getDate()):compare}function getFirstWeekStartDate(janFourth){switch(janFourth.getDay()){case 0:return new Date(janFourth.getFullYear()-1,11,29);case 1:return janFourth;case 2:return new Date(janFourth.getFullYear(),0,3);case 3:return new Date(janFourth.getFullYear(),0,2);case 4:return new Date(janFourth.getFullYear(),0,1);case 5:return new Date(janFourth.getFullYear()-1,11,31);case 6:return new Date(janFourth.getFullYear()-1,11,30)}}function getWeekBasedYear(date){var date=addDays(new Date(date.tm_year+1900,0,1),date.tm_yday),janFourthThisYear=new Date(date.getFullYear(),0,4),janFourthNextYear=new Date(date.getFullYear()+1,0,4),janFourthThisYear=getFirstWeekStartDate(janFourthThisYear),janFourthNextYear=getFirstWeekStartDate(janFourthNextYear);return compareByDay(janFourthThisYear,date)<=0?compareByDay(janFourthNextYear,date)<=0?date.getFullYear()+1:date.getFullYear():date.getFullYear()-1}var rule,EXPANSION_RULES_2={"%a":date=>WEEKDAYS[date.tm_wday].substring(0,3),"%A":date=>WEEKDAYS[date.tm_wday],"%b":date=>MONTHS[date.tm_mon].substring(0,3),"%B":date=>MONTHS[date.tm_mon],"%C":date=>leadingNulls((date.tm_year+1900)/100|0,2),"%d":date=>leadingNulls(date.tm_mday,2),"%e":date=>leadingSomething(date.tm_mday,2," "),"%g":date=>getWeekBasedYear(date).toString().substring(2),"%G":date=>getWeekBasedYear(date),"%H":date=>leadingNulls(date.tm_hour,2),"%I":date=>{date=date.tm_hour;return 0==date?date=12:12<date&&(date-=12),leadingNulls(date,2)},"%j":date=>leadingNulls(date.tm_mday+arraySum(isLeapYear(date.tm_year+1900)?MONTH_DAYS_LEAP:MONTH_DAYS_REGULAR,date.tm_mon-1),3),"%m":date=>leadingNulls(date.tm_mon+1,2),"%M":date=>leadingNulls(date.tm_min,2),"%n":()=>"\n","%p":date=>0<=date.tm_hour&&date.tm_hour<12?"AM":"PM","%S":date=>leadingNulls(date.tm_sec,2),"%t":()=>"\t","%u":date=>date.tm_wday||7,"%U":date=>{date=date.tm_yday+7-date.tm_wday;return leadingNulls(Math.floor(date/7),2)},"%V":date=>{var jan1,val=Math.floor((date.tm_yday+7-(date.tm_wday+6)%7)/7);return(date.tm_wday+371-date.tm_yday-2)%7<=2&&val++,val?53!=val||4==(jan1=(date.tm_wday+371-date.tm_yday)%7)||3==jan1&&isLeapYear(date.tm_year)||(val=1):(val=52,(4==(jan1=(date.tm_wday+7-date.tm_yday-1)%7)||5==jan1&&isLeapYear(date.tm_year%400-1))&&val++),leadingNulls(val,2)},"%w":date=>date.tm_wday,"%W":date=>{date=date.tm_yday+7-(date.tm_wday+6)%7;return leadingNulls(Math.floor(date/7),2)},"%y":date=>(date.tm_year+1900).toString().substring(2),"%Y":date=>date.tm_year+1900,"%z":date=>{var ahead=0<=(date=date.tm_gmtoff),date=Math.abs(date)/60;return(ahead?"+":"-")+String("0000"+(date/60*100+date%60)).slice(-4)},"%Z":date=>date.tm_zone,"%%":()=>"%"},pattern=pattern.replace(/%%/g,"\0\0");for(rule in EXPANSION_RULES_2)pattern.includes(rule)&&(pattern=pattern.replace(new RegExp(rule,"g"),EXPANSION_RULES_2[rule](date)));tm=intArrayFromString(pattern=pattern.replace(/\0\0/g,"%"),!1);return tm.length>maxsize?0:(writeArrayToMemory(tm,s),tm.length-1)}function _strftime_l(s,maxsize,format,tm,loc){return _strftime(s>>>=0,maxsize>>>=0,format>>>=0,tm>>>=0)}function uleb128Encode(n,target){n<128?target.push(n):target.push(n%128|128,n>>7)}function sigToWasmTypes(sig){for(var typeNames={i:"i32",j:"i64",f:"f32",d:"f64",p:"i32"},type={parameters:[],results:"v"==sig[0]?[]:[typeNames[sig[0]]]},i=1;i<sig.length;++i)type.parameters.push(typeNames[sig[i]]);return type}function generateFuncType(sig,target){var sigRet=sig.slice(0,1),sigParam=sig.slice(1),typeCodes={i:127,p:127,j:126,f:125,d:124};target.push(96),uleb128Encode(sigParam.length,target);for(var i=0;i<sigParam.length;++i)target.push(typeCodes[sigParam[i]]);"v"==sigRet?target.push(0):target.push(1,typeCodes[sigRet])}function convertJsFunctionToWasm(func,sig){var bytes;return"function"==typeof WebAssembly.Function?new WebAssembly.Function(sigToWasmTypes(sig),func):(generateFuncType(sig,sig=[1]),uleb128Encode(sig.length,bytes=[0,97,115,109,1,0,0,0,1]),bytes.push.apply(bytes,sig),bytes.push(2,7,1,1,101,1,102,0,0,7,5,1,1,102,0,0),sig=new WebAssembly.Module(new Uint8Array(bytes)),new WebAssembly.Instance(sig,{e:{f:func}}).exports.f)}function updateTableMap(offset,count){if(functionsInTableMap)for(var i=offset;i<offset+count;i++){var item=getWasmTableEntry(i);item&&functionsInTableMap.set(item,i)}}var functionsInTableMap=void 0;function getFunctionAddress(func){return functionsInTableMap||(functionsInTableMap=new WeakMap,updateTableMap(0,wasmTable.length)),functionsInTableMap.get(func)||0}var freeTableIndexes=[];function getEmptyTableSlot(){if(freeTableIndexes.length)return freeTableIndexes.pop();try{wasmTable.grow(1)}catch(err){if(err instanceof RangeError)throw"Unable to grow wasm table. Set ALLOW_TABLE_GROWTH.";throw err}return wasmTable.length-1}var setWasmTableEntry=(idx,func)=>{wasmTable.set(idx,func),wasmTableMirror[idx]=wasmTable.get(idx)};function addFunction(func,sig){var rtn=getFunctionAddress(func);if(rtn)return rtn;rtn=getEmptyTableSlot();try{setWasmTableEntry(rtn,func)}catch(err){if(!(err instanceof TypeError))throw err;sig=convertJsFunctionToWasm(func,sig);setWasmTableEntry(rtn,sig)}return functionsInTableMap.set(func,rtn),rtn}function removeFunction(index){functionsInTableMap.delete(getWasmTableEntry(index)),freeTableIndexes.push(index)}function getCFunc(ident){return Module["_"+ident]}var stringToUTF8OnStack=str=>{var size=lengthBytesUTF8(str)+1,ret=stackAlloc(size);return stringToUTF8(str,ret,size),ret},ccall=function(ident,returnType,argTypes,args,opts){var toC={string:str=>{var ret=0;return ret=null!=str&&0!==str?stringToUTF8OnStack(str):ret},array:arr=>{var ret=stackAlloc(arr.length);return writeArrayToMemory(arr,ret),ret}};var ident=getCFunc(ident),cArgs=[],stack=0;if(args)for(var i=0;i<args.length;i++){var converter=toC[argTypes[i]];converter?(0===stack&&(stack=stackSave()),cArgs[i]=converter(args[i])):cArgs[i]=args[i]}return function(ret){return 0!==stack&&stackRestore(stack),function(ret){return"string"===returnType?UTF8ToString(ret):"boolean"===returnType?Boolean(ret):ret}(ret)}(ident.apply(null,cArgs))},cwrap=function(ident,returnType,argTypes,opts){var numericArgs=!argTypes||argTypes.every(type=>"number"===type||"boolean"===type);return"string"!==returnType&&numericArgs&&!opts?getCFunc(ident):function(){return ccall(ident,returnType,argTypes,arguments,opts)}},InternalError=Module.InternalError=class InternalError extends Error{constructor(message){super(message),this.name="InternalError"}},FSNode=(embind_init_charCodes(),BindingError=Module.BindingError=class BindingError extends Error{constructor(message){super(message),this.name="BindingError"}},init_ClassHandle(),init_embind(),init_RegisteredPointer(),UnboundTypeError=Module.UnboundTypeError=extendError(Error,"UnboundTypeError"),handleAllocatorInit(),init_emval(),function(parent,name,mode,rdev){this.parent=parent=parent||this,this.mount=parent.mount,this.mounted=null,this.id=FS.nextInode++,this.name=name,this.mode=mode,this.node_ops={},this.stream_ops={},this.rdev=rdev}),readMode=365,writeMode=146,wasmImports=(Object.defineProperties(FSNode.prototype,{read:{get:function(){return(this.mode&readMode)===readMode},set:function(val){val?this.mode|=readMode:this.mode&=~readMode}},write:{get:function(){return(this.mode&writeMode)===writeMode},set:function(val){val?this.mode|=writeMode:this.mode&=~writeMode}},isFolder:{get:function(){return FS.isDir(this.mode)}},isDevice:{get:function(){return FS.isChrdev(this.mode)}}}),FS.FSNode=FSNode,FS.createPreloadedFile=FS_createPreloadedFile,FS.staticInit(),{b:___assert_fail,e:___cxa_throw,n:__embind_finalize_value_object,B:__embind_register_bigint,M:__embind_register_bool,p:__embind_register_class,o:__embind_register_class_constructor,f:__embind_register_class_function,L:__embind_register_emval,y:__embind_register_float,c:__embind_register_function,m:__embind_register_integer,j:__embind_register_memory_view,x:__embind_register_std_string,t:__embind_register_std_wstring,l:__embind_register_value_object,d:__embind_register_value_object_field,N:__embind_register_void,i:__emval_decref,k:__emval_incref,r:__emval_new_cstring,u:__emval_new_object,q:__emval_set_property,g:__emval_take_value,A:__localtime_js,F:__tzset_js,s:_abort,w:_emscripten_date_now,K:_emscripten_memcpy_big,E:_emscripten_resize_heap,h:_emscripten_run_script,I:_environ_get,J:_environ_sizes_get,H:_fd_close,D:_fd_read,z:_fd_seek,v:_fd_write,a:wasmMemory,G:_strftime,C:_strftime_l}),asm=createWasm(),___wasm_call_ctors=asm.O,_backtest=Module._backtest=asm.P,_free=Module._free=asm.Q,_malloc=Module._malloc=asm.R,___errno_location=asm.__errno_location,_TA_ForEachFunc=Module._TA_ForEachFunc=asm.T,_TA_GetFuncHandle=Module._TA_GetFuncHandle=asm.U,_TA_GetFuncInfo=Module._TA_GetFuncInfo=asm.V,_TA_GetInputParameterInfo=Module._TA_GetInputParameterInfo=asm.W,_TA_GetOptInputParameterInfo=Module._TA_GetOptInputParameterInfo=asm.X,_TA_GetOutputParameterInfo=Module._TA_GetOutputParameterInfo=asm.Y,_TA_ParamHolderAlloc=Module._TA_ParamHolderAlloc=asm.Z,_TA_ParamHolderFree=Module._TA_ParamHolderFree=asm._,_TA_SetInputParamIntegerPtr=Module._TA_SetInputParamIntegerPtr=asm.$,_TA_SetInputParamRealPtr=Module._TA_SetInputParamRealPtr=asm.aa,_TA_SetInputParamPricePtr=Module._TA_SetInputParamPricePtr=asm.ba,_TA_SetOptInputParamInteger=Module._TA_SetOptInputParamInteger=asm.ca,_TA_SetOptInputParamReal=Module._TA_SetOptInputParamReal=asm.da,_TA_SetOutputParamIntegerPtr=Module._TA_SetOutputParamIntegerPtr=asm.ea,_TA_SetOutputParamRealPtr=Module._TA_SetOutputParamRealPtr=asm.fa,_TA_CallFunc=Module._TA_CallFunc=asm.ga,_TA_Initialize=Module._TA_Initialize=asm.ha,_TA_Shutdown=Module._TA_Shutdown=asm.ia,_TA_SetRetCodeInfo=Module._TA_SetRetCodeInfo=asm.ja,_TA_GetVersionString=Module._TA_GetVersionString=asm.ka,___getTypeName=asm.la,__embind_initialize_bindings=Module.__embind_initialize_bindings=asm.ma,stackSave=asm.na,stackRestore=asm.oa,stackAlloc=asm.pa,___cxa_is_pointer_type=asm.qa,dynCall_viijii=Module.dynCall_viijii=asm.ra,dynCall_jiji=Module.dynCall_jiji=asm.sa,dynCall_iiiiij=Module.dynCall_iiiiij=asm.ta,dynCall_iiiiijj=Module.dynCall_iiiiijj=asm.ua,dynCall_iiiiiijj=Module.dynCall_iiiiiijj=asm.va,calledRun;function applySignatureConversions(exports){var makeWrapper_pp=f=>a0=>f(a0)>>>0,makeWrapper_p=f=>()=>f()>>>0;return(exports=Object.assign({},exports)).malloc=makeWrapper_pp(exports.malloc),exports.__errno_location=makeWrapper_p(exports.__errno_location),exports.__getTypeName=makeWrapper_pp(exports.__getTypeName),exports.stackSave=makeWrapper_p(exports.stackSave),exports.stackAlloc=makeWrapper_pp(exports.stackAlloc),exports}function run(){function doRun(){calledRun||(calledRun=!0,Module.calledRun=!0,ABORT)||(initRuntime(),readyPromiseResolve(Module),Module.onRuntimeInitialized&&Module.onRuntimeInitialized(),postRun())}0<runDependencies||(preRun(),0<runDependencies)||(Module.setStatus?(Module.setStatus("Running..."),setTimeout(function(){setTimeout(function(){Module.setStatus("")},1),doRun()},1)):doRun())}if(Module.ccall=ccall,Module.cwrap=cwrap,Module.addFunction=addFunction,Module.removeFunction=removeFunction,dependenciesFulfilled=function runCaller(){calledRun||run(),calledRun||(dependenciesFulfilled=runCaller)},Module.preInit)for("function"==typeof Module.preInit&&(Module.preInit=[Module.preInit]);0<Module.preInit.length;)Module.preInit.pop()();function evalScope(locals,code){with(locals)eval(code)}function utf8_encode(s){if("undefined"!=typeof TextEncoder)return(new TextEncoder).encode(s);for(var pos=0,len=s.length,at=0,tlen=Math.max(32,len+(len>>1)+7),target=new Uint8Array(tlen>>3<<3);pos<len;){var extra,value=s.charCodeAt(pos++);if(55296<=value&&value<=56319)if(pos<len&&56320==(64512&(extra=s.charCodeAt(pos)))&&(++pos,value=((1023&value)<<10)+(1023&extra)+65536),55296<=value&&value<=56319)continue;if(at+4>target.length&&(tlen=(tlen=(tlen+=8)*(1+pos/s.length*2))>>3<<3,(extra=new Uint8Array(tlen)).set(target),target=extra),0==(4294967168&value))target[at++]=value;else{if(0==(4294965248&value))target[at++]=value>>6&31|192;else{if(0==(4294901760&value))target[at++]=value>>12&15|224;else{if(0!=(4292870144&value))continue;target[at++]=value>>18&7|240,target[at++]=value>>12&63|128}target[at++]=value>>6&63|128}target[at++]=63&value|128}}return target.slice(0,at)}function valuesToString(values,pos,ch){void 0===ch&&(ch=" ");for(var result="",i=pos=void 0===pos?0:pos;i<values.length;i++)pos<i&&(result+=ch),null==values[i]?result+="null":"string"==typeof values[i]?result+=values[i]:"number"==typeof values[i]||"function"==typeof values[i].getFullYear?result+=values[i].toString():void 0!==values[i].cols&&"string"==typeof values[i].type&&"table"==values[i].type?result+="`"+JSON.stringify(values[i])+"`":result+=JSON.stringify(values[i]);return result=0<result.length?utf8_encode(result):result}function Vector2Array(obj){for(var arr=[],arrSize=obj.size(),i=0;i<arrSize;i++)arr.push(obj.get(i));return arr}function toNonExponential(value){var sign,e;return"number"!=typeof value&&(value=parseFloat(value),isNaN(value))?"":(value<0?(sign="-",value=Math.abs(value)):sign="",value<1?(e=parseInt(value.toString().split("e-")[1]))&&(value*=Math.pow(10,e-1),value="0."+new Array(e).join("0")+value.toString().substring(2)):(e=parseInt(value.toString().split("e+")[1]))&&(value=(value/=Math.pow(10,e))+new Array(e+1).join("0")),sign+value)}function initThread(env){function Thread(func,args){this.tid=void 0===func?0:nextId++,this.terminated=!1,this.ts=0,this.te=0,this.ret=null,this.funcs=[],Array.isArray(func)?(this.funcs.push(func),this.funcs=this.funcs.concat(args)):this.funcs.push([func].concat(args)),this.data={},this.messageQueue=[],this.run=function(){pending++;var prevThreadId=currentThreadId,ctx=(currentThreadId=this.tid,this.ts=env.UnixNano()/1e6,{});for(let i=this.funcs.length-1;0<=i;i--){"string"==typeof this.funcs[i][0]&&(this.funcs[i][0]=new Function(this.funcs[i][0]));var ret=this.funcs[i][0].apply(ctx,this.funcs[i].slice(1));0==i&&(this.ret=ret)}this.te=env.UnixNano()/1e6,totalElapsed+=this.te-this.ts,this.terminated=!1,currentThreadId=prevThreadId,pending--},this.id=function(){return this.tid},this.name=function(){return 0==this.tid?"MainThread":"Thread-"+this.tid},this.terminate=function(){this.terminated=!0},this.release=function(){delete threads[this.tid]},this.postMessage=function(msg){this.messageQueue.push(msg)},this.peekMessage=function(){return this.messageQueue.shift()||null},this.join=function(timeout){var now=env.UnixNano()/1e6-totalElapsed;if("number"==typeof timeout)if(0<timeout){if(now+timeout<this.te)return void env.Sleep(timeout);env.Sleep(this.te-now)}else if(timeout<0&&now<this.te)return;return this.release(),{id:this.tid,terminated:this.terminated,elapsed:this.te-this.ts,ret:this.ret}},this.eventLoop=function(){env.LogError("sandbox not support eventLoop")}}let threads={},nextId=1,pending=0,totalElapsed=0,currentThreadId=0;function run_forever(){for(;;)env.Sleep(10)}threads[0]=new Thread,env.threading={Thread:function(f){var thread=new Thread(f,1<arguments.length?Array.prototype.slice.call(arguments,1):[]);return(threads[thread.tid]=thread).run(),thread},getThread:function(tid){return threads[tid]},mainThread:function(){return threads[0]},currentThread:function(){return threads[currentThreadId]},pending:function(){return pending},Lock:function(){let locked=!1;return{acquire:function(){locked&&run_forever(),locked=!0},release:function(){locked=!1}}},Event:function(){return{set:function(){return!0},clear:function(){return!0},isSet:function(){return!1},wait:function(timeout){return!0}}},Condition:function(){let locked=!1;return{wait:function(){return!0},notify:function(){return!0},notifyAll:function(){return!0},acquire:function(){locked&&run_forever(),locked=!0},release:function(){locked=!1}}},Dict:function(){let dict={};return{get:function(key){return dict[key]},set:function(key,value){dict[key]=value}}}},env.__Thread=function(f){var thread=new Thread(f,1<arguments.length?Array.prototype.slice.call(arguments,1):[]);return(threads[thread.tid]=thread).run(),thread.tid},env.__threadPeekMessage=function(timeout=0){var currentThreadId=nextId-1,currentThreadId=threads[currentThreadId];return currentThreadId&&0!=currentThreadId.messageQueue.length?currentThreadId.receiveMessage():null},env.__threadPostMessage=function(threadId,msg){threadId=threads[threadId];threadId&&threadId.sendMessage(msg)},env.__threadJoin=function(threadId,timeout){var thread=threads[threadId];if(thread)return thread.join(timeout);throw"thread #"+threadId.toString()+" not found"},env.__threadTerminate=function(threadId){threadId=threads[threadId];threadId&&(threadId.terminate(),threadId.release())},env.__threadGetData=function(threadId,key){threadId=threads[threadId];return threadId&&threadId.data[key]||null},env.__threadSetData=function(threadId,key,value){threadId=threads[threadId];threadId&&(threadId.data[key]=value)},env.__threadId=function(){return nextId-1},env.__threadPending=function(running=0){return 0}}return run(),Module.talib=function(){function ReadDouble(p,idx){return getValue(p+4*idx,"double")}function ReadInt(p,idx){return getValue(p+4*idx,"i32")}function ReadStr(p,idx){return UTF8ToString(getValue(p+4*idx,"i32"))}function GetArr(arr,attr,isInteger){var ret=[],tmp=0;isInteger=void 0!==isInteger&&isInteger;for(var i=0;i<arr.length;i++)"number"!=typeof(tmp=arr[i])&&(tmp=arr[i][attr]),isInteger?ret.push(parseInt(tmp)):ret.push(tmp);var data=isInteger?new Uint8Array(new Int32Array(ret).buffer):new Uint8Array(new Float64Array(ret).buffer),ret=Module._malloc(data.length);return writeArrayToMemory(data,ret),ret}Module._TA_Initialize();function throwError(errCode){var retCodeInfo;if(0!==errCode)throw retCodeInfo=Module._malloc(8),TA_SetRetCodeInfo(errCode,retCodeInfo),errCode=ReadStr(retCodeInfo,0)+": "+ReadStr(retCodeInfo,1),Module._free(retCodeInfo),current_func+": "+errCode}var obj={help:function(n){return obj["h_"+n]()},list:[]},TA_GetInputParameterInfo=Module._TA_GetInputParameterInfo,TA_GetOptInputParameterInfo=Module._TA_GetOptInputParameterInfo,TA_GetOutputParameterInfo=Module._TA_GetOutputParameterInfo,TA_ParamHolderAlloc=Module._TA_ParamHolderAlloc,TA_ParamHolderFree=Module._TA_ParamHolderFree,TA_SetInputParamRealPtr=Module._TA_SetInputParamRealPtr,TA_SetInputParamIntegerPtr=Module._TA_SetInputParamIntegerPtr,TA_SetInputParamPricePtr=Module._TA_SetInputParamPricePtr,TA_SetOptInputParamReal=Module._TA_SetOptInputParamReal,TA_SetOptInputParamInteger=Module._TA_SetOptInputParamInteger,TA_SetOutputParamIntegerPtr=Module._TA_SetOutputParamIntegerPtr,TA_SetOutputParamRealPtr=Module._TA_SetOutputParamRealPtr,TA_CallFunc=Module._TA_CallFunc,TA_SetRetCodeInfo=Module._TA_SetRetCodeInfo,current_func="obj",funcCallback=addFunction(function(ptr){var name=ReadStr(ptr,0),group=ReadStr(ptr,1),hint=ReadStr(ptr,2),nbInput=(ReadInt(ptr,4),ReadInt(ptr,5));if(!(1<nbInput&&"OBV"!==name)){for(var nbOptInput=ReadInt(ptr,6),nbOutput=ReadInt(ptr,7),funcHandle=ReadInt(ptr,8),pInfo=Module._malloc(4),inputs=[],optInputs=[],outputs=[],i=0;i<nbInput;i++){throwError(TA_GetInputParameterInfo(funcHandle,i,pInfo));ptr=ReadInt(pInfo,0);inputs.push({type:ReadInt(ptr,0),paramName:ReadStr(ptr,1),flags:ReadInt(ptr,2)})}for(i=0;i<nbOptInput;i++){throwError(TA_GetOptInputParameterInfo(funcHandle,i,pInfo));ptr=ReadInt(pInfo,0);optInputs.push({type:ReadInt(ptr,0),paramName:ReadStr(ptr,1),flags:ReadInt(ptr,2),displayName:ReadStr(ptr,3),defaultValue:ReadDouble(ptr,6),hint:ReadStr(ptr,8)})}for(i=0;i<nbOutput;i++){throwError(TA_GetOutputParameterInfo(funcHandle,i,pInfo));ptr=ReadInt(pInfo,0);outputs.push({type:ReadInt(ptr,0),paramName:ReadStr(ptr,1),flags:ReadInt(ptr,2)})}Module._free(pInfo),obj["h_"+name]=function(){for(var args=[],i=0;i<inputs.length;i++){var type=inputs[i].type,flags=inputs[i].flags,paramName=inputs[i].paramName;1===type?args.push(["Array[Real]",paramName]):2===type?args.push(["Array[Integer]",paramName]):0===type&&(type=[],1&flags&&type.push("Open"),2&flags&&type.push("High"),4&flags&&type.push("Low"),8&flags&&type.push("Close"),16&flags&&type.push("Volume"),32&flags&&type.push("OpenInterest"),64&flags&&type.push("Time"),args.push(["Records["+type.join(",")+"]",paramName]))}for(i=0;i<optInputs.length;i++){var optType="NA";0===optInputs[i].type?optType="RealRange":1===optInputs[i].type?optType="RealList":2===optInputs[i].type?optType="IntegerRange":3===optInputs[i].type&&(optType="IntegerList"),args.push([optType,optInputs[i].paramName,optInputs[i].defaultValue])}for(var rets=[],i=0;i<outputs.length;i++){var outType="Real";1===outputs[i].type&&(outType="Integer"),rets.push([outType,outputs[i].paramName])}return[name,args,rets,hint]},obj.list.push(name);for(var needArg=0,i=0;i<inputs.length;i++){var type=inputs[i].type,flags=inputs[i].flags;(1===type||2===type||0===type&&(1&flags&&needArg++,2&flags&&needArg++,4&flags&&needArg++,8&flags&&needArg++,16&flags))&&needArg++}obj[name]=function(records){var info={handle:funcHandle,name:current_func=name,needArg:needArg,hint:hint,group:group,inputs:inputs,optInputs:optInputs,outputs:outputs};if(void 0===records&&throwError(2),0===records.length){if(0===info.outputs.length)return[];for(var outputArr=[],i=0;i<info.outputs.length;i++)outputArr.push([]);return outputArr}var argPos=0,argv=arguments,moveStep="number"==typeof records[0]?1:0,allocatedParams=(1==moveStep&&arguments.length<info.needArg&&throwError(2),Module._malloc(4)),openPrice=(throwError(TA_ParamHolderAlloc(info.handle,allocatedParams)),null),highPrice=null,lowPrice=null,closePrice=null,volume=null,ints=[],paramsPtr=ReadInt(allocatedParams,0);Module._free(allocatedParams);for(var i=0;i<info.inputs.length;i++){var tmp,type=info.inputs[i].type,flags=info.inputs[i].flags;1===type?(closePrice||(closePrice=GetArr(argv[argPos],"Close"),argPos+=moveStep),throwError(TA_SetInputParamRealPtr(paramsPtr,i,closePrice))):2===type?(tmp=GetArr(argv[argPos],"Close",!0),argPos+=moveStep,ints.push(tmp),throwError(TA_SetInputParamIntegerPtr(paramsPtr,i,tmp))):0===type&&(1&flags&&(openPrice||(openPrice=GetArr(argv[argPos],"Open"),argPos+=moveStep)),2&flags&&(highPrice||(highPrice=GetArr(argv[argPos],"High"),argPos+=moveStep)),4&flags&&(lowPrice||(lowPrice=GetArr(argv[argPos],"Low"),argPos+=moveStep)),8&flags&&(closePrice||(closePrice=GetArr(argv[argPos],"Close"),argPos+=moveStep)),16&flags&&(volume||(volume=GetArr(argv[argPos],"Volume"),argPos+=moveStep)),throwError(TA_SetInputParamPricePtr(paramsPtr,i,openPrice,highPrice,lowPrice,closePrice,volume,null)))}for(0==moveStep&&argPos++,i=0;i<info.optInputs.length;i++)switch(v=argPos+i<arguments.length?arguments[i+argPos]:info.optInputs[i].defaultValue,info.optInputs[i].type){case 0:case 1:TA_SetOptInputParamReal(paramsPtr,i,v);break;case 2:case 3:TA_SetOptInputParamInteger(paramsPtr,i,v);break;default:throw"error"}outputArr=[];for(i=0;i<info.outputs.length;i++){var ptr=null;1===info.outputs[i].type?(ptr=Module._malloc(4*records.length),throwError(TA_SetOutputParamIntegerPtr(paramsPtr,i,ptr))):0===info.outputs[i].type&&(ptr=Module._malloc(8*records.length),throwError(TA_SetOutputParamRealPtr(paramsPtr,i,ptr))),outputArr.push(ptr)}var allocatedParams=Module._malloc(4),outNbElement=Module._malloc(4),beg=(TA_CallFunc(paramsPtr,0,records.length-1,allocatedParams,outNbElement),ReadInt(allocatedParams,0)),num=ReadInt(outNbElement,0),ret=(Module._free(allocatedParams),Module._free(outNbElement),[]);for(i=0;i<info.outputs.length;i++){ptr=outputArr[i];ret[i]=[];for(var v,j=0;j<records.length;j++)j<beg||num<=j-beg?ret[i].push(NaN):(1===info.outputs[i].type?v=ReadInt(ptr,j-beg):0===info.outputs[i].type&&(v=ReadDouble(ptr,2*(j-beg))),ret[i].push(v));Module._free(ptr)}for(throwError(TA_ParamHolderFree(paramsPtr)),openPrice&&Module._free(openPrice),highPrice&&Module._free(highPrice),lowPrice&&Module._free(lowPrice),closePrice&&Module._free(closePrice),volume&&Module._free(volume),i=0;i<ints.length;i++)Module._free(ints[i]);return 1===ret.length?ret[0]:ret}}},"vii");if(0!==ccall("TA_ForEachFunc","number",["pointer","number"],[funcCallback,0]))throw"error";return removeFunction(funcCallback),obj},Module.VMain=function(task){for(var exchanges=[],i=0;i<task.Exchanges.length;i++)exchanges[i]=function(eIdx){var self={},idx=eIdx;return self.cache=[],self.ct="",self.period=task.Options.Period,self.currency=Module.js_Exchange_GetCurrency(eIdx),self.maxBarLen=task.Exchanges[idx].MaxBarLen,self.lastRawJSON="",self.GetName=function(){return Module.js_Exchange_GetName(eIdx)},self.SetData=function(pair,detail){return"string"!=typeof detail&&(detail=JSON.stringify(detail)),Module.js_Exchange_SetData(eIdx,pair,detail)},self.GetPeriod=function(){return self.period/1e3},self.GetCurrency=function(){return self.currency},self.GetLabel=function(){return Module.js_Exchange_GetLabel(eIdx)},self.GetUSDCNY=function(){return Module.js_Exchange_GetUSDCNY(eIdx)},self.GetRate=function(){return Module.js_Exchange_GetRate(eIdx)},self.SetRate=function(n){return Module.js_Exchange_SetRate(eIdx,n=void 0===n?1:n)},self.SetCurrency=function(s){Module.js_Exchange_SetCurrency(eIdx,s),self.currency=Module.js_Exchange_GetCurrency(eIdx)},self.SetBase=function(s){return Module.js_Exchange_SetBase(eIdx,s)},self.GetBase=function(){return Module.js_Exchange_GetBase(eIdx)},self.SetTimeout=function(n){},self.IO=function(k,v){return void 0===v&&(v=1),"currency"==k?self.SetCurrency(v):Module.js_Exchange_IO(eIdx,k,v)},self.SetPrecision=function(a,b){Module.js_Exchange_SetPrecision(eIdx,a,b)},self.SetProxy=function(){},self.GetQuoteCurrency=function(){return Module.js_Exchange_GetQuoteCurrency(eIdx)},self.GetBaseCurrency=function(){return Module.js_Exchange_GetBaseCurrency(eIdx)},self.GetDepth=function(symbol){self.lastRawJSON="";var ret=Module.js_Exchange_GetDepth(eIdx,symbol||"");if(!ret)return null;for(var arr=Vector2Array(ret.Orders),d={Asks:[],Bids:[]},i=0;i<arr.length;i++)(i<ret.AsksLen?d.Asks:d.Bids).push(arr[i]);return d},self.GetTickers=function(){self.lastRawJSON="";var ret=Module.js_Exchange_GetTickers(eIdx);return ret?Vector2Array(ret):null},self.GetMarkets=function(){return JSON.parse(Module.js_Exchange_GetMarkets(eIdx))},self.GetTicker=function(symbol){return self.lastRawJSON="",Module.js_Exchange_GetTicker(eIdx,symbol||"")},self.GetData=function(pair,timeout,offset){"number"!=typeof timeout&&(timeout=6e4),"number"!=typeof offset&&(offset=0),self.lastRawJSON="";pair=Module.js_Exchange_GetData(eIdx,pair,timeout,offset);return 0<pair.Data.length?pair.Data=JSON.parse(pair.Data):pair.Data=null,pair},self.GetTrades=function(symbol){self.lastRawJSON="";symbol=Module.js_Exchange_GetTrades(eIdx,symbol||"");return symbol?Vector2Array(symbol):null},self.SetMaxBarLen=function(n){self.maxBarLen=n},self.GetRecords=function(symbol,period,limit){"number"==typeof symbol?(limit=period,period=symbol,symbol=""):void 0===symbol&&(symbol="",period=-1,limit=0),self.lastRawJSON="";symbol=Module.js_Exchange_GetRecords(eIdx,symbol||"",period=void 0!==period&&-1!=period?period:self.period/1e3,limit="number"!=typeof limit?0:limit);if(!symbol)return null;var records=Vector2Array(symbol),symbol=self.currency+"/"+self.ct+"/"+period.toString();if(void 0===self.cache[symbol])records.length>self.maxBarLen&&(records=records.slice(records.length-self.maxBarLen)),self.cache[symbol]=records;else for(var c=self.cache[symbol],preTime=0<c.length?c[c.length-1].Time:0,i=0;i<records.length;i++)records[i].Time==preTime&&0<c.length?c[c.length-1]=records[i]:records[i].Time>preTime&&(c.push(records[i]),preTime=c[c.length-1].Time,c.length>self.maxBarLen)&&c.shift();let bars=self.cache[symbol];return bars=0<limit&&bars.length>limit?bars.slice(bars.length-limit):bars},self.GetAccount=function(){return self.lastRawJSON="ctpAccount",Module.js_Exchange_GetAccount(eIdx)},self.GetRawJSON=function(){return"ctpAccount"!=self.lastRawJSON?self.lastRawJSON:Module.js_Exchange_GetCTPAccountJSON(eIdx)},self.Buy=function(price,amount){return self.lastRawJSON="",Module.js_Exchange_Buy(eIdx,price,amount,valuesToString(Array.prototype.slice.call(arguments),2))},self.Sell=function(price,amount){return self.lastRawJSON="",Module.js_Exchange_Sell(eIdx,price,amount,valuesToString(Array.prototype.slice.call(arguments),2))},self.CreateOrder=function(symbol,side,price,amount){return self.lastRawJSON="",Module.js_Exchange_CreateOrder(eIdx,symbol,side,price,amount,valuesToString(Array.prototype.slice.call(arguments),4))},self.Log=function(orderType,price,amount){Module.js_Exchange_Log(eIdx,orderType,price,2==orderType?0:amount,valuesToString(Array.prototype.slice.call(arguments),2==orderType?2:3))},self.GetOrders=function(symbol){self.lastRawJSON="";symbol=Module.js_Exchange_GetOrders(eIdx,symbol||"");return symbol?Vector2Array(symbol):null},self.GetHistoryOrders=function(symbol,since,limit){"number"==typeof symbol&&(limit=since,since=symbol,symbol=""),self.lastRawJSON="",void 0===limit&&(limit=0);symbol=Module.js_Exchange_GetHistoryOrders(eIdx,symbol||"",(since=void 0===since?0:since).toString(),limit);return symbol?Vector2Array(symbol):null},self.GetAssets=function(){self.lastRawJSON="";var ret=Module.js_Exchange_GetAssets(eIdx);return ret?Vector2Array(ret):null},self.GetOrder=function(orderId){return self.lastRawJSON="",Module.js_Exchange_GetOrder(eIdx,orderId)},self.CancelOrder=function(orderId){return self.lastRawJSON="",Module.js_Exchange_CancelOrder(eIdx,orderId,valuesToString(Array.prototype.slice.call(arguments),1))},self.SetDirection=function(s){return Module.js_Exchange_SetDirection(eIdx,s)},self.SetMarginLevel=function(symbol,marginLevel){var tmp;return"number"==typeof symbol&&(tmp=marginLevel||"",marginLevel=symbol,symbol=tmp),Module.js_Exchange_SetMarginLevel(eIdx,symbol,marginLevel)},self.SetContractType=function(symbol){var r=Module.js_Exchange_SetContractType(eIdx,symbol);return"string"==typeof r?(self.ct=symbol,JSON.parse(r)):null},self.GetContractType=function(){return self.ct},self.GetFundings=function(symbol){self.lastRawJSON="";symbol=Module.js_Exchange_GetFundings(eIdx,symbol||"");return symbol?Vector2Array(symbol):null},self.GetPosition=self.GetPositions=function(symbol){self.lastRawJSON="";symbol=Module.js_Exchange_GetPositions(eIdx,symbol||"");return symbol?Vector2Array(symbol):null},self.Go=function(){var args=Array.prototype.slice.call(arguments),ret=self[args[0]].apply(self,args.slice(1));return{wait:function(){return ret}}},self}(i);function countLines(s){for(var count=1,i=0;i<s.length;i++)"\n"==s[i]&&count++;return count}var k,gApis={kvdb:{}},__realDate=(initThread(gApis),Date),__cRetryDelay=3e3,runtime=(gApis.RDate=__realDate,gApis.Benchmark=Module.js_Benchmark,gApis._T=function(a,b){return"[trans]"+("string"==typeof b?a+"|"+b:a)+"[/trans]"},gApis._D=function(date,fmt){void 0===fmt&&(fmt="yyyy-MM-dd hh:mm:ss"),"number"==typeof date?date=new __realDate(date):void 0===date&&(date=new __realDate(Module.js_UnixNano()/1e6));var y=date.getFullYear(),yy=(y%100).toString();1==yy.length&&(yy="0"+yy);var M=(M="0"+(date.getMonth()+1)).substring(M.length-2),d=(d="0"+date.getDate()).substring(d.length-2),h=(h="0"+date.getHours()).substring(h.length-2),m=(m="0"+date.getMinutes()).substring(m.length-2),date=(date="0"+date.getSeconds()).substring(date.length-2);return fmt.replace("yyyy",y).replace("MM",M).replace("dd",d).replace("hh",h).replace("mm",m).replace("ss",date).replace("yy",yy)},gApis.Unix=function(){return Module.js_Unix()},gApis.UnixNano=function(){return Module.js_UnixNano()},gApis.Sleep=function(n){Module.js_Sleep(n)},gApis.Log=function(){Module.js_Log(valuesToString(Array.prototype.slice.call(arguments)))},gApis.LogError=function(){Module.js_LogError(valuesToString(Array.prototype.slice.call(arguments)))},gApis.LogStatus=function(){Module.js_LogStatus(valuesToString(Array.prototype.slice.call(arguments)))},gApis.LogProfit=function(profit){Module.js_LogProfit(profit,valuesToString(Array.prototype.slice.call(arguments),1))},gApis.LogReset=function(keep){Module.js_LogReset(keep=void 0===keep?0:keep)},gApis.EnableLog=function(flag){Module.js_EnableLog(flag=void 0===flag?!0:flag)},gApis.LogProfitReset=function(keep){Module.js_LogProfitReset(keep=void 0===keep?0:keep)},gApis.Date=function(s){return void 0===s&&(s=Module.js_UnixNano()/1e6),new __realDate(s)},gApis.Date.UTC=__realDate.UTC,gApis.Date.parse=__realDate.parse,gApis.Date.now=function(){return Module.js_UnixNano()/1e6},gApis._Cross=function(arr1,arr2){if(arr1.length!==arr2.length)throw"cross array length not equal";for(var n=0,i=arr1.length-1;0<=i&&"number"==typeof arr1[i]&&"number"==typeof arr2[i];i--)if(arr1[i]<arr2[i]){if(0<n)break;n--}else{if(!(arr1[i]>arr2[i]))break;if(n<0)break;n++}return n},gApis._N=function(v,precision){"number"!=typeof precision&&(precision=4);var v=parseFloat(v.toFixed(Math.max(10,precision+5))),s=toNonExponential(v).split(".");return!(0<=precision&&(s.length<2||s[1].length<=precision))&&((s=v<0)&&(v=-v),precision=Math.pow(10,precision),v=Math.floor(v*precision)/precision,s)&&0!=v?-v:v},gApis._C=function(method){for(var r;!(r=method.apply(this,Array.prototype.slice.call(arguments).slice(1)));)gApis.Sleep(__cRetryDelay);return r},gApis._CDelay=function(n){0<n&&(__cRetryDelay=n)},gApis.GetPid=function(){return 1},gApis.GetOS=function(){return"linux/amd64"},gApis.GetLastError=function(){return Module.js_GetLastError()},gApis.SetErrorFilter=function(s){},gApis.MD5=function(s){return Module.js_MD5(s)},gApis.UUID=function(){return Math.random().toString(36).substring(2,15)+Math.random().toString(36).substring(2,15)},gApis.GetCommand=function(){return""},gApis.GetMeta=function(){return""},gApis.Mail=function(){return!0},gApis.Mail_Go=function(){return{wait:function(){return!0}}},gApis.EventLoop=function(){gApis.LogError("sandbox not support EventLoop")},gApis.Dial=function(){gApis.LogError("sandbox not support Dial")},gApis.DBExec=function(){gApis.LogError("sandbox not support DBExec")},gApis.Encode=function(){gApis.LogError("sandbox not support Encode")},gApis.HttpQuery=function(url){return Module.js_HttpQuery(url)},gApis.HttpQuery_Go=function(url){return{wait:function(){return Module.js_HttpQuery(url)}}},gApis.JSONParse=function(s){return JSON.parse(s)},gApis.StrDecode=function(s){gApis.LogError("sandbox not support StrDecode")},gApis.IsVirtual=function(){return!0},gApis.EnableLogLocal=function(){},gApis.LogVacuum=function(){},gApis.Version=function(){return"3.6"},gApis._G=function(k,v){if(void 0===k)return 1;if(null==k)gApis.kvdb={};else{if(k=k.toLowerCase(),void 0===v)return void 0===gApis.kvdb[k]?null:gApis.kvdb[k];null==v?delete gApis.kvdb[k]:gApis.kvdb[k]=v}},gApis.Chart=function(js){var self={update:function(cfg){Module.js_Chart_New(utf8_encode(JSON.stringify(cfg)))},add:function(seriesIdx,d,replaceId){var arr=[];"number"!=typeof seriesIdx?arr=seriesIdx:(arr=[seriesIdx,d],void 0!==replaceId&&arr.push(replaceId)),Module.js_Chart_Add(utf8_encode(JSON.stringify(arr)))},reset:function(reverse){Module.js_Chart_Reset("number"!=typeof reverse?0:reverse)}};return self.update(js),self},gApis.KLineChart=function(options){(options=void 0===options?{}:options).__isCandle=!0;function newPlot(shape){return void 0===shape.overlay&&(shape.overlay=scope.overlay),"shape"!=shape.type&&"bgcolor"!=shape.type&&"barcolor"!=shape.type&&(shape.title&&!scope.runtime.titles[shape.title]||(shape.title="<"+(shape.title||"plot")+"_"+scope.runtime.count.toString()+">"),scope.runtime.count+=1,shape.title)&&(scope.runtime.titles[shape.title]=!0),shape}var scope={chart:gApis.Chart(options),bar:{},overlay:options.overlay||!1,preTime:0,runtime:{plots:[],signals:[],titles:{},count:0}};return scope.register=function(name,args,pfn){var dic={},names=[];args.forEach(function(s,i){Array.isArray(s)?(names.push(s[0]),dic[s[0]]={pos:i,val:s[1]}):(names.push(s),dic[s]={pos:i})}),scope[name]=function(){if(!(scope.bar.Time<scope.preTime)){var argv={};for(k in dic)void 0!==dic[k].val&&(argv[k]=dic[k].val);for(var i=0;i<arguments.length;i++)if(i==arguments.length-1&&"object"==typeof arguments[i])for(var k in arguments[i])void 0!==dic[k]&&(argv[k]=arguments[i][k]);else void 0!==dic[names[i]]&&(argv[names[i]]=arguments[i]);return pfn(argv)}}},scope.begin=function(bar){scope.bar=bar},scope.reset=function(remain){scope.chart.reset(remain),scope.preTime=0},scope.close=function(){var data;scope.bar.Time<scope.preTime||(data={timestamp:scope.bar.Time,open:scope.bar.Open,high:scope.bar.High,low:scope.bar.Low,close:scope.bar.Close,volume:scope.bar.Volume},0<scope.runtime.plots.length&&(data.runtime||(data.runtime={}),data.runtime.plots=scope.runtime.plots),0<scope.runtime.signals.length&&(data.runtime||(data.runtime={}),data.runtime.signals=scope.runtime.signals),scope.preTime==scope.bar.Time?scope.chart.add(0,data,-1):scope.chart.add(0,data),scope.preTime=scope.bar.Time,scope.runtime.plots=[],scope.runtime.signals=[],scope.runtime.titles={},scope.runtime.count=0)},scope.register("plot",[["series",NaN],"title","color","linewidth",["style","line"],"trackprice",["histbase",0],["offset",0],["join",!1],"editable","show_last",["display","all"],"overlay"],function(argv,idx){if(!isNaN(argv.series))return scope.runtime.plots.push(newPlot({series:argv.series,overlay:argv.overlay,title:argv.title,join:argv.join,color:argv.color,histbase:argv.histbase,type:argv.style,lineWidth:argv.linewidth,display:argv.display,offset:argv.offset})),scope.runtime.plots.length-1}),scope.register("barcolor",["color","offset","editable","show_last","title",["display","all"]],function(argv,idx){"string"==typeof argv.color&&"all"==argv.display&&scope.runtime.plots.push({type:"barcolor",title:argv.title,color:argv.color,offset:argv.offset,showLast:argv.show_last,display:argv.display})}),scope.register("plotarrow",["series","title",["colorup","#00ff00"],["colordown","#ff0000"],["offset",0],["minheight",5],["maxheight",100],["editable",!0],"show_last",["display","all"],"overlay"],function(argv){"all"!=argv.display||isNaN(argv.series)||scope.runtime.plots.push(newPlot({series:argv.series,title:argv.title,colorup:argv.colorup,colordown:argv.colordown,offset:argv.offset,minheight:argv.minheight,maxheight:argv.maxheight,showLast:argv.show_last,type:"shape",style:"arrow",display:argv.display,overlay:argv.overlay}))}),scope.register("hline",["price","title","color",["linestyle","dashed"],"linewidth","editable",["display","all"],"overlay"],function(argv){return scope.runtime.plots.push(newPlot({title:argv.title,price:argv.price,overlay:argv.overlay,color:argv.color,type:"hline",lineStyle:argv.linestyle,lineWidth:argv.linewidth,display:argv.display})),scope.runtime.plots.length-1}),scope.register("bgcolor",["color","offset","editable","show_last","title",["display","all"],"overlay"],function(argv){"string"==typeof argv.color&&"all"==argv.display&&scope.runtime.plots.push(newPlot({title:argv.title,overlay:argv.overlay,color:argv.color,type:"bgcolor",showLast:argv.show_last,offset:argv.offset}))}),scope.register("plotchar",["series","title","char",["location","abovebar"],"color","offset","text","textcolor","editable",["size","auto"],"show_last","display","overlay"],function(argv){"absolute"!=argv.location&&!argv.series||"absolute"==argv.location&&isNaN(argv.series)||!argv.char||scope.runtime.plots.push(newPlot({overlay:argv.overlay,type:"shape",style:"char",char:argv.char,series:argv.series,location:argv.location,color:argv.color,offset:argv.offset,size:argv.size,text:argv.text,textColor:argv.textcolor}))}),scope.register("plotshape",["series","title","style",["location","abovebar"],"color","offset","text","textcolor","editable",["size","auto"],"show_last","display","overlay"],function(argv){"absolute"!=argv.location&&!argv.series||"absolute"==argv.location&&isNaN(argv.series)||scope.runtime.plots.push(newPlot({type:"shape",overlay:argv.overlay,title:argv.title,size:argv.size,style:argv.style,series:argv.series,location:argv.location,color:argv.color,offset:argv.offset,text:argv.text,textColor:argv.textcolor}))}),scope.register("plotcandle",["open","high","low","close","title","color","wickcolor","editable","show_last","bordercolor",["display","all"],"overlay"],function(argv){"all"==argv.display&&scope.runtime.plots.push(newPlot({price:argv.high,open:argv.open,high:argv.high,low:argv.low,close:argv.close,title:argv.title,color:argv.color,wickColor:argv.wickcolor,showLast:argv.show_last,borderColor:argv.bordercolor,type:"candle",display:argv.display,overlay:argv.overlay}))}),scope.register("fill",["plot1","plot2","color","title","editable","show_last","fillgaps",["display","all"]],function(argv){var dst;0<=argv.plot1&&0<=argv.plot2&&argv.plot1<scope.runtime.plots.length&&argv.plot2<scope.runtime.plots.length&&"all"==argv.display&&void 0!==(dst=scope.runtime.plots[argv.plot1])&&(void 0===dst.fill&&(dst.fill=[]),dst.fill.push({value:scope.runtime.plots[argv.plot2].series,color:argv.color,showLast:argv.show_last}))}),scope.register("signal",["direction","price","qty","id"],function(argv){var task={id:argv.id||argv.direction,qty:argv.qty,avgPrice:argv.price};"buy"==argv.direction||"long"==argv.direction?task.direction="long":"sell"==argv.direction||"short"==argv.direction?task.direction="short":"closesell"==argv.direction||"closeshort"==argv.direction?(task.direction="close",task.closeDirection="short"):"closebuy"!=argv.direction&&"closelong"!=argv.direction||(task.direction="close",task.closeDirection="long"),(task.direction||task.closeDirection)&&scope.runtime.signals.push(task)}),scope},gApis.$={},gApis.ORDER_STATE_PENDING=0,gApis.ORDER_STATE_CLOSED=1,gApis.ORDER_STATE_CANCELED=2,gApis.ORDER_STATE_UNKNOWN=3,gApis.ORDER_TYPE_BUY=0,gApis.ORDER_TYPE_SELL=1,gApis.ORDER_OFFSET_OPEN=0,gApis.ORDER_OFFSET_CLOSE=1,gApis.PD_LONG=0,gApis.PD_SHORT=1,gApis.PD_LONG_YD=2,gApis.PD_SHORT_YD=3,gApis.LOG_TYPE_BUY=0,gApis.LOG_TYPE_SELL=1,gApis.LOG_TYPE_CANCEL=2,gApis.LOG_TYPE_ERROR=3,gApis.LOG_TYPE_PROFIT=4,gApis.LOG_TYPE_LOG=5,gApis.LOG_TYPE_RESTART=6,gApis.PERIOD_M1=60,gApis.PERIOD_M3=180,gApis.PERIOD_M5=300,gApis.PERIOD_M15=900,gApis.PERIOD_M30=1800,gApis.PERIOD_H1=3600,gApis.PERIOD_H2=7200,gApis.PERIOD_H4=14400,gApis.PERIOD_H6=21600,gApis.PERIOD_H12=43200,gApis.PERIOD_D1=86400,gApis.PERIOD_D3=259200,gApis.PERIOD_W1=604800,gApis.exchanges=exchanges,gApis.exchange=exchanges[0],gApis.talib=Module.talib(),gApis.TA=TAInstance(function(name){Module.js_LogTA(name,valuesToString(Array.prototype.slice.call(arguments),1,","))}),null),tpls=(gApis.__runtime__=function(obj){runtime=obj},task.Code),scope={};for(k in gApis)scope[k]=gApis[k];for(var endPos,rawTxt,mapLinesPos,fullSource="",sourceMapObj=[],i=0;i<tpls.length;i++){var tpl=tpls[i],argsLine="",argDic={},suffix=(tpl[1].forEach(function(pair){argsLine+="var "+pair[0]+" = "+JSON.stringify(pair[1])+";",argDic[pair[0]]=pair[1]}),argsLine+="var __arguments = "+JSON.stringify(argDic)+";","\n;if(typeof(init)==='function')init();"),fileName=tpl[2];if(i==tpls.length-1){if(fileName="__FILE__",void 0!==Module.__ret__){scope.__arguments=argDic,tpl[1].forEach(function(pair){scope[pair[0]]=pair[1]}),Module.__ret__.scope=scope,Module.__ret__.Join=Module.js_Join;continue}suffix+=";;main()\nif(typeof(onexit)==='function'){onexit()}"}sourceMapObj.push({baseLine:countLines(fullSource),codeLine:countLines(tpl[0]),fileName:fileName,mapLines:(fileName=tpl[0],mapLinesPos=rawTxt=endPos=void 0,-1!=(mapLinesPos=fileName.indexOf("//# sourceMappingObj="))?(rawTxt="",rawTxt=-1==(endPos=fileName.indexOf("\n",mapLinesPos+1))?fileName.slice(mapLinesPos+"//# sourceMappingObj=".length):fileName.slice(mapLinesPos+"//# sourceMappingObj=".length,endPos),JSON.parse(rawTxt)):[])}),fullSource+="(function(){"+argsLine+tpl[0]+suffix+"})();\n"}function dumpStack(err){let stacks=[],errMsg="";return void 0===err?err=new Error:(err.stack&&(console.log("\nStacktrace:"),console.log("===================="),console.log(err.stack)),errMsg=err.toString(),stacks.push(errMsg)),-1==errMsg.indexOf("line:")&&err.stack&&err.stack.split("\n").forEach(function(stackLine){var posSearch=stackLine.indexOf("(eval at evalScope ");if(0<posSearch){var pos=stackLine.indexOf("<anonymous>:",posSearch),posSearch=(0<pos&&(e=stackLine.indexOf(")",pos)),stackLine.substring(0,posSearch).split("\n")),stackLine=stackLine.substring(pos+"<anonymous>:".length,e).split(":");if(0<stackLine.length){for(var vLine=parseInt(stackLine[0]),fileName=null,mapLines=[],pIndex=0;pIndex<sourceMapObj.length;pIndex++)if(vLine>=sourceMapObj[pIndex].baseLine&&vLine<sourceMapObj[pIndex].baseLine+sourceMapObj[pIndex].codeLine){fileName=sourceMapObj[pIndex].fileName,mapLines=sourceMapObj[pIndex].mapLines,vLine-=sourceMapObj[pIndex].baseLine-1;break}if(fileName){for(var pItem=0;pItem<mapLines.length;pItem++)if(vLine>=mapLines[pItem][0]&&vLine<=mapLines[pItem][1]){vLine-=mapLines[pItem][2];break}stacks.push(posSearch[posSearch.length-1]+"("+fileName+":"+vLine.toString()+")")}}}}),stacks.join("\n")}Module.__dumpStack__=dumpStack;try{evalScope(scope,fullSource)}catch(err){"EOF"!=err&&Module.js_LogError(utf8_encode(dumpStack(err)))}try{void 0!==task.Step&&task.Step||Module.js_Close(JSON.stringify(runtime))}catch(e){}},Module.VTask=function(task,httpCache,httpGet,callBack,onEnd,retScope){void 0!==retScope&&(Module.__ret__=retScope),void 0!==httpCache&&httpCache||(httpCache={});var retScope=addFunction(function(a,b,c,d){var jsString,a=UTF8ToString(a),a=(void 0!==httpCache[a]?jsString=httpCache[a]:(jsString=httpGet(a),httpCache[a]=jsString),lengthBytesUTF8(jsString)+1),ptr=_malloc(a);return stringToUTF8(jsString,ptr,a+1),setValue(b,ptr,"i32"),setValue(c,a,"i32"),setValue(d,1,"i32"),0},"iiiii"),progressCallback=addFunction(function(st){callBack(JSON.parse(UTF8ToString(st)))},"vi"),dumpStack=addFunction(function(b,c,d){var lengthBytes,ptr,pfn=Module.__dumpStack__;return"function"!=typeof pfn?1:(pfn=pfn(),lengthBytes=lengthBytesUTF8(pfn)+1,ptr=_malloc(lengthBytes),stringToUTF8(pfn,ptr,lengthBytes+1),setValue(b,ptr,"i32"),setValue(c,lengthBytes,"i32"),setValue(d,1,"i32"),0)},"iiii");ccall("backtest","number",["string","string","pointer","pointer"],[JSON.stringify(task),null,retScope,progressCallback,dumpStack]),"function"==typeof onEnd&&onEnd()},moduleArg}})(),fs,os,crypto,httpGet,_session,toUnix,fmtTime,toHTML,pdObj,htmlResult,__m;function md5(text){return crypto.createHash("md5").update(text).digest("hex")}function fetchSync(url){var sab=new SharedArrayBuffer(10256),int32=new Int32Array(sab),url=new(require("worker_threads").Worker)(`
    const { workerData } = require('worker_threads');
    const int32 = new Int32Array(workerData);
    const uint8Array = new Uint8Array(workerData);
    
    function next(dataLen, hasMore) {
        Atomics.store(int32, 2, dataLen);
        Atomics.store(int32, 3, hasMore);
        Atomics.store(int32, 0, 1);
        Atomics.notify(int32, 0);
        // wait for main thread to consume the data
        Atomics.wait(int32, 1, 0);
        Atomics.store(int32, 1, 0);
        Atomics.notify(int32, 1);
    }
    
    function postBuffer(text) {
        if (text.length == 0) {
            next(0, 0);
            return;
        }
        const bufLen = 10240;
        let counter = 0;
        for (let i = 0; i < text.length; i++) {
            uint8Array[16 + counter] = text.charCodeAt(i);
            counter++;
            let hasMore = i == text.length - 1 ? 0 : 1;
            if (counter == bufLen || i == text.length - 1) {
                // notify
                next(counter, hasMore)
                counter = 0;
            }
        }
    }
    
    let url = '${url}';
    let finalData = '';
    require(url.split('://')[0]).get(url, function(response) {
        response.setEncoding('utf8');
        response.on('data', function(data) {
            finalData += data;
        });
        response.on('error', function(err) {
            postBuffer('')
        })
        response.on('end', function() {
            postBuffer(finalData)
        })
    });
    `,{workerData:sab,eval:!0}),uint8Array=new Uint8Array(sab);let str="";for(;;){Atomics.wait(int32,0,0),Atomics.store(int32,0,0);var totalLen=Atomics.load(int32,2),hasMore=Atomics.load(int32,3);for(let i=0;i<totalLen;i++)str+=String.fromCharCode(uint8Array[16+i]);if(Atomics.store(int32,1,1),Atomics.notify(int32,1),0==totalLen||0==hasMore)break}return url.terminate(),str}function notify(msgType,msg){var msg=Buffer.from(msg),h=Buffer.allocUnsafe(8);h.writeUInt32BE(msgType,0),h.writeUInt32BE(msg.length,4),_session.write(Buffer.concat([h,msg]))}"object"==typeof exports&&"object"==typeof module?module.exports=VBacktest:"function"==typeof define&&define.amd&&define([],()=>VBacktest),"undefined"!=typeof self&&void 0!==self.onmessage?self.onmessage=function(event){var event=event.data,task=event[0],httpCache=event[1],lastProgress=0,lastSummary="";VBacktest().VTask(task,httpCache,function(path){var r=XMLHttpRequest?new XMLHttpRequest:new ActiveXObject("Microsoft.XMLHTTP");return r.open("GET",path,!1),r.send(null),r.responseText},function(st){var nowProgress;void 0!==st.TaskStatus&&1==st.TaskStatus&&(st.httpCache=httpCache),1==st.TaskStatus?self.postMessage({ret:st}):(nowProgress=st.Progress.toFixed(1))==lastProgress&&lastSummary===st.statusStr||(lastProgress=nowProgress,lastSummary=st.statusStr,self.postMessage({ret:st}))})}:(fs=require("fs"),os=require("os"),crypto=require("crypto"),httpGet=function(url){var tmpCache=os.tmpdir()+"/cache",tmpCache=(fs.existsSync(tmpCache)||fs.mkdirSync(tmpCache),tmpCache+"/botvs_kline_"+md5(url));return fs.existsSync(tmpCache)?fs.readFileSync(tmpCache,"utf-8"):((url=fetchSync(url))&&-1!==url.indexOf(",")&&fs.writeFileSync(tmpCache,url,"utf-8"),url)},"undefined"!=typeof s?(_session=s,VBacktest().VTask(__cfg__,null,httpGet,function(st){notify(st.TaskStatus,JSON.stringify(st))},function(){try{_session.end()}catch(e){}})):(toUnix=function(s){var n=parseInt(new Date(s).getTime()/1e3);return-1==s.indexOf(" ")&&(n-=28800),n},fmtTime=function(date,fmt){void 0===fmt&&(fmt="yyyy-MM-dd hh:mm:ss");var y=date.getFullYear(),yy=(y%100).toString();1==yy.length&&(yy="0"+yy);var M=(M="0"+(date.getMonth()+1)).substring(M.length-2),d=(d="0"+date.getDate()).substring(d.length-2),h=(h="0"+date.getHours()).substring(h.length-2),m=(m="0"+date.getMinutes()).substring(m.length-2),date=(date="0"+date.getSeconds()).substring(date.length-2);return fmt.replace("yyyy",y).replace("MM",M).replace("dd",d).replace("hh",h).replace("mm",m).replace("ss",date).replace("yy",yy)},toHTML=function(data){var html="<table><tr><td>";for(i in data.columns)html+="<td>"+data.columns[i]+"</td>";html+="</tr>";for(var rows=[],i=0;i<data.rows.length;i++){for(var rowSkip="",row=(5<=i&&i<data.rows.length-5&&(i=data.rows.length-5,rowSkip="<tr><td>...</td>"),"<tr><td>"+data.index[i]+"</td>"),j=0;j<data.columns.length;j++)0<rowSkip.length&&(rowSkip+="<td>...</td>"),row+="<td>"+data.rows[i][j]+"</td>";0<rowSkip.length&&rows.push(rowSkip+"</tr>"),rows.push(row+"</tr>")}return html=(html+=rows.join("")+"</table>")+("<p>"+data.rows.length+" rows x "+data.columns.length+" columns<p>")},pdObj=function(data){var p=this;p.index=data.index,p.columns=data.columns,data.columns.forEach(function(c){p[c]=[]}),data.rows.forEach(function(row){row.forEach(function(f,idx){idx<data.columns.length&&p[data.columns[idx]].push(f)})}),p._toHtml=function(){return toHTML(data)}},__ctx.exports.get_bars=function(symbol,unit,start,end,count){void 0===count&&(count=1e3),"string"==typeof(unit=void 0===unit?"1d":unit)&&(ec=unit[unit.length-1],unit=parseInt(unit.slice(0,unit.length-1)),"d"==ec?unit*=1440:"h"==ec?unit*=60:"s"==ec&&(unit/=60));var key,ec=parseInt((new Date).getTime()/1e3),params=(void 0!==end&&(ec=toUnix(end)),void 0!==start?(ts_from=toUnix(start),void 0===end&&(ec=ts_from+100*unit*(count+10))):void 0===end?(ts_from=0,ts_end=0):ts_from=ec-100*unit*(count+10),{symbol:symbol,resolution:unit,from:ts_from,to:ec,size:count}),arr=[];for(key in params)arr.push(encodeURIComponent(key)+"="+encodeURIComponent(params[key]));for(var data=JSON.parse(httpGet("https://q.fmz.com/data/history?"+arr.join("&"))),rows=[],index=[],i=0;i<data.length;i++)index.push(fmtTime(new Date(1e3*data[i][0]))),rows.push(data[i].slice(1,data[i].length));return new pdObj({index:index,rows:rows,columns:["open","high","low","close","volume"]})},htmlResult=function(s){var s=JSON.parse(s),pnl=[],index=[];return s.Snapshots.forEach(function(ele){var acc=ele[1][0];pnl.push([acc.PnL,100*acc.Utilization]),index.push(fmtTime(new Date(ele[0])))}),columns=["PnL","Utilization(%)"],new pdObj({columns:columns,index:index,rows:pnl})},__m=VBacktest(),void 0===global.talib&&(global.talib=__m.talib(),global.TA=__m.TA,global.plot=function(data,layout){void 0!==data.index&&void 0!==data.columns&&(arr=[],data.columns.forEach(function(c){arr.push({name:c,x:data.index,y:data[c]})}),data=arr),Array.isArray(data)&&0<data.length&&"number"==typeof data[0]&&(obj={x:[],y:data},data.forEach(function(ele,idx){obj.x.push(idx+1)}),data=[obj]),void 0===layout&&(layout={});var arr,obj,timestamp=(new Date).getTime(),timestamp=["<div class='plotly-plot'>","<div id='notebook-plot-"+timestamp+"'></div>","<script>","function plot(){","Plotly.plot('notebook-plot-"+timestamp+"',",JSON.stringify(data),",",JSON.stringify(layout),",",JSON.stringify({displaylogo:!1}),");","}","if(window.Plotly){","plot();","}else{","var head = document.head || document.getElementsByTagName('head')[0];","var s = document.createElement('script');","s.charset='utf-8';","s.src = 'https://www.fmz.com/pkg/plotly-latest.min.js';","s.type = 'text/javascript';","s.async = false;","s.onreadystatechange = s.onload = plot;","head.appendChild(s);","}","<\/script>","</div>"].join("");$$.html(timestamp)}),__ctx.exports.VCtx=function(obj){function periodToMs(s,def){var tmp;return s.length<2||(tmp=parseInt(s.slice(0,s.length-1)),"d"==(s=s[s.length-1])?def=6e4*tmp*60*24:"m"==s?def=6e4*tmp:"h"==s&&(def=36e4*tmp)),def}function dicGet(obj,k,v){return void 0!==obj[k]?obj[k]:v}var k,period=periodToMs(obj.period,36e5),basePeriod=36e5,exchanges=("string"==typeof obj.basePeriod?basePeriod=periodToMs(obj.basePeriod,basePeriod):864e5==period?basePeriod=36e5:36e5==period?basePeriod=18e5:18e5==period?basePeriod=9e5:9e5==period?basePeriod=3e5:3e5==period&&(basePeriod=6e4),[]),feeDef={Huobi:[150,200],OKX:[150,200],Binance:[150,200],Futures_BitMEX:[8,10],Futures_OKX:[30,30],Futures_HuobiDM:[30,30],Futures_CTP:[25,25],Futures_XTP:[30,130]},isCNY=!1,period=(obj.exchanges.forEach(function(e){var arr=e.currency.toUpperCase().split("_"),fee=(1==arr.length&&arr.push(-1!=e.eid.indexOf("CTP")?"CNY":"USD"),[200,200]),v=e.fee,fee=void 0!==v?[1e3*v[0],1e3*v[1]]:feeDef[e.eid]||[200,200];cfg={Balance:dicGet(e,"balance",1e4),BaseCurrency:arr[0],BasePeriod:basePeriod,DepthDeep:5,DepthAmount:20,FaultTolerant:0,PreBarLen:1e3,FeeDenominator:5,FeeMaker:fee[0],FeeTaker:fee[1],FeeMin:dicGet(e,"feeMin",0),Id:e.eid,Label:e.eid,QuoteCurrency:arr[1],SlipPoint:0,Stocks:dicGet(e,"stocks",3)},"Futures_CTP"==e.eid||"Futures_XTP"==e.eid?(cfg.DepthDeep=1,isCNY=!0):"Futures_OKX"!=e.eid&&"Futures_HuobiDM"!=e.eid&&"Bitfinex"!=e.eid&&"Binance"!=e.eid&&("Futures_BitMEX"==e.eid?15!=(v=cfg.BasePeriod/6e4)&&30!=v||(cfg.BasePeriod=3e5):e.eid.indexOf("Futures")),exchanges.push(cfg)}),(options={DataServer:obj.dataServer||(isCNY?"https://q.youquant.com":"https://q.fmz.com"),MaxChartLogs:800,MaxProfitLogs:800,MaxRuntimeLogs:800,NetDelay:200,Period:period,RetFlags:189,UpdatePeriod:5e3}).TimeBegin=toUnix(obj.start),options.TimeEnd=toUnix(obj.end),86400),obj=options.TimeEnd-options.TimeBegin,ctx=(obj/3600<=2?period=60:obj/86400<=2?period=300:obj/86400<30&&(period=3600),options.SnapshotPeriod=1e3*period,options.RetFlags|=256,{});for(k in __m.VTask({Code:[["function main() {}",[],"main"]],Exchanges:exchanges,Options:options,Step:!0},null,httpGet,function(st){},function(){},ctx),ctx.scope)"Date"!=k&&(global[k]=ctx.scope[k]);var realJoin=ctx.Join;return ctx.Join=function(report){var r=realJoin();return report?htmlResult(r):r},ctx}));