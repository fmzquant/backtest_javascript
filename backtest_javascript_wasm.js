"undefined"==typeof __ctx&&(__ctx={}),__ctx.INITIAL_MEMORY=335544320,"undefined"!=typeof module&&(__ctx.module=module),"undefined"!=typeof exports&&(__ctx.exports=exports),"undefined"==typeof module&&"undefined"==typeof exports||(module=void 0,exports=void 0,print=console.log),!function(n,r){var t,e;"object"==typeof exports&&"undefined"!=typeof module?module.exports=r():"function"==typeof define&&define.amd?define("underscore",r):(n="undefined"!=typeof globalThis?globalThis:n||self,t=n._,(e=n._=r()).noConflict=function(){return n._=t,e})}(this,function(){var n="1.13.7",r="object"==typeof self&&self.self===self&&self||"object"==typeof global&&global.global===global&&global||Function("return this")()||{},t=Array.prototype,e=Object.prototype,u="undefined"!=typeof Symbol?Symbol.prototype:null,i=t.push,o=t.slice,a=e.toString,f=e.hasOwnProperty,c="undefined"!=typeof ArrayBuffer,l="undefined"!=typeof DataView,s=Array.isArray,p=Object.keys,v=Object.create,h=c&&ArrayBuffer.isView,y=isNaN,d=isFinite,g=!{toString:null}.propertyIsEnumerable("toString"),b=["valueOf","isPrototypeOf","toString","propertyIsEnumerable","hasOwnProperty","toLocaleString"],m=Math.pow(2,53)-1;function j(n,r){return r=null==r?n.length-1:+r,function(){for(var t=Math.max(arguments.length-r,0),e=Array(t),u=0;u<t;u++)e[u]=arguments[u+r];switch(r){case 0:return n.call(this,e);case 1:return n.call(this,arguments[0],e);case 2:return n.call(this,arguments[0],arguments[1],e)}for(var i=Array(r+1),u=0;u<r;u++)i[u]=arguments[u];return i[r]=e,n.apply(this,i)}}function w(n){var r=typeof n;return"function"==r||"object"==r&&!!n}function _(n){return void 0===n}function A(n){return!0===n||!1===n||"[object Boolean]"===a.call(n)}function x(n){var r="[object "+n+"]";return function(n){return a.call(n)===r}}var S=x("String"),O=x("Number"),M=x("Date"),E=x("RegExp"),B=x("Error"),N=x("Symbol"),I=x("ArrayBuffer"),T=x("Function"),r=r.document&&r.document.childNodes,D=T="function"!=typeof/./&&"object"!=typeof Int8Array&&"function"!=typeof r?function(n){return"function"==typeof n||!1}:T,r=x("Object"),V=l&&(!/\[native code\]/.test(String(DataView))||r(new DataView(new ArrayBuffer(8)))),T="undefined"!=typeof Map&&r(new Map),l=x("DataView"),q=V?function(n){return null!=n&&D(n.getInt8)&&I(n.buffer)}:l,U=s||x("Array");function W(n,r){return null!=n&&f.call(n,r)}var z=x("Arguments"),L=(!function(){z(arguments)||(z=function(n){return W(n,"callee")})}(),z);function $(n){return O(n)&&y(n)}function C(n){return function(){return n}}function K(n){return function(r){r=n(r);return"number"==typeof r&&0<=r&&r<=m}}function J(n){return function(r){return null==r?void 0:r[n]}}var G=J("byteLength"),H=K(G),Q=/\[object ((I|Ui)nt(8|16|32)|Float(32|64)|Uint8Clamped|Big(I|Ui)nt64)Array\]/,X=c?function(n){return h?h(n)&&!q(n):H(n)&&Q.test(a.call(n))}:C(!1),Y=J("length");function Z(n,r){r=function(n){for(var r={},t=n.length,e=0;e<t;++e)r[n[e]]=!0;return{contains:function(n){return!0===r[n]},push:function(t){return r[t]=!0,n.push(t)}}}(r);var t=b.length,u=n.constructor,i=D(u)&&u.prototype||e,o="constructor";for(W(n,o)&&!r.contains(o)&&r.push(o);t--;)(o=b[t])in n&&n[o]!==i[o]&&!r.contains(o)&&r.push(o)}function nn(n){if(!w(n))return[];if(p)return p(n);var t,r=[];for(t in n)W(n,t)&&r.push(t);return g&&Z(n,r),r}function rn(n,r){var t=nn(r),e=t.length;if(null==n)return!e;for(var u=Object(n),i=0;i<e;i++){var o=t[i];if(r[o]!==u[o]||!(o in u))return!1}return!0}function tn(n){return n instanceof tn?n:this instanceof tn?void(this._wrapped=n):new tn(n)}function en(n){return new Uint8Array(n.buffer||n,n.byteOffset||0,G(n))}tn.VERSION=n,tn.prototype.valueOf=tn.prototype.toJSON=tn.prototype.value=function(){return this._wrapped},tn.prototype.toString=function(){return String(this._wrapped)};var un="[object DataView]";function an(n){if(!w(n))return[];var t,r=[];for(t in n)r.push(t);return g&&Z(n,r),r}function fn(n){var r=Y(n);return function(t){if(null==t)return!1;var e=an(t);if(Y(e))return!1;for(var u=0;u<r;u++)if(!D(t[n[u]]))return!1;return n!==hn||!D(t[cn])}}var cn="forEach",r=["clear","delete"],l=["get","has","set"],s=r.concat(cn,l),hn=r.concat(l),c=["add"].concat(r,cn,"has"),l=T?fn(s):x("Map"),r=T?fn(hn):x("WeakMap"),s=T?fn(c):x("Set"),T=x("WeakSet");function jn(n){for(var r=nn(n),t=r.length,e=Array(t),u=0;u<t;u++)e[u]=n[r[u]];return e}function wn(n){for(var r={},t=nn(n),e=0,u=t.length;e<u;e++)r[n[t[e]]]=t[e];return r}function _n(n){var t,r=[];for(t in n)D(n[t])&&r.push(t);return r.sort()}function An(n,r){return function(t){var e=arguments.length;if(r&&(t=Object(t)),!(e<2||null==t))for(var u=1;u<e;u++)for(var i=arguments[u],o=n(i),a=o.length,f=0;f<a;f++){var c=o[f];r&&void 0!==t[c]||(t[c]=i[c])}return t}}var xn=An(an),Sn=An(nn),On=An(an,!0);function Mn(n){var r;return w(n)?v?v(n):((r=function(){}).prototype=n,n=new r,r.prototype=null,n):{}}function En(n){return U(n)?n:[n]}function Bn(n){return tn.toPath(n)}function Nn(n,r){for(var t=r.length,e=0;e<t;e++){if(null==n)return;n=n[r[e]]}return t?n:void 0}function In(n,r,t){n=Nn(n,Bn(r));return _(n)?t:n}function Tn(n){return n}function kn(n){return n=Sn({},n),function(r){return rn(r,n)}}function Dn(n){return n=Bn(n),function(r){return Nn(r,n)}}function Rn(n,r,t){if(void 0===r)return n;switch(null==t?3:t){case 1:return function(t){return n.call(r,t)};case 3:return function(t,e,u){return n.call(r,t,e,u)};case 4:return function(t,e,u,i){return n.call(r,t,e,u,i)}}return function(){return n.apply(r,arguments)}}function Vn(n,r,t){return null==n?Tn:D(n)?Rn(n,r,t):(w(n)&&!U(n)?kn:Dn)(n)}function Fn(n,r){return Vn(n,r,1/0)}function Pn(n,r,t){return tn.iteratee!==Fn?tn.iteratee(n,r):Vn(n,r,t)}function qn(){}function Un(n,r){return null==r&&(r=n,n=0),n+Math.floor(Math.random()*(r-n+1))}tn.toPath=En,tn.iteratee=Fn;var Wn=Date.now||function(){return(new Date).getTime()};function zn(n){function r(r){return n[r]}var t="(?:"+nn(n).join("|")+")",e=RegExp(t),u=RegExp(t,"g");return function(n){return e.test(n=null==n?"":""+n)?n.replace(u,r):n}}var c={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","`":"&#x60;"},$n=zn(c),c=zn(wn(c)),Kn=tn.templateSettings={evaluate:/<%([\s\S]+?)%>/g,interpolate:/<%=([\s\S]+?)%>/g,escape:/<%-([\s\S]+?)%>/g},Jn=/(.)^/,Gn={"'":"'","\\":"\\","\r":"r","\n":"n","\u2028":"u2028","\u2029":"u2029"},Hn=/\\|'|\r|\n|\u2028|\u2029/g;function Qn(n){return"\\"+Gn[n]}var Xn=/^\s*(\w|\$)+\s*$/,Yn=0;function Zn(n,r,t,e,u){return e instanceof r?(e=Mn(n.prototype),w(r=n.apply(e,u))?r:e):n.apply(t,u)}var nr=j(function(n,r){function e(){for(var u=0,i=r.length,o=Array(i),a=0;a<i;a++)o[a]=r[a]===t?arguments[u++]:r[a];for(;u<arguments.length;)o.push(arguments[u++]);return Zn(n,e,this,this,o)}var t=nr.placeholder;return e}),rr=(nr.placeholder=tn,j(function(n,r,t){var e;if(D(n))return e=j(function(u){return Zn(n,e,r,this,t.concat(u))});throw new TypeError("Bind must be called on a function")})),tr=K(Y);function er(n,r,t,e){if(e=e||[],r||0===r){if(r<=0)return e.concat(n)}else r=1/0;for(var u=e.length,i=0,o=Y(n);i<o;i++){var a=n[i];if(tr(a)&&(U(a)||L(a)))if(1<r)er(a,r-1,t,e),u=e.length;else for(var f=0,c=a.length;f<c;)e[u++]=a[f++];else t||(e[u++]=a)}return e}var ur=j(function(n,r){var t=(r=er(r,!1,!1)).length;if(t<1)throw new Error("bindAll must be passed function names");for(;t--;){var e=r[t];n[e]=rr(n[e],n)}return n}),ir=j(function(n,r,t){return setTimeout(function(){return n.apply(null,t)},r)}),or=nr(ir,tn,1);function ar(n){return function(){return!n.apply(this,arguments)}}function fr(n,r){var t;return function(){return 0<--n&&(t=r.apply(this,arguments)),n<=1&&(r=null),t}}var cr=nr(fr,2);function lr(n,r,t){r=Pn(r,t);for(var e,u=nn(n),i=0,o=u.length;i<o;i++)if(r(n[e=u[i]],e,n))return e}function sr(n){return function(r,t,e){t=Pn(t,e);for(var u=Y(r),i=0<n?0:u-1;0<=i&&i<u;i+=n)if(t(r[i],i,r))return i;return-1}}var pr=sr(1),vr=sr(-1);function hr(n,r,t,e){for(var u=(t=Pn(t,e,1))(r),i=0,o=Y(n);i<o;){var a=Math.floor((i+o)/2);t(n[a])<u?i=a+1:o=a}return i}function yr(n,r,t){return function(e,u,i){var a=0,f=Y(e);if("number"==typeof i)0<n?a=0<=i?i:Math.max(i+f,a):f=0<=i?Math.min(i+1,f):i+f+1;else if(t&&i&&f)return e[i=t(e,u)]===u?i:-1;if(u!=u)return 0<=(i=r(o.call(e,a,f),$))?i+a:-1;for(i=0<n?a:f-1;0<=i&&i<f;i+=n)if(e[i]===u)return i;return-1}}var dr=yr(1,pr,hr),gr=yr(-1,vr);function br(n,r,t){r=(tr(n)?pr:lr)(n,r,t);if(void 0!==r&&-1!==r)return n[r]}function mr(n,r,t){if(r=Rn(r,t),tr(n))for(e=0,u=n.length;e<u;e++)r(n[e],e,n);else for(var i=nn(n),e=0,u=i.length;e<u;e++)r(n[i[e]],i[e],n);return n}function jr(n,r,t){r=Pn(r,t);for(var e=!tr(n)&&nn(n),u=(e||n).length,i=Array(u),o=0;o<u;o++){var a=e?e[o]:o;i[o]=r(n[a],a,n)}return i}function wr(n){function r(r,t,e,u){var i=!tr(r)&&nn(r),o=(i||r).length,a=0<n?0:o-1;for(u||(e=r[i?i[a]:a],a+=n);0<=a&&a<o;a+=n){var f=i?i[a]:a;e=t(e,r[f],f,r)}return e}return function(n,t,e,u){var i=3<=arguments.length;return r(n,Rn(t,u,4),e,i)}}var _r=wr(1),Ar=wr(-1);function xr(n,r,t){var e=[];return r=Pn(r,t),mr(n,function(n,t,u){r(n,t,u)&&e.push(n)}),e}function Sr(n,r,t){r=Pn(r,t);for(var e=!tr(n)&&nn(n),u=(e||n).length,i=0;i<u;i++){var o=e?e[i]:i;if(!r(n[o],o,n))return!1}return!0}function Or(n,r,t){r=Pn(r,t);for(var e=!tr(n)&&nn(n),u=(e||n).length,i=0;i<u;i++){var o=e?e[i]:i;if(r(n[o],o,n))return!0}return!1}function Mr(n,r,t,e){return tr(n)||(n=jn(n)),0<=dr(n,r,t="number"==typeof t&&!e?t:0)}var Er=j(function(n,r,t){var e,u;return D(r)?u=r:(r=Bn(r),e=r.slice(0,-1),r=r[r.length-1]),jr(n,function(n){var i=u;if(!i){if(null==(n=e&&e.length?Nn(n,e):n))return;i=n[r]}return null==i?i:i.apply(n,t)})});function Br(n,r){return jr(n,Dn(r))}function Nr(n,r,t){var e,u,i=-1/0,o=-1/0;if(null==r||"number"==typeof r&&"object"!=typeof n[0]&&null!=n)for(var a=0,f=(n=tr(n)?n:jn(n)).length;a<f;a++)null!=(e=n[a])&&i<e&&(i=e);else r=Pn(r,t),mr(n,function(n,t,e){((u=r(n,t,e))>o||u===-1/0&&i===-1/0)&&(i=n,o=u)});return i}var Ir=/[^\ud800-\udfff]|[\ud800-\udbff][\udc00-\udfff]|[\ud800-\udfff]/g;function Tr(n){return n?U(n)?o.call(n):S(n)?n.match(Ir):tr(n)?jr(n,Tn):jn(n):[]}function kr(n,r,t){if(null==r||t)return(n=tr(n)?n:jn(n))[Un(n.length-1)];var e=Tr(n),t=Y(e);r=Math.max(Math.min(r,t),0);for(var i=t-1,o=0;o<r;o++){var a=Un(o,i),f=e[o];e[o]=e[a],e[a]=f}return e.slice(0,r)}function Dr(n,r){return function(t,e,u){var i=r?[[],[]]:{};return e=Pn(e,u),mr(t,function(r,u){u=e(r,u,t);n(i,r,u)}),i}}var Rr=Dr(function(n,r,t){W(n,t)?n[t].push(r):n[t]=[r]}),Vr=Dr(function(n,r,t){n[t]=r}),Fr=Dr(function(n,r,t){W(n,t)?n[t]++:n[t]=1}),Pr=Dr(function(n,r,t){n[t?0:1].push(r)},!0);function qr(n,r,t){return r in t}var Ur=j(function(n,r){var t={},e=r[0];if(null!=n){D(e)?(1<r.length&&(e=Rn(e,r[1])),r=an(n)):(e=qr,r=er(r,!1,!1),n=Object(n));for(var u=0,i=r.length;u<i;u++){var o=r[u],a=n[o];e(a,o,n)&&(t[o]=a)}}return t}),Wr=j(function(n,r){var t,e=r[0];return D(e)?(e=ar(e),1<r.length&&(t=r[1])):(r=jr(er(r,!1,!1),String),e=function(n,t){return!Mr(r,t)}),Ur(n,e,t)});function zr(n,r,t){return o.call(n,0,Math.max(0,n.length-(null==r||t?1:r)))}function Lr(n,r,t){return null==n||n.length<1?null==r||t?void 0:[]:null==r||t?n[0]:zr(n,n.length-r)}function $r(n,r,t){return o.call(n,null==r||t?1:r)}var Cr=j(function(n,r){return r=er(r,!0,!0),xr(n,function(n){return!Mr(r,n)})}),Kr=j(function(n,r){return Cr(n,r)});function Jr(n,r,t,e){A(r)||(e=t,t=r,r=!1),null!=t&&(t=Pn(t,e));for(var u=[],i=[],o=0,a=Y(n);o<a;o++){var f=n[o],c=t?t(f,o,n):f;r&&!t?(o&&i===c||u.push(f),i=c):t?Mr(i,c)||(i.push(c),u.push(f)):Mr(u,f)||u.push(f)}return u}var Gr=j(function(n){return Jr(er(n,!0,!0))});function Hr(n){for(var r=n&&Nr(n,Y).length||0,t=Array(r),e=0;e<r;e++)t[e]=Br(n,e);return t}var Qr=j(Hr);function Xr(n,r){return n._chain?tn(r).chain():r}function Yr(n){return mr(_n(n),function(r){var t=tn[r]=n[r];tn.prototype[r]=function(){var n=[this._wrapped];return i.apply(n,arguments),Xr(this,t.apply(tn,n))}}),tn}mr(["pop","push","reverse","shift","sort","splice","unshift"],function(n){var r=t[n];tn.prototype[n]=function(){var t=this._wrapped;return null!=t&&(r.apply(t,arguments),"shift"!==n&&"splice"!==n||0!==t.length||delete t[0]),Xr(this,t)}}),mr(["concat","join","slice"],function(n){var r=t[n];tn.prototype[n]=function(){var n=this._wrapped;return Xr(this,n=null!=n?r.apply(n,arguments):n)}});n=Yr({__proto__:null,VERSION:n,restArguments:j,isObject:w,isNull:function(n){return null===n},isUndefined:_,isBoolean:A,isElement:function(n){return!(!n||1!==n.nodeType)},isString:S,isNumber:O,isDate:M,isRegExp:E,isError:B,isSymbol:N,isArrayBuffer:I,isDataView:q,isArray:U,isFunction:D,isArguments:L,isFinite:function(n){return!N(n)&&d(n)&&!isNaN(parseFloat(n))},isNaN:$,isTypedArray:X,isEmpty:function(n){var r;return null==n||("number"==typeof(r=Y(n))&&(U(n)||S(n)||L(n))?0===r:0===Y(nn(n)))},isMatch:rn,isEqual:function(n,r){return function on(n,r,t,e){var i;return n===r?0!==n||1/n==1/r:null!=n&&null!=r&&(n!=n?r!=r:("function"==(i=typeof n)||"object"==i||"object"==typeof r)&&function n(r,t,e,i){r instanceof tn&&(r=r._wrapped),t instanceof tn&&(t=t._wrapped);var o=a.call(r);if(o!==a.call(t))return!1;if(V&&"[object Object]"==o&&q(r)){if(!q(t))return!1;o=un}switch(o){case"[object RegExp]":case"[object String]":return""+r==""+t;case"[object Number]":return+r!=+r?+t!=+t:0==+r?1/+r==1/t:+r==+t;case"[object Date]":case"[object Boolean]":return+r==+t;case"[object Symbol]":return u.valueOf.call(r)===u.valueOf.call(t);case"[object ArrayBuffer]":case un:return n(en(r),en(t),e,i)}if(!(o="[object Array]"===o)&&X(r)){if(G(r)!==G(t))return!1;if(r.buffer===t.buffer&&r.byteOffset===t.byteOffset)return!0;o=!0}if(!o){if("object"!=typeof r||"object"!=typeof t)return!1;var c=r.constructor,l=t.constructor;if(c!==l&&!(D(c)&&c instanceof c&&D(l)&&l instanceof l)&&"constructor"in r&&"constructor"in t)return!1}i=i||[];for(var s=(e=e||[]).length;s--;)if(e[s]===r)return i[s]===t;if(e.push(r),i.push(t),o){if((s=r.length)!==t.length)return!1;for(;s--;)if(!on(r[s],t[s],e,i))return!1}else{var p,v=nn(r),s=v.length;if(nn(t).length!==s)return!1;for(;s--;)if(!W(t,p=v[s])||!on(r[p],t[p],e,i))return!1}return e.pop(),i.pop(),!0}(n,r,t,e))}(n,r)},isMap:l,isWeakMap:r,isSet:s,isWeakSet:T,keys:nn,allKeys:an,values:jn,pairs:function(n){for(var r=nn(n),t=r.length,e=Array(t),u=0;u<t;u++)e[u]=[r[u],n[r[u]]];return e},invert:wn,functions:_n,methods:_n,extend:xn,extendOwn:Sn,assign:Sn,defaults:On,create:function(n,r){n=Mn(n);return r&&Sn(n,r),n},clone:function(n){return w(n)?U(n)?n.slice():xn({},n):n},tap:function(n,r){return r(n),n},get:In,has:function(n,r){for(var t=(r=Bn(r)).length,e=0;e<t;e++){var u=r[e];if(!W(n,u))return!1;n=n[u]}return!!t},mapObject:function(n,r,t){r=Pn(r,t);for(var e=nn(n),u=e.length,i={},o=0;o<u;o++){var a=e[o];i[a]=r(n[a],a,n)}return i},identity:Tn,constant:C,noop:qn,toPath:En,property:Dn,propertyOf:function(n){return null==n?qn:function(r){return In(n,r)}},matcher:kn,matches:kn,times:function(n,r,t){var e=Array(Math.max(0,n));r=Rn(r,t,1);for(var u=0;u<n;u++)e[u]=r(u);return e},random:Un,now:Wn,escape:$n,unescape:c,templateSettings:Kn,template:function(n,r,t){r=On({},r=!r&&t?t:r,tn.templateSettings);var t=RegExp([(r.escape||Jn).source,(r.interpolate||Jn).source,(r.evaluate||Jn).source].join("|")+"|$","g"),u=0,i="__p+='";n.replace(t,function(r,t,e,o,a){return i+=n.slice(u,a).replace(Hn,Qn),u=a+r.length,t?i+="'+\n((__t=("+t+"))==null?'':_.escape(__t))+\n'":e?i+="'+\n((__t=("+e+"))==null?'':__t)+\n'":o&&(i+="';\n"+o+"\n__p+='"),r}),i+="';\n";var o,t=r.variable;if(t){if(!Xn.test(t))throw new Error("variable is not a bare identifier: "+t)}else i="with(obj||{}){\n"+i+"}\n",t="obj";i="var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};\n"+i+"return __p;\n";try{o=new Function(t,"_",i)}catch(n){throw n.source=i,n}function f(n){return o.call(this,n,tn)}return f.source="function("+t+"){\n"+i+"}",f},result:function(n,r,t){var e=(r=Bn(r)).length;if(!e)return D(t)?t.call(n):t;for(var u=0;u<e;u++){var i=null==n?void 0:n[r[u]];void 0===i&&(i=t,u=e),n=D(i)?i.call(n):i}return n},uniqueId:function(n){var r=++Yn+"";return n?n+r:r},chain:function(n){n=tn(n);return n._chain=!0,n},iteratee:Fn,partial:nr,bind:rr,bindAll:ur,memoize:function(n,r){function t(e){var u=t.cache,i=""+(r?r.apply(this,arguments):e);return W(u,i)||(u[i]=n.apply(this,arguments)),u[i]}return t.cache={},t},delay:ir,defer:or,throttle:function(n,r,t){function f(){a=!1===t.leading?0:Wn(),e=null,o=n.apply(u,i),e||(u=i=null)}function c(){var c=Wn(),l=(a||!1!==t.leading||(a=c),r-(c-a));return u=this,i=arguments,l<=0||r<l?(e&&(clearTimeout(e),e=null),a=c,o=n.apply(u,i),e||(u=i=null)):e||!1===t.trailing||(e=setTimeout(f,l)),o}var e,u,i,o,a=0;t=t||{};return c.cancel=function(){clearTimeout(e),a=0,e=u=i=null},c},debounce:function(n,r,t){function f(){var c=Wn()-u;c<r?e=setTimeout(f,r-c):(e=null,t||(o=n.apply(a,i)),e||(i=a=null))}var e,u,i,o,a,c=j(function(c){return a=this,i=c,u=Wn(),e||(e=setTimeout(f,r),t&&(o=n.apply(a,i))),o});return c.cancel=function(){clearTimeout(e),e=i=a=null},c},wrap:function(n,r){return nr(r,n)},negate:ar,compose:function(){var n=arguments,r=n.length-1;return function(){for(var t=r,e=n[r].apply(this,arguments);t--;)e=n[t].call(this,e);return e}},after:function(n,r){return function(){if(--n<1)return r.apply(this,arguments)}},before:fr,once:cr,findKey:lr,findIndex:pr,findLastIndex:vr,sortedIndex:hr,indexOf:dr,lastIndexOf:gr,find:br,detect:br,findWhere:function(n,r){return br(n,kn(r))},each:mr,forEach:mr,map:jr,collect:jr,reduce:_r,foldl:_r,inject:_r,reduceRight:Ar,foldr:Ar,filter:xr,select:xr,reject:function(n,r,t){return xr(n,ar(Pn(r)),t)},every:Sr,all:Sr,some:Or,any:Or,contains:Mr,includes:Mr,include:Mr,invoke:Er,pluck:Br,where:function(n,r){return xr(n,kn(r))},max:Nr,min:function(n,r,t){var e,u,i=1/0,o=1/0;if(null==r||"number"==typeof r&&"object"!=typeof n[0]&&null!=n)for(var a=0,f=(n=tr(n)?n:jn(n)).length;a<f;a++)null!=(e=n[a])&&e<i&&(i=e);else r=Pn(r,t),mr(n,function(n,t,e){((u=r(n,t,e))<o||u===1/0&&i===1/0)&&(i=n,o=u)});return i},shuffle:function(n){return kr(n,1/0)},sample:kr,sortBy:function(n,r,t){var e=0;return r=Pn(r,t),Br(jr(n,function(n,t,u){return{value:n,index:e++,criteria:r(n,t,u)}}).sort(function(n,r){var t=n.criteria,e=r.criteria;if(t!==e){if(e<t||void 0===t)return 1;if(t<e||void 0===e)return-1}return n.index-r.index}),"value")},groupBy:Rr,indexBy:Vr,countBy:Fr,partition:Pr,toArray:Tr,size:function(n){return null==n?0:(tr(n)?n:nn(n)).length},pick:Ur,omit:Wr,first:Lr,head:Lr,take:Lr,initial:zr,last:function(n,r,t){return null==n||n.length<1?null==r||t?void 0:[]:null==r||t?n[n.length-1]:$r(n,Math.max(0,n.length-r))},rest:$r,tail:$r,drop:$r,compact:function(n){return xr(n,Boolean)},flatten:function(n,r){return er(n,r,!1)},without:Kr,uniq:Jr,unique:Jr,union:Gr,intersection:function(n){for(var r=[],t=arguments.length,e=0,u=Y(n);e<u;e++){var i=n[e];if(!Mr(r,i)){for(var o=1;o<t&&Mr(arguments[o],i);o++);o===t&&r.push(i)}}return r},difference:Cr,unzip:Hr,transpose:Hr,zip:Qr,object:function(n,r){for(var t={},e=0,u=Y(n);e<u;e++)r?t[n[e]]=r[e]:t[n[e][0]]=n[e][1];return t},range:function(n,r,t){null==r&&(r=n||0,n=0),t=t||(r<n?-1:1);for(var e=Math.max(Math.ceil((r-n)/t),0),u=Array(e),i=0;i<e;i++,n+=t)u[i]=n;return u},chunk:function(n,r){if(null==r||r<1)return[];for(var t=[],e=0,u=n.length;e<u;)t.push(o.call(n,e,e+=r));return t},mixin:Yr,default:tn});return n._=n}),!function(globalScope){var Decimal,inexact,noConflict,quadrant,EXP_LIMIT=9e15,MAX_DIGITS=1e9,NUMERALS="0123456789abcdef",LN10="2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058",PI="3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789",DEFAULTS={precision:20,rounding:4,modulo:1,toExpNeg:-7,toExpPos:21,minE:-EXP_LIMIT,maxE:EXP_LIMIT,crypto:!1},external=!0,decimalError="[DecimalError] ",invalidArgument=decimalError+"Invalid argument: ",precisionLimitExceeded=decimalError+"Precision limit exceeded",cryptoUnavailable=decimalError+"crypto unavailable",tag="[object Decimal]",mathfloor=Math.floor,mathpow=Math.pow,isBinary=/^0b([01]+(\.[01]*)?|\.[01]+)(p[+-]?\d+)?$/i,isHex=/^0x([0-9a-f]+(\.[0-9a-f]*)?|\.[0-9a-f]+)(p[+-]?\d+)?$/i,isOctal=/^0o([0-7]+(\.[0-7]*)?|\.[0-7]+)(p[+-]?\d+)?$/i,isDecimal=/^(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,BASE=1e7,LOG_BASE=7,LN10_PRECISION=LN10.length-1,PI_PRECISION=PI.length-1,P={toStringTag:tag};function digitsToString(d){var i,k,ws,indexOfLastWord=d.length-1,str="",w=d[0];if(0<indexOfLastWord){for(str+=w,i=1;i<indexOfLastWord;i++)ws=d[i]+"",(k=LOG_BASE-ws.length)&&(str+=getZeroString(k)),str+=ws;w=d[i],(k=LOG_BASE-(ws=w+"").length)&&(str+=getZeroString(k))}else if(0===w)return"0";for(;w%10==0;)w/=10;return str+w}function checkInt32(i,min,max){if(i!==~~i||i<min||max<i)throw Error(invalidArgument+i)}function checkRoundingDigits(d,i,rm,repeating){for(var di,rd,k=d[0];10<=k;k/=10)--i;return--i<0?(i+=LOG_BASE,di=0):(di=Math.ceil((i+1)/LOG_BASE),i%=LOG_BASE),k=mathpow(10,LOG_BASE-i),rd=d[di]%k|0,null==repeating?i<3?(0==i?rd=rd/100|0:1==i&&(rd=rd/10|0),rm<4&&99999==rd||3<rm&&49999==rd||5e4==rd||0==rd):(rm<4&&rd+1==k||3<rm&&rd+1==k/2)&&(d[di+1]/k/100|0)==mathpow(10,i-2)-1||(rd==k/2||0==rd)&&0==(d[di+1]/k/100|0):i<4?(0==i?rd=rd/1e3|0:1==i?rd=rd/100|0:2==i&&(rd=rd/10|0),(repeating||rm<4)&&9999==rd||!repeating&&3<rm&&4999==rd):((repeating||rm<4)&&rd+1==k||!repeating&&3<rm&&rd+1==k/2)&&(d[di+1]/k/1e3|0)==mathpow(10,i-3)-1}function convertBase(str,baseIn,baseOut){for(var j,arrL,arr=[0],i=0,strL=str.length;i<strL;){for(arrL=arr.length;arrL--;)arr[arrL]*=baseIn;for(arr[0]+=NUMERALS.indexOf(str.charAt(i++)),j=0;j<arr.length;j++)baseOut-1<arr[j]&&(void 0===arr[j+1]&&(arr[j+1]=0),arr[j+1]+=arr[j]/baseOut|0,arr[j]%=baseOut)}return arr.reverse()}P.absoluteValue=P.abs=function(){var x=new this.constructor(this);return x.s<0&&(x.s=1),finalise(x)},P.ceil=function(){return finalise(new this.constructor(this),this.e+1,2)},P.clampedTo=P.clamp=function(min,max){var x=this,Ctor=x.constructor;if(min=new Ctor(min),max=new Ctor(max),!min.s||!max.s)return new Ctor(NaN);if(min.gt(max))throw Error(invalidArgument+max);return x.cmp(min)<0?min:0<x.cmp(max)?max:new Ctor(x)},P.comparedTo=P.cmp=function(y){var i,j,x=this,xd=x.d,yd=(y=new x.constructor(y)).d,xs=x.s,ys=y.s;if(!xd||!yd)return xs&&ys?xs!==ys?xs:xd===yd?0:!xd^xs<0?1:-1:NaN;if(!xd[0]||!yd[0])return xd[0]?xs:yd[0]?-ys:0;if(xs!==ys)return xs;if(x.e!==y.e)return x.e>y.e^xs<0?1:-1;for(i=0,j=(ys=xd.length)<(x=yd.length)?ys:x;i<j;++i)if(xd[i]!==yd[i])return xd[i]>yd[i]^xs<0?1:-1;return ys===x?0:x<ys^xs<0?1:-1},P.cosine=P.cos=function(){var pr,rm,x=this,Ctor=x.constructor;return x.d?x.d[0]?(pr=Ctor.precision,rm=Ctor.rounding,Ctor.precision=pr+Math.max(x.e,x.sd())+LOG_BASE,Ctor.rounding=1,x=function(Ctor,x){var k,len;if(!x.isZero()){len=x.d.length,len=len<32?(1/tinyPow(4,k=Math.ceil(len/3))).toString():(k=16,"2.3283064365386962890625e-10"),Ctor.precision+=k,x=taylorSeries(Ctor,1,x.times(len),new Ctor(1));for(var i=k;i--;){var cos2x=x.times(x);x=cos2x.times(cos2x).minus(cos2x).times(8).plus(1)}Ctor.precision-=k}return x}(Ctor,toLessThanHalfPi(Ctor,x)),Ctor.precision=pr,Ctor.rounding=rm,finalise(2==quadrant||3==quadrant?x.neg():x,pr,rm,!0)):new Ctor(1):new Ctor(NaN)},P.cubeRoot=P.cbrt=function(){var e,m,n,r,rep,s,sd,t,t3,t3plusx,x=this,Ctor=x.constructor;if(!x.isFinite()||x.isZero())return new Ctor(x);for(external=!1,(s=x.s*mathpow(x.s*x,1/3))&&Math.abs(s)!=1/0?r=new Ctor(s.toString()):(n=digitsToString(x.d),(s=((e=x.e)-n.length+1)%3)&&(n+=1==s||-2==s?"0":"00"),s=mathpow(n,1/3),e=mathfloor((e+1)/3)-(e%3==(e<0?-1:2)),(r=new Ctor(n=s==1/0?"5e"+e:(n=s.toExponential()).slice(0,n.indexOf("e")+1)+e)).s=x.s),sd=(e=Ctor.precision)+3;;)if(t3plusx=(t3=(t=r).times(t).times(t)).plus(x),r=divide(t3plusx.plus(x).times(t),t3plusx.plus(t3),sd+2,1),digitsToString(t.d).slice(0,sd)===(n=digitsToString(r.d)).slice(0,sd)){if("9999"!=(n=n.slice(sd-3,sd+1))&&(rep||"4999"!=n)){+n&&(+n.slice(1)||"5"!=n.charAt(0))||(finalise(r,e+1,1),m=!r.times(r).times(r).eq(x));break}if(!rep&&(finalise(t,e+1,0),t.times(t).times(t).eq(x))){r=t;break}sd+=4,rep=1}return external=!0,finalise(r,e,Ctor.rounding,m)},P.decimalPlaces=P.dp=function(){var w,d=this.d,n=NaN;if(d){if(n=((w=d.length-1)-mathfloor(this.e/LOG_BASE))*LOG_BASE,w=d[w])for(;w%10==0;w/=10)n--;n<0&&(n=0)}return n},P.dividedBy=P.div=function(y){return divide(this,new this.constructor(y))},P.dividedToIntegerBy=P.divToInt=function(y){var Ctor=this.constructor;return finalise(divide(this,new Ctor(y),0,1,1),Ctor.precision,Ctor.rounding)},P.equals=P.eq=function(y){return 0===this.cmp(y)},P.floor=function(){return finalise(new this.constructor(this),this.e+1,3)},P.greaterThan=P.gt=function(y){return 0<this.cmp(y)},P.greaterThanOrEqualTo=P.gte=function(y){y=this.cmp(y);return 1==y||0===y},P.hyperbolicCosine=P.cosh=function(){var k,pr,rm,Ctor=(x=this).constructor,one=new Ctor(1);if(!x.isFinite())return new Ctor(x.s?1/0:NaN);if(x.isZero())return one;pr=Ctor.precision,rm=Ctor.rounding,Ctor.precision=pr+Math.max(x.e,x.sd())+4,Ctor.rounding=1;for(var cosh2_x,len=(len=x.d.length)<32?(1/tinyPow(4,k=Math.ceil(len/3))).toString():(k=16,"2.3283064365386962890625e-10"),x=taylorSeries(Ctor,1,x.times(len),new Ctor(1),!0),i=k,d8=new Ctor(8);i--;)cosh2_x=x.times(x),x=one.minus(cosh2_x.times(d8.minus(cosh2_x.times(d8))));return finalise(x,Ctor.precision=pr,Ctor.rounding=rm,!0)},P.hyperbolicSine=P.sinh=function(){var pr,rm,len,Ctor=(x=this).constructor;if(!x.isFinite()||x.isZero())return new Ctor(x);if(pr=Ctor.precision,rm=Ctor.rounding,Ctor.precision=pr+Math.max(x.e,x.sd())+4,Ctor.rounding=1,(len=x.d.length)<3)x=taylorSeries(Ctor,2,x,x,!0);else for(var sinh2_x,k=1.4*Math.sqrt(len),x=taylorSeries(Ctor,2,x=x.times(1/tinyPow(5,k=16<k?16:0|k)),x,!0),d5=new Ctor(5),d16=new Ctor(16),d20=new Ctor(20);k--;)sinh2_x=x.times(x),x=x.times(d5.plus(sinh2_x.times(d16.times(sinh2_x).plus(d20))));return finalise(x,Ctor.precision=pr,Ctor.rounding=rm,!0)},P.hyperbolicTangent=P.tanh=function(){var pr,rm,x=this,Ctor=x.constructor;return x.isFinite()?x.isZero()?new Ctor(x):(pr=Ctor.precision,rm=Ctor.rounding,Ctor.precision=pr+7,Ctor.rounding=1,divide(x.sinh(),x.cosh(),Ctor.precision=pr,Ctor.rounding=rm)):new Ctor(x.s)},P.inverseCosine=P.acos=function(){var x=this,Ctor=x.constructor,k=x.abs().cmp(1),pr=Ctor.precision,rm=Ctor.rounding;return-1!==k?0===k?x.isNeg()?getPi(Ctor,pr,rm):new Ctor(0):new Ctor(NaN):x.isZero()?getPi(Ctor,pr+4,rm).times(.5):(Ctor.precision=pr+6,Ctor.rounding=1,x=x.asin(),k=getPi(Ctor,pr+4,rm).times(.5),Ctor.precision=pr,Ctor.rounding=rm,k.minus(x))},P.inverseHyperbolicCosine=P.acosh=function(){var pr,rm,x=this,Ctor=x.constructor;return x.lte(1)?new Ctor(x.eq(1)?0:NaN):x.isFinite()?(pr=Ctor.precision,rm=Ctor.rounding,Ctor.precision=pr+Math.max(Math.abs(x.e),x.sd())+4,Ctor.rounding=1,external=!1,x=x.times(x).minus(1).sqrt().plus(x),external=!0,Ctor.precision=pr,Ctor.rounding=rm,x.ln()):new Ctor(x)},P.inverseHyperbolicSine=P.asinh=function(){var pr,rm,x=this,Ctor=x.constructor;return!x.isFinite()||x.isZero()?new Ctor(x):(pr=Ctor.precision,rm=Ctor.rounding,Ctor.precision=pr+2*Math.max(Math.abs(x.e),x.sd())+6,Ctor.rounding=1,external=!1,x=x.times(x).plus(1).sqrt().plus(x),external=!0,Ctor.precision=pr,Ctor.rounding=rm,x.ln())},P.inverseHyperbolicTangent=P.atanh=function(){var pr,rm,xsd,x=this,Ctor=x.constructor;return x.isFinite()?0<=x.e?new Ctor(x.abs().eq(1)?x.s/0:x.isZero()?x:NaN):(pr=Ctor.precision,rm=Ctor.rounding,xsd=x.sd(),Math.max(xsd,pr)<2*-x.e-1?finalise(new Ctor(x),pr,rm,!0):(Ctor.precision=xsd=xsd-x.e,x=divide(x.plus(1),new Ctor(1).minus(x),xsd+pr,1),Ctor.precision=pr+4,Ctor.rounding=1,x=x.ln(),Ctor.precision=pr,Ctor.rounding=rm,x.times(.5))):new Ctor(NaN)},P.inverseSine=P.asin=function(){var k,pr,rm,x=this,Ctor=x.constructor;return x.isZero()?new Ctor(x):(k=x.abs().cmp(1),pr=Ctor.precision,rm=Ctor.rounding,-1!==k?0===k?((k=getPi(Ctor,pr+4,rm).times(.5)).s=x.s,k):new Ctor(NaN):(Ctor.precision=pr+6,Ctor.rounding=1,x=x.div(new Ctor(1).minus(x.times(x)).sqrt().plus(1)).atan(),Ctor.precision=pr,Ctor.rounding=rm,x.times(2)))},P.inverseTangent=P.atan=function(){var i,j,k,n,px,t,r,wpr,x2,x=this,Ctor=x.constructor,pr=Ctor.precision,rm=Ctor.rounding;if(x.isFinite()){if(x.isZero())return new Ctor(x);if(x.abs().eq(1)&&pr+4<=PI_PRECISION)return(r=getPi(Ctor,pr+4,rm).times(.25)).s=x.s,r}else{if(!x.s)return new Ctor(NaN);if(pr+4<=PI_PRECISION)return(r=getPi(Ctor,pr+4,rm).times(.5)).s=x.s,r}for(Ctor.precision=wpr=pr+10,Ctor.rounding=1,i=k=Math.min(28,wpr/LOG_BASE+2|0);i;--i)x=x.div(x.times(x).plus(1).sqrt().plus(1));for(external=!1,j=Math.ceil(wpr/LOG_BASE),n=1,x2=x.times(x),r=new Ctor(x),px=x;-1!==i;)if(px=px.times(x2),t=r.minus(px.div(n+=2)),px=px.times(x2),void 0!==(r=t.plus(px.div(n+=2))).d[j])for(i=j;r.d[i]===t.d[i]&&i--;);return k&&(r=r.times(2<<k-1)),external=!0,finalise(r,Ctor.precision=pr,Ctor.rounding=rm,!0)},P.isFinite=function(){return!!this.d},P.isInteger=P.isInt=function(){return!!this.d&&mathfloor(this.e/LOG_BASE)>this.d.length-2},P.isNaN=function(){return!this.s},P.isNegative=P.isNeg=function(){return this.s<0},P.isPositive=P.isPos=function(){return 0<this.s},P.isZero=function(){return!!this.d&&0===this.d[0]},P.lessThan=P.lt=function(y){return this.cmp(y)<0},P.lessThanOrEqualTo=P.lte=function(y){return this.cmp(y)<1},P.logarithm=P.log=function(base){var isBase10,d,denominator,k,inf,num,sd,r,Ctor=this.constructor,pr=Ctor.precision,rm=Ctor.rounding;if(null==base)base=new Ctor(10),isBase10=!0;else{if(d=(base=new Ctor(base)).d,base.s<0||!d||!d[0]||base.eq(1))return new Ctor(NaN);isBase10=base.eq(10)}if(d=this.d,this.s<0||!d||!d[0]||this.eq(1))return new Ctor(d&&!d[0]?-1/0:1!=this.s?NaN:d?0:1/0);if(isBase10)if(1<d.length)inf=!0;else{for(k=d[0];k%10==0;)k/=10;inf=1!==k}if(external=!1,num=naturalLogarithm(this,sd=pr+5),denominator=isBase10?getLn10(Ctor,sd+10):naturalLogarithm(base,sd),checkRoundingDigits((r=divide(num,denominator,sd,1)).d,k=pr,rm))do{if(num=naturalLogarithm(this,sd+=10),denominator=isBase10?getLn10(Ctor,sd+10):naturalLogarithm(base,sd),r=divide(num,denominator,sd,1),!inf){+digitsToString(r.d).slice(k+1,k+15)+1==1e14&&(r=finalise(r,pr+1,0));break}}while(checkRoundingDigits(r.d,k+=10,rm));return external=!0,finalise(r,pr,rm)},P.minus=P.sub=function(y){var d,e,i,j,k,len,pr,rm,xd,xe,xLTy,yd,x=this,Ctor=x.constructor;if(y=new Ctor(y),!x.d||!y.d)return x.s&&y.s?x.d?y.s=-y.s:y=new Ctor(y.d||x.s!==y.s?x:NaN):y=new Ctor(NaN),y;if(x.s!=y.s)return y.s=-y.s,x.plus(y);if(xd=x.d,yd=y.d,pr=Ctor.precision,rm=Ctor.rounding,xd[0]&&yd[0]){if(e=mathfloor(y.e/LOG_BASE),xe=mathfloor(x.e/LOG_BASE),xd=xd.slice(),k=xe-e){for(len=((xLTy=k<0)?(d=xd,k=-k,yd):(d=yd,e=xe,xd)).length,(i=Math.max(Math.ceil(pr/LOG_BASE),len)+2)<k&&(k=i,d.length=1),d.reverse(),i=k;i--;)d.push(0);d.reverse()}else{for((xLTy=(i=xd.length)<(len=yd.length))&&(len=i),i=0;i<len;i++)if(xd[i]!=yd[i]){xLTy=xd[i]<yd[i];break}k=0}for(xLTy&&(d=xd,xd=yd,yd=d,y.s=-y.s),len=xd.length,i=yd.length-len;0<i;--i)xd[len++]=0;for(i=yd.length;k<i;){if(xd[--i]<yd[i]){for(j=i;j&&0===xd[--j];)xd[j]=BASE-1;--xd[j],xd[i]+=BASE}xd[i]-=yd[i]}for(;0===xd[--len];)xd.pop();for(;0===xd[0];xd.shift())--e;if(!xd[0])return new Ctor(3===rm?-0:0);y.d=xd,y.e=getBase10Exponent(xd,e)}else if(yd[0])y.s=-y.s;else{if(!xd[0])return new Ctor(3===rm?-0:0);y=new Ctor(x)}return external?finalise(y,pr,rm):y},P.modulo=P.mod=function(y){var q,x=this,Ctor=x.constructor;return y=new Ctor(y),!x.d||!y.s||y.d&&!y.d[0]?new Ctor(NaN):!y.d||x.d&&!x.d[0]?finalise(new Ctor(x),Ctor.precision,Ctor.rounding):(external=!1,9==Ctor.modulo?(q=divide(x,y.abs(),0,3,1)).s*=y.s:q=divide(x,y,0,Ctor.modulo,1),q=q.times(y),external=!0,x.minus(q))},P.naturalExponential=P.exp=function(){return naturalExponential(this)},P.naturalLogarithm=P.ln=function(){return naturalLogarithm(this)},P.negated=P.neg=function(){var x=new this.constructor(this);return x.s=-x.s,finalise(x)},P.plus=P.add=function(y){var carry,d,e,i,k,len,pr,rm,xd,yd,x=this,Ctor=x.constructor;if(y=new Ctor(y),!x.d||!y.d)return x.s&&y.s?x.d||(y=new Ctor(y.d||x.s===y.s?x:NaN)):y=new Ctor(NaN),y;if(x.s!=y.s)return y.s=-y.s,x.minus(y);if(xd=x.d,yd=y.d,pr=Ctor.precision,rm=Ctor.rounding,xd[0]&&yd[0]){if(k=mathfloor(x.e/LOG_BASE),e=mathfloor(y.e/LOG_BASE),xd=xd.slice(),i=k-e){for((len=(len=(i<0?(d=xd,i=-i,yd):(d=yd,e=k,xd)).length)<(k=Math.ceil(pr/LOG_BASE))?k+1:len+1)<i&&(i=len,d.length=1),d.reverse();i--;)d.push(0);d.reverse()}for((len=xd.length)-(i=yd.length)<0&&(i=len,d=yd,yd=xd,xd=d),carry=0;i;)carry=(xd[--i]=xd[i]+yd[i]+carry)/BASE|0,xd[i]%=BASE;for(carry&&(xd.unshift(carry),++e),len=xd.length;0==xd[--len];)xd.pop();y.d=xd,y.e=getBase10Exponent(xd,e)}else yd[0]||(y=new Ctor(x));return external?finalise(y,pr,rm):y},P.precision=P.sd=function(z){var k,x=this;if(void 0!==z&&z!==!!z&&1!==z&&0!==z)throw Error(invalidArgument+z);return x.d?(k=getPrecision(x.d),z&&x.e+1>k&&(k=x.e+1)):k=NaN,k},P.round=function(){var x=this,Ctor=x.constructor;return finalise(new Ctor(x),x.e+1,Ctor.rounding)},P.sine=P.sin=function(){var pr,rm,x=this,Ctor=x.constructor;return x.isFinite()?x.isZero()?new Ctor(x):(pr=Ctor.precision,rm=Ctor.rounding,Ctor.precision=pr+Math.max(x.e,x.sd())+LOG_BASE,Ctor.rounding=1,x=function(Ctor,x){var k,len=x.d.length;if(len<3)return x.isZero()?x:taylorSeries(Ctor,2,x,x);k=16<(k=1.4*Math.sqrt(len))?16:0|k,x=x.times(1/tinyPow(5,k)),x=taylorSeries(Ctor,2,x,x);for(var sin2_x,d5=new Ctor(5),d16=new Ctor(16),d20=new Ctor(20);k--;)sin2_x=x.times(x),x=x.times(d5.plus(sin2_x.times(d16.times(sin2_x).minus(d20))));return x}(Ctor,toLessThanHalfPi(Ctor,x)),Ctor.precision=pr,Ctor.rounding=rm,finalise(2<quadrant?x.neg():x,pr,rm,!0)):new Ctor(NaN)},P.squareRoot=P.sqrt=function(){var m,n,sd,r,rep,t,x=this,d=x.d,e=x.e,s=x.s,Ctor=x.constructor;if(1!==s||!d||!d[0])return new Ctor(!s||s<0&&(!d||d[0])?NaN:d?x:1/0);for(external=!1,r=0==(s=Math.sqrt(+x))||s==1/0?(((n=digitsToString(d)).length+e)%2==0&&(n+="0"),s=Math.sqrt(n),e=mathfloor((e+1)/2)-(e<0||e%2),new Ctor(n=s==1/0?"5e"+e:(n=s.toExponential()).slice(0,n.indexOf("e")+1)+e)):new Ctor(s.toString()),sd=(e=Ctor.precision)+3;;)if(r=(t=r).plus(divide(x,t,sd+2,1)).times(.5),digitsToString(t.d).slice(0,sd)===(n=digitsToString(r.d)).slice(0,sd)){if("9999"!=(n=n.slice(sd-3,sd+1))&&(rep||"4999"!=n)){+n&&(+n.slice(1)||"5"!=n.charAt(0))||(finalise(r,e+1,1),m=!r.times(r).eq(x));break}if(!rep&&(finalise(t,e+1,0),t.times(t).eq(x))){r=t;break}sd+=4,rep=1}return external=!0,finalise(r,e,Ctor.rounding,m)},P.tangent=P.tan=function(){var pr,rm,x=this,Ctor=x.constructor;return x.isFinite()?x.isZero()?new Ctor(x):(pr=Ctor.precision,rm=Ctor.rounding,Ctor.precision=pr+10,Ctor.rounding=1,(x=x.sin()).s=1,x=divide(x,new Ctor(1).minus(x.times(x)).sqrt(),pr+10,0),Ctor.precision=pr,Ctor.rounding=rm,finalise(2==quadrant||4==quadrant?x.neg():x,pr,rm,!0)):new Ctor(NaN)},P.times=P.mul=function(y){var carry,i,k,r,rL,t,xdL,ydL,x=this,Ctor=x.constructor,xd=x.d,yd=(y=new Ctor(y)).d;if(y.s*=x.s,!(xd&&xd[0]&&yd&&yd[0]))return new Ctor(!y.s||xd&&!xd[0]&&!yd||yd&&!yd[0]&&!xd?NaN:xd&&yd?0*y.s:y.s/0);for(x=mathfloor(x.e/LOG_BASE)+mathfloor(y.e/LOG_BASE),(xdL=xd.length)<(ydL=yd.length)&&(r=xd,xd=yd,yd=r,rL=xdL,xdL=ydL,ydL=rL),r=[],i=rL=xdL+ydL;i--;)r.push(0);for(i=ydL;0<=--i;){for(carry=0,k=xdL+i;i<k;)t=r[k]+yd[i]*xd[k-i-1]+carry,r[k--]=t%BASE|0,carry=t/BASE|0;r[k]=(r[k]+carry)%BASE|0}for(;!r[--rL];)r.pop();return carry?++x:r.shift(),y.d=r,y.e=getBase10Exponent(r,x),external?finalise(y,Ctor.precision,Ctor.rounding):y},P.toBinary=function(sd,rm){return toStringBinary(this,2,sd,rm)},P.toDecimalPlaces=P.toDP=function(dp,rm){var Ctor=this.constructor,x=new Ctor(this);return void 0===dp?x:(checkInt32(dp,0,MAX_DIGITS),void 0===rm?rm=Ctor.rounding:checkInt32(rm,0,8),finalise(x,dp+x.e+1,rm))},P.toExponential=function(dp,rm){var x=this,Ctor=x.constructor,Ctor=void 0===dp?finiteToString(x,!0):(checkInt32(dp,0,MAX_DIGITS),void 0===rm?rm=Ctor.rounding:checkInt32(rm,0,8),finiteToString(x=finalise(new Ctor(x),dp+1,rm),!0,dp+1));return x.isNeg()&&!x.isZero()?"-"+Ctor:Ctor},P.toFixed=function(dp,rm){var x=this,Ctor=x.constructor,rm=void 0===dp?finiteToString(x):(checkInt32(dp,0,MAX_DIGITS),void 0===rm?rm=Ctor.rounding:checkInt32(rm,0,8),finiteToString(Ctor=finalise(new Ctor(x),dp+x.e+1,rm),!1,dp+Ctor.e+1));return x.isNeg()&&!x.isZero()?"-"+rm:rm},P.toFraction=function(maxD){var d,d0,d1,d2,e,n,n0,n1,k,q,x=this,xd=x.d,Ctor=x.constructor;if(!xd)return new Ctor(x);if(n1=d0=new Ctor(1),d1=n0=new Ctor(0),e=(d=new Ctor(d1)).e=getPrecision(xd)-x.e-1,d.d[0]=mathpow(10,(k=e%LOG_BASE)<0?LOG_BASE+k:k),null==maxD)maxD=0<e?d:n1;else{if(!(n=new Ctor(maxD)).isInt()||n.lt(n1))throw Error(invalidArgument+n);maxD=n.gt(d)?0<e?d:n1:n}for(external=!1,n=new Ctor(digitsToString(xd)),k=Ctor.precision,Ctor.precision=e=xd.length*LOG_BASE*2;q=divide(n,d,0,1,1),1!=(d2=d0.plus(q.times(d1))).cmp(maxD);)d0=d1,d1=d2,d2=n1,n1=n0.plus(q.times(d2)),n0=d2,d2=d,d=n.minus(q.times(d2)),n=d2;return d2=divide(maxD.minus(d0),d1,0,1,1),n0=n0.plus(d2.times(n1)),d0=d0.plus(d2.times(d1)),n0.s=n1.s=x.s,xd=divide(n1,d1,e,1).minus(x).abs().cmp(divide(n0,d0,e,1).minus(x).abs())<1?[n1,d1]:[n0,d0],Ctor.precision=k,external=!0,xd},P.toHexadecimal=P.toHex=function(sd,rm){return toStringBinary(this,16,sd,rm)},P.toNearest=function(y,rm){var Ctor=(x=this).constructor,x=new Ctor(x);if(null==y){if(!x.d)return x;y=new Ctor(1),rm=Ctor.rounding}else{if(y=new Ctor(y),void 0===rm?rm=Ctor.rounding:checkInt32(rm,0,8),!x.d)return y.s?x:y;if(!y.d)return y.s&&(y.s=x.s),y}return y.d[0]?(external=!1,x=divide(x,y,0,rm,1).times(y),external=!0,finalise(x)):(y.s=x.s,x=y),x},P.toNumber=function(){return+this},P.toOctal=function(sd,rm){return toStringBinary(this,8,sd,rm)},P.toPower=P.pow=function(y){var e,k,pr,r,rm,s,x=this,Ctor=x.constructor,yn=+(y=new Ctor(y));if(!(x.d&&y.d&&x.d[0]&&y.d[0]))return new Ctor(mathpow(+x,yn));if((x=new Ctor(x)).eq(1))return x;if(pr=Ctor.precision,rm=Ctor.rounding,y.eq(1))return finalise(x,pr,rm);if((e=mathfloor(y.e/LOG_BASE))>=y.d.length-1&&(k=yn<0?-yn:yn)<=9007199254740991)return r=intPow(Ctor,x,k,pr),y.s<0?new Ctor(1).div(r):finalise(r,pr,rm);if((s=x.s)<0){if(e<y.d.length-1)return new Ctor(NaN);if(0==(1&y.d[e])&&(s=1),0==x.e&&1==x.d[0]&&1==x.d.length)return x.s=s,x}return(e=0!=(k=mathpow(+x,yn))&&isFinite(k)?new Ctor(k+"").e:mathfloor(yn*(Math.log("0."+digitsToString(x.d))/Math.LN10+x.e+1)))>Ctor.maxE+1||e<Ctor.minE-1?new Ctor(0<e?s/0:0):(external=!1,Ctor.rounding=x.s=1,k=Math.min(12,(e+"").length),(r=(r=naturalExponential(y.times(naturalLogarithm(x,pr+k)),pr)).d&&checkRoundingDigits((r=finalise(r,pr+5,1)).d,pr,rm)&&+digitsToString((r=finalise(naturalExponential(y.times(naturalLogarithm(x,(e=pr+10)+k)),e),e+5,1)).d).slice(pr+1,pr+15)+1==1e14?finalise(r,pr+1,0):r).s=s,external=!0,finalise(r,pr,Ctor.rounding=rm))},P.toPrecision=function(sd,rm){var x=this,Ctor=x.constructor,rm=void 0===sd?finiteToString(x,x.e<=Ctor.toExpNeg||x.e>=Ctor.toExpPos):(checkInt32(sd,1,MAX_DIGITS),void 0===rm?rm=Ctor.rounding:checkInt32(rm,0,8),finiteToString(x=finalise(new Ctor(x),sd,rm),sd<=x.e||x.e<=Ctor.toExpNeg,sd));return x.isNeg()&&!x.isZero()?"-"+rm:rm},P.toSignificantDigits=P.toSD=function(sd,rm){var Ctor=this.constructor;return void 0===sd?(sd=Ctor.precision,rm=Ctor.rounding):(checkInt32(sd,1,MAX_DIGITS),void 0===rm?rm=Ctor.rounding:checkInt32(rm,0,8)),finalise(new Ctor(this),sd,rm)},P.toString=function(){var x=this,Ctor=x.constructor,Ctor=finiteToString(x,x.e<=Ctor.toExpNeg||x.e>=Ctor.toExpPos);return x.isNeg()&&!x.isZero()?"-"+Ctor:Ctor},P.truncated=P.trunc=function(){return finalise(new this.constructor(this),this.e+1,1)},P.valueOf=P.toJSON=function(){var x=this,Ctor=x.constructor,Ctor=finiteToString(x,x.e<=Ctor.toExpNeg||x.e>=Ctor.toExpPos);return x.isNeg()?"-"+Ctor:Ctor};var divide=function(x,y,pr,rm,dp,base){var cmp,e,i,k,logBase,more,prod,prodL,qd,rem,remL,rem0,sd,t,xi,xL,yd0,yL,yz,Ctor=x.constructor,sign=x.s==y.s?1:-1,xd=x.d,yd=y.d;if(!(xd&&xd[0]&&yd&&yd[0]))return new Ctor(x.s&&y.s&&(xd?!yd||xd[0]!=yd[0]:yd)?xd&&0==xd[0]||!yd?0*sign:sign/0:NaN);for(e=base?(logBase=1,x.e-y.e):(base=BASE,mathfloor(x.e/(logBase=LOG_BASE))-mathfloor(y.e/logBase)),yL=yd.length,xL=xd.length,qd=(sign=new Ctor(sign)).d=[],i=0;yd[i]==(xd[i]||0);i++);if(yd[i]>(xd[i]||0)&&e--,null==pr?(sd=pr=Ctor.precision,rm=Ctor.rounding):sd=dp?pr+(x.e-y.e)+1:pr,sd<0)qd.push(1),more=!0;else{if(sd=sd/logBase+2|0,i=0,1==yL){for(yd=yd[k=0],sd++;(i<xL||k)&&sd--;i++)t=k*base+(xd[i]||0),qd[i]=t/yd|0,k=t%yd|0;more=k||i<xL}else{for(1<(k=base/(yd[0]+1)|0)&&(yd=multiplyInteger(yd,k,base),xd=multiplyInteger(xd,k,base),yL=yd.length,xL=xd.length),xi=yL,remL=(rem=xd.slice(0,yL)).length;remL<yL;)rem[remL++]=0;for((yz=yd.slice()).unshift(0),yd0=yd[0],yd[1]>=base/2&&++yd0;k=0,(cmp=compare(yd,rem,yL,remL))<0?(rem0=rem[0],1<(k=(rem0=yL!=remL?rem0*base+(rem[1]||0):rem0)/yd0|0)?1==(cmp=compare(prod=multiplyInteger(yd,k=base<=k?base-1:k,base),rem,prodL=prod.length,remL=rem.length))&&(k--,subtract(prod,yL<prodL?yz:yd,prodL,base)):(0==k&&(cmp=k=1),prod=yd.slice()),(prodL=prod.length)<remL&&prod.unshift(0),subtract(rem,prod,remL,base),-1==cmp&&(cmp=compare(yd,rem,yL,remL=rem.length))<1&&(k++,subtract(rem,yL<remL?yz:yd,remL,base)),remL=rem.length):0===cmp&&(k++,rem=[0]),qd[i++]=k,cmp&&rem[0]?rem[remL++]=xd[xi]||0:(rem=[xd[xi]],remL=1),(xi++<xL||void 0!==rem[0])&&sd--;);more=void 0!==rem[0]}qd[0]||qd.shift()}if(1==logBase)sign.e=e,inexact=more;else{for(i=1,k=qd[0];10<=k;k/=10)i++;sign.e=i+e*logBase-1,finalise(sign,dp?pr+sign.e+1:pr,rm,more)}return sign};function multiplyInteger(x,k,base){var temp,carry=0,i=x.length;for(x=x.slice();i--;)temp=x[i]*k+carry,x[i]=temp%base|0,carry=temp/base|0;return carry&&x.unshift(carry),x}function compare(a,b,aL,bL){var i,r;if(aL!=bL)r=bL<aL?1:-1;else for(i=r=0;i<aL;i++)if(a[i]!=b[i]){r=a[i]>b[i]?1:-1;break}return r}function subtract(a,b,aL,base){for(var i=0;aL--;)a[aL]-=i,i=a[aL]<b[aL]?1:0,a[aL]=i*base+a[aL]-b[aL];for(;!a[0]&&1<a.length;)a.shift()}function finalise(x,sd,rm,isTruncated){var digits,i,j,k,rd,w,xd,xdi,Ctor=x.constructor;out:if(null!=sd){if(!(xd=x.d))return x;for(digits=1,k=xd[0];10<=k;k/=10)digits++;if((i=sd-digits)<0)i+=LOG_BASE,j=sd,rd=(w=xd[xdi=0])/mathpow(10,digits-j-1)%10|0;else if(xdi=Math.ceil((i+1)/LOG_BASE),(k=xd.length)<=xdi){if(!isTruncated)break out;for(;k++<=xdi;)xd.push(0);w=rd=0,j=(i%=LOG_BASE)-LOG_BASE+(digits=1)}else{for(w=k=xd[xdi],digits=1;10<=k;k/=10)digits++;rd=(j=(i%=LOG_BASE)-LOG_BASE+digits)<0?0:w/mathpow(10,digits-j-1)%10|0}if(isTruncated=isTruncated||sd<0||void 0!==xd[xdi+1]||(j<0?w:w%mathpow(10,digits-j-1)),rd=rm<4?(rd||isTruncated)&&(0==rm||rm==(x.s<0?3:2)):5<rd||5==rd&&(4==rm||isTruncated||6==rm&&(0<i?0<j?w/mathpow(10,digits-j):0:xd[xdi-1])%10&1||rm==(x.s<0?8:7)),sd<1||!xd[0])return xd.length=0,rd?(sd-=x.e+1,xd[0]=mathpow(10,(LOG_BASE-sd%LOG_BASE)%LOG_BASE),x.e=-sd||0):xd[0]=x.e=0,x;if(0==i?(xd.length=xdi,k=1,xdi--):(xd.length=xdi+1,k=mathpow(10,LOG_BASE-i),xd[xdi]=0<j?(w/mathpow(10,digits-j)%mathpow(10,j)|0)*k:0),rd)for(;;){if(0==xdi){for(i=1,j=xd[0];10<=j;j/=10)i++;for(j=xd[0]+=k,k=1;10<=j;j/=10)k++;i!=k&&(x.e++,xd[0]==BASE)&&(xd[0]=1);break}if(xd[xdi]+=k,xd[xdi]!=BASE)break;xd[xdi--]=0,k=1}for(i=xd.length;0===xd[--i];)xd.pop()}return external&&(x.e>Ctor.maxE?(x.d=null,x.e=NaN):x.e<Ctor.minE&&(x.e=0,x.d=[0])),x}function finiteToString(x,isExp,sd){var k,e,str,len;return x.isFinite()?(e=x.e,len=(str=digitsToString(x.d)).length,isExp?(sd&&0<(k=sd-len)?str=str.charAt(0)+"."+str.slice(1)+getZeroString(k):1<len&&(str=str.charAt(0)+"."+str.slice(1)),str=str+(x.e<0?"e":"e+")+x.e):e<0?(str="0."+getZeroString(-e-1)+str,sd&&0<(k=sd-len)&&(str+=getZeroString(k))):len<=e?(str+=getZeroString(e+1-len),sd&&0<(k=sd-e-1)&&(str=str+"."+getZeroString(k))):((k=e+1)<len&&(str=str.slice(0,k)+"."+str.slice(k)),sd&&0<(k=sd-len)&&(e+1===len&&(str+="."),str+=getZeroString(k))),str):nonFiniteToString(x)}function getBase10Exponent(digits,e){var w=digits[0];for(e*=LOG_BASE;10<=w;w/=10)e++;return e}function getLn10(Ctor,sd,pr){if(LN10_PRECISION<sd)throw external=!0,pr&&(Ctor.precision=pr),Error(precisionLimitExceeded);return finalise(new Ctor(LN10),sd,1,!0)}function getPi(Ctor,sd,rm){if(PI_PRECISION<sd)throw Error(precisionLimitExceeded);return finalise(new Ctor(PI),sd,rm,!0)}function getPrecision(digits){var w=digits.length-1,len=w*LOG_BASE+1;if(w=digits[w]){for(;w%10==0;w/=10)len--;for(w=digits[0];10<=w;w/=10)len++}return len}function getZeroString(k){for(var zs="";k--;)zs+="0";return zs}function intPow(Ctor,x,n,pr){var isTruncated,r=new Ctor(1),k=Math.ceil(pr/LOG_BASE+4);for(external=!1;;){if(n%2&&truncate((r=r.times(x)).d,k)&&(isTruncated=!0),0===(n=mathfloor(n/2))){n=r.d.length-1,isTruncated&&0===r.d[n]&&++r.d[n];break}truncate((x=x.times(x)).d,k)}return external=!0,r}function isOdd(n){return 1&n.d[n.d.length-1]}function maxOrMin(Ctor,args,ltgt){for(var y,x=new Ctor(args[0]),i=0;++i<args.length;){if(!(y=new Ctor(args[i])).s){x=y;break}x[ltgt](y)&&(x=y)}return x}function naturalExponential(x,sd){var denominator,guard,j,pow,sum,t,wpr,rep=0,i=0,k=0,Ctor=x.constructor,rm=Ctor.rounding,pr=Ctor.precision;if(!x.d||!x.d[0]||17<x.e)return new Ctor(x.d?x.d[0]?x.s<0?0:1/0:1:x.s?x.s<0?0:x:NaN);for(wpr=null==sd?(external=!1,pr):sd,t=new Ctor(.03125);-2<x.e;)x=x.times(t),k+=5;for(wpr+=guard=Math.log(mathpow(2,k))/Math.LN10*2+5|0,denominator=pow=sum=new Ctor(1),Ctor.precision=wpr;;){if(pow=finalise(pow.times(x),wpr,1),denominator=denominator.times(++i),digitsToString((t=sum.plus(divide(pow,denominator,wpr,1))).d).slice(0,wpr)===digitsToString(sum.d).slice(0,wpr)){for(j=k;j--;)sum=finalise(sum.times(sum),wpr,1);if(null!=sd)return Ctor.precision=pr,sum;if(!(rep<3&&checkRoundingDigits(sum.d,wpr-guard,rm,rep)))return finalise(sum,Ctor.precision=pr,rm,external=!0);Ctor.precision=wpr+=10,denominator=pow=t=new Ctor(1),i=0,rep++}sum=t}}function naturalLogarithm(y,sd){var c,c0,denominator,e,numerator,rep,sum,t,wpr,x1,x2,n=1,x=y,xd=x.d,Ctor=x.constructor,rm=Ctor.rounding,pr=Ctor.precision;if(x.s<0||!xd||!xd[0]||!x.e&&1==xd[0]&&1==xd.length)return new Ctor(xd&&!xd[0]?-1/0:1!=x.s?NaN:xd?0:x);if(wpr=null==sd?(external=!1,pr):sd,Ctor.precision=wpr+=10,c0=(c=digitsToString(xd)).charAt(0),!(Math.abs(e=x.e)<15e14))return t=getLn10(Ctor,wpr+2,pr).times(e+""),x=naturalLogarithm(new Ctor(c0+"."+c.slice(1)),wpr-10).plus(t),Ctor.precision=pr,null==sd?finalise(x,pr,rm,external=!0):x;for(;c0<7&&1!=c0||1==c0&&3<c.charAt(1);)c0=(c=digitsToString((x=x.times(y)).d)).charAt(0),n++;for(e=x.e,1<c0?(x=new Ctor("0."+c),e++):x=new Ctor(c0+"."+c.slice(1)),sum=numerator=x=divide((x1=x).minus(1),x.plus(1),wpr,1),x2=finalise(x.times(x),wpr,1),denominator=3;;){if(numerator=finalise(numerator.times(x2),wpr,1),digitsToString((t=sum.plus(divide(numerator,new Ctor(denominator),wpr,1))).d).slice(0,wpr)===digitsToString(sum.d).slice(0,wpr)){if(sum=sum.times(2),0!==e&&(sum=sum.plus(getLn10(Ctor,wpr+2,pr).times(e+""))),sum=divide(sum,new Ctor(n),wpr,1),null!=sd)return Ctor.precision=pr,sum;if(!checkRoundingDigits(sum.d,wpr-10,rm,rep))return finalise(sum,Ctor.precision=pr,rm,external=!0);Ctor.precision=wpr+=10,t=numerator=x=divide(x1.minus(1),x1.plus(1),wpr,1),x2=finalise(x.times(x),wpr,1),denominator=rep=1}sum=t,denominator+=2}}function nonFiniteToString(x){return String(x.s*x.s/0)}function parseDecimal(x,str){var e,i,len;for(0<(i=(str=-1<(e=str.indexOf("."))?str.replace(".",""):str).search(/e/i))?(e<0&&(e=i),e+=+str.slice(i+1),str=str.substring(0,i)):e<0&&(e=str.length),i=0;48===str.charCodeAt(i);i++);for(len=str.length;48===str.charCodeAt(len-1);--len);if(str=str.slice(i,len)){if(len-=i,x.e=e=e-i-1,x.d=[],i=(e+1)%LOG_BASE,e<0&&(i+=LOG_BASE),i<len){for(i&&x.d.push(+str.slice(0,i)),len-=LOG_BASE;i<len;)x.d.push(+str.slice(i,i+=LOG_BASE));str=str.slice(i),i=LOG_BASE-str.length}else i-=len;for(;i--;)str+="0";x.d.push(+str),external&&(x.e>x.constructor.maxE?(x.d=null,x.e=NaN):x.e<x.constructor.minE&&(x.e=0,x.d=[0]))}else x.e=0,x.d=[0];return x}function parseOther(x,str){var base,Ctor,divisor,i,isFloat,len,p,xd;if(-1<str.indexOf("_")){if(str=str.replace(/(\d)_(?=\d)/g,"$1"),isDecimal.test(str))return parseDecimal(x,str)}else if("Infinity"===str||"NaN"===str)return+str||(x.s=NaN),x.e=NaN,x.d=null,x;if(isHex.test(str))base=16,str=str.toLowerCase();else if(isBinary.test(str))base=2;else{if(!isOctal.test(str))throw Error(invalidArgument+str);base=8}for(i=(str=0<(i=str.search(/p/i))?(p=+str.slice(i+1),str.substring(2,i)):str.slice(2)).indexOf("."),Ctor=x.constructor,(isFloat=0<=i)&&(i=(len=(str=str.replace(".","")).length)-i,divisor=intPow(Ctor,new Ctor(base),i,2*i)),i=str=(xd=convertBase(str,base,BASE)).length-1;0===xd[i];--i)xd.pop();return i<0?new Ctor(0*x.s):(x.e=getBase10Exponent(xd,str),x.d=xd,external=!1,isFloat&&(x=divide(x,divisor,4*len)),p&&(x=x.times(Math.abs(p)<54?mathpow(2,p):Decimal.pow(2,p))),external=!0,x)}function taylorSeries(Ctor,n,x,y,isHyperbolic){var j,t,u,x2,pr=Ctor.precision,k=Math.ceil(pr/LOG_BASE);for(external=!1,x2=x.times(x),u=new Ctor(y);;){if(t=divide(u.times(x2),new Ctor(n++*n++),pr,1),u=isHyperbolic?y.plus(t):y.minus(t),y=divide(t.times(x2),new Ctor(n++*n++),pr,1),void 0!==(t=u.plus(y)).d[k]){for(j=k;t.d[j]===u.d[j]&&j--;);if(-1==j)break}j=u,u=y,y=t,t=j,0}return external=!0,t.d.length=k+1,t}function tinyPow(b,e){for(var n=b;--e;)n*=b;return n}function toLessThanHalfPi(Ctor,x){var t,isNeg=x.s<0,Ctor=getPi(Ctor,Ctor.precision,1),halfPi=Ctor.times(.5);if((x=x.abs()).lte(halfPi))return quadrant=isNeg?4:1,x;if((t=x.divToInt(Ctor)).isZero())quadrant=isNeg?3:2;else{if((x=x.minus(t.times(Ctor))).lte(halfPi))return quadrant=isOdd(t)?isNeg?2:3:isNeg?4:1,x;quadrant=isOdd(t)?isNeg?1:4:isNeg?3:2}return x.minus(Ctor).abs()}function toStringBinary(x,baseOut,sd,rm){var base,e,i,len,roundUp,str,xd,y,Ctor=x.constructor,isExp=void 0!==sd;if(isExp?(checkInt32(sd,1,MAX_DIGITS),void 0===rm?rm=Ctor.rounding:checkInt32(rm,0,8)):(sd=Ctor.precision,rm=Ctor.rounding),x.isFinite()){for(isExp?(base=2,16==baseOut?sd=4*sd-3:8==baseOut&&(sd=3*sd-2)):base=baseOut,0<=(i=(str=finiteToString(x)).indexOf("."))&&(str=str.replace(".",""),(y=new Ctor(1)).e=str.length-i,y.d=convertBase(finiteToString(y),10,base),y.e=y.d.length),e=len=(xd=convertBase(str,10,base)).length;0==xd[--len];)xd.pop();if(xd[0]){if(i<0?e--:((x=new Ctor(x)).d=xd,x.e=e,xd=(x=divide(x,y,sd,rm,0,base)).d,e=x.e,roundUp=inexact),i=xd[sd],Ctor=base/2,roundUp=roundUp||void 0!==xd[sd+1],roundUp=rm<4?(void 0!==i||roundUp)&&(0===rm||rm===(x.s<0?3:2)):Ctor<i||i===Ctor&&(4===rm||roundUp||6===rm&&1&xd[sd-1]||rm===(x.s<0?8:7)),xd.length=sd,roundUp)for(;++xd[--sd]>base-1;)xd[sd]=0,sd||(++e,xd.unshift(1));for(len=xd.length;!xd[len-1];--len);for(i=0,str="";i<len;i++)str+=NUMERALS.charAt(xd[i]);if(isExp){if(1<len)if(16==baseOut||8==baseOut){for(i=16==baseOut?4:3,--len;len%i;len++)str+="0";for(len=(xd=convertBase(str,base,baseOut)).length;!xd[len-1];--len);for(i=1,str="1.";i<len;i++)str+=NUMERALS.charAt(xd[i])}else str=str.charAt(0)+"."+str.slice(1);str=str+(e<0?"p":"p+")+e}else if(e<0){for(;++e;)str="0"+str;str="0."+str}else if(++e>len)for(e-=len;e--;)str+="0";else e<len&&(str=str.slice(0,e)+"."+str.slice(e))}else str=isExp?"0p+0":"0";str=(16==baseOut?"0x":2==baseOut?"0b":8==baseOut?"0o":"")+str}else str=nonFiniteToString(x);return x.s<0?"-"+str:str}function truncate(arr,len){return arr.length>len&&(arr.length=len,1)}function abs(x){return new this(x).abs()}function acos(x){return new this(x).acos()}function acosh(x){return new this(x).acosh()}function add(x,y){return new this(x).plus(y)}function asin(x){return new this(x).asin()}function asinh(x){return new this(x).asinh()}function atan(x){return new this(x).atan()}function atanh(x){return new this(x).atanh()}function atan2(y,x){y=new this(y),x=new this(x);var r,pr=this.precision,rm=this.rounding,wpr=pr+4;return y.s&&x.s?y.d||x.d?!x.d||y.isZero()?(r=x.s<0?getPi(this,pr,rm):new this(0)).s=y.s:!y.d||x.isZero()?(r=getPi(this,wpr,1).times(.5)).s=y.s:r=x.s<0?(this.precision=wpr,this.rounding=1,r=this.atan(divide(y,x,wpr,1)),x=getPi(this,wpr,1),this.precision=pr,this.rounding=rm,y.s<0?r.minus(x):r.plus(x)):this.atan(divide(y,x,wpr,1)):(r=getPi(this,wpr,1).times(0<x.s?.25:.75)).s=y.s:r=new this(NaN),r}function cbrt(x){return new this(x).cbrt()}function ceil(x){return finalise(x=new this(x),x.e+1,2)}function clamp(x,min,max){return new this(x).clamp(min,max)}function config(obj){if(!obj||"object"!=typeof obj)throw Error(decimalError+"Object expected");for(var p,v,useDefaults=!0===obj.defaults,ps=["precision",1,MAX_DIGITS,"rounding",0,8,"toExpNeg",-EXP_LIMIT,0,"toExpPos",0,EXP_LIMIT,"maxE",0,EXP_LIMIT,"minE",-EXP_LIMIT,0,"modulo",0,9],i=0;i<ps.length;i+=3)if(p=ps[i],useDefaults&&(this[p]=DEFAULTS[p]),void 0!==(v=obj[p])){if(!(mathfloor(v)===v&&ps[i+1]<=v&&v<=ps[i+2]))throw Error(invalidArgument+p+": "+v);this[p]=v}if(p="crypto",useDefaults&&(this[p]=DEFAULTS[p]),void 0!==(v=obj[p])){if(!0!==v&&!1!==v&&0!==v&&1!==v)throw Error(invalidArgument+p+": "+v);if(v){if(void 0===crypto||!crypto||!crypto.getRandomValues&&!crypto.randomBytes)throw Error(cryptoUnavailable);this[p]=!0}else this[p]=!1}return this}function cos(x){return new this(x).cos()}function cosh(x){return new this(x).cosh()}function div(x,y){return new this(x).div(y)}function exp(x){return new this(x).exp()}function floor(x){return finalise(x=new this(x),x.e+1,3)}function hypot(){var i,n,t=new this(0);for(external=!1,i=0;i<arguments.length;)if((n=new this(arguments[i++])).d)t.d&&(t=t.plus(n.times(n)));else{if(n.s)return external=!0,new this(1/0);t=n}return external=!0,t.sqrt()}function isDecimalInstance(obj){return obj instanceof Decimal||obj&&obj.toStringTag===tag||!1}function ln(x){return new this(x).ln()}function log(x,y){return new this(x).log(y)}function log2(x){return new this(x).log(2)}function log10(x){return new this(x).log(10)}function max(){return maxOrMin(this,arguments,"lt")}function min(){return maxOrMin(this,arguments,"gt")}function mod(x,y){return new this(x).mod(y)}function mul(x,y){return new this(x).mul(y)}function pow(x,y){return new this(x).pow(y)}function random(sd){var d,e,k,n,i=0,r=new this(1),rd=[];if(void 0===sd?sd=this.precision:checkInt32(sd,1,MAX_DIGITS),k=Math.ceil(sd/LOG_BASE),this.crypto)if(crypto.getRandomValues)for(d=crypto.getRandomValues(new Uint32Array(k));i<k;)429e7<=(n=d[i])?d[i]=crypto.getRandomValues(new Uint32Array(1))[0]:rd[i++]=n%1e7;else{if(!crypto.randomBytes)throw Error(cryptoUnavailable);for(d=crypto.randomBytes(k*=4);i<k;)214e7<=(n=d[i]+(d[i+1]<<8)+(d[i+2]<<16)+((127&d[i+3])<<24))?crypto.randomBytes(4).copy(d,i):(rd.push(n%1e7),i+=4);i=k/4}else for(;i<k;)rd[i++]=1e7*Math.random()|0;for(k=rd[--i],sd%=LOG_BASE,k&&sd&&(n=mathpow(10,LOG_BASE-sd),rd[i]=(k/n|0)*n);0===rd[i];i--)rd.pop();if(i<0)rd=[e=0];else{for(e=-1;0===rd[0];e-=LOG_BASE)rd.shift();for(k=1,n=rd[0];10<=n;n/=10)k++;k<LOG_BASE&&(e-=LOG_BASE-k)}return r.e=e,r.d=rd,r}function round(x){return finalise(x=new this(x),x.e+1,this.rounding)}function sign(x){return(x=new this(x)).d?x.d[0]?x.s:0*x.s:x.s||NaN}function sin(x){return new this(x).sin()}function sinh(x){return new this(x).sinh()}function sqrt(x){return new this(x).sqrt()}function sub(x,y){return new this(x).sub(y)}function sum(){var i=0,args=arguments,x=new this(args[i]);for(external=!1;x.s&&++i<args.length;)x=x.plus(args[i]);return external=!0,finalise(x,this.precision,this.rounding)}function tan(x){return new this(x).tan()}function tanh(x){return new this(x).tanh()}function trunc(x){return finalise(x=new this(x),x.e+1,1)}((Decimal=function clone(obj){var i,p,ps;function Decimal(v){var e,i,t,x=this;if(!(x instanceof Decimal))return new Decimal(v);if(x.constructor=Decimal,!isDecimalInstance(v)){if("number"==(t=typeof v)){if(0===v)return x.s=1/v<0?-1:1,x.e=0,void(x.d=[0]);if(v<0?(v=-v,x.s=-1):x.s=1,v===~~v&&v<1e7){for(e=0,i=v;10<=i;i/=10)e++;return void(external?Decimal.maxE<e?(x.e=NaN,x.d=null):e<Decimal.minE?(x.e=0,x.d=[0]):(x.e=e,x.d=[v]):(x.e=e,x.d=[v]))}return 0*v!=0?(v||(x.s=NaN),x.e=NaN,void(x.d=null)):parseDecimal(x,v.toString())}if("string"!=t)throw Error(invalidArgument+v);return 45===(i=v.charCodeAt(0))?(v=v.slice(1),x.s=-1):(43===i&&(v=v.slice(1)),x.s=1),(isDecimal.test(v)?parseDecimal:parseOther)(x,v)}x.s=v.s,external?!v.d||v.e>Decimal.maxE?(x.e=NaN,x.d=null):v.e<Decimal.minE?(x.e=0,x.d=[0]):(x.e=v.e,x.d=v.d.slice()):(x.e=v.e,x.d=v.d&&v.d.slice())}if(Decimal.prototype=P,Decimal.ROUND_UP=0,Decimal.ROUND_DOWN=1,Decimal.ROUND_CEIL=2,Decimal.ROUND_FLOOR=3,Decimal.ROUND_HALF_UP=4,Decimal.ROUND_HALF_DOWN=5,Decimal.ROUND_HALF_EVEN=6,Decimal.ROUND_HALF_CEIL=7,Decimal.ROUND_HALF_FLOOR=8,Decimal.EUCLID=9,Decimal.config=Decimal.set=config,Decimal.clone=clone,Decimal.isDecimal=isDecimalInstance,Decimal.abs=abs,Decimal.acos=acos,Decimal.acosh=acosh,Decimal.add=add,Decimal.asin=asin,Decimal.asinh=asinh,Decimal.atan=atan,Decimal.atanh=atanh,Decimal.atan2=atan2,Decimal.cbrt=cbrt,Decimal.ceil=ceil,Decimal.clamp=clamp,Decimal.cos=cos,Decimal.cosh=cosh,Decimal.div=div,Decimal.exp=exp,Decimal.floor=floor,Decimal.hypot=hypot,Decimal.ln=ln,Decimal.log=log,Decimal.log10=log10,Decimal.log2=log2,Decimal.max=max,Decimal.min=min,Decimal.mod=mod,Decimal.mul=mul,Decimal.pow=pow,Decimal.random=random,Decimal.round=round,Decimal.sign=sign,Decimal.sin=sin,Decimal.sinh=sinh,Decimal.sqrt=sqrt,Decimal.sub=sub,Decimal.sum=sum,Decimal.tan=tan,Decimal.tanh=tanh,Decimal.trunc=trunc,(obj=void 0===obj?{}:obj)&&!0!==obj.defaults)for(ps=["precision","rounding","toExpNeg","toExpPos","maxE","minE","modulo","crypto"],i=0;i<ps.length;)obj.hasOwnProperty(p=ps[i++])||(obj[p]=this[p]);return Decimal.config(obj),Decimal}(DEFAULTS)).prototype.constructor=Decimal).default=Decimal.Decimal=Decimal,LN10=new Decimal(LN10),PI=new Decimal(PI),"function"==typeof define&&define.amd?define(function(){return Decimal}):"undefined"!=typeof module&&module.exports?("function"==typeof Symbol&&"symbol"==typeof Symbol.iterator&&(P[Symbol.for("nodejs.util.inspect.custom")]=P.toString,P[Symbol.toStringTag]="Decimal"),module.exports=Decimal):(globalScope=globalScope||("undefined"!=typeof self&&self&&self.self==self?self:window),noConflict=globalScope.Decimal,Decimal.noConflict=function(){return globalScope.Decimal=noConflict,Decimal},globalScope.Decimal=Decimal)}(this);var VBacktest=(()=>{var _scriptDir="undefined"!=typeof document&&document.currentScript?document.currentScript.src:void 0;return"undefined"!=typeof __filename&&(_scriptDir=_scriptDir||__filename),function(moduleArg={}){var Module=moduleArg,readyPromiseResolve,readyPromiseReject,Std=(Module.ready=new Promise((resolve,reject)=>{readyPromiseResolve=resolve,readyPromiseReject=reject}),{_skip:function(arr,period){for(var j=0,k=0;j<arr.length&&(isNaN(arr[j])||k++,k!=period);j++);return j},_sum:function(arr,num){for(var sum=0,i=0;i<num;i++)isNaN(arr[i])||(sum+=arr[i]);return sum},_avg:function(arr,num){for(var n=0,sum=0,i=0;i<num;i++)isNaN(arr[i])||(sum+=arr[i],n++);return sum/n},_zeros:function(len){for(var n=[],i=0;i<len;i++)n.push(0);return n},_set:function(arr,start,end,value){for(var e=Math.min(arr.length,end),i=start;i<e;i++)arr[i]=value},_diff:function(a,b){for(var d=[],i=0;i<b.length;i++)isNaN(a[i])||isNaN(b[i])?d.push(NaN):d.push(a[i]-b[i]);return d},_move_diff:function(a){for(var d=[],i=1;i<a.length;i++)d.push(a[i]-a[i-1]);return d},_sma:function(S,period){var R=Std._zeros(S.length),j=Std._skip(S,period);if(Std._set(R,0,j,NaN),j<S.length)for(var sum=0,i=j;i<S.length;i++)i==j?sum=Std._sum(S,i+1):sum+=S[i]-S[i-period],R[i]=sum/period;return R},_smma:function(S,period){var R=Std._zeros(S.length),j=Std._skip(S,period);if(Std._set(R,0,j,NaN),j<S.length){R[j]=Std._avg(S,j+1);for(var i=j+1;i<S.length;i++)R[i]=(R[i-1]*(period-1)+S[i])/period}return R},_ema:function(S,period){var R=Std._zeros(S.length),multiplier=2/(period+1),period=Std._skip(S,period);if(Std._set(R,0,period,NaN),period<S.length){R[period]=Std._avg(S,period+1);for(var i=period+1;i<S.length;i++)R[i]=(S[i]-R[i-1])*multiplier+R[i-1]}return R},_cmp:function(arr,start,end,cmpFunc){for(var v=arr[start],i=start;i<end;i++)v=cmpFunc(arr[i],v);return v},_filt:function(records,n,attr,iv,cmpFunc){if(records.length<2)return NaN;for(var v=iv,pos=0!==n?records.length-Math.min(records.length-1,n)-1:0,i=records.length-2;pos<=i;i--)v=cmpFunc(v,void 0!==attr?records[i][attr]:records[i]);return v},_ticks:function(records){if(0===records.length)return[];var ticks=[];if(void 0!==records[0].Close)for(var i=0;i<records.length;i++)ticks.push(records[i].Close);else ticks=records;return ticks}});function TAInstance(logPtr){var self={_log:logPtr="function"!=typeof logPtr?function(){}:logPtr,Highest:function(records,n,attr){return Std._filt(records,n,attr,Number.MIN_VALUE,Math.max)},Lowest:function(records,n,attr){return Std._filt(records,n,attr,Number.MAX_VALUE,Math.min)},MA:function(records,period){return self._log("MA",period=void 0===period?9:period),Std._sma(Std._ticks(records),period)},SMA:function(records,period){return self._log("SMA",period=void 0===period?9:period),Std._sma(Std._ticks(records),period)},EMA:function(records,period){return self._log("EMA",period=void 0===period?9:period),Std._ema(Std._ticks(records),period)},MACD:function(records,fastEMA,slowEMA,signalEMA){self._log("MACD",fastEMA=void 0===fastEMA?12:fastEMA,slowEMA=void 0===slowEMA?26:slowEMA,signalEMA=void 0===signalEMA?9:signalEMA);records=Std._ticks(records),slowEMA=Std._ema(records,slowEMA),records=Std._ema(records,fastEMA),fastEMA=Std._diff(records,slowEMA),records=Std._ema(fastEMA,signalEMA);return[fastEMA,records,Std._diff(fastEMA,records)]},BOLL:function(records,period,multiplier){self._log("BOLL",period=void 0===period?20:period,multiplier=void 0===multiplier?2:multiplier);for(var S=Std._ticks(records),j=period-1;j<S.length&&isNaN(S[j]);j++);for(var UP=Std._zeros(S.length),MB=Std._zeros(S.length),DN=Std._zeros(S.length),sum=(Std._set(UP,0,j,NaN),Std._set(MB,0,j,NaN),Std._set(DN,0,j,NaN),0),i=j;i<S.length;i++){if(i==j)for(var k=0;k<period;k++)sum+=S[k];else sum=sum+S[i]-S[i-period];for(var ma=sum/period,d=0,m=i+1-period;m<=i;m++)d+=(S[m]-ma)*(S[m]-ma);var stdev=Math.sqrt(d/period),dn=ma-multiplier*stdev;UP[i]=ma+multiplier*stdev,MB[i]=ma,DN[i]=dn}return[UP,MB,DN]},KDJ:function(records,n,k,d){self._log("KDJ",n=void 0===n?9:n,k=void 0===k?3:k,d=void 0===d?3:d);for(var RSV=Std._zeros(records.length),K=(Std._set(RSV,0,n-1,NaN),Std._zeros(records.length)),D=Std._zeros(records.length),J=Std._zeros(records.length),hs=Std._zeros(records.length),ls=Std._zeros(records.length),j=0;j<records.length;j++)hs[j]=records[j].High,ls[j]=records[j].Low;for(var c,h,l,i=0;i<records.length;i++)n-1<=i?(c=records[i].Close,h=Std._cmp(hs,i-(n-1),i+1,Math.max),l=Std._cmp(ls,i-(n-1),i+1,Math.min),RSV[i]=h!=l?(c-l)/(h-l)*100:100,K[i]=(+RSV[i]+(k-1)*K[i-1])/k,D[i]=(+K[i]+(d-1)*D[i-1])/d):(K[i]=D[i]=50,RSV[i]=0),J[i]=3*K[i]-2*D[i];for(var m=0;m<n-1;m++)K[m]=D[m]=J[m]=NaN;return[K,D,J]},RSI:function(records,period){self._log("RSI",period=void 0===period?14:period);var n=period,rsi=Std._zeros(records.length);if(Std._set(rsi,0,rsi.length,NaN),!(records.length<n)){for(var ticks=Std._ticks(records),deltas=Std._move_diff(ticks),seed=deltas.slice(0,n),up=0,down=0,i=0;i<seed.length;i++)0<=seed[i]?up+=seed[i]:down+=seed[i];up/=n;var delta,down=-down/n,upval=(rsi[n]=100-100/(1+(0!=down?up/down:0)),0),downval=0;for(i=n+1;i<ticks.length;i++)downval=0<(delta=deltas[i-1])?(upval=delta,0):(upval=0,-delta),rsi[i]=100-100/(1+(up=(up*(n-1)+upval)/n)/(down=(down*(n-1)+downval)/n))}return rsi},OBV:function(records){if(self._log("OBV"),0===records.length)return[];if(void 0===records[0].Close)throw"argument must KLine";for(var R=[],i=0;i<records.length;i++)0===i?R[i]=records[i].Volume:records[i].Close>=records[i-1].Close?R[i]=R[i-1]+records[i].Volume:R[i]=R[i-1]-records[i].Volume;return R},ATR:function(records,period){if(self._log("ATR",period=void 0===period?14:period),0===records.length)return[];if(void 0===records[0].Close)throw"argument must KLine";for(var R=Std._zeros(records.length),sum=0,n=0,i=0;i<records.length;i++){var TR=0;sum+=TR=0==i?records[i].High-records[i].Low:Math.max(records[i].High-records[i].Low,Math.abs(records[i].High-records[i-1].Close),Math.abs(records[i-1].Close-records[i].Low)),R[i]=n=i<period?sum/(i+1):((period-1)*n+TR)/period}return R},Alligator:function(records,jawLength,teethLength,lipsLength){self._log("Alligator",jawLength=void 0===jawLength?13:jawLength,teethLength=void 0===teethLength?8:teethLength,lipsLength=void 0===lipsLength?5:lipsLength);for(var ticks=[],i=0;i<records.length;i++)ticks.push((records[i].High+records[i].Low)/2);return[[NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN].concat(Std._smma(ticks,jawLength)),[NaN,NaN,NaN,NaN,NaN].concat(Std._smma(ticks,teethLength)),[NaN,NaN,NaN].concat(Std._smma(ticks,lipsLength))]},CMF:function(records,periods){self._log("CMF",periods=periods||20);for(var ret=[],sumD=0,sumV=0,arrD=[],arrV=[],i=0;i<records.length;i++){var d=records[i].High==records[i].Low?0:(2*records[i].Close-records[i].Low-records[i].High)/(records[i].High-records[i].Low)*records[i].Volume;arrD.push(d),arrV.push(records[i].Volume),sumD+=d,sumV+=records[i].Volume,periods<=i&&(sumD-=arrD.shift(),sumV-=arrV.shift()),ret.push(sumD/sumV)}return ret}};return self}var TA=TAInstance();function init_pako(){"use strict";function zswap32(q){return(q>>>24&255)+(q>>>8&65280)+((65280&q)<<8)+((255&q)<<24)}var exports={},adler32_1=function(adler,buf,len,pos){for(var s1=65535&adler|0,s2=adler>>>16&65535|0,n=0;0!==len;){for(len-=n=2e3<len?2e3:len;s2=s2+(s1=s1+buf[pos++]|0)|0,--n;);s1%=65521,s2%=65521}return s1|s2<<16|0},crcTable=new Uint32Array(function(){for(var table=[],n=0;n<256;n++){for(var c=n,k=0;k<8;k++)c=1&c?3988292384^c>>>1:c>>>1;table[n]=c}return table}()),crc32_1=function(crc,buf,len,pos){var t=crcTable,end=pos+len;crc^=-1;for(var i=pos;i<end;i++)crc=crc>>>8^t[255&(crc^buf[i])];return-1^crc},BAD$1=16209,TYPE$1=16191,lbase=new Uint16Array([3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0]),lext=new Uint8Array([16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78]),dbase=new Uint16Array([1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0]),dext=new Uint8Array([16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64]),inftrees=function(type,lens,lens_index,codes,table,table_index,work,opts){for(var incr,fill,low,mask,next,match,here_bits,here_op,here_val,bits=opts.bits,len=0,sym=0,min=0,max=0,root=0,curr=0,drop=0,left=0,used=0,huff=0,base=null,count=new Uint16Array(16),offs=new Uint16Array(16),extra=null,len=0;len<=15;len++)count[len]=0;for(sym=0;sym<codes;sym++)count[lens[lens_index+sym]]++;for(root=bits,max=15;1<=max&&0===count[max];max--);if(max<root&&(root=max),0===max)table[table_index++]=20971520,table[table_index++]=20971520,opts.bits=1;else{for(min=1;min<max&&0===count[min];min++);for(root<min&&(root=min),len=left=1;len<=15;len++)if((left=(left<<=1)-count[len])<0)return-1;if(0<left&&(0===type||1!==max))return-1;for(offs[1]=0,len=1;len<15;len++)offs[len+1]=offs[len]+count[len];for(sym=0;sym<codes;sym++)0!==lens[lens_index+sym]&&(work[offs[lens[lens_index+sym]]++]=sym);if(match=0===type?(base=extra=work,20):1===type?(base=lbase,extra=lext,257):(base=dbase,extra=dext,0),len=min,next=table_index,drop=sym=huff=0,low=-1,mask=(used=1<<(curr=root))-1,1===type&&852<used||2===type&&592<used)return 1;for(;;){for(here_val=work[sym]+1<match?(here_op=0,work[sym]):work[sym]>=match?(here_op=extra[work[sym]-match],base[work[sym]-match]):(here_op=96,0),incr=1<<(here_bits=len-drop),min=fill=1<<curr;table[next+(huff>>drop)+(fill-=incr)]=here_bits<<24|here_op<<16|here_val|0,0!==fill;);for(incr=1<<len-1;huff&incr;)incr>>=1;if(huff=0!==incr?(huff&incr-1)+incr:0,sym++,0==--count[len]){if(len===max)break;len=lens[lens_index+work[sym]]}if(root<len&&(huff&mask)!==low){for(next+=min,left=1<<(curr=len-(drop=0===drop?root:drop));curr+drop<max&&!((left-=count[curr+drop])<=0);)curr++,left<<=1;if(used+=1<<curr,1===type&&852<used||2===type&&592<used)return 1;table[low=huff&mask]=root<<24|curr<<16|next-table_index|0}}0!==huff&&(table[next+huff]=len-drop<<24|64<<16|0),opts.bits=root}return 0},constants$1={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_MEM_ERROR:-4,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8},LENS=1,DISTS=2,Z_FINISH$1=constants$1.Z_FINISH,Z_BLOCK=constants$1.Z_BLOCK,Z_TREES=constants$1.Z_TREES,Z_OK$1=constants$1.Z_OK,Z_STREAM_END$1=constants$1.Z_STREAM_END,Z_NEED_DICT$1=constants$1.Z_NEED_DICT,Z_STREAM_ERROR$1=constants$1.Z_STREAM_ERROR,Z_DATA_ERROR$1=constants$1.Z_DATA_ERROR,Z_MEM_ERROR$1=constants$1.Z_MEM_ERROR,Z_BUF_ERROR=constants$1.Z_BUF_ERROR,Z_DEFLATED=constants$1.Z_DEFLATED,HEAD=16180,BAD=16209,SYNC=16211,ENOUGH_LENS=852,ENOUGH_DISTS=592;function InflateState(){this.strm=null,this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new Uint16Array(320),this.work=new Uint16Array(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}function inflateResetKeep(strm){var state;return inflateStateCheck(strm)?Z_STREAM_ERROR$1:(state=strm.state,strm.total_in=strm.total_out=state.total=0,strm.msg="",state.wrap&&(strm.adler=1&state.wrap),state.mode=HEAD,state.last=0,state.havedict=0,state.flags=-1,state.dmax=32768,state.head=null,state.hold=0,state.bits=0,state.lencode=state.lendyn=new Int32Array(ENOUGH_LENS),state.distcode=state.distdyn=new Int32Array(ENOUGH_DISTS),state.sane=1,state.back=-1,Z_OK$1)}function inflateReset(strm){var state;return inflateStateCheck(strm)?Z_STREAM_ERROR$1:((state=strm.state).wsize=0,state.whave=0,state.wnext=0,inflateResetKeep(strm))}function inflateInit2(strm,windowBits){var state;return strm?(state=new InflateState,(strm.state=state).strm=strm,state.window=null,state.mode=HEAD,(state=inflateReset2(strm,windowBits))!==Z_OK$1&&(strm.state=null),state):Z_STREAM_ERROR$1}function updatewindow(strm,src,end,copy){var dist;return null===(strm=strm.state).window&&(strm.wsize=1<<strm.wbits,strm.wnext=0,strm.whave=0,strm.window=new Uint8Array(strm.wsize)),strm.wsize<=copy?(strm.window.set(src.subarray(end-strm.wsize,end),0),strm.wnext=0,strm.whave=strm.wsize):(copy<(dist=strm.wsize-strm.wnext)&&(dist=copy),strm.window.set(src.subarray(end-copy,end-copy+dist),strm.wnext),(copy-=dist)?(strm.window.set(src.subarray(end-copy,end),0),strm.wnext=copy,strm.whave=strm.wsize):(strm.wnext+=dist,strm.wnext===strm.wsize&&(strm.wnext=0),strm.whave<strm.wsize&&(strm.whave+=dist))),0}var lenfix,distfix,inflateStateCheck=function(strm){var state;return!strm||!(state=strm.state)||state.strm!==strm||state.mode<HEAD||state.mode>SYNC?1:0},inflateReset2=function(strm,windowBits){var wrap,state;return inflateStateCheck(strm)||(state=strm.state,windowBits<0?(wrap=0,windowBits=-windowBits):(wrap=5+(windowBits>>4),windowBits<48&&(windowBits&=15)),windowBits&&(windowBits<8||15<windowBits))?Z_STREAM_ERROR$1:(null!==state.window&&state.wbits!==windowBits&&(state.window=null),state.wrap=wrap,state.wbits=windowBits,inflateReset(strm))},virgin=!0,inflate_1$1={inflateReset:inflateReset,inflateReset2:inflateReset2,inflateResetKeep:inflateResetKeep,inflateInit:function(strm){return inflateInit2(strm,15)},inflateInit2:inflateInit2,inflate:function(strm,flush){var state,input,output,next,put,have,left,hold,bits,_in,_out,copy,from,from_source,here_bits,here_op,here_val,last_bits,last_op,last_val,len,ret,opts,n,here=0,hbuf=new Uint8Array(4),order=new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);if(inflateStateCheck(strm)||!strm.output||!strm.input&&0!==strm.avail_in)return Z_STREAM_ERROR$1;16191===(state=strm.state).mode&&(state.mode=16192),put=strm.next_out,output=strm.output,next=strm.next_in,input=strm.input,hold=state.hold,bits=state.bits,_in=have=strm.avail_in,_out=left=strm.avail_out,ret=Z_OK$1;inf_leave:for(;;)switch(state.mode){case HEAD:if(0===state.wrap)state.mode=16192;else{for(;bits<16;){if(0===have)break inf_leave;have--,hold+=input[next++]<<bits,bits+=8}2&state.wrap&&35615===hold?(0===state.wbits&&(state.wbits=15),hbuf[state.check=0]=255&hold,hbuf[1]=hold>>>8&255,state.check=crc32_1(state.check,hbuf,2,0),bits=hold=0,state.mode=16181):(state.head&&(state.head.done=!1),!(1&state.wrap)||(((255&hold)<<8)+(hold>>8))%31?(strm.msg="incorrect header check",state.mode=BAD):(15&hold)!==Z_DEFLATED?(strm.msg="unknown compression method",state.mode=BAD):(bits-=4,len=8+(15&(hold>>>=4)),0===state.wbits&&(state.wbits=len),15<len||len>state.wbits?(strm.msg="invalid window size",state.mode=BAD):(state.dmax=1<<state.wbits,state.flags=0,strm.adler=state.check=1,state.mode=512&hold?16189:16191,bits=hold=0)))}break;case 16181:for(;bits<16;){if(0===have)break inf_leave;have--,hold+=input[next++]<<bits,bits+=8}if(state.flags=hold,(255&state.flags)!==Z_DEFLATED){strm.msg="unknown compression method",state.mode=BAD;break}if(57344&state.flags){strm.msg="unknown header flags set",state.mode=BAD;break}state.head&&(state.head.text=hold>>8&1),512&state.flags&&4&state.wrap&&(hbuf[0]=255&hold,hbuf[1]=hold>>>8&255,state.check=crc32_1(state.check,hbuf,2,0)),bits=hold=0,state.mode=16182;case 16182:for(;bits<32;){if(0===have)break inf_leave;have--,hold+=input[next++]<<bits,bits+=8}state.head&&(state.head.time=hold),512&state.flags&&4&state.wrap&&(hbuf[0]=255&hold,hbuf[1]=hold>>>8&255,hbuf[2]=hold>>>16&255,hbuf[3]=hold>>>24&255,state.check=crc32_1(state.check,hbuf,4,0)),bits=hold=0,state.mode=16183;case 16183:for(;bits<16;){if(0===have)break inf_leave;have--,hold+=input[next++]<<bits,bits+=8}state.head&&(state.head.xflags=255&hold,state.head.os=hold>>8),512&state.flags&&4&state.wrap&&(hbuf[0]=255&hold,hbuf[1]=hold>>>8&255,state.check=crc32_1(state.check,hbuf,2,0)),bits=hold=0,state.mode=16184;case 16184:if(1024&state.flags){for(;bits<16;){if(0===have)break inf_leave;have--,hold+=input[next++]<<bits,bits+=8}state.length=hold,state.head&&(state.head.extra_len=hold),512&state.flags&&4&state.wrap&&(hbuf[0]=255&hold,hbuf[1]=hold>>>8&255,state.check=crc32_1(state.check,hbuf,2,0)),bits=hold=0}else state.head&&(state.head.extra=null);state.mode=16185;case 16185:if(1024&state.flags&&((copy=have<(copy=state.length)?have:copy)&&(state.head&&(len=state.head.extra_len-state.length,state.head.extra||(state.head.extra=new Uint8Array(state.head.extra_len)),state.head.extra.set(input.subarray(next,next+copy),len)),512&state.flags&&4&state.wrap&&(state.check=crc32_1(state.check,input,copy,next)),have-=copy,next+=copy,state.length-=copy),state.length))break inf_leave;state.length=0,state.mode=16186;case 16186:if(2048&state.flags){if(0===have)break inf_leave;for(copy=0;len=input[next+copy++],state.head&&len&&state.length<65536&&(state.head.name+=String.fromCharCode(len)),len&&copy<have;);if(512&state.flags&&4&state.wrap&&(state.check=crc32_1(state.check,input,copy,next)),have-=copy,next+=copy,len)break inf_leave}else state.head&&(state.head.name=null);state.length=0,state.mode=16187;case 16187:if(4096&state.flags){if(0===have)break inf_leave;for(copy=0;len=input[next+copy++],state.head&&len&&state.length<65536&&(state.head.comment+=String.fromCharCode(len)),len&&copy<have;);if(512&state.flags&&4&state.wrap&&(state.check=crc32_1(state.check,input,copy,next)),have-=copy,next+=copy,len)break inf_leave}else state.head&&(state.head.comment=null);state.mode=16188;case 16188:if(512&state.flags){for(;bits<16;){if(0===have)break inf_leave;have--,hold+=input[next++]<<bits,bits+=8}if(4&state.wrap&&hold!==(65535&state.check)){strm.msg="header crc mismatch",state.mode=BAD;break}bits=hold=0}state.head&&(state.head.hcrc=state.flags>>9&1,state.head.done=!0),strm.adler=state.check=0,state.mode=16191;break;case 16189:for(;bits<32;){if(0===have)break inf_leave;have--,hold+=input[next++]<<bits,bits+=8}strm.adler=state.check=zswap32(hold),bits=hold=0,state.mode=16190;case 16190:if(0===state.havedict)return strm.next_out=put,strm.avail_out=left,strm.next_in=next,strm.avail_in=have,state.hold=hold,state.bits=bits,Z_NEED_DICT$1;strm.adler=state.check=1,state.mode=16191;case 16191:if(flush===Z_BLOCK||flush===Z_TREES)break inf_leave;case 16192:if(state.last)hold>>>=7&bits,bits-=7&bits,state.mode=16206;else{for(;bits<3;){if(0===have)break inf_leave;have--,hold+=input[next++]<<bits,bits+=8}switch(state.last=1&hold,--bits,3&(hold>>>=1)){case 0:state.mode=16193;break;case 1:if(!function(state){if(virgin){lenfix=new Int32Array(512),distfix=new Int32Array(32);for(var sym=0;sym<144;)state.lens[sym++]=8;for(;sym<256;)state.lens[sym++]=9;for(;sym<280;)state.lens[sym++]=7;for(;sym<288;)state.lens[sym++]=8;for(inftrees(LENS,state.lens,0,288,lenfix,0,state.work,{bits:9}),sym=0;sym<32;)state.lens[sym++]=5;inftrees(DISTS,state.lens,0,32,distfix,0,state.work,{bits:5}),virgin=!1}state.lencode=lenfix,state.lenbits=9,state.distcode=distfix,state.distbits=5}(state),state.mode=16199,flush!==Z_TREES)break;hold>>>=2,bits-=2;break inf_leave;case 2:state.mode=16196;break;case 3:strm.msg="invalid block type",state.mode=BAD}hold>>>=2,bits-=2}break;case 16193:for(hold>>>=7&bits,bits-=7&bits;bits<32;){if(0===have)break inf_leave;have--,hold+=input[next++]<<bits,bits+=8}if((65535&hold)!=(hold>>>16^65535)){strm.msg="invalid stored block lengths",state.mode=BAD;break}if(state.length=65535&hold,bits=hold=0,state.mode=16194,flush===Z_TREES)break inf_leave;case 16194:state.mode=16195;case 16195:if(copy=state.length){if(0===(copy=left<(copy=have<copy?have:copy)?left:copy))break inf_leave;output.set(input.subarray(next,next+copy),put),have-=copy,next+=copy,left-=copy,put+=copy,state.length-=copy}else state.mode=16191;break;case 16196:for(;bits<14;){if(0===have)break inf_leave;have--,hold+=input[next++]<<bits,bits+=8}if(state.nlen=257+(31&hold),hold>>>=5,bits-=5,state.ndist=1+(31&hold),hold>>>=5,bits-=5,state.ncode=4+(15&hold),hold>>>=4,bits-=4,286<state.nlen||30<state.ndist){strm.msg="too many length or distance symbols",state.mode=BAD;break}state.have=0,state.mode=16197;case 16197:for(;state.have<state.ncode;){for(;bits<3;){if(0===have)break inf_leave;have--,hold+=input[next++]<<bits,bits+=8}state.lens[order[state.have++]]=7&hold,hold>>>=3,bits-=3}for(;state.have<19;)state.lens[order[state.have++]]=0;if(state.lencode=state.lendyn,state.lenbits=7,opts={bits:state.lenbits},ret=inftrees(0,state.lens,0,19,state.lencode,0,state.work,opts),state.lenbits=opts.bits,ret){strm.msg="invalid code lengths set",state.mode=BAD;break}state.have=0,state.mode=16198;case 16198:for(;state.have<state.nlen+state.ndist;){for(;here_op=(here=state.lencode[hold&(1<<state.lenbits)-1])>>>16&255,here_val=65535&here,!((here_bits=here>>>24)<=bits);){if(0===have)break inf_leave;have--,hold+=input[next++]<<bits,bits+=8}if(here_val<16)hold>>>=here_bits,bits-=here_bits,state.lens[state.have++]=here_val;else{if(16===here_val){for(n=here_bits+2;bits<n;){if(0===have)break inf_leave;have--,hold+=input[next++]<<bits,bits+=8}if(hold>>>=here_bits,bits-=here_bits,0===state.have){strm.msg="invalid bit length repeat",state.mode=BAD;break}len=state.lens[state.have-1],copy=3+(3&hold),hold>>>=2,bits-=2}else if(17===here_val){for(n=here_bits+3;bits<n;){if(0===have)break inf_leave;have--,hold+=input[next++]<<bits,bits+=8}len=0,copy=3+(7&(hold>>>=here_bits)),hold>>>=3,bits=bits-here_bits-3}else{for(n=here_bits+7;bits<n;){if(0===have)break inf_leave;have--,hold+=input[next++]<<bits,bits+=8}len=0,copy=11+(127&(hold>>>=here_bits)),hold>>>=7,bits=bits-here_bits-7}if(state.have+copy>state.nlen+state.ndist){strm.msg="invalid bit length repeat",state.mode=BAD;break}for(;copy--;)state.lens[state.have++]=len}}if(state.mode===BAD)break;if(0===state.lens[256]){strm.msg="invalid code -- missing end-of-block",state.mode=BAD;break}if(state.lenbits=9,opts={bits:state.lenbits},ret=inftrees(LENS,state.lens,0,state.nlen,state.lencode,0,state.work,opts),state.lenbits=opts.bits,ret){strm.msg="invalid literal/lengths set",state.mode=BAD;break}if(state.distbits=6,state.distcode=state.distdyn,opts={bits:state.distbits},ret=inftrees(DISTS,state.lens,state.nlen,state.ndist,state.distcode,0,state.work,opts),state.distbits=opts.bits,ret){strm.msg="invalid distances set",state.mode=BAD;break}if(state.mode=16199,flush===Z_TREES)break inf_leave;case 16199:state.mode=16200;case 16200:if(6<=have&&258<=left){strm.next_out=put,strm.avail_out=left,strm.next_in=next,strm.avail_in=have,state.hold=hold,state.bits=bits,!function(strm,start){var here,op,len,dist,from,from_source,state=strm.state,_in=strm.next_in,input=strm.input,last=_in+(strm.avail_in-5),_out=strm.next_out,output=strm.output,beg=_out-(start-strm.avail_out),end=_out+(strm.avail_out-257),dmax=state.dmax,wsize=state.wsize,whave=state.whave,wnext=state.wnext,s_window=state.window,hold=state.hold,bits=state.bits,lcode=state.lencode,dcode=state.distcode,lmask=(1<<state.lenbits)-1,dmask=(1<<state.distbits)-1;top:do{for(bits<15&&(hold+=input[_in++]<<bits,bits+=8,hold+=input[_in++]<<bits,bits+=8),here=lcode[hold&lmask];;){if(hold>>>=op=here>>>24,bits-=op,0===(op=here>>>16&255))output[_out++]=65535&here;else{if(!(16&op)){if(0==(64&op)){here=lcode[(65535&here)+(hold&(1<<op)-1)];continue}if(32&op){state.mode=TYPE$1;break top}strm.msg="invalid literal/length code",state.mode=BAD$1;break top}for(len=65535&here,(op&=15)&&(bits<op&&(hold+=input[_in++]<<bits,bits+=8),len+=hold&(1<<op)-1,hold>>>=op,bits-=op),bits<15&&(hold+=input[_in++]<<bits,bits+=8,hold+=input[_in++]<<bits,bits+=8),here=dcode[hold&dmask];;){if(hold>>>=op=here>>>24,bits-=op,!(16&(op=here>>>16&255))){if(0==(64&op)){here=dcode[(65535&here)+(hold&(1<<op)-1)];continue}strm.msg="invalid distance code",state.mode=BAD$1;break top}if(dist=65535&here,bits<(op&=15)&&(hold+=input[_in++]<<bits,(bits+=8)<op)&&(hold+=input[_in++]<<bits,bits+=8),dmax<(dist+=hold&(1<<op)-1)){strm.msg="invalid distance too far back",state.mode=BAD$1;break top}if(hold>>>=op,bits-=op,(op=_out-beg)<dist){if(whave<(op=dist-op)&&state.sane){strm.msg="invalid distance too far back",state.mode=BAD$1;break top}if(from_source=s_window,(from=0)===wnext){if(from+=wsize-op,op<len){for(len-=op;output[_out++]=s_window[from++],--op;);from=_out-dist,from_source=output}}else if(wnext<op){if(from+=wsize+wnext-op,(op-=wnext)<len){for(len-=op;output[_out++]=s_window[from++],--op;);if(from=0,wnext<len){for(len-=op=wnext;output[_out++]=s_window[from++],--op;);from=_out-dist,from_source=output}}}else if(from+=wnext-op,op<len){for(len-=op;output[_out++]=s_window[from++],--op;);from=_out-dist,from_source=output}for(;2<len;)output[_out++]=from_source[from++],output[_out++]=from_source[from++],output[_out++]=from_source[from++],len-=3;len&&(output[_out++]=from_source[from++],1<len)&&(output[_out++]=from_source[from++])}else{for(from=_out-dist;output[_out++]=output[from++],output[_out++]=output[from++],output[_out++]=output[from++],2<(len-=3););len&&(output[_out++]=output[from++],1<len)&&(output[_out++]=output[from++])}break}}break}}while(_in<last&&_out<end);hold&=(1<<(bits-=(len=bits>>3)<<3))-1,strm.next_in=_in-=len,strm.next_out=_out,strm.avail_in=_in<last?last-_in+5:5-(_in-last),strm.avail_out=_out<end?end-_out+257:257-(_out-end),state.hold=hold,state.bits=bits}(strm,_out),put=strm.next_out,output=strm.output,left=strm.avail_out,next=strm.next_in,input=strm.input,have=strm.avail_in,hold=state.hold,bits=state.bits,16191===state.mode&&(state.back=-1);break}for(state.back=0;here_op=(here=state.lencode[hold&(1<<state.lenbits)-1])>>>16&255,here_val=65535&here,!((here_bits=here>>>24)<=bits);){if(0===have)break inf_leave;have--,hold+=input[next++]<<bits,bits+=8}if(here_op&&0==(240&here_op)){for(last_bits=here_bits,last_op=here_op,last_val=here_val;here_op=(here=state.lencode[last_val+((hold&(1<<last_bits+last_op)-1)>>last_bits)])>>>16&255,here_val=65535&here,!(last_bits+(here_bits=here>>>24)<=bits);){if(0===have)break inf_leave;have--,hold+=input[next++]<<bits,bits+=8}hold>>>=last_bits,bits-=last_bits,state.back+=last_bits}if(hold>>>=here_bits,bits-=here_bits,state.back+=here_bits,state.length=here_val,0===here_op){state.mode=16205;break}if(32&here_op){state.back=-1,state.mode=16191;break}if(64&here_op){strm.msg="invalid literal/length code",state.mode=BAD;break}state.extra=15&here_op,state.mode=16201;case 16201:if(state.extra){for(n=state.extra;bits<n;){if(0===have)break inf_leave;have--,hold+=input[next++]<<bits,bits+=8}state.length+=hold&(1<<state.extra)-1,hold>>>=state.extra,bits-=state.extra,state.back+=state.extra}state.was=state.length,state.mode=16202;case 16202:for(;here_op=(here=state.distcode[hold&(1<<state.distbits)-1])>>>16&255,here_val=65535&here,!((here_bits=here>>>24)<=bits);){if(0===have)break inf_leave;have--,hold+=input[next++]<<bits,bits+=8}if(0==(240&here_op)){for(last_bits=here_bits,last_op=here_op,last_val=here_val;here_op=(here=state.distcode[last_val+((hold&(1<<last_bits+last_op)-1)>>last_bits)])>>>16&255,here_val=65535&here,!(last_bits+(here_bits=here>>>24)<=bits);){if(0===have)break inf_leave;have--,hold+=input[next++]<<bits,bits+=8}hold>>>=last_bits,bits-=last_bits,state.back+=last_bits}if(hold>>>=here_bits,bits-=here_bits,state.back+=here_bits,64&here_op){strm.msg="invalid distance code",state.mode=BAD;break}state.offset=here_val,state.extra=15&here_op,state.mode=16203;case 16203:if(state.extra){for(n=state.extra;bits<n;){if(0===have)break inf_leave;have--,hold+=input[next++]<<bits,bits+=8}state.offset+=hold&(1<<state.extra)-1,hold>>>=state.extra,bits-=state.extra,state.back+=state.extra}if(state.offset>state.dmax){strm.msg="invalid distance too far back",state.mode=BAD;break}state.mode=16204;case 16204:if(0===left)break inf_leave;if(state.offset>(copy=_out-left)){if((copy=state.offset-copy)>state.whave&&state.sane){strm.msg="invalid distance too far back",state.mode=BAD;break}from=copy>state.wnext?(copy-=state.wnext,state.wsize-copy):state.wnext-copy,copy>state.length&&(copy=state.length),from_source=state.window}else from_source=output,from=put-state.offset,copy=state.length;for(left-=copy=left<copy?left:copy,state.length-=copy;output[put++]=from_source[from++],--copy;);0===state.length&&(state.mode=16200);break;case 16205:if(0===left)break inf_leave;output[put++]=state.length,left--,state.mode=16200;break;case 16206:if(state.wrap){for(;bits<32;){if(0===have)break inf_leave;have--,hold|=input[next++]<<bits,bits+=8}if(_out-=left,strm.total_out+=_out,state.total+=_out,4&state.wrap&&_out&&(strm.adler=state.check=(state.flags?crc32_1:adler32_1)(state.check,output,_out,put-_out)),_out=left,4&state.wrap&&(state.flags?hold:zswap32(hold))!==state.check){strm.msg="incorrect data check",state.mode=BAD;break}bits=hold=0}state.mode=16207;case 16207:if(state.wrap&&state.flags){for(;bits<32;){if(0===have)break inf_leave;have--,hold+=input[next++]<<bits,bits+=8}if(4&state.wrap&&hold!==(4294967295&state.total)){strm.msg="incorrect length check",state.mode=BAD;break}bits=hold=0}state.mode=16208;case 16208:ret=Z_STREAM_END$1;break inf_leave;case BAD:ret=Z_DATA_ERROR$1;break inf_leave;case 16210:return Z_MEM_ERROR$1;default:return Z_STREAM_ERROR$1}return strm.next_out=put,strm.avail_out=left,strm.next_in=next,strm.avail_in=have,state.hold=hold,state.bits=bits,(state.wsize||_out!==strm.avail_out&&state.mode<BAD&&(state.mode<16206||flush!==Z_FINISH$1))&&updatewindow(strm,strm.output,strm.next_out,_out-strm.avail_out),_out-=strm.avail_out,strm.total_in+=_in-=strm.avail_in,strm.total_out+=_out,state.total+=_out,4&state.wrap&&_out&&(strm.adler=state.check=(state.flags?crc32_1:adler32_1)(state.check,output,_out,strm.next_out-_out)),strm.data_type=state.bits+(state.last?64:0)+(16191===state.mode?128:0)+(16199===state.mode||16194===state.mode?256:0),ret=(0==_in&&0===_out||flush===Z_FINISH$1)&&ret===Z_OK$1?Z_BUF_ERROR:ret},inflateEnd:function(strm){var state;return inflateStateCheck(strm)?Z_STREAM_ERROR$1:((state=strm.state).window&&(state.window=null),strm.state=null,Z_OK$1)},inflateGetHeader:function(strm,head){return inflateStateCheck(strm)||0==(2&(strm=strm.state).wrap)?Z_STREAM_ERROR$1:((strm.head=head).done=!1,Z_OK$1)},inflateSetDictionary:function(strm,dictionary){var state,dictLength=dictionary.length;return inflateStateCheck(strm)||0!==(state=strm.state).wrap&&16190!==state.mode?Z_STREAM_ERROR$1:16190===state.mode&&adler32_1(1,dictionary,dictLength,0)!==state.check?Z_DATA_ERROR$1:updatewindow(strm,dictionary,dictLength,dictLength)?(state.mode=16210,Z_MEM_ERROR$1):(state.havedict=1,Z_OK$1)},inflateInfo:"pako inflate (from Nodeca project)"};function _typeof(obj){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj})(obj)}var common_assign=function(obj){for(var sources=Array.prototype.slice.call(arguments,1);sources.length;){var source=sources.shift();if(source){if("object"!==_typeof(source))throw new TypeError(source+"must be non-object");for(var p in source)!function(obj,key){return Object.prototype.hasOwnProperty.call(obj,key)}(source,p)||(obj[p]=source[p])}}return obj},common_flattenChunks=function(chunks){for(var len=0,i=0,l=chunks.length;i<l;i++)len+=chunks[i].length;for(var result=new Uint8Array(len),_i=0,pos=0,_l=chunks.length;_i<_l;_i++){var chunk=chunks[_i];result.set(chunk,pos),pos+=chunk.length}return result},STR_APPLY_UIA_OK=!0;try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(__){STR_APPLY_UIA_OK=!1}for(var _utf8len=new Uint8Array(256),q=0;q<256;q++)_utf8len[q]=252<=q?6:248<=q?5:240<=q?4:224<=q?3:192<=q?2:1;_utf8len[254]=_utf8len[254]=1;var strings_string2buf=function(str){if("function"==typeof TextEncoder&&TextEncoder.prototype.encode)return(new TextEncoder).encode(str);for(var buf,c,c2,i,str_len=str.length,buf_len=0,m_pos=0;m_pos<str_len;m_pos++)55296==(64512&(c=str.charCodeAt(m_pos)))&&m_pos+1<str_len&&56320==(64512&(c2=str.charCodeAt(m_pos+1)))&&(c=65536+(c-55296<<10)+(c2-56320),m_pos++),buf_len+=c<128?1:c<2048?2:c<65536?3:4;for(buf=new Uint8Array(buf_len),m_pos=i=0;i<buf_len;m_pos++)55296==(64512&(c=str.charCodeAt(m_pos)))&&m_pos+1<str_len&&56320==(64512&(c2=str.charCodeAt(m_pos+1)))&&(c=65536+(c-55296<<10)+(c2-56320),m_pos++),c<128?buf[i++]=c:(c<2048?buf[i++]=192|c>>>6:(c<65536?buf[i++]=224|c>>>12:(buf[i++]=240|c>>>18,buf[i++]=128|c>>>12&63),buf[i++]=128|c>>>6&63),buf[i++]=128|63&c);return buf},strings_buf2string=function(buf,max){var len=max||buf.length;if("function"==typeof TextDecoder&&TextDecoder.prototype.decode)return(new TextDecoder).decode(buf.subarray(0,max));for(var utf16buf=new Array(2*len),out=0,i=0;i<len;){var c=buf[i++];if(c<128)utf16buf[out++]=c;else{var c_len=_utf8len[c];if(4<c_len)utf16buf[out++]=65533,i+=c_len-1;else{for(c&=2===c_len?31:3===c_len?15:7;1<c_len&&i<len;)c=c<<6|63&buf[i++],c_len--;1<c_len?utf16buf[out++]=65533:c<65536?utf16buf[out++]=c:(c-=65536,utf16buf[out++]=55296|c>>10&1023,utf16buf[out++]=56320|1023&c)}}}return function(buf,len){if(len<65534&&buf.subarray&&STR_APPLY_UIA_OK)return String.fromCharCode.apply(null,buf.length===len?buf:buf.subarray(0,len));for(var result="",i=0;i<len;i++)result+=String.fromCharCode(buf[i]);return result}(utf16buf,out)},strings_utf8border=function(buf,max){for(var pos=(max=(max=max||buf.length)>buf.length?buf.length:max)-1;0<=pos&&128==(192&buf[pos]);)pos--;return!(pos<0)&&0!==pos&&pos+_utf8len[buf[pos]]>max?pos:max},messages={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"};var zstream=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0};var gzheader=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1},toString=Object.prototype.toString,Z_NO_FLUSH=constants$1.Z_NO_FLUSH,Z_FINISH=constants$1.Z_FINISH,Z_OK=constants$1.Z_OK,Z_STREAM_END=constants$1.Z_STREAM_END,Z_NEED_DICT=constants$1.Z_NEED_DICT,Z_STREAM_ERROR=constants$1.Z_STREAM_ERROR,Z_DATA_ERROR=constants$1.Z_DATA_ERROR,Z_MEM_ERROR=constants$1.Z_MEM_ERROR;function Inflate(options){this.options=common_assign({chunkSize:65536,windowBits:15,to:""},options||{});var opt=this.options,options=(opt.raw&&0<=opt.windowBits&&opt.windowBits<16&&(opt.windowBits=-opt.windowBits,0===opt.windowBits)&&(opt.windowBits=-15),!(0<=opt.windowBits&&opt.windowBits<16)||options&&options.windowBits||(opt.windowBits+=32),15<opt.windowBits&&opt.windowBits<48&&0==(15&opt.windowBits)&&(opt.windowBits|=15),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new zstream,this.strm.avail_out=0,inflate_1$1.inflateInit2(this.strm,opt.windowBits));if(options!==Z_OK)throw new Error(messages[options]);if(this.header=new gzheader,inflate_1$1.inflateGetHeader(this.strm,this.header),opt.dictionary&&("string"==typeof opt.dictionary?opt.dictionary=strings_string2buf(opt.dictionary):"[object ArrayBuffer]"===toString.call(opt.dictionary)&&(opt.dictionary=new Uint8Array(opt.dictionary)),opt.raw)&&(options=inflate_1$1.inflateSetDictionary(this.strm,opt.dictionary))!==Z_OK)throw new Error(messages[options])}function inflate(input,options){options=new Inflate(options);if(options.push(input),options.err)throw options.msg||messages[options.err];return options.result}Inflate.prototype.push=function(data,flush_mode){var status,_flush_mode,strm=this.strm,chunkSize=this.options.chunkSize,dictionary=this.options.dictionary;if(this.ended)return!1;for(_flush_mode=flush_mode===~~flush_mode?flush_mode:!0===flush_mode?Z_FINISH:Z_NO_FLUSH,"[object ArrayBuffer]"===toString.call(data)?strm.input=new Uint8Array(data):strm.input=data,strm.next_in=0,strm.avail_in=strm.input.length;;){for(0===strm.avail_out&&(strm.output=new Uint8Array(chunkSize),strm.next_out=0,strm.avail_out=chunkSize),(status=inflate_1$1.inflate(strm,_flush_mode))===Z_NEED_DICT&&dictionary&&((status=inflate_1$1.inflateSetDictionary(strm,dictionary))===Z_OK?status=inflate_1$1.inflate(strm,_flush_mode):status===Z_DATA_ERROR&&(status=Z_NEED_DICT));0<strm.avail_in&&status===Z_STREAM_END&&0<strm.state.wrap&&0!==data[strm.next_in];)inflate_1$1.inflateReset(strm),status=inflate_1$1.inflate(strm,_flush_mode);switch(status){case Z_STREAM_ERROR:case Z_DATA_ERROR:case Z_NEED_DICT:case Z_MEM_ERROR:return this.onEnd(status),!(this.ended=!0)}var next_out_utf8,tail,utf8str,last_avail_out=strm.avail_out;if(!strm.next_out||0!==strm.avail_out&&status!==Z_STREAM_END||("string"===this.options.to?(next_out_utf8=strings_utf8border(strm.output,strm.next_out),tail=strm.next_out-next_out_utf8,utf8str=strings_buf2string(strm.output,next_out_utf8),strm.next_out=tail,strm.avail_out=chunkSize-tail,tail&&strm.output.set(strm.output.subarray(next_out_utf8,next_out_utf8+tail),0),this.onData(utf8str)):this.onData(strm.output.length===strm.next_out?strm.output:strm.output.subarray(0,strm.next_out))),status!==Z_OK||0!==last_avail_out){if(status===Z_STREAM_END)return status=inflate_1$1.inflateEnd(this.strm),this.onEnd(status),this.ended=!0;if(0===strm.avail_in)break}}return!0},Inflate.prototype.onData=function(chunk){this.chunks.push(chunk)},Inflate.prototype.onEnd=function(status){status===Z_OK&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=common_flattenChunks(this.chunks)),this.chunks=[],this.err=status,this.msg=this.strm.msg};function inflateRaw_1(input,options){return(options=options||{}).raw=!0,inflate(input,options)}var inflate_2=inflate,ungzip=inflate,inflate_1={Inflate:Inflate,inflate:inflate_2,inflateRaw:inflateRaw_1,ungzip:ungzip,constants:constants$1};return exports.Inflate=Inflate,exports.constants=constants$1,exports.default=inflate_1,exports.inflate=inflate_2,exports.inflateRaw=inflateRaw_1,exports.ungzip=ungzip,exports}void 0!==Module&&(Module.TA=TA);var browserFix=browserFix||{},wasmString;function inflateBase64(base64){var binaryString=function(string){var b64="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",string=String(string).replace(/[\t\n\f\r ]+/g,"");string+="==".slice(2-(3&string.length));for(var bitmap,r1,r2,result="",i=0;i<string.length;)bitmap=b64.indexOf(string.charAt(i++))<<18|b64.indexOf(string.charAt(i++))<<12|(r1=b64.indexOf(string.charAt(i++)))<<6|(r2=b64.indexOf(string.charAt(i++))),result+=64===r1?String.fromCharCode(bitmap>>16&255):64===r2?String.fromCharCode(bitmap>>16&255,bitmap>>8&255):String.fromCharCode(bitmap>>16&255,bitmap>>8&255,255&bitmap);return result}(base64),length=binaryString.length,bytes=new Uint8Array(length);for(let i=0;i<length;i++)bytes[i]=binaryString.charCodeAt(i);return init_pako().inflate(bytes)}browserFix.sliceTypedArray=function(array,sliceBegin,sliceEnd){var bpe=array.BYTES_PER_ELEMENT,boff=array.byteOffset,len=array.length;return(sliceBegin=0|sliceBegin||0)<0&&(sliceBegin+=len),(sliceEnd=void 0===sliceEnd?len:0|sliceEnd)<0&&(sliceEnd+=len),new array.constructor(array.buffer.slice(boff+bpe*sliceBegin,boff+bpe*sliceEnd))},void 0===Uint8Array.prototype.slice&&(console.warn("The TypedArray.slice method is not supported in this browser. This may impair performance. "),Uint16Array.prototype.slice=function(begin,end){return browserFix.sliceTypedArray(this,begin,end)},Int16Array.prototype.slice=function(begin,end){return browserFix.sliceTypedArray(this,begin,end)},Uint8Array.prototype.slice=function(begin,end){return browserFix.sliceTypedArray(this,begin,end)},Int8Array.prototype.slice=function(begin,end){return browserFix.sliceTypedArray(this,begin,end)}),void 0!==Module&&(wasmString="eNrsvQucXUWVL1yP/Tz7nO4NCdKko+xzCEMCCUTkSyA4kh1NmoAYZuRmGL/5vjHz0nta7xCIjHMndDcSQiA8IoKGhxoUNGrQiCgRUFrkEeVhVNCgqFEeoqBGiIqA8q3/WrX32afTHUC94/3dbzo5Z9fZu3bVqqpVq1atV6llp71dK6X0+4N/eLMZHlZv1sN6mL7Um/1h/NEPO4z7pkzTxXOPguEiE98pXlJvjoaHy0dhJ+nyqzcr+o96VuqV5XO8PUR/rpQheq7osRmmO3Z4aFgPuXqHkGEILxA4KxlcylcbLv8UZRwaKsBYWTZjpTSjKy89qQ8Pd/2mylC54bKT7mcCLD8PyhTDu1ISK1cKXMMMOmpciaTnoDAr0WS7km9GHYCtNMxws30CvujVlVREXIWgd7j7TxEgK90zLfWhuJVFfzNADDanBFbOwd0BcOJKYY0xhaMneUiG5CdGCO0YEjwBzHSDmuTuD59B3yhwaOVKBx3XjIwMUyy/O93hsOoMXKgmFHcGj/QQdwjeDIYdZnA7hgpccX200l3PKHCMshZj5aDGPb7wMKFbK91TDKsk/SLByLWSu1KZX+vpepn+BxXT9z8qj77/Se1F3/+s+un7X9Qx9P0W5dP3W5Wh7//O323OOcjpt6kGfb9d1ej7f/Cdf+U7p6j59L2cc56qNH2fpnroewXfeYfqpe/TVUjf/6Ym0/c7abYu0//OT/+nsvSdc3oBw/NavvM6zr+QS1vETwf4zrF8ZzHDeRx/H89PX89lnsCwvYHTy4wePXBkxLNra+fWjPZ04Cvf93oCpVWgvLBH49oTeH7N97Xn7+MH2lOURdd6jRfurZXe29M68Lye3KOsPv3QXhAv8Hwbq6k1RcV5gfa19vf2VaBr9K6XpL4Xei83Kk79YMY+yihrQ+15B+ueKNYNo5Mk8nWoXrG/0YYA8WOlY6rptUoFYeDHvXSXgFApfXl66iFI+zWl9wlSz/foUaYzyqJ0+DpcwmCm56l4VpKqhVZRDvqndUyQ9VBurWYqaomnvTRND1U13zvMoBFa7RXsVVde3QuV9qkweodao41HP6g+xR2h/EDJQ9OIPd/3VW1f6kRKEaxNVTNBs0aEt4YSQxNoaqsxRi3aWw34wezZsQZVjsN9TExXG1jbY6mQ1gHHtlqvfKV/+OEqptxx5C1+1XGAKdDJ8erlB7z8gNefUNd1+k9f9SPqhGZ+3BMbzxi/dpii1vpqX0MDQd1DXz51orZJQv/pgi6l/0Hwf/XTfwJgmkKmaUo1ao2Gok+w115REKsZb9g3jMJ9Qy80vh8s8VELyqaxpNYbT6FYg6YTYHEfjXJw4t7Gj3XdHqL/av+/jveeurdOvR7uKS8gPOrtJcQy1Ok1QObTe4YgfSONUS2mOpR/Evrzvy39G2W9wD+Z3jP+36o3Bbr8O7RZr0+b1dPb22vws2EajVqtFpg4joOA+5b/tPxTRaLyz6DHsRRScq626BdjLfAq8I1clR+GYYByehqNI6MDI3NgvW74fxLhj79NZP/ioMmT7CRr7V9MPogT0W5/QWzxH4UCf+RiXmZ0bPpoFtGIBsZ91Bz/ZYHuoc4yhEEa/2hedZLV3+H/Hfzdfvb/+X//PrQH+a/y3rx/4PvLvIOn+NS6XoUP/evFXFTG0sAQqtKc2c/3jnqFqilv3vTpRysZBsqcHVG3e2nTqzwbBPsFSUDg0sf3qWXoISufVxcJ98+W6TJZPpc/pYsHceelv+y8pzp3X9N5fUpZtp2iy9qULmtWnepUUZtny+fKva06YFlXeKc+LeC5OrtfpulL5PpXYdBjhnU+ctPtJqGrSsKteppeorb5+kT1+1D/lTpI/7U6Wr+RSNNJ6oZI/zf1uUgvVZ+N9N+o6yN9svpMpP9WXRfpN6lPR/rv1e1WT1ObI7NsmfpUZP5hmfpkZP5xmbo2Mv+0TG2KzD8vU5+IzL8sUx+PzFuWqY9F5q3L1Dd889+Xqa/7pr1MfTQyg8vUN33zNnorNG+nt0LzP5apj0TmX5epayJzyjJ1dWSWL1PbfXPqMvXhyJy2TH0oMiuWqasi845lakNkTl+mPhjFV/RqletkV/j3vw036h/Zd0Ub9W/Cz+st+gZ9ri/XX7vfvwo/p99nLtFr3P17zT1mV9hJP+WeF+89WXn2S/dsZ1i8/Qt35+eVXD9z954Iz/F/7j8ePu7/wv+p/xP/p+Fj/k/C7wQ/Ch4L1wf3B2f7d9LntuD84Mfh0/4NwaeCR8Obg9HgHP/H/g/97/iPhJ+oPRx+qPa+2nfin8cPhQ/Fv46/Ft8W/yj8fPzJ+Ifhh+Md4fr4B+EF8Sp/Y/T98APRldH3wjuiK6LLogfD9dF7o++G74qfji6IvhO+J7o4eiC8JNoevjtaF307vDD6Vnh+dH+4NlrlnxfdF54bfTNcE50TfSP8VO3r4df1Nv01fXl0id4W3qu/Ft6j7w3v1veEd+m73bP30bO76Nkz9Oyr9Owr9Gyre/Z+enYnPbuDnt1Oz26jZ192z77gX6LP9O/VI/49+lZ69rx3l/6Se3YpvTdK791C732Rnn2B3rvZPbuInt1Ez56mZzfSs8/Tsy3jlHmDK/Nz7tlqeu+z9N719N5n6Nl19N4T/nn+BrOFPhvM2dFv7KrorOhB/SH7Of2I97D3kDcwcFX4Q29DeLs5MxqJng9/F37Q3xgufS58lpBrKd76dLiZ7i39VPjJcOnvvE+EHw8/Fn40/Eh4Tbj06vBD4Qfp1dvMhXaH9wPvYrPWPuh91zvXfiDsVPB+quBKynXFODlX2UvD94aXhJeF68P3hY96F1l8zrL3ee8JLw7v0BfZD4cD7w7vNuvCD9mLwgvDC8LzKbU23OqdF54b3umtCc8JV4dnU2oV3TsrfFd4ZnjQ3eZzwYXe2uDc4Jzg7OCs4Mzgef93/rP+b/1f+7v8J/2d/jpvS/DZ4AJvY/DR4CPBNcHVwY+9DwcfCq4K3uN9MPhA8P7gyuCKYODy4LLgLO99waXBJcF7gncHFwXv8t4bXB5u8S8O1gUXBtRFS68PPhNcF3w62Bx8Mrg22EQFfSL4ePCxYOn53vneeeYu+rchuMssPddbQz8HBs7xPj3mx2rvbP6xauwPKn4kfD74Per5XfBc8Gyw9Jngt8HTwW+CG70bvV8Hvwp2BU8FTwZLfxnsDH4R/Dy4zrvO+1nwRPB48NPgJ8HSx4IfB48GjwQPBw8FPwx2BEt/EHw/+F7wYPDd4IFge/BtFHy9+VZwX/DN4BvB14NtwQXBmmBV8Bv/KX8keM7nx18L7g3uCe4O7gq+GpwXrA7eFfzK/6X/e/8Z/xdmxPtKgO+twdLPmM+Y92n8+4g38CX9JT3OnevMde7ONRPeuSO4PVj65eDWYOmXgluCpV8MvhAsvcS7KficpsuNdNmof+Y/Yh+xBNzd5m7zqL/0Ef8B/3v+w/7S7/rf9x/ylz7o/8D/kb90h7/0W/7S+/2l3/YfNr+x99H3w+aTtYFrawObagMfr32strH20dpHatfUrq59xf9wbat/FX021AY+WBv4QO39tSspU/yxeGM88NH4I/F58bnxmviceHV8drwqPis+Mx6Jn49+H/0u+pR+jj7PRgPPRL+Nfh19Qf+GPr+iW7vo8xR9nqTPL6Od0S+in0c/i642T0QD34sejL4bfSd6IBrYHg18mzJ8Kxq4Jxq4m1L3R/dF34y+EX092hZ9Lbo3urT2BX1J7T21i2t3+u+ubbXrahfVLqxdUDu/trZ2HnH/a2p32nNqq2tn1+6wq2pn1d5F1zMp70jth+b5+Pfx7+Ln4mfjO/xn4tv938bXm6fjO+1v4tv8X8W74qfo3pPxl/1f0mdnfKv/C8r3s/iJ+PH4p/FP4sfiH9O9R+NH4ofjH5ofxV/yfxiP+jvo84P4+/H34gfj78YPxNvjO+y342/F98f3xd+ksr9BZX+d8m+L743vie+O74q/Gn8l3hrfSe/fEd8efzm+Nf5SPBrfEn8x/kJ8c3xTfGO8hfLfEH8u/my81V5Pn88QnNfFA5+ON8efiq+NN8UDn4gHromvjj8UD1wVD7w7/oK+kD7r6HMRfc6PB9bGA3dFX42+Eg1sjQbujG6PbovuMl+m7rw1+lI0SiNySzRwRe3y2ntrA5fV1tc2xB+MPxC/P74yviK+PL4sfl/83vjS+JL4PfHF8Y3RwOfphS308uPRT6PHoh9Hj0aPRA9HX/EfouH7EX1+SJ8d9PlB9P3oi9EXop9EAzdHN0W1T75/9rm1XyU6HDbzM7WwoTKVR4MtQxdvcLpRLZ2/c3lLtZs+Pde5Xk45dG6XL2zozGSGc1D2fM0an9KL6S49bzeVmW/m5+fzzcwMeHj3eX0CX+3pTQ9v1lsal6hlF3nz86fP8fGh/PlQ5v3b8jlG1f0ks5meY+q0zbJzTFT3ErzR1wykbioBRUshXRktZcwnt1seALQLJVNKqQa9mKftppfY+ZnXDDNLLSwzcuPwNNOcvaGSLMwVYDFJRsB5LTQ+twMNk4+s8TM8ynx6aYgAplZRt+lTkZJHvUmumjrJAupYwzBMbdncrMg3nudLnZmhxmcegKe6Gzp/jvrhuaIfrPQD1R3kaT45CwgqeqO/7fLTKCTU5GCO6XMNRA+jC1LpuT7usMlouJIHkzsPMn8J3XWt0ssZRvlHDTLLqdfydTKC/iJJZ4aqzVet8fHBA9VucRd0Gm7cqA80AvQQdx5u5a4/zq+UeH5RIjKOTFQipduuNzNgI2VpqrH45As++S8Zn3zBJ9+VQPjkcHmKK2wsXvndeOWXeOX/wXg1Dv6UjaYqu3DIHweH/JeMQ/74OORPgEP+xDi0G8AVDFDlHKGhU27AFA1hvmGN325qM+yGiBpEhINGckVLMd7RbSrRnsoQ1gEgjUWCYQfCRKgNo2JkcAzqiAi59m9a1PP886HU9BegZqe/hUjU6YTgoF8rBvPXtJsgD2jI1MwsUHPR0KJDCSieAa7/Wh4BZle0QoaK7lE3hwIVY65A0AcIVb4fFaNPH8wJ8Hz/gf4VBAyBTYNHKKExUh5j7yLCFZu//PSmRn7koqHLveXtVkg4whSV8QMV0GzPPNfTrsVoP+rzgJ2uHzzpFQOU6pNXil5J8vU0udbziOREqlU+nKl+Aj1J5mg9jH7HGJ7QD5pNgKr06BZwaPv13H4NZNirR1GNSboXgaWTTxvtD6Phg60gt+9o0dgDFB8XGslBuse9T+3N7GDLR54w8xbTPeqQzE/nTOGH1HAqhOaBXdHmiWc5wwyr5lp0YdRGB9IF6wQhU5IAJQjXejkBnE3nZB5el5tAXMmR2fQgapViVMEIU7rpJzR9glwd22AUeZ5Ayc07Wuh++hzfTz+fBuos6Sd0HKE/A/IISAgBvHR6y2LAUbPXFhwEXN6wgEKrJhCboFXpIUSi/MwmDFb6SpW8WxOuO9LKnWUWZmqWwuqqFy3n5WkhaO6i5VhWkbSUNJKMKAm0jmjGprMyENGLD8rf86r8e1fp/Lr9UqWS/Pq/wI3vd258m3P8oHPjFwfixo7yxoinLY1iPuIt4W6jetMDMp6oNJOb1vDN07DUewy2pDLVNMA+U0nThYaOxpJaNE+B1BEHQOXRhTiDglewizGEVJLNVy6neTVK3ALmj5fPb7f84xtKyiAccvOKUERoIuY+ozdSdTfviVLJ9KDUZJAkTvUJ/lNqKs9upLI5JpPUtDlmmqSmzzHTJTVzjpkpqdlzzGxJHTHHHCGpI+eYIyX16jnm1dSy+YPcsvlgkfwTGCmpCUsaugt6ms7SAx71AKE+5UNH2ZxnQdFt+D3Y8o6fuCc5pecpLSkzTxlJ2XnKjq2lgMYu5qk0wXhk1k2l5FOejocPUHk62LLTVIGd9E4P5LYgaFSzyuuE+UwlMRSoS2YBCE7CyNwEOVO8SLYULXG2FQiyZ6ZlmbkArliGsqm4mbzQo66kZUZpRrb8/mYkFIO6tb/p2/lmfocZadGTycjeT6RA8wshkj7IyeJW3N8yVAMXkBLYaTujx0Q/08NbtYW8mhF+GSzetVy9ocFdrTF8hrtcCJdueGAQQioHL2osi3FDg0fQeMsy3J4QZ4WuN0k+mzpHMykG4lFqhuH1xGOiQ7jNJEjnWTt9yxR6Lj/loXELMK1q1E0Mg8c00uMJgJWDakIPElF+K92nZERjOAffgi2QFc5TXhZIUQG/g3W+PQ1UPWsTrUjTV2OlydRMojcqj08giqWw3K0/02C18fMnD0sweja/5EYsSfV2+i8E8qdpWNN/oMT2LxBlSrVK7oppm0AIk1UQpkPUVIupFdEz5naiAfr6vV6em4HlmTlVmBeNFSgkRmB5rmnGC95MzSw6ZLKwnYsYVya30QG8TVCDufeO9KtulGTHwQ9bZhGmHSgKTXxahugyVVYZWlDT11IvuKWZy9PpB03CbFixnpSPsIEoa9BcDU+ulr9IyBL1JBiDl1CRcPseRhQMoZTqNcCHKbCIvGfRsjsCW0hY6PG8JJxuudXOguvypFLe6PCaGMgySdM2fW3TF7Tow6+DCQg3HD7NYurqHigmuJyoq+M8dDKjn0fwdLrQVFpmXqgLPQDpypZitewHsSaC42GYir7ODDUMCyIXVjS+6OdIVv//zH6Oin5maJpMEbDkpD8AU6IdneOp6hV5XM/SoqYHgORUTUDvLSTAsXQHksTSHUoSS3dEs9PQut09mgyD57ZcWWWQXc+1mPHBhG75C5mSo1Yu2S/qiySJ+mJJor6aq8+NUCIEBd0mbZ2cHpR0zd2wJyJ6H9CfDRI3B4quqFt3R5jhhcSIyH6RutpUoU2fMUWNyEFUFagsC3h6EHYfUsxMYkVAgjkTPdDV8rEXwQTAW5rA5EfEtxHPeBAGPSOy1kvN+FPwP7/Wxgzroeoy4xgz7mxbYcws97aVJHrbkyR62+cVE2tIZnmtzQwuaoaNmtgUETsbzbUR+gYXZv60Y/5kQE0HgWwHgbwOAvngynj4/hTt3uqZYNgOObaYLwp7LZ4jNO48QMf2g4DMWtQK5tFM4q7x0C8JpjrW3/4sIHYjZ34FUzCzRClzZvMGZU/g8Z6Ctv1NWgubERMt5tVbWGFD4vJb8YLaUKu2shWB34+y2knXZvGCbE0rWqCGVmYRPaXf4NR7z6I0PaGs+KZH7i79IL7BA2PjZT4jH73818zQRumPtSCQle2GSRycTGkg5CIgKDfLrIywmo45GtMZWdCmxTOfDUHXV9UJ3hAGaUU+SgsoFeEvGE4IsNqbGlo4BLeQQAwBJiq9fzc4ACRL1KITmQcGVEXfNUP0WaW/fOobn/ur7Kr4pJZ/bafl4RLMG1k+Jmp7OUpF671K63meegVzmNkmSwuo7KAy9JSDh36x4x+/hU2N8I+esANUcMIMLm2qwNzlIxpr/zwwTHLjebV8niy8Jv8FNlvHU/0etjaQGyRLvGEWz+WnLKciLLgFXJJF/X5eSwig9LvMbdWnAGgWzwg3innFezbaYOM5b/DC5afKPq3z9NRSeOCxLIiZ4nSIQEiZtqQEXazyW6anN/oqObPYtoHvddukU2lDw9w+M7Ga5RymYMWZLURLPKCKPV44ckhYrLDWECfhwiuw48sVLngJglRiOI3Q7EEID5OzQmHSaY9kpiknT2BGfHZb9jWExRlIC5EQ3srkqyK3ueH9zAI91/bJRXFuM32uTbm7iU826TWmYOHyQ9MzNa07wwOeiABr7Zagj3DqjvXux9qkjmP4d/J+ueFx9mQJ3+s9FYhj0+nEnGBnUPQ79lG+22LR/opxIKMdxtHcFqby+Wwi+3mm2znvW5gJns2PMzNLHd0S1t/24/4REEX1p6+ZkpmZ6misKcx+zJY1hTl2Ja8qCGTS92h0tUxokU4oXmGIQhuhhMU+061IXrFDCUZbEerV2FPwBI/BcPe3ahBQhCIxymoLeWphdPNDiTHl0aU+K2aUSLFkpvMjX9JhVsMU1oO5GWyGLAoaPq1NSAaWhigB2D1mOqL8UJajZ1FnT4c+o6tfTFa34oe5XcJrM7/oFS96XS/SxnLiR2biR3aiR8wwl9tLUJ1YaJDDn6BJXYuui0ZpD8AD2cIODh1NyYDm+mLwF0RtIVuifljEiBi6EWPJjts4M0lp8hz2BFuYxcCUTn+qhb7MPloTzi3YvGP0zLNWn79+9lwLXIqBcYIZeVxFH+XQJ+HtfUEM0o/RxudAR73C0xkO2b6CpgiVSdeh7uQYrR05xExlLI9ECAep+OpXQdC99RawyPm9B9LMe87L774B8tu9elT6Typ5zDC1ASIykrAgpuVBnmgguDyhlNMcwlIaFs5AUCPvMKPMogTLXFspr7HcNU0Lwr+wAWHX7oKBQd7EY96CvDGFBhvewBbWLhfmfCE4EUemQBnoxbYryL2FrrMn8DwoiGCbsxVCnQpJNC6TLjMVMg9UbypF2bFiFYgSIDwcS2Vd5hImLQLEso0t41auySqP0lcTqlyg85FbKAd2t48aGb9tqtzeusWP96BX6cWCIsWmVG5YUFGMybuMbEzczzOx7xLeChcINBeMXPL4gxYrM9/J5PmBsgk+UjbBs+XmQsmCHd9sJiLAOEgC0hnY8M1S9Xnq1UVl4Ivpa/5gegtvBmez0JYl9EcIG00353duvs7x1lXxKAujsvaAzLPptLDQ17R0Bs+pWWomsYF8u6W4FAVBmnJFq85Nr7yZdm5OdjepZ2mNTR4LdOKkCOE0YUCtu0Tc1y2+eK0g73tbuxlDaAvhu27y5I9EnI4aWPxDNAQkl7ZyTvuD/QnvLlr+YJ7xbWSwA0yT+9CdMWgUCqxshDJDvIfnA20GMu/UhSykN5RcnggbV8jCZEtY2SMqmenBQieNiAAby7xCMDZR+topADwUAe7CKZSkHE6YQRwMY2fabtaz0HEbvEsImJVEMQEoq9cs9CDMmTJDVojOEkFUb3fRmcHedzKy9xese6uGJNZmf3Gr0c8yJy4g5Z19Ro9rmZce3urh7U8pOuspRWfGic606LOoHSI6q1E5eNFAdNYQ0ZlxojMeUcw/mcSeiM5Y4BCJzNY60ZkVhLSCnhAJZHXqwpKgOsmaU79Q5wVOeAbiF2TMEHrMJiV4hJ3kW+l+MEZ4ppuGhWdTRdHSx+OTHjwli4AjkeDIePs129mveZ39mg+mmlGsoXfbc0HexgwNEAjse3qFZkYj5C0ti/TT9NUtlV9rGI78E3unx6f/QC+Uwrc/YO9XU/lHvqaYk713ukw6Wpxq3aK7sf+ozl3Q0xWauSCHSDVps+qK2Pt+KHROb6nTWRPuOMXh06BeUyzuX0EPoN5rgV5vpIQTqkXM9LJmL8hpByVqSSiyMhYe8y4kSljjI4o+lEVfrF7EAuHEEqJwrPeC5RClcSs8AT0PYHJacPEWocbgqVhDVyx/KyBdQZ3LUEFjWUCldoNK/9vyVlDC5TRuApei6qxTdfrAEC6VqMtgyyt1oLot0tuQZ3+p6HQa0aYxw2DVwKCdvqJlS1WnzYKxqk5bqDrtGFWnFWi4l1iDHjkNOtdM3VKoLhNIU5K3FppNR3BYB+kPYv1sCr1iWqpYTg4RlWKFsCpzYvnBKrOYGGBsJwFJPwQeTJCcQUZcGGR4VQW6ERWlJypKzOd6jzPMYLqhSsMMBckSU0HeKmloA6hby4zMiOAppnaK37QSiAK9keTDxAHTpm34eDZfSQj1CPRmoQNvRQshquBGOywfxs98xNAKPiXfn5KyFYXOv9QZK9EZK6czTohnrfQk6Dtx50AUXOi9/WhURfsbivbXFL1bdCQRJ2gUQTYD2ADk2J7rpmJ2TTo/wM6COuLlp0MhzAvJon56GPTLDpFKhdiRVaG0SDEMHuF8CPymxhPOR8ulN1V15KFJUMU+tAMRlEW8nbSZG1wPCdboUtW0ImpW605OuMtFYok9nTPiGER7PCAAdi7YeLNUsESAqo5a1NH1OhXSjQBeiQBeBQGCDAS3igCCHg5fgACBIEBSIQTeCV5hdgR9NpZE7CRS2bzz9NflZPWcCUQ5s2Vz4ZXT3OsmORB3sS0GzzbtDFtkIZL5SMiYFbYxLUMcOdJYLwkIZF+3xncmNS2Bxqk6S5BKElMU55DrMGK4CWu3rcW7VOx2TgD5HlzrLxiGgvs+SoxswG7bw0/KmtXyOkQp+faP3/9x/zQA8PBaZ5FzfZEYyWhnT3tHwh7ikAl5WDFWzzev9Z1GKt8oyZCoG219idY2qF/jxY0GsU8oCOyVJ2piZzzh2oiXt6z1m2DMPdlVhxgJ2UYTqTzeadUiQa9cpb/RNOrDi7DKNgO0ifsKzDuR4+W86zSDoMltRvfl7WYAQXOwpGELkFUHZJpooNTeCQ10brS4QRxJgDqgDiAGhZiWAOVRs/m2Kfd2Xht7eMPzBvDAWGB2OwtOcMpaYmBkDDCHsmCwzSvO8pahYiS/obqBxU0j1mjDA8Qzcb9fzy/mHkg+kXt6A3iFC5CcXvalTt5unSAXUA8/n96mnwla51qI9vEwbpKfCjhHaTa6STojYSsjUei5RJaBhprOGKBhaxyG5iyCOaF/ocxoRnRGyPxmqgHLJMoUCy4YmQwjcSUlBE3x6zaHZpYNCMAaYO3NHIfgyaZuE255Mos0iHfG/DmmTpBPh8nKO6kD8nA5TA09N48cRyCmOF7FCCmfjql6CYGxowCDGdGMtpPQUdB+kdtbzyMI30HyAhiQcKGWqrJclZLCq8ZuAXMPg2KfpjsWb5kdt1I23PLqNVxMPSr6NTPHV/tT8ETL6Mj0Af3jMRrw5hcjI2JBYkMBNgh5OZzWDSdL3wR1oWYqpxaREZWwBNaUslLXZMI217OQyhe0R9NNLTdhFxe2aSMFHXUWFFaA/gRWgH7RJ2itM/QLCkM/fwJDP79iQuY7m7dIWHeWRkDXFmBglhOXYZ0RWSDmfgGrbHYz96PXThf2MkwKxkm4KejrAqxXkWwJZL2ScnSF0YqYNJTLD1v6Bc7Sz2MFe7FOwd6hs07ZMesUW/p5uUPCCVA6Gg+loz2jNGsHDso8Hqf8MCoxE2EEMeg675dxHF3ru00V4xenI9xlJhu17j6RixnLe+WmTNywXJJMKeIWq5ZSoinLpFgxMrsI0YwuWHcR/sjQmZItVh37P50zv09MsSmZYrrDTHFhMkJMsRYpYCRmiHWRL9RFrAGjuHx/JqGFAaAhZs6Mx8yxYUXWsT1IxSKiYwBYNf+j/URQMf9znDpvNEXQuB/KZc5PCefn5PReoZFmdsswnYXdn8dwNIVwwe6PMctjlobtLp2Zah9kPdI+64z+tDBUtmOSKhvlvsKw1Tqjv1UllwE9HfBO/cFcCBV329m0/M1hMzpMqpz1u5EYdQSwSNXdFqmBWKRKyWMtUnVpkRqxRSoEJvRGf9vl5w2IyVguEAgj6swVUkGmPp7Ek6EvdoLWyeUDlcXAz4AuLEKBrSfIh6DmOMRmz4apZlzDVDOeYaovuiUfw+DLaPjC8+qXZJnqi2WqP65laoGYRuxSvRIxaUI6xPQdYk5skMpGZiVidgxSTWGQykZly3ksU5HaeCg2TaRhfZlfNNPvRkxfEJO7whfE7OoKEYM1MfiQ7AsCeUCgcgKKtYYoyLoQiLBlKFO0QY8c9oSMPRCmUfax2BOibq8QRPLmI5U1sI9tZ3mjq+TB5OIBWyf2nsC4azE1VHUvIEunW+FYQFBMFE+2FrbCEYggqliv7EREz46RBGhn9DyG6Bkhep2NVLlOOaJnS9yyhFt2IqJnhOiZcYke1pxuahdkUcXYWQTcE1E7H/qmEqlsSe2CDrULOtTOF2pnGKnEiHp3E2dd2T7qMSbOFcPvhDXIvBenRsQVX4sxSGUEqZjV9BxSJYJUDqViRqm4dLOQrIxStOUp3SwUY4hDKa/jZsEo5RUo5XWjlBmLUmZ3lDIlShnk9UqUgp5LUKpbtKSK3S5oViFYooErEcp3C1YFoYJSZF2wRmK9CU5AGDduN+9yrfCo3L8wnxTLwqQHo79NtdOj8Z38Vmvbrfuap3pF0lJozloeIKoBm50hQAGQ06JBCSX8awLl0iLRdlGb6F/6hOmU5LS3LHlJIFqf6BEsvTJsdKAKKg0SxjdHUKJYF7URWwfQaxgfM0v1sloKWsaejG/0sEUu90XypU7T/WmMeCUww2OaBxuGljcWWpE6OGio6aznAxUbr1kZ22FY0TENsTCOoNTpA9ifEoC9QO82NB4A2skzsDYMMkkCs8CWfZ+EeVYxmAnrMGgHerFODoVPgMey6LuvE+OK/OoisaVIbPwM0S1IpZ80zoqK9W8oxinuoUnUg/KTGLvFxUMjFyZ87jGtcGXGsMxo2Tq6uB/zfd7ys2qc9Y9sR3rmu1ZFbxOm2XJD2bockmi8zdNX3hYmUS4em8DIY5PXy4z7lRkdQ+U8XdKCvaJBL1+bXKb6ytTUoihAvzzvO7XFOsoM5eprF5w5MjKSDrHVJjSZvNHzYZ/Bl1QukVwUmw2zcihDGfsf77SX/1Hqma0gXF4T1fCeTG6c5hh7I0YTdtexFTTJayhosHyn2P47ZLGC7T/RjJall0Zp4PbH29FppwF0th9/dkO59Z7xh82QaCqLqc1sScHYyCKqeSIN8H3oY51ZkAflqY9OqEPJxM9sepPf1PJ+JO8zw8Yvj/9mXXyytORgRhfKVB9mhvUxOlxeB0DcFYrEMAVsrZnOKB4RXajTqwneDcTYMsBsCNhqplvl3YrYki8QC3TW88Z8J1zE9gABJLYR1BnsB7SiFcIYrlXLQmK9kUr+Cmt8LUtOYukFAQM7NaE7LDXT6eexPnnon7HaaCWuNdyolP3P0IpZairlT8puUdKGQslcL0rHptNK6Wb80r2JSjddpatK6Sgb6rrktlTv5WZgz24abCV4XyMkHjsnbNWQl30iCnzWkhSnH1vgsx1XP1eDYTcsdq3nB2GcsFLaE6U0zC6J9vXOEXMBjAb7Xey1qBHa+QJynUDuoUlcl/08lvRmMKaOXnhFFQbwbDQMWtHxvoj7RfhCmANFdJiFoy0YVkGfDPIVLW6l/a1QhCZAQ7rfYLMAMVqg9+MsTA9v7S3uGZHTMe9dcc+IWMeMVjRDBsqKpwVtVxTvHdCBspXp2HgvakZs4x058/6wstcR8w/ZsDrAoRIXwON+MTsYoytvcJLg62+loiBzWvJGf9G0uD9LqSWx27QuFmSP2SItETDrbhsPuVbd8VzUu5BOyWZOMsmWCndd0Wx82gwzH8Y7L6DVT5CMGAI0xmcxewdeegwz6sNbDdHqFz3eqGj1I6fVtx2tfpxkcInxC60+HGJCp9UPnC7fdpT7ELTGWYOHlh1oUspvnTkeb/nYIWj8sRtoxjx28e5jp4qxM7xiCgbs3gdxpw8I3zrYJ0a8nc6gIWtUhuz4PQwZhsnrjBo7AO8+ZPZ/oyHzxxky64bM7D5kZdssSnTNNrLVMEnLihPocK58cXYCuTCYRGLJz5AFzoTSsCDVbd6M6xIsQLMTZmZYcJouhCNUnT35Sl8oW/hCGZ7ibL3Deyy/IGUQOHlsfZW+VXSNpTkHU+weYe/qzKeATHIDxXKtRKHCK6RWYl1tABrVZi2Tvtgr060a+waFjrDKyuH8ucSdTUirWdRgXS2bwx7bqLOPyvSWEXmAES4QUrVTlrO7qPSkFGEHChe9dCF3aOFU46wn+X2vHjAMEDGXne05OxklPiORk2l7FROx2UABET0sv5aWJPnp+DQgc+eHrf4wSZ51t9i6FvsOeMenDLZqaDHlyWrSYmlqrS3ObsOn0d6V5kAN8u1e1lHXut0aYZNnCtO8GpQ+tay3sF0Nl4zxX9yzFySnPHjBccqfp3xJBfNUIKlwngplD2sKh2K/2tHcfzNsChbcw0rXN0+xKFEsP3rcRulP43gLf2B86sw9Ewa8MX1N4hGHkryz255eFHXF/rFlF7ttoBhhFIJ2w9brzNOz2Mmrbv14D8Z+BdgAYyi7uXoxe0/eG5SeoPFY6yDxCLUIcFfYMYlLqLPPKlgq8QfVzheckdxRSvjvsd7XMH1jlwVqizDWQel56mUhIZbY8HniZWTx6gmMdDX2s67l3oo2Lws2fQtmjO14l9nSu6yrXphXi/G/hpcEtKhQfUyF8QV3LeMubHiItXXk+Ph+6pmdzhcc9nFeUQCzRStoTlrUEwKclnFgRZk8BeobNrctgYwAJPFc1X7hrQSILjtk0LbS8pYufS3EsB1PKrjJI3+CIBdCVgLgJbGtkJB7ojKYzP3WhF1fKJIdNroJxLQtgE/nB7VTeLHYE+xswOwsEQFGyfks5Q2XOKdsaZkjVFZ8+Wzhh++7adPly67cLg2/Ozs91dnpKbdLM46cxzKv2HtiRcdVNX4hV1VFb0Icm995I+UunFVVt7Pqn2KqnvMyGw3bIb2ScHWH4mkpdPFkuZxI/UQT4sRxJgQTlpPRQVutmBXcbQuyD2llS7ohvQMs+zbVpvX6dsRGOHhK4c9dLAWyrfBkz0lrDBOpnIgbbmbs+c2SOFpWOdNsAAVndc9VBONiD57JR/I2Jd9JO38vnz8IrTn11VGEczss4SqqxheAkHn/mGa7q6idPqvh0jZqWaKePxa+fRMVaKMFj4VDKxeMrvrLITzeZs6gCUyJzfYM3Bx5EwtzanPpBvXgBs9JB/MRr52+Be4h+XbbTh/3uNPsdiPXbfBuIdK+zXC/2tyH/ILlFlDQf/M2xesCRCxfu01NV2oOrxE0C1ACuuBprA/mCLPdzrU7XamPuWc7cKUS+Tf109WcN99miChsMOJPs8Gwz0w+QvTU5H3top9ylvhycRtdsRscsBsE2CBnyIL8/kcv/XAAwILcmyda/jlmo4Nhq4NvF8E36gra4p5tdvBtcfDtEm+fDYBvpxb4djISWBiqhuIvxQBOEV3gdCnwaS3XnVog3Km7Ibzj4Us/sRuEeAllrHcQPk0QrnMQrnEQjjgI1zgIL5HAADvBja3zBMJ17O3I1usRr7wdCOcP5oUzgHvXdr+HR1u55+E8dxSCPeUX1Q5T6miN7ED9K3BdW8PY86to03uZPubrCLdmwh5xJuUSzxGaaOs8ELw4C9JDp9AXzHzxFeJLMD9fY9qSoIZIYktxZ0OReKxIbHMJ9MsOjAph/Q4alce0ALhDC1CrYNV43zc+Sz1tRthlYZ5aaxlQQi4C1ALQtbYEdMSyrTw938FeVIcW8PEMcUO6zQ3pNh5SidUxU/1GC4tI7MEM84QWtpoIzy6nJ5JfT/ASvVODJ5dJg8JCBotBPgfXa47mvmWQN3JanfXiwN7WDTby0+9n2R5ijcVgzrAjtlkTgtFMpEWjWnBqlO2mhMDUKtQlOWOu3VoF9Nc7VQfC38oPgFg0gSjFHsEc7QKTR49gAUy6Wcd1K28KANtmVy+utLWqnbHgYTV0I22Vamfc+OFW43US5fdv52ed5D/2H2W3OBRYQ9Ut2PbwF276yCcf+PxTVB6DHL1oPNjcDekstV1DyMvmDRtgbyzUv2kr1X3zwbPPuuHC79ywa6LqgnGrI1aiqMiNy3qHcescxq3rwrhXVRBueolvs6voNh1fM0tkW+86ZTWAuuQVPKl5jgRuXNe9ohjWF9M368aO4kYj7r8M9AhPzEOIRh9l17hBHKkCcN+U3QHYNuWlADBSBcD12SlCDp4mcvBOwepTpM5z8cbvW7x6YZjgiybI3JqhZKReTJ071W6E4c1S5Ylz7VulxjdXatz0st1rvPplL6XGHbvXeKLUOGLADHGVJ2IlkihJQLkFa8Eyv4s+w3PNKmhzilkaUvrJnQoAsPZHYfV5UaRldzDcSB8rIGBKPPtyHlNu7cjko/V5SDz18pfS3PmDY6uZLZcjpZrZY1p64diW/pSrUzA7efjl1Xb2vKj6Z3dT0AwurOttZY7LqnLrPd+daFV5wekN0Xf6Wa9gODd42AZiP0qMiHUk5WAwlDvYZ+ttiBVFO1VicnlbtNibX1U8GXHHtGIOJQ7AHsgEW1NXHa9tGTyo8L9O58DATXQ+4nL5pNYB/CANbeuhP2Jf04UsI5dAUrTBwsDzFktcpcQNHkadHEzJGRvDtbJQJSEL+4siWkPktvaFKaS41Ir/YxbKzktcdHURJ0aLe6F4jEjGTnV2t+o8dj5M0AbV9AurNa4O6lnnfDnYcrb8yX3a2GEDPSpNqlMgzv9rNGIGURAJOsRklPa0m1a2/L8Rx870cguW9A0SdmCmxDHy4PakFgyDDLGW/60Yao7WtmklEaR8GH4zC/TKpu+yuxhOZdUnsgmDf0bLk7f+ls37vI8i3pEMnRTJAKmiXFQm/t96kCNhUFcnt8Y66ujG4VvpsdISI3+IVUeBic3YVydXx/WLCpd5xhD+hTY//x4NH3e7ACg0+pq5tJrYBd5cc5snJnFb6LrgQ4Szm7EZuP0bRLdH+RHNGeK2cXMjsYPvY/nVtKYn8mds1boRV1cRNyDEhSFA0IW4uoq48FmuIm4JKe2fga1eGWKl8Kpns241jjM9I4GE5vJOKFAMRuXO+TwcBcd+bCvqzzQ8ZPPZAy7MBCJV0c3FDePC2onBROnGoKVtEPmWgArOwe6eA8PQeEAAoMXLeU9xAHQF9CIECJTSHAfAVOMAGIkDYCpxAKCis5XeFN8JJ0RgnZ0MhM9ReHIir2neIQqZuJpAPZe4CACmnyUjaBhHACiiyuhKVBkjPt0+Ww3o/4Xu/6bq/m9K9/9qtDXoOkQkLoE+XGSAivu/Kd3/ze7u/7ri/m+EVokENSlEqBO4/+uK+78Rb/3yxYr7/+6PzMSP7ESPcq8iwH4B939bdqhh93/N7v8a7v9BFrYhjzOF+7+dELVlJlbd/7GeiPu/D/d/6Ngr7v8wbI3FFsIX3/8CcZRDnMIopuL7fwPsezAN0l+zIGdC2x6dtCxRlYmsdsSo0iCS5JwpQhP1NCYpMN7RuTNk9touyKFEjJ1WCHJZivsCpkMd2e7PbJLEjNPpz22SUiq9F+qJe73Tcn2a3PgabnxNbvxPbiMmf0uCOzPuK/Yv62U7d0ZZF8sRaCXLIgc2NS4MocRxHT6NRgxGOYPL8xG6vhOlJaKFcWJ/eZ2FxYPJ3Z4ElRPZc6acCzTrpzzWDgOxQjeBWFGIWQbK6LyfA/HKD3f3fvbg8DgZ2fuL6DVESCFdxgq3GJ7QrKNmoz4JiBJBDwz1ZbJQ9E9O6ZaUSjfPeT8biHkl2hgr3SB0xYselG418X72nPezhChjQTU6K0zyJxQrdmLWrLB/JPRAvkR6EbueGNLajprNL9VsflXN5ner2ThugDhRq32KuIw2nwbywKH9XiUaeMveTOlhrc7bCC0QOHMVDjwWcd+wkDli3nSmOkwmIwcH4NlSb3N56ffNFHH793lD6LNIWtz+EUyjiFDr9GihM6xsSsjMwntbOwtHJx/WhbqPvQu6vLdN03OhD5UUJbLkZJshTM5HPgKfNNiwXoN53ZuIrkGLroHRGRGHaDbi+6ELdf6TmzXbvroJ3Z/e6jmzeHHmco5JATsmbd9uOAB11EYy70sPp1mR7+zc3dm5C2+p+672ZTKxM4VZkV99NWzPUSnVU/F7kuIpu0QbuJkSlFUcPhIkiwooWVRwc+fuzZ27fenRYr7CC1zkFrgZpo/NfpFK54rxMLuGatYEoN+kZuo3ZxufBIptX57sjo4xYWyL8cNmlCZEY8Jm2O6wGbYMm/HiomMYRmOJjDi77aiDM6CymPadMBmc4c8dKWOcoBjjhs9wkTIOLg39WPEgqnle5Kinnoa3oFeYcN5eM/5w75DTU/isp3ie/445q8k+7GczE81/w2exaKt43mosyNY0e+iN2Ws+ShNAL3cGN6a80YpxGczfNTLE/pvy68yRoeM5ePiJZWnQp53VSlxdo/TrpKz666/62ZbB3clWNWtYuKFI6SrAdBVgdivAqxTAsZWYy61WdPaqE8XkGld3fwfdb9YWgN9HKNhK7lXutmG82a0YKnpV0yzgyFtjixunKAcN1+xKLQBxP5Oi809ms0Hof3TW4E/jxFbQ/+/E0QUrrl35UWL+ewfTd+ZpFgzCfm+GPbkYLkqfCIa5HMilYGOg17Ew46BP/URa7f49i1xRERcFij7INl8o4VhCDrrMZ33mgt7VPHS/f773LDhKIxafN9RKCVxKTaIbEnavpYdWtnoXZKtbewEZ6UeS7XXStdTIRpGjMdTahzB2Ej3bK6uj4L2p/FeuWVVkoPlFzyZnvVl60rVUVEblrVlFxVIpPQSDt6pVH2q9jDoEZfRke9Nj7uVoFUCje9g7enSlJ6tXtvZdSYMDy0PazhN2qkHYtAHvh1p91BUoxMv6CEiPXTsa+L302pWUoz60km/ule1Dj/fKJtNt95A6cQhKT85OQyiQGoYUKxrXTHWcxAWZLM32Xnpt1pO97CR8pygIL+wtTTNLXbbebDJl6M325Zpwu1Ug9Kg6SwSYLK8IQBuTBcesQYz4BRpVH7NmFU7PwA/NPwxl0KubLE2hxCoOe4L5CZ5hPBzXiRnCfvH1iKlDaIV4vIqV7CCRfBQA3cA++J1s8MgsuvxI5XmYfk+zTMFzyRl2Nr6OXEWwX4tUhq901SoCixLT8dW3qsk5ESuTLjA3KWZDh1RlwbULZq9eRTMKEzs5EeZBf0tfHdIl8x/kS69s6ROvXUnTDZ3UlensVU4KLDv7Gnp9gT5rJXbaJ+EVJ+py2km4Komca5fV8bC4yE5mdmOy/OjjH32iFU3ZgYs2HSmLgFjsZTr7dlp/4JA67MRhEABZiXTVZl8K8d5D0ApZLC2LBqSAabLRns4GElgQZQes+d1pYhepsLjwsHF4dXVswwjXgmHiWCRwADEc3wd2DHhml8C8bJg4sul+zi4EIW9OUTx8l1gXSwgXsX0dO+8ZCbcUgKGnJzF2lcvBLuculBgH1HIShUrIrUKCBvW+24Ya9gSgr9L8Bwb/9FX+hisAfZW/PSna6xRNUJU7y4xlXOAxp8Orn1dYcIEZS+nKyLF12nDAlkvW7z4ZyanclVPhiEKdKdH5L9Oy0GaFfjpty+a/LpGW6unrsm7tvnE7BjEc5g3JVCz8pstb0dlquwNwVDd/ohx/UpdNROmk5ngAI6bGn9DaHy65V9kmwjzwUucBSoxcXVwFJrNLBO8QPOEmVMchB7jJ8hx4O3CUPuFtI46b6vzz+YCIRS7qEUfmoN/MpqcXwhd0mA+NcH4vssNXjnNEzsHkHVoPMX+CAKmZJbpqsXCUKwl+d8h/ZzFp+fTcUXPLAV6xqpSZadriphhX++4myly9ipqe3FmrGi8VnsjsxFN6SRTuG7zdqsuWyNmeKD6ygYVbzJ+adyxxwm3dEXu5Jy17fGG3lPAWjf2cAxYFcE5kEslikF4su3MstSFtH+vsVpoF3SXKlq/k8JxTpUqftSxMKEuW6jk62emLZWNK85wwstNEMfZg30mMcYTjmMAdSUMhdav1s/VYYfbFxkfAfycKLutpRpjjFbhcdH93gYVRmoGcwERcDFb99Bm2DYG1EkwzQWWafrGhQwShCLutVih+jKH4hVucwIHTO+oOpK4B4z0u7yMQStk6n3UWkhBZ4vfYqtKTaLnoKW/AGWnzZlT87iVCOluzeyJBYrabuXRPfDQ7VQeC2RGfUKKmuOESiyrFGzEOtu/exDacBpfdjCOJvl+rirsz7r9qo0JpAB9n4Tlk7CtNOacWo1WE1CF61Yyq70fiwuSKqRE40nRuTTQgW3MPrk+4KUd4lX2A386dXDIV3VFAkkrKY78nBwlb/EgAJ49P2gAmec5613dHH9TZFGkai9HqMFiTl4PCUT3g/F7HfLHoQS3HtbjjYFRn0EuFSVTcr1f8/nVZAN4sBqtr4AQCzQUXQSSjDno4kQL6IOI+0BxYx5lfs0CCK4XtpHlH+rRNIAPKnEBOZ4U1pqtcgCSkzGw7/a3tgFIAlyTu2AvIANtSV9fvMtLQYEtOsGH5p8CJ0vZi4guZEEzkZCp2ChCJOj9V5dMiWCkXKkHVpVDl9FVFoSI72Yd9Oj/jXPy8dvpDascLxj7dzLFPj6j6pBXUVjm0kuJ4nevMN3rpCaO94VLiRffPOYR1txm0BZOP1i3YMB/Mmts+kWH5bPREy+pVpioYIPaT1at1uewrSiTPRetk4XMWSNhy6H9YkEU7K9rYsuKkv52eowX1p0FVMYue+iwsDNwLfhawosFjGVquJF2VRhaxGKVORGJEHqpo31JiVh9fhkZ3Dijv9DmhwGwYgc5UR0sMeYnFcNsXdRFpykk+QJmP7U8f14Rk+YPy2HI4W1fc7I4ELmmPHSJmbQT++kJicXYTc5QyjiL2qJNx1J2MYzzJBWOSr3BU1Kc8EwyZTtRBSdDCSQw5TaA3IeTHif3ekEQmP0m26//e8rGz0WtopR8+e80qjohGBGV1K2QmYgSeSUNnQHCImwUXAbcfbItpaSnuwB/dsRAno4Qh3q9letXJ4nu1QJ/BJ1B5K524IT2pwYQgC8BagMoOnYFZmVGlhivlQ36KIg2KBBeSRa5IgyL5GASwLJ0iaZ/ji/qHGjgCJB46Ay0NXEsDaWlI+1ebBas5yH13S4NKS+OipUUUfDkRpNPS4MW2NJRcWFZeoKWBa2n8Ai1lQQd2xf4ClYAvrYlDayJTvobtH3SrNXcqgtuFiVt5crgqkc+hImwOxE72jTxHcWPRFMdKUyq5qHqwFs3Lz2gJqqoW8s6rc76W6pyvpTrna6nO+VrmT2Pdfwkfq8WQLmoZOT3BSGRwtpWm2dPQjPES/LWwBC9cozjAnodcLkaGKFYWdXazxWErPP9krVTsyyjxEcB8sS18VIRflFVioLNMVI+ui5xrYiFyh/y3XlJTqUokwUUI7ogH2R3JZStVWKnClS2LGAPVi3ZUG6Y7DRuoNkyXtf1hbfKqbWra3ZvDXSzhsrjnCp0Dh/fsapOsu0WblDv5TVgpjunC3hN1F1paSqdni5DiWhX7KyretCazlDswzQnGvUUSwRuCAt2bdO6nF5mFyeulfdhdpX/X1LLn59U+AjOy2Ckfmd8A65CrAfDbVAHCiHc/S97r9GvlIgvLJU8iH1VNtDJqzjMHOwMtL3/qYGe35Il9ls2nI/ifzae280cUrb8leyvhHINCRZOuMbIVkSjO+IlVodXt9MyMYx/wYX/2HuW1GVwlbk0qb7XzvXne+/lDN/HM5/cmw70BbwbuKDApLMhCsQbIn/l8J3NEWx8uM3DqP6kmyCJZ0WeqSbJcIi/WMLqzf3lnMt8R3tbmzuqcnW1sfkSb9pM+uwhmJn23j6W3t1x6Pbe295d3UnfnVeWd6e7OQeWdqbjjDnmgn0cIG3AMh4x6RI3PBxzRxQdIuAKVn/9owQ4cU5Z+RIUdEGsUlT4ADrX89X3+dfarTWNYD5X+wtVjviY3lESpT9+U/0KidFDqJs1mKZS6RS+qF4fHpaUojdjsyfJ+n2h1IYoBsePTR/j51CL6Jn70cXhuCdNXWM5ME5urTAIjWs43jUaHgc+3vIa4QS4ivdwXwZwWeV3EQqH8sAGQYTOcX/g5DVMgaRBBfPBgT6AM/WnD4VHTN7W8/GC24yF8zs2Shs4f+yzCj9skl0Yetqhhp/zxbRzbPs+1LyrzTOPYfQIV2wjlvUsaKj9rHS29p8uZvYk7DA4SsCNBBrCudfrA9QBMDA5bxEE2o6L14ziXQ9LYM1yrJS/0F5UpL06SuPyzL/RiI1FFMnDXkL99+UFrA8FYo96uJ3lMF/qVSBjFehMOyXmj6bEjdb7r4fthV4+NRh1sOXVZusHS0xBPLznTsOwQPqHrzjRs1etxVq+d+7mRrAGy/vynn34oEBJPT3Mrj/xEEL2lZ6q5ModwXmRhSQVXG3fUyDw1Vy4z8XN4jvk73juymbRmXSCfOSlS3fKgKFVKdWUvlfNRGE6CGyEY0wlV+W0Eul2862WQhUyX0JcoRcIaZe4Ib0dF6nlLzpmZ2W7G1m0mC8E2/+gItrUItrUItnVFsC2chixbHcG2EsF20QwJBciC7fX3q2Y1Hkgh4C5Uw9NaptIdpjw3qyPklmM7SyG3gpBbs9ZxrJib7cMmFnMjgE9VyM1H7dSY/WIht6oIuU27mXBE5kLQzdp6nJjrZN3jCrmTQsit2NWyI+RWEHKbjpBbQchtOkJunK/eKmTdpaNrUJ4/lYnlni+jXKsMcceBT7M/X16TQVZyBKXuCLk3j8Io10vy0Wt0k9ap5h4jv/8h/3jUen6tDz7oEBeQIjowriX1Rk9vutfekybv87J9+/ab0j/15YceOvPQP/RPvYg8B/7Rf6/Y49/+WeWvmWWtAw44YNqBSd5qmvzWr3YhvOA50evWYM9JR8yu/KnZL+FvJn9r+hh3x9LHm+0Hs5P8sKapvwqk3NQPB2E09VeCaJr6bNBHUz8MtNPUD03yB16BvXF6mS82qDN4zEbeifg+I5tli5+PbMHpGPmVZxOW1EHDCPgHwZrn21ZVbv1q7C0qlAMVH8w3I5T0zuVS2sGwDl+RqTb9fH7KIMEyC6qDkZHb1JLGdMToVCc0ZuHKsdFieGCcns8/Nf1LSh1DhQyfyvBzNE97fGMmZ6mfnr8ZWVx2ydf9yqwkv/RqQDgjyb9xFRLTk3zTBiQOSvIffQCJv0jyNe9HggbwjiuQmEZvPYXJckCSv2cqXVtJft1FeEJE4UtfxxOa6pccTtf9k/zO8/DkFUn++dVIvDzJr96IxNQk/w3X3Z/kd38YiSlJfi4DsV+SP/RBJIizuYyB2DfJb7kSiZcl+e8uR2IfApQTk5P8e5chMSnJP3oxEnsn+U8uRGKvJH8/J9Ik33E+ErRvff5cJHqS/Jc8gg3YWZpR6pf/HIL/5H0wqWcyn/wxJL72XyT+JZN49D2POFzaBvP5ixsJTsaI8zdj+NM3TXGjw+UozvPmxdTTcaZGXY6iDvd+DWc0/LnwJ/5j8Cf6L/wZiz/SnRj5Gu8yykEuEeA/Y4RlbGtjxtZfIsdXjE8L3Ej6GEnoOuFZDskhjaRfGcn5GMkmR/AI/08dSs1H6Ir/QNdEqJAHdiuozuCJiUUN5OHt45KHDUIeoj2QBz7BI85PmZC8nLi4Ee7+fol54R7KDnGWx5+L9AR/DOnx/4v0vFjSE/4ZSE/4UkhP+F+k50WTnv8a3P/frCtLGgiKtod1JcS6sGLcdWEdFXDKYqKSE68L/h7WBR9iP6nET2hnStu8MMm/8HHNR53ChCm/ZpWGIu7xo/LLv6b4zD1RAAFRjsx7+BwfiU5o8r1Pz08pdpH1yi5y4l1lsSqxNDb/1A1c11NHFnXR+HtJJX4WHA3nlo6GTmKoSomhEomhchJDJRLDjsgaSOuJHagVYy8XVdnbXWKIg6LhJN2RGNouiaEt3rVOYlhEuJ4m+qzMKeaIYOf+2DigezgjcCYUPGxkafNXDubxEm84n12K1W0+a7DHU2mqUxzyMIs6U8TqyLqYj/yePdAQF+qmlwc4xCnKvNEy36GLGghf9IiCsN/Lb8cVp2EFTbbDqkMdiPHg3vzx57QMMrbHdv5Ltd81Fftdr2K/K95eoD2m7PviHJ16Ip5BtcJuV4JdtOQU3sy4Pu8wDaK6aIVMdCDHJ1rUcLRII/KZFloE2xHQIl2OIiKf1RzLoCUovJHZWiMqxHA1ObJmFvKhG6JMDdkRr91s5GxwDWLku+BTfJaWnK1eiceHM0GFbDQKYuSxL3eHGHkgRrZDjDwQI9shRjAp46K9TtEliWO7XY43WBM0TAQHxcObj5Ur7XZtPnswr6EriTeTYQatv00dxydV1IAcNj90oBEDbWiynQzE4dgjGOC55VH1rEP5O1aeoMQlDS8P2VyC36qX6MbVyVE9QDnFKDfQEF9gWZ3gYM6PLGUZaDDC2tExJQBnDxnssdZYk4xnd8zhF/MvdhAWpuj5tn2Ln0WDHGgF1J27gL/yRI1pS9mS5E+mnXKHUHW0U/WOdipxtmZ8PgyU5CWFCHJ/sMcoDhpIJFCAnMtq3hi6mlq63jZ72GJNIgl4yIKxs6Ns1d7S/TKgOJqwTR2OOqDsvo3PK1FZz1x7LJEs7rMJqnjfH1GFlirmE8nhuL0cYoFdmedKIASUJo7wXF26yzvKnkjDYzs1OpB4tpeVeWx3xhX6iPC5+VuKTUhek//ssCI+JA3e2a8pcMIm+XPX8YrzwKhymYo7P9ntzjPlnSK+nhXNZS9dGCmfvx2GcwmVjcC2zsyzN8nv+zQX8MiXVH5/Pwo4MzGJqIHLM7HFpdxns6KOuZjyC8MdKwcsW8SMexVTwPmDtKIfJrFDVXeMc1XGONeFMZmuGpOxYRy8+sUwTsg0kbJFRe3HFo6Amitq6XQtH1aanmvmWjbzO74sYL6wOl0vpF9BdjvDzqfs7rzul0uWPjGZgH0DPZ8O9zgsWm2J8uDNsJlE5aO1YCZdVkUgah4whkZ4gYXFIl+UhN6bLgHbOO4fTJ1pwb3GlJPFHy/kgsRud2EPXLQIjjV7HPPOlZALWkIu6EoAi4htpIuQC4j/F3FkQHZ1FC9mog5Hc5Pglx/ls6nb8ky7qAtsOjGbH2MJPNoFXgjYeuIIWKQV1hNHSw97bGzo9KFvYApKrxJRyAKJveCXsRdKV/sy9oLfib3gTpp04R5iF50b0RYkeCZs+OlXA/5rNedB05DYC7qMvSDe6sIGZ4E7OJt49Ya40hDnwula1kAAPc2xF2ocm9TFXhA3F6hMI+B7IhEPdJa4IBo4/Q3sFoJ+xrkciynLXK1YPPnFsHgx7HoRsRcmfGQmfmQnegTj9qhg+zloaF1C/oeuH5sc5znOklGO3UsDyXHaeR/U34oHW8FijuYftxHeVxexF2puxPiUAOdtLpE6Qo7n34m9gLOCtIu94CH2AuFcNfYCcCkGxvmMGRJ+oUAf5dAn4biU01BgGX9BLH6ZjvigIx0CgpnO9GOa0A+fO8bnY74c/ZhUmr6IA7vE0uR53gCbdkP6LFFtxUY0TLbi9A08TSuEa5wKJ7to28URVZ7I6ne3tVEF9EQO/8YZyxUms/XSA7hPXLXdgXRdLsAP8XkbtFgNFGcXYwvIARqMmLXAXRdOANgkZx6WRtln8iuFY7nEbZAQ14ii5ML6yuuyx/MWF8XJkSpFdCWC6zRawIib9LrDOjQ6ZwHy7jO3ElVGDuASwOSEE1TF++TeRPbOxV5YznxNHg3EDny22JMpNlHjwN9qwQUVEzU4vdz9ec2GaUQg8jtdWsnZNw1nQ8nRsonNxjLrg2q2At7iSGxMT7zLOXQqDmPsdQZmXy0MzMTeGXbOScfAjMvtGJhlzG968P72QR8PIZbC2X97MCK3zv6bEPyQEsEz8SX/1s2oSGQWfcTq9iwSw5KTm34Z5ZWDONDAa8LC0hfhdS0+SxNxixXH3kB7xch1fz6yDJ3QaWBxpk2GwB1x/o31RKTTk6fI8gMQZKriB7GxSSGREKJJbeoXV57JOC9qnL5DsNo38sl66GfrzPWkN/GM+lLnD9zAnSqndruFD8E4qr01uewtnR/U6Vct/SrrjnX9SlO00q/ORi9zVnv95UqU8kqU/+I1sKLLUzkVDWGEV3MY4aZOxmsRGIc35gm3wOYjPEzMTbDFMQNlXxioymC7U5EABx9uLkdSEhzbHRw2Gb9nbQmHzs+/2XWhrcDhOkeNOsaS4UAYnfGRDhSXiMkDsYmH7UqZaeE0hOHAHJ5OE4GoUwgrTYQwucJQOmtzmCM/PZLyxBLvJ0TVoYt2QD9dtAPcdocX+NjTMfENi1ggYSUWSFiQ6bBCponGrDLiRDdiWvXBfPrbEb5V4s6zb2RtwFsJ9zU+fcbHOWGJ7GgbvNL2uLCbO1/7Idibg7LQ0xU4g+bGDcS4RbLkNwpRG87fHfMa8kug8GiQX6s8i/J0nHt9u91D1d6Yqn2usufyrIe9LPp9l5+Ya0798z335B9u9nZF2TfSWtNpba18C0Wi4QnTgWhMK8zEjU8K7mSixps/rvFmz423Ezc+ZbfBFtMaHKrgrSyz4ZisSjfY3bqh9lK7oTbgAp/toRvsON1gx+kG+9K7Aebv/dXG93TsatdAbMsBd9KjiBIEWc9RFjbNvYiSF8BPAj6IsVgpBjRp59C0AQmPxQ/8x3df9ipYqj5KV9xbwYELTGYXY3/6mUfv3m9JP3EsYCYkK0jS9Lc5wRJtWukHVkSu3Zfafandl9p9qR2nkDexGNYlmrmP84zdscaBOxYMsYqwQ8ok1TeXCwvcEQuciqRB9QHncDxiIATkSFeAZA46hG1aVxnx9R4xGa/jAVMSpmi9ZeT6PglYlWfL5UAhmMC+105J2KdkjF/TnreiKnl76SiFOCq+HD/pS8BIH8beiHqUXq5ZLKjluIEI8Vh06cqd38cnfE7JXDp/cDVrA4mv7hcvauchqZOd7MGyx8BeHLgQsRhz/9iGEoEtZPefNcx6NV/gSMGJIpKZdtNHNCQUPlMpOY94iYQiyNXrWa3zPK8jcj4P5RloWHeCDLqYiZQ+rs2S0kRe0u4lzfl5UtNk5DAxNve47aeX/cuu6XtyLlwnUd2cY0YnWB/7rvFZd/NYG6QrB92Z4hzEzsmN7F10ouZzCm0+qpZ7TgLQvna1xHVh0YCcB2uvbXmrcXg24eLgtRxhg/pltcQccEEjDCFv8q/SjhHTOR7Ovp4ZzZFRbznHHmQumEO3EVkZgexyxCymBTvNaUV3AaEIFUZMeho/Q7bntTvoj2NYn5bwczTgPHfSpAtT0O0qxZouK3owjyfmGO6Qu6VP4tim4icjXVNyhwbcoSpZQ9XNF7rYgi4uwVqjw2Hh/4OCgnmyjZF5xUPi+DzT3/QlJhRNbrCVATYGxh1dPxko0DkUyZMTt+zxxHZzBDI1nf0ZwDr248wLF2ItH2b2hcibxAFkBp/r0uJuSq3r5+kox5QHYw+Noq5z0LWUOO8slsM+/MoZTIZ4K6rQb0gUPndSlO9Oigo4iERy+QvFj1j45wsg8SjIS/4KF6VSiUhoQHSrGY6iu+qCYDDf8eS/L25IMDBqd1ceTdvHiOcvsa6LJSAg9iDd+qCeOFShNiFMgClnOgKvJpN+x/Jlu1zup4tbLHcc87rLL8Pfx45Jv8lPX/cv/PfoMenXLUcjompegdOS2Wq0ACgzBA6D/EMGeUoioSdwmo5Q/R95U5JnvmRox2pX+kPmDOF26zJBJa7htXzN71bt5n5FqMFJgrA9WY8TOUUsrj0RjOks9Te0wPnuiDFEFNkPA7FfFvc3m1mEFYe9LrScgYyNdXMWiKXJmtjuNjmaMM2BHvAlPQidSEg0iZ0yUFAzm8RR2+T0Yj5XbD8meYhctB9Ink35cC4gFlcdINSf4hu5SoenZHW3/VE4WCuVvYeCLPZVhEL/Qcmp7QHB/zKeYL2kq3Whq1bJCWCdhXE2rx3NfakPR4NCAlwvS7CojErYAg/dOhexORBVyeagjYcMjsQlzHfiON38/Bt1Vk+3Y9lU+ePw04I/XiTRehFHHmdqeGOIm0WA6mzffLtqt16JUl+Z7TtL/aNz0lb92b7Tzd8hbgbtfziWR/Ng8aA7CGXOUrV56pOAUR2mo6P1pqAsnprSnF7WMlN9wivlNxsKB65nbXlvJ6uoDA0oi583BiJR2sDtn0OPS0h36TaCcKHR6ag2rsSWYl8vFzOfSPUcsz6QZk+da9e5vlsX8FlNU1ndgjFwzqGXBAjZM0tdETDtaolsg+VJBHngokQWxdML6wOBERLsdQHgRLAyApEqoMfrApqTCzjmWeWW1M9l02w6llGCBzKrc/Bf1+U0IersXZ+BdhNv3ZSjaC04FARC9FnPFuTz2IYhPYUBpb3wJp1bYDuOWmLpFCEW5TiOPZIj1tNn0QBWv8F8eGB5c38qlgZ7k1koPiQgpFhl/SYHrckPpUacIgeBKicALotWEqKYFy4uev/uwk9ldd7o7oh5fwUxn7YlYtIAj0VMGmBg38kFSpoulDSCkoHEyuEAIb5E2SSUvBBDEzBKnh9kgRSMeJ9NHIGB8qW1bjxn0Qvz1MddcJ+rPYmyuYHjXR9GJRyteQqZeYTFgkhARQSTme1+pDfpcZHcOCnvRAhP9+6yQl3o3ijf23eG3a6bx6OZV+vmfrju1K1JfG7GQEbX9aa52M36mCbETtVO1xops+mqYcs79H4gFAMZqJwdREdd+cdx31J/7DtT/SP1INfCZ3QcKxJa6vOH3dnPTcRrtNlxOA3AZgPZ8QvW3auGWgPZ4nzLvkSs96PLG/o3DbWOo4fHndR/Ruu4BY+FIzjKwGbHShLu87D1QMDn/jmsGfRxlJKVhkPcJX2Bp0dwVN5XAhfw80hwcAFQ6bGfKw7PkF6j3ShMolH4pSnmadH5gQT8p+RGr5ypNCZCUcCvbXDupp9goebazrsjQWVg3L1RO8EACvm4OpD6CUAwpcrNY7HXy71jZXS5ZlADehTAmini2RzIVoHowsNihFTOuek05x6+9etrefPq5p2PKe29gZklns9sI5YFmHQcDjcPUV3gpvCPAEDQKTK/4jKdh+nhnQJ5Ioe7FzjAExg9LDORQc/DfDh9D/Et6T32j+py5aJDGxcunB3ymQZNr8zKT9Ks/D1m9cFEK3A9aI7Z5cus3ESz8jmkp89Tz/syK3f57eyg7OB0NmB73mffNgfTc75bBwmmXT4Wws5Epse7WEL0tP+CE9oV7DSfu3wRh+rm/hPQ8qBCyxVouc/sQ4RBAsUK5CRWorV+HmKc2D5uhlILPnn3/U/dsenyG36s/orJLhu3YEOUhwVF9xPHegYy5kVRKvdRlNih5Tc18qBYFowrhHIUtNsktCyl01uhhHQKoVB5Cwel60NiVhZCpyMXO10uR8rNv6RMCseThEWEwItH+ciQML9PEfuUr9Jp3pwk76wzcl3jriPuusF0Xh89Zi5RN7m/EbLSx2j9c4dAh+BVn7N8jBcymOvd9WZ3vc29uM1dt6MAOZYsBF1/WO6rX7nnO93vs60DyLpyrbx3s7u/Va7qHvd7u3u+A1cQ4Vc4ALlw3Bzx2q29KzfP9lwXyFVd6q7X0BXI1tqnkvmzLvNml+l2ZBqlTI2iH6junZ50/ROSyTzsrg+6633u5bNhPT3it1tTKjVcipvr6GarcvMa3w2H78BAps2UqaeS6XaXadRluh+ZtlGm/SqwjQQC23OSCXOLr0+468OukDUu32bXrxvddYO7rnfXdVZ4wu0ICLDDbxc8Vb6VKk7Sm7D/Gs5Y3bfdbykxYaBnTaa6WyEO4k230FSj8sntBAdSZQmOFTE4nQFhTEH3eO4mo/RmOFP9vVAiJZdJwobTDJnkeHMOVDGpwosvQDXFjWIVkPmfgFs5FocHHwfExHGdfPTPAVl9t3oHu+o9oKz3gGq9B4yt94A91kub+0U0EWGa2+TDjXGat8Evn2F5gmCZVoHFOFj+rQuWaSUs06qwTBsLy7RxYTECS46xmtTfPIISBFZ/k4gJ5J6H0IX5jTDbVw6WOpap2/4NFx/iI1g+dn5ZcSArMGk4WArLd/7El+XEMl5gHIbwWXVqXBqOWBtbECY8XUgr2aFTKMHHMsYcPX+Cdehzbh3a7NahTZV16Hq3Dt3g1qFN1XXohq516PrKOrRp93VoE69Dm1/UOnSDXzKOm3zhRYhn22gaRSgS1yNdsUiuRpiLZ75cHBel8qe+XBwXpSQcScj9I3stnM53pT4KbJ/A4OpzMOAFHoifPHjZs4Hrf48HJX6BMZhFz9ePHQMp8deY7w/cKuO8y8o4P4vr/bfKOJe7wdgxJ/X0EuOmDmo5wJnBHOA4EJ48jjGJOmxfwZOMx5fj2a9QzfUHsrklw+E7ODYfuGcw/k1Km+bAmNYBY9pLBKMI3f2b52VF7B7YC8cO7C+OdqdjqfwnR1eHtecFB4RJLMQDko8G5YtanjZnumqNq/aC7mpN/rujneGAyZ8uqmWhaAOW539IlYfiqK9495n+aNyZ6I4kLJDdI7tHOLEAUHaHnqhOR0keHKf47WXxnVlg841uFjw2UZF7nGzb7+hMtq/fMWayVaGvcNtc3c4/qLrRSnWfv2PCud1p1dMvUA2wfMH5lWp2YRt/1XapBruIy7Z3VeOCQo1aud41dpbwxjT9sMVMuUVLtSFRRhbIhsVcuR4mVG6y3KzHmy0vZn82prfOH9tbP0vKVjySdDfihSZMmD+t2FI/3arHVHPB2GpuSdwEUfmNXdU0KtWYCapZhV1aZjrVGDcoF3YPisk/lLjpb/Irk+o87BkzBIoJFc54bB6GYbjCDcNhjmId1qFYh700ihVmR2RHLqfNKCK0XWar4SzKdamA/4Kx8D+yTZWEZMc21U1JCEVWwjDiLM0KDSej4+OZksJkE+LARE4gY+LymJEZtgPnfifz1OOgoDto6z2ZI5s7q06TTm/CVCbhPYLNJvOewRbS8VNRTpJNBgTv5I0YBHhBOgfx8H+gjlZythoVixyroC8hMC/SToZq+nF7DYd1h8TKMOO0HqIvw6KvdbZUXTjRFySFtp3fuU2li1z+rZ38o7vln3B6fbQzva7snl5XVqbX1S96el3RubeuuPe4Ke/tMHuehsXArx078N9vOJpl8m83qsOevKhhN/9HDftNjT9y1D/TGfWN3aO+sTLqm/+XjLpjECtc1MdQ/jfvlJPF+eDA2FV61508xaGU6FBBf/zVyK2T1u2xRbhpMj+9yu8IqDha3GESqdsv7Ep9VuU9Z8X+2bAWssuwdLcmHyItYAGPpTJC7AGes/PUEfKAC+H4i0BeaejWO4Vf5QYiwi6kyfno/6YtDPkU8AlaeZ+duJl/OBu451WuYAWNYwUNWMFQnvM52rawXB2P8fU7jK/fYXz9gvE1L7pav6vaBysL7rqxC+4lIBTrH1Tlinvxg2rMkltItZ4WqVYs8xsbH2a9mq/rDHr2uqOYWo0ZfCYvznIaGOD/iUb/6olHf/PEoz8eJVjw0GMPnHfHz7Z9+reuJTgP+1nH+j2NKG1MBVsHOOKIaNEt2I63EiaQl2g8uEKXRgqGtcBgRIj1gHkDaDs0t6zUVSLjhB7YZz2wLRTAclgiDncZbAXuZNkDFrrgi9QlB6SHYxPOuqrxmCHiRW2HF7XdvKit8KIWR0e++E0kCMKCXd/47Cfu+NjlNzwitIA7iZBRo3UlgwTxQwvW2z1GGS12nm7a/AfVGLO7JFXuszEBK7BgUi75LTsN0Bu5117U9CGWwS/WjkHW5X7Qo2TcmeA3vBeE90XsIaU/F0INJavoHHO30DRzm5W1drTKFCZoc9BjjdLQn0IkF3Es89tsvfvGVivqVI0SRWaikAQ6j7IyJYHOg/p0MvoIvpmlv5x0E9UjXnMJh6cnpBEQHVfAFXlNU9xkCSEhWMfvrsdoeKlSc6lNkxc1QoZoOlrmDzQ0Ah5C4EjTZVGDRfPDzmMXS/Mm3WIlKoZLKyuxZKunY3jvYCklgxEluR0oNKj0arMqAitEI10710I00tlO73nbXWGRlJCZdK1Tpj/MqvDHjajClTPk8UU3zOu9Y3sM1Bt+uzmpqsUo9Q6sMR5gyakpVRfqOKdoMiJwhQiyOMG32Jhy0QgPClWTtGF3biMTDTKa4TTIOxzYTRbowgCp1NY/ZkqhG2XbTei2w0izRejW3eOXgpRt+UtmXi5xMqArWC70l9zf69i8CXS96O9xaKRwey4frW3POd+4ddadr1yp07ryqb734Pq5n8losxR8y8+EjbqYjz16sTV21bfFE5p8G8aXrluNi5w5w0JXpyRac7nhk45b4ExHkGuLB5NTTm72YPAGSQMOhb7NyKGHxbzDdMKXahF2++8Qnn1SzkdxwdoJx1LheYTInD7hfwuydfocj3gRO5i173e2DfzSEvaL8VcQ324QE8Jno+KgA3pQAX1BQbqkCUEH9KADupQn60aGVSQSgyWBelHDsJ1FhoNoJuEyyRnh0k9n4DNJFB+ThCcPoJ7vk0omOZNcesiGuJFE3BYig/3EHNc9NH+iLJDQ3jQp5ASobJBdefYZnKnUmHOVaankEl18BtjoloW7Urm4JJuE2eeW7t2ltzKt3lBMaucxNWqhKg4K67OCZIFwCnm4zbLRBfgDPnpW2A6Oqc7hdHFyi7AowQD843GIrJiGAziilaD5/x97bwNnV1XeC+/vs8+cc2b2TBINmQj7bKINJZFUMcSIkh2TTEJAIpdLKaXvy736tnQG+5IYudxfQzK9jNz0inaqtBeQtsOHEitpU6GvaYt1tFjpNdqoVGOlNrdSm/7k1pTS9+Zeo7zP//+stfc+M+fMTIC+2l+LZvY+a6/v9aznaz3redqRBgQkvsyTUYo65oNVlR/RO/5Hig/wEMHLa/JP+LKLBTc9acwA8u+ck2w3HM5Hcc597x+6uZfoJbd5qBoraHtqNxtbl8xp3eDrLSZWUAZG8uezMK2DxLZ8vTTpIDJ2u4hfTzNCZwRjxtG+2qOhrwgqgFNvAau8fjncjPPWzC/wtkqYP3tBAwDA24ZO/jt/ILmTn07d/BHY3f17eTn2CTMetJR51voSJzt148S+Tv/wON6o01844q/gFZdBjns0i04+4astSmzuL3chD43kR5eBqD4q/NQrC+InmOKwiLZg1j7pKmWI1EhqM6NWTiOmniqr2qHh9ewh0ufcjlMkREfUUyTew+UpkmVfRIwmv6jGUzYpLA6SVKTWkyS9tEwDpsDe34MpbfpKDRf3SkYgkVKwo/iHv3v3bTVGLOMFa+SxlnGvNJZxxlwLIpZM0holEbWSy3uIot25pQL6Nr47DwQNjPKrpdR9pJC6gZjkZ8k+PmlcSBwht2qKcVb04Wl3iAxeWR6x8YewsXq+Zn7pAGlL1jAzoxNfsWGLO/VjZoVmKkwqOJ4Kk2JXRFWFCeIqR8rE0UbKnPhY09ddqKdcNM9oTOJkbRqP5q+mwoTTyxnSOUCHv+qWpl3y6ahrbbt4zdbTWwCBqo7k1amtdf7BL7zdr3Yabcp6gHYDbGYZps0yyLaYNktw0hcUpO9SyVrns3iHktrtiiNr+XO+GhAYw4LZUrryAMbUzdDb13YI7I6IbBXz4iJ87mm/u3lxN5Ht7F7i2mkrrhWXX6Ge765Q+P+nq0O9unpH8MPW1Vavrh75oevqkl5dfbhnV62hyA+qy8t6AkL4wza7Wa+u3vtD19WzenX1qR+6rvb36upj4ZwwOx6lq6EXUFKNzp/yy0FAQjrp502ct0GVbJx+1WFb/NnyIPIvjMY51gZOmWGPB+VVx00gEqtUDFqZxXoRJC5vRRrnTg6vQsLkelP1quasq5CbGFkYtxrsfR5zFXLTzKuQCIvZ5Sqk0+UqpNPlKmQ86yrkJnMVctM96SaQ1AuH25saVk+11rsLVHpTeTny9bBE44TuD5TH4dNbq0oawgEUNSo1Tvv0+GKk85WjOTjR12d1DZjqGxM5PqfN+kzb9akV6wMp8fBn9dAY6/MH5t3X9XnCrM9Rn+yBb4RTv9uyVFfQrtA/p9V50h9ub7Z6GIx/c3Vpjpu5PObr0vApS3OnLs00lmbSLwX6VAQSOsJIzcosU89RK7Wau/xCHcClmbRLYxTbuO12R4cnCC9/4A7XHIt7+QfvcKtq7abWdsgsm639gFm+KdPKAdx6XTPadtAY2c3SmMxLVxQs7grD4pKplQW/EX9uStZUgPewr2roQ2YeeFZHlGXO64xSZ6lxCVJOwoYxE6UUPayeCaKHx73Z8/C+GfPwUEW9f98s9X5q1Ggks56094QDNSRO3Qz4Puhnjc5b107aODNAbrwIQG68OEBuzAvIh/zhRnuzzsD+WYA8bmDjlKeAzKfM9MOePTjFvB8wS3jAg7IkZkSrDji+Rm+3TsDGri4IPFTjuXFGv4MZ2f5Q3cAYvFRak8X4AzDU51J9qp3ZKY+/PP11wB/Vl0n7csy+TNuX/YF5OckU+P0C6CxSaFhUAZZFJbBQKHUhd8KVA10R4Eyihvpxu77jql+IC5Rh9QKlvNbzful7/zb4FWpQmxoyKjBvQuJCZyN5DbUQkunylgcltHkLiXm3wsWdJ8VMPhHQVFUNabwVcpFHcSpAPY6u7yIa5EPNgtf5jM7KgTuVXWLMzlafodmZl/xqFynLnsjNYlpu8wzX4r0kHMvCTsZmM1j5J+5wuxz//q7iTojV882D2hE11Ph1v/t6klI7/IL10aG/PD/hVob+0jFsWtP5BsZhl7tuVLvIWy6BnY2Hg/XOJnvvzk7Gg0Hhdan7HB3/+y7nFk/9vTPLog9P2sRVjHlNn/Yb9Xg3Q6keN3GG13r3Yu7+x3Ndmv/b57o0P78FMVeCB12vqVjB8q5OhxXswuqaNHXBBvk10Dl6QBjLyjd7UpTpdZmMzjLpYQbHRkp1gbM8IYlP6vbxjuGoEDf8XjOrNK77urZ0xgjzlw/r0aKQkdekYbJNjz9mKv+NlSY9AerFCguBT3qj9hzJmBY+7Zp9FMKNsdPp/1bBCaD00UC1VbGiOyE4/aETuIEXNCzkKXgLUoQeDzpc+mpy2+cRwyHxv3/r4AdrIy1PEl/XnFGQ983yvzsXd2CY4/U8WJyZAzduTn7j85/749/684//nXNly5Wc6+nUsbiFtQVeNKL0nF247BPPPD/l5azUo6r/PF447mpG/iVPzciPeGpG/oRXmpFDvwQz8i97qnt8wquYkX/Zq5qRHy1PtKSKWSdaT/BE64i3EDPyL5eHAE94upFet97B5YvVzt0+tbvpOTncQdytE/eU1y79Ky7LnWQbNeVZ2O/7ruN1O9nUA2lztsmIvTj7Bl0KGVg9T5XAPAbgvRcEZkIJzDROaL76ORUVhMPL//RzSmDgt+Cz5h3Wm5/8XAfhQbj3xzwO2+k0VScAdW5SC9i9IDq5y8AyYsZf0tusmPV/5/iv/MOLqX/DPPWf+NKv/dGLqT/vUb9fKrofwPO7A8SWbOd7AxSl7z/Ttjb2HsuHUO+HvqIyOgcWmg7c95USJZ9Ra2+YZ+aIJV7EzL15nvr/6ku//KLqX7HAlTlizv/Z0Bc+7bywtbl4HvP4Z8+dTS3/7twXtjKre7dFAlMi3s6DuTNq5I3zLE8X6nxG9V/Qtf5lNGAp7XjSyGLBZT2w4LJZWLAGLzTtTGWA9HWb0wvzfVt27lYZcj/l4nEva8B92+V0r2EcUvGgxWPUhJU3wpwVZuIQQWHvxOx0PEUv5WlDXUp58CXlGc9S5jRbfhqXUnzj+TXfEj0jD41LqdD6OqvB5e1+c61ywtMjlnEPrjpEwBWJYRkPbHmKiKgN6euDDRX31cKZlcRiwdNEZ77uzRnv7cW8vJctGcvXYU7M6d+H3v8nK2DN0NAzdidfd2MWclrC0XY/TCZSlpB0nFbKL7i0tXel141lUHisKycmpqwFLVdcTEKc05VojMjMdZ5BefQfwzDiKEyhdVXKb/RPX9f0FqS7Ftwtn5e2Vjtpe5G2eZbmPytfYStMz0oXrXdSKdiC88EWohnDK43I8lJVbH3Cxzj3krVcQp6jkfav1WnB0Bt0K8tJai/BLUA1L1iiJg3sDx2Ph+x1MpbSJ2ioLgtWjFlngrBDqHxybGuQDn+s0qhpzZgdLAEYLLG7A3BQGIM9Y7hTKnGWYd95MyCjtAVbZk2/nvaanQknvMIW7BmvsAV7BjZvuLLWPkued3gwTPLzx0W6XQt7HXleJM/TInifmy5rC5vQPm+j0x7xN1h7MdiO9bIZW2ZsxryqzdgyYzNWGJI1ZgZzSJdtCbrYj8k0LB5p+YZXlcnwtrR8Y012wlNrMq+njcNxb4aNQ0dE2LssC25w2MNusjl7RXpJsk2ea2RB+gPfdR07axUOf02Vw3eSX/Tal5anoq7FeYWr77IEnX3jrLt9aQMeIK5tVfxJpJdeI5C0BrqTV6jeJG3DQAw8JXk/oN1XpBdI/3DPh2pk06fD5gkbKVycrR5T08uFp1I6pJX0POB23YvqGsx6U6EDYADdKWPgdtK3lorD1j1wmLwByqhTrgmyBBSanL9MbVZOCwZaLGgkNiKvMbWBwwAXDuz4etq12nDUEqsJblx47odzoSCrw9PKvrT+s1mUe1dQIq+bx02waaIHIs/El0ffPBpI0Qege3nLXWYcB+OTjwtvqDSCOUkkNUiuBiQQNY7TmBOYbtZaZ/ibnVm1dpe1wwstvlL6c4pPxMnhTlToaoX0X4vlP+tHvaR9OeptitjzSPuytM4zEie9PK0/cmd62U/B5VJOOQHmKFL5ztwZkRd/2y56UNyVhTIPl6WX/8p7s8ve7DjjV/xUiqfjXA+guOwjNCVrZCbMVwY7HPqlgDUSHRE6GkTEST4rzXB223UIFPXLTVcwtVSL+dvaaAy9fYRdn7tNzEbqMT51KE3WfzaH1zgsQJ7SvPhnxnbL09s2zMhE0n4Dgl8abh/OvMshoZ2VesmvAaOoJSJ6SzThWDCIfhYK4Mtp9SGr4uxsq+PANNqmzjduauum1qWDqdCosflhZUIscEhBXAhqQUs0T5F8XECOY9s0bXEMY13bqrSjnxmAxjFBWWI+z7LrDZD3EQHjDiBxcgIGB5skh8xBzBhEDGIP/ZZRDZ1ysyKOtpoVTXgwKwKjM0Lb9cKaj6/Tgbq6LKz3wtJ6j68HAlDlGn1nWr+dYZphFmKwQFl/1YlnQ5149sOJp25zb/uw/DROPOuyk+oma0S/ncaJZyR5wEt5Zfe8snte2T2valxYdM/DBXeMKH4puLCYBD+jyyMwY9rT0a4sGbFfT/dD58FoXliLS9sjjQqKJsXe7wEtv4Fk401CNja3gvR1RNinXHx5M760ERTpBH+v4O9XFWbPw0YnENPa2ScPO8vcmcnAQZurFtOvApUqC550uxY86dqCShXGg5mHxaVm3XKbXbqh7KbtSIUtN1cukqmSuX9Vh56jS9eKyti5SmXnsqKcTqpAsnQNaO1ZMRSH+mYY+jeZ87jDWpzmY12n4UBAe3FP7cUPMNxQDK1Muir5v2EzrNdH0/PhJj9/gt8deKL282PFp3V0lhnuzowfqdHMeMyFUw2S/qdc8KAR9FhPuzwHxJdSz/uUW6h/n6gkHymTD1eSHyuTD1SSHy7UNdq1OHdlHK+WcZhbZSLfwK+mp16zZ3TOm9W5wve/7R2PhIyurrIOsE/eZqilZUg2FDOo8J4XvxXeNxa/j7lmp5jfT/D3xdpzWdf13DWHmfpGTS2YqMOusmEPKuvjfMI1i4jFfNBVswwULbX8GjnA6ON9q49/3DW0e5Y+Xi8EGhUfLwRKny7U6ENs+15tG3dx/PxOd+YBiG8PQKYMezZu+vruSt9n9Xl8AX2+Y54+G1yllxjZ9E3a8ru04Rsr7T7jGBMWZ/5295xBs7X0UjsrZkzwt7YLGW4qa9hdgPN4BZwnSii/01WuSk/NmQ4YuNTyyU+417bPTvtESlX3bFth2PpRb3Pb+DRov0wBkafiJxgdhYDXThTg2ksVTtoD5zr58aaGe9j6+9lmc6D7xg33m7c3bXggvTQb+b1sy1R7Uz75Tbe9XOBh68bxw3efdyUNZOXP5k1ffeCmN/Z99ZuX3N/e5O1NbTXHLrk/3TKVbb7bOht989tksJsPyVjsbbfx8X2N9ki6KWX9409L/Q2pYVNnkU2zimxLXwbe6FV4ONliHJO3y6BXi9NXjWQpuB8an4ftQTizgeUzOK6XrXaaYJLx8HZtVmYH+QaZJwtRG5yGmvtjYI8W22ge/u6sDwfc8IOP51uNF9GQ11g0ileXytyyMneeysBQ6QEMubNhjq2ut+LT4ZFsCXqM61n4wxF5jHLTzIbSpBxTvcyTtbQTQVovRzQ8qxMIw2M7IbLmEKQGT0WHWVX5ZVXuPFUJlpTph4HUEpi/p4OQV33wXYNwEWm+YQDtISgUZLR96VB1eerwF48QJnX0JqSIkNXRmsfWZDDV2aNQNoQ/LOhoQW/ugoVYnBZwMz/E6BL3zQMv4ULgpaOqntASzgct9S2dwEFr8DpBSOc461MgCTkMr7Kytm1t16cmas52+8gtqgQ8qxrHzsSc1TTsfBfXf6rzHVfnu7wg1GdBcMHz7XO+Pc3apSpv4fONiwY631G3+Xar8x0tZL69BU0U2u1D7xRuei6bO/+yMdLJiQZDnXjHZbIl5XhjdISRa+QF2BMMUsBlWO88o1n9o/p0/sxUMYlwNEebIKgBfNUKQZXfUl5+dTExCIyJwVON7iYGwSrn680ilszRpsZLgbGf6ep0Ix2QlGnbVXlJB9DAgHHEHaQDbOEI6PCIGYztkuQWOiw1TzfYdICmH2+YtqXBSvKTZfLxSvLTNpmGZqZXhxopAuocsr2SF64LVwi9wuq3TdSjA6bQFDorAvBjjXSpfJmyheUlXYrCS03hpZXCd5nCk6bwwzofk7bwZK/5uBfzsc30TRthbp2PycoI7ywHPlVJfrBMPtRQdQHTH2U6QHNbOnJre3tFs5haIpV57SUKr5ZUcXPXq7tCJytbogDtKUCHqVoYhLq9C8M2Q2G8ClCLxJTo7Q9eYV4ieP55d6fIeigcpks0eEmqpgztOu2ZbN3u/HWnLYNkLYLiENp1uglXJBXuYoszEFWrxOamNb9La1VayTAi7LvBrF2qc+aemEp1jW60rK5oqegx4ut10KBWiV4X1gzQq+m1p9m7VOfNPeXV6jyzxfYbgB9XHDVuAX18No66w+Cok32Ko/6xbw4cdbJvPhx1uu8McdSJPoNO+7gnj/dZdNrXY08+02dw1Dh3o3ZJcuuePN5XwTp9xeY7WUl+rkwer2zVCbNVX6Y06mUatklY473p9t9Ll5/vr7s/Hfm9hfDkVWVkSZk9jf5ETeHcVDos6RL1z30m/HqV+wqrgB8WwfS6VONoNd7c1cBjQ2SW5JhZkqN9KYHALom8EDAJorokkRKmPkPnmobONTWs6HiksEMYGrd0rjkvnWv2hKEPRgUMTUYKQ9PSq6Vab/LjhsKYARxSmDpkB3CoF0w9ZmHqKKFpmn8PWZg6VAGeR0vgma4kP14mH21WyGGzTK7kfrKvQg4PmM5O9ZEcTtnOyktvcniXKTTZZyhaH+dg0hae7JuDHO43hcdN4Xt1msZt4fFe03RHnyGHU4oH+HfcTtN4ZYQT5XxMVpLvLJOn+vRwRckk02Hq6yhxwPlnNjQbBRuCRG8lJIODipOHuYnCCvJcYilI2O6THdBHkSztww7oww4g0kxb6ZLqRhrEHhomCZldlVNW5c1dFSTAmfvfSppL0kHT19nUzlI6bz5Kx34u0X7OpnKW9MxZTaOrvEa6PFwhyXMJWP78AlZBkocVO82qzlmwKNLoIu6wu0u6chAzkeji+ZBo0dUl8yHSxXMj0q0b7/t+37Xp2WQREGIrSV+WHGDAabx9iEFU3rmzTWJ9tDYqabuFkVCqGxAR4dd0zeDJ5MteBqJ8SBIGEpkZ2W6hxY9hBT/22cS+SmLdJtarmDSfksrgR8EbNo37az2g73yypugUCFqRKppHcEUSwmxLQQqzTfMTQ45kkiMZn6/7wBW1Cq6onfmoTkZCoXAojFFFSoQ4quNRl1GFZlQc0vX3pwsZT2Qqk0oiHY8n4+lOroQbiSrcSKTJXcce2cSokqi4dlraSaQdtIyYNEsxh1jB+dqfoyGcMZUtQWUV5P0WALpNlSdT1X2QyCf0/WV0Li2A8mUc/lfl/JZx7KAHKoYVapWqOfV+MUNJVC9L6PbLvEKPFQqqnaGOyrbZLZhtxSZMt6bbrqbdhwlgqixS11q9M6r1GrUmIfYL1ZbES+smqJa+IagW4s+C45FJ2t1mcNPJoALasyavL3mbjUBmrMepHpnJQap6pM86ftFpc8pp65uJtey09WGA9QrNOpNp61qrd0a1dp22vmLa+rYXPsNkE4c6bWf3mDaOfSZOhWzU33LNnAKlamSAJB3SgMRDuMiDaGr4A25zWDmiIb3DN6TRa4dSGjUP5eloejYyn62Zh9KzyQGtwrLi+oysWZy8Tfgogxqeu+Qi/4RfiEwexuFjA53wR5MJN1uSrJNa10jPZAxSDo4BZ9dy8hJe+QtwbcnUcpi1HNJaWqxlw5ipZQghtqWG3QiJTJdHwH7VCiem9WKYoIuixnHWiItZUmO/bOwhuMjnzZgvu2jbq1b0y/c/vl/+nZCeTaM0I0WwHpjNB/AJhnrq7NnJaj1TXq8O7UfxQ0VFk6xov1bUxw7hBCgyM3XCrdZzzyPfOnL3I996RvpzFK2ccm01OB6U+XdZTcz+TBbVDOVTeNepOmRqTGauIAJMw8WKqXGKNd6lNYas8VClY/BLPKsaLOH1GE5RywmHEqrDWjzWMl3pl3QY+H0ZoH2/W0L7HeZQqxdtuaXMuqeUSSoVPO7OQQcg1lTyPuoWyacqyaftca6tIu6s4kQl7zNlFYe8Ss3eHGQcckAl74NeWXMl+RlvLqK/0jtWyftUWcWUX6nZ3I7qt1X0z2A8Knnv9MuaK8lPmeSWraLVWcUTlbxH/DnFwSW2iiWdVYxXkN1EUJERj/nCerW3CNPV3gR7J3+Dpl+jgtwOZWIQ1Wj36Pm+syBWpj0CbJcHMHnCvnGslC/g2iGVYxqImY14fh1tgEnW2Ymt2okN5Bo2jGktgqM65M+AEuh65zLq0U2wlsCYkxBXshfH9K4hkazRFXhWSyAdebJJNUGw2nmqSUcnnvXFGcAOR+bXM4oCa4ITWBMcdkm5G9aerDNzu067v4Yy8BozCWt6SMAXWz0B9zRrXGPE3zVlPy403VjpbSgTNzHRzJ1GNh838UY7FxwhGwswuMok6jLQOxDBwcn7YUiRDsGRD7MPEcLMJhwqUMFQFRUMFbt+qLrrJXmqkvxgmTxZSb6zTB6vJE+UyTeVqbuLxOvLxLcXiTvKxKuKxA1l4qYicU2ZeGGRmJaJK4rEpExcXCQaI8uhktnt4BEGlUcYVB5hsAePMKg8wqDyCIPKIwzO5BEGZ/EIkbRxBjzCkNCGQcsjkIQ+4XepZj4mYQmrMUyCVDNIaI1eDJfQEqI8SC7B0r4XxCT0s2cnK9V08gh/9pv837OXzM0i1FlNbxZBOYQjfz8Pi9DHakoWYZD0Pq6yCMlsJm8+FmGQLELBBCmPkMxm8+bhEQbJI8TFCv4zYBJ6UfgzYBJ6UfgzYBJ6UfgzYBJ6UfgzYBJ6UfgzYBKGbBVDL5JJWKkELn2BTMJghUlIDXlM52ERVs1gEZZqFxKyCImpJBntziIs/8GxCMloVxYh1u6DUA+w792Zg6ZhDtJRU5UyBpXWg4IxSMrExQtnDNJy6VfMwxgMFozBYJUxGCy2/2B1+w8WO32wutMHC8ZgsMoYDBaMwWCVMRgsGIPBKmMwaBmDwQpjMGgZg8EKYzBoGYPBCmMwaBmDwQpjMGgZg8EKYzBoJ2iwMkGDljEYrDAGg4YxcDTVTPDZdsedXUkctonDM5BBVDm/uDMy5xfmTNMAzPEYx6xA7LHA/D590QNYHgGGab2x3nkmNqdnsTk9i+eyEonnPT2Lz9RKxPR2OlYrkdhaicS9rERiayXCzmiXJLexEokr1CUuUVwl+cky+Xgl+el4nhPY6/+lnMAeNktyKKbC+ZBdEnnpfgL7WPwDPIGdimedwN5lBjCpMDVpBzDZC6butTB1iNA0pWBuYWqyAiV3lsAzVUl+MJ7vBPZQJfejcYVw7jedHY95AjtuOysvvU9gT9W00MmaHqLeEXMOTtZM4ZO1OU5gT5jCx03h0zU1frCFj9d6GT/UzKnAOCfoJE9WJLcxfqgcnzxdK40fKsnPlcnjccUgaSK2Bkk6uroZXd1gsJN1g8HkZRYGO625/eP6dP66PgcGO16fD/qeqZ8hBjtmenu0zmk8WreqjHqPaXyqbqDtJDujXZLcOo1H6xX4qZeoqpL8dJl8spL8nElW8y1jZVjFYGteOgyW/FBjsCfMkkzXicGm7ZLIS3cMdqT+A8Rgh+qzMNgBM4AphakpO4CpXjD1sIWpaULTIf6dsjA1VYGSB0vgOVRJfrQ+HwabruR+vF7BYHeZzk7WicEmbWflpTcG228KjdeNGUidczBuC4/X58BgpwzOPBkb9KfTdNLizpO9EP3p2GCwSU7QOP+etIj+ZAVHP1di9PHKwCfKaZqsq3ZH6UK9VO8AAJsGAJvEX9NNC4DNWSZwRzSrf8iA3u8250Bfh+YFvceaZ4i+DpiuTjUV1GxX5aUHqFlJY5qd0S5JbgNqFeB5sEL+KsmPVmCqkvx4swpTpleTTYUp2yt5mQOmTKHxpoGppsKULSwvc8CUsVo8acx079D5OGmtF0/2MtM9bc/KJzkT4/x70prpnqwY+T1X2uOOVwY+Uc7HZLMiet1ZTMjx5ugKp8HbyrwHlznm7ls0ohe+7BU3+Znbm79qqqS35TJPr3dlDnF1pYSa7cJ5Bqxs9+W41xBuHxZaDJcJNOVZBhf+hS2Po2eruFTLtxEgXxYcSbdePaz++hWVb+7sXGdTbr7vhTWFgrYprWUYjs6GGxoK/LBbBrV6zE298rpikXykTD5WSX6qTD5RSX6mTD5VST5dJneLoyXrcGm7j74f6GwGbXnJl7xmjbE87B3RcTrdO+3zxvCMO6Kv+sHfET39Q3pH9PRLfUfUroO9I9oofVGoz4niEuKbKrMJi+lyNhGsx84mP6wr/eB17Fm1bau4iBVoWLwAN7FRFzexizGExRU3sZeT7ZrlJjZ6cW5iox5uYosrrocC8mga14WuY7kEw1VfsYewG+A+RhYhemlBpHoV91/MnE8vYM6nZ8w5bioXHtcPG4eCx6q3lovJC+3mUZcNTjl5UdfJ82ZNntN78jydvCj3r+ju1xhHF10mz+syeV6XyXN6+jW2aKDnlB0OcOehvLwd8PJDQx0sqDOF0lkto1bi6m4MrbeGF6qvcBhF7xjcaAQ6i20vrZOAL4J01oKLmA1pCy5C1EWMgGpLncS06KtjUeGrA9xcP69o0DuMzFW/SYKtbj8vyuoKSQX78LgpTOE0cwROgfvh04WTLYyBb+ptGTcx1fplgC2ubaUBt2wANsk7pc6dMHWq1ilEeEWyst3PIET0VpH2g49qpv1wqxPrr8X6WC6J1ET3G585OUyXFxkXM9nl6aIf9ZLssrT1yJ3/x7DwMh6FzRZ7RucyLTqXadG5TOTtSy9PL5vHuUyInm9DaDs6lwkJkjTYDdULSgjnMg7Xpd2iJjxtqSeVFlzLtKxrmUV0LbNoIa5lnMKxTGthjmXICGXaYgPx0ZJfCxsGVDj4zDE2xp5x7SJwAidoXvGr8CazaIY3GdqpwXd1xZvMInXpZbzJ9Hd6kwmLKS9aDXfqhhDg2sZJlOZCA0whHcrwcz9P8uhIJkQLgGO7umvxt6Ex1/tN0Co4N6trkConF1Gnbl2S1VWFERL3mFBp6HySRXRY1hzTWGqkIrRY1PTlHemZp+6ReLLXZtCs0AhE6nU8Vgdu/BKbqeFbgGx8o9edWDPHeg5Th88b08vkpe1ls+hlUvZysfayaXrZhGsevtFpHd8WI1esmdnLpqxhhknsx4PhFfpLrzb9pVeb/tKrTX/p1aa/9GqTwSkO8Jhy9v3qdSek15166XUHsf7odafe6XWnbr3uRPBfZbzuIBJf4XXHU8c2Wb3sX73sX73sX73sX73sX9163enXRajD3U4dnR7L+o3XHflpvO7wbanW1m+87vDNeN3pL73u9CNijPZ0FKufqTSdwT+9TCFmVNbPOMnT+HzJgyHdIBYxXy07r85GVpOdP5t+bwLLzJ/yuzLzp3ww8xkpD6itv8HQ6bPTxfTBk8KtXXrRRsZivkghc63+Wqu/GGTjMD1LPurRI6I7ehB+1aTkVnvfs/Ds2x94FYdxR40XkCdcuskke1s4jNtKj8Ju4TDuCbfiMK4sYRzGPeG2t4LqbgU7XTTrnnmzI2fa7AiaHXmTx+ib8NeS5p6Rhi7SCuhA2bVeQ54UiWE66MmVmip8I4is7VXF0V5VmAh7XsY1eczKLhVfUyulr9jUHV6l6IqSYeEXF7IhPVFqcNzARN4lL+fliylrPso+HKZDlNUyqLaJKL9KK1qB/Qnvk16+gvkf1z4HhfR0NFjvrIGDqXydQP9hr/A83V4i4NiykX0ZHVHddC4HiKkjrtg66cwflKe68tTPEbADAmPKP8EOUf7+P3lwiNgBbtJQSrHDOsEOQo2FDvXDv2dd6kyXmN0sz1iAYYkgQDhHUPaCvvjgwnOk4r8T9cAnuSQv0eCJLcFXZgI4HfTDgDlbAsedS9Rx5xI47nRM7p6ztgRuO5fQbae64FyufjkdCMet0faQ6fwo6luD2YxlLttLBE6Xq4fOGB46I3UQ6hVBRz2D2OXNoKXIjqbTG2nMuw09vJEyfRCDGtRBDWJQ/dpmS/O3Kt5Ipa/qjXQQwxo03khjeCN1Sm+kUTsmq7rceCMdKryRChCkSwpvpDIVdCinY/Wt51UP3kgj9jrpoIHGG6l+SqufitaqgVBtw6ZF47tuuZReLmU0XHMlaMETZdCCRyvJh01yClWAEUtCFUvOZnjMV+HDMF/fhNfCd5q6UqOTTlTXO4zq096LCaP6tGd8q6pnVLoNZRjVE8UHG1/1GY8s1jPFB7dhSZON61mJ6mnd8I8wqqes7A4AjQk3WQ2l2fG9BneAO9SXEV5/x2uY6AMM8S47VIO8M/q7x7CQs+JVMlaDiZQyYQJVagAHsp2eCR5Ez/znYHSx3mM7x8Q6n4Qnmjh5zWZJYZcmEejSRIuXHoQMKbalfQ72By9gdg8cD53tOeude3zrnlD9L6Nn69RpFoeZSX1fc3NvJ706wd+qjGDi9920mRyjm6f827/nJluybnGqHd1YjvKOJhgOqr0m/TH4fXpbGRBTEq+z8TC1qlN+UdVJv0tVwlDkxz9aNk1FlWNinM7IHxr/rR8NekUHmB3Uvls07lXOI15BfA94JL49AiCMavyDt2v4g+vL6Ac3aPCDMSUnsOksYh+MVUMf3FBGPrh+VuCD6/Hn7QsJezBWuES7np6KsXdfowF+joca6ac8kvPtkRyDi5SVMW2l/v4R8/0Pyu+HIhMsJIIcU4MQ+P1X5R94bf73zzj53x50E0dkwkbaXAVxGWWaJsZzM21gBjKaCzVxgS1KXy5w2wRaDuVxLiLlPO2iwErEY10uRZg5Sl9L99+dXy1Ffrvsg8ZqR9jftF8D+GbhcOqCyXRXk+FWwPO4EV3seujP2+2UomK0uXT6ILspbcsf+IFoYwu17Ybqx07qN24fYuNKVjJzc2IZm6lrxyW9dTkqjqmjzw309G5fXQlDmJLH4pGAI9Hl03OsIpaYU40l1gAsNAwsvBwSl+DABN9eLq+C3T/gL6Aj8PuOWV9DObSx3nX35We3XW+fjXnLkxER1Nz8vvdGY/l/f/Y/bmu5QhTc/OjHofJY6e0YleloNPZKIRSTWc5rN5tw3jyOabT9mR8I00x53tnZsLojbwVGKdh1IN/XlklFXpGc/NRb5QzIiG4K1WOuP8aTjzZ5PkrQbqMPW37qw2Eyqq8H+PoLrvTqXJBVVm5xg4oKHmJR+zKSevIWOlVOZIclF2SuKkwVOMyBlwPwoaUhkjNfcsjGo4aLlFo6qADOI0k6GU91Sj9b94J94V7pxEkBy0jSgo3P2/+c24yXNHcHXOxWP2R9xi5hWn7dat/Hx/ddlfbtGDZqzCuF76nkyhqVfFen1V9vHaYaL63WelXHr7eyUs+kpBNt2TJt9dm9o6OZqzp+abGgUgxF3I6q3z2xI9hgfh+X31jl1H83DLDfXbG+kGyyW9sio8lnedHGO1qTLLLdpHbUiG8TMgktVndbGzrB4DbtgP3kYBCp11YsmqKsfxWuTl6NP28dzuLhNrwxCDM9LNOns3+JLAvqQpq3cc3+h/Lnn3d3tmsyo/aHqpYiovE+VAU30Oj+fxQsEe0+uOehLMwHxpJb0ug8/wapTh7Xt/vyBK7jQkyQL7Wja2WbQVrTSo+SiAT8F+zIalJpzVRaY6VSTW1M+iOVXiPF5LGjDRvIjf7tAhZv3D9hZzWYkI1UR3IfktsYaOPdIsPslXz+7dC/pLUtLWcZnmNS+/POdlkqp+1uZBzvCNcZZHrzcWFYOBpck8B815K/cNHwujYfa/BnA/5sxbwfnGjgcnulG03pgX87rtCmrY3Ov2EjAsFt6Jr63g3chLWFoUv9VuFWZKPdymU6eGtWbBj/akQzoBE0l2zm7ORNGYJ0EmMRPC2dWamzk6ovbalvD3QuVx1Ee3v2ZEUH49t24JryRvc26fQlt8uquPsnJhgglSg/kN/toJFWjYVua4PFEmAAnnYrQDoBEBbopfaiRv/UzqVUutZ0ThMdgBR2RjGnvIkglY2ZOXXwJ8GfpTqZYN8g+eEm70N5TaAvD7YflF69EV31909k3h5BZd5VSPP3FyCV1g5uXHP7ROpO7GkH7EhA03BZfPe2TGAQpdyrDu7R/UGNC5CdD3FMMJVKYCcdHMH/jgef4XtLVC1AkYwoPhduUcNUCta+0HvG3SNcIEcPHtM537/LLU5M/l1LS1KAQ2h79SbhnOcf8jNBOQ9n4W07iIBlgiZw4QbzuP/2EP9kajYe/P6fPf3ku7934Jizd6MrS8iuns/rIRvb+x/6uLQki/D8X+YP/DSJMbuHjcYYTC5twTe+vxKCKZb+PD+EYDBOIq//c8jEXHLz7wyZkEsuBIEhMr3HcEtPKEfyPnc22hdu3S+Ikt/4ZuDG+3TCwhVgWuhNX+pFsPrLAyM4kSzuI3XPsWw1xGUI8z5BEldA4QzimXkF+fQM+fQs+RSWQNsAcQmhS/ZVNx2PZsLZO9uwQ7VLXtGaN7u1GvAjra7dvIHjFBeRKm/aKXDiguPBo7FlGHkzX3CGNhrMU207lv7P0XsSQCHyeWNbVqO8AwewsumAtd2Ci2AS+BJBm9tplBITDyVfd2E8Erf5aKoVUuenzKWxpXxttH3blcxr4wzF62BUGm1gNm9ubkU6kuxNIz2RwOH8aDJJmbem5wVcR/JOO6XXOhe7IItUP5mEOlXyAAtjucJWxt2daX0XAwsXzcqvhl6UWIETBj4HGMHy7WoHlR9yEfsgxb5yB2iIkicjNnIMREMvP3+s33eocRRhfXQAVEj4TG8rDBDzNfQJs9px83RXfsrhr9wbhU7HabxRGMNe3J2rgOCA3VEId6DNRwAPw5zd67vRPj0ZAq8DrUCAyXLBgUWKm9Wgi8uTRdPKuLdpUQ+PGfIeVoOJpgEUKouRfViwRsACNbyGwBvbsrrq1VhBorydfBaKmbwm6yPHkobbW4y70gdBiX2QtMvpfrQdqSVZ0Aqa9EAfs2BAZ3QtV/12SCmf/ZbRQCUErNCOGvkqQTNYKEr1PtlFyj9vMd7/lZ3nCbNl5/mDsloAdp63U8q7L2BX2/prOYw6oSBCDByX/HeFG6VxpwP/NpR4vOQGMDwAOihI5C8nui1db6x3AHioqvF11/X3lWidqhx/i2Inxi5KNTQFViaYli3kFsPx9eEWQopbCClkAikXYQclG9G0TUC5rZk7rF5BBOkPJ1st2hxgVJg2wzeugkIjryP8Bw718rt+wcORbZg/e0GD8X4AP07+7GHYI/20gNNvwarn38vLsU+YyDF7ZTe7hmj5GJ1wPu5mcB8FQ5if867Me2fqyfAPCuvp/YzslC+SMAtFiy1dd96d/7owQd4YKOoekDBu8YMb09vBVklWp1Ghmr7u1MXcE8m3XenmnZ90qRZs/K2nE37c0T75elOLunwT1BpxZ9aNZrSORIYNY+YNj6362KEFr9FfJlB5SjV5AiGaq+ZWQM8tQM+tgl4p6Gw00diW0xFYgPLcj+F0m2qGN5vl1ocAmKmQd73sqgeVG2obdVeZve2aVeeeDs2qs9fAhX7yHTbyk4V2YYdROFxRpGwyKW8uUtaZlOEiJTHBWMm0/E0gU00lm5CWpsBWC/SGPaHBtXspT9rrtNoTyTe2kZzoOz6LVeo9TqmX/AysHO33IPPzmA5UarCxkv21heZiwKqZzz2HIEwMyqMN8rpYkPs7EcOsDTsJmIBInXt2imzg0AChJr3zd2cM+QuXOFLgfN95ve8wXmy8azSV37H9nejvxP5eqr+X4ncdCKlOLEsWAMiW3qUbVFugb37RYNGcaQznmywMuqsd9zUwR0OvqkrxgRnhoPTEr7/uuJ4fhFEtrlNyBpmEJQJkBn9gZtJfzk76+uykr81O+urspK/MTnpSknIfI6EVz25hDpI3ZL56sZaM9j7AJZvuuRv/feQSLSjw+CXGXUp+JHXKWjf9NP/7lsmVHPURlafe+L7v+3uAalLnE1m0MaWYCNKfAWCmpwKss7Np6epNV323/b8uSZ0PS8aqvG8Fi1PPO1cPc2Jx6eP557/zff9y6mAIeM/6V7TcZYw1ejetd59//nPPIwNf/6u+CmAX5kCfnJJWDeu9YeoBRAVj6S7fT17C767yUM8//97xgLWZz6cqWU9dcn9nIZDPosrUQZLfQOC+1LkfSrf7wT3q/zZdcOPoqk2P3v/J+zfd871vXLn6Gwc/OXX/pnfcs/u3nz30CF53vuzc7//xzsfw+vi375Il+RN5pXBf1jH459k31x+clG58u3Xziu0//5FLJPdb33h06qdbv4PXn0sv+8znN38cr8/f5rx/xbZP47X1b/Hfn8kr2MViclOSpNSduv++gQYtsGTRpj7lYyvYL7D51pT7Uue++zLnHtjUiSA7rAzS7xucvmFUiSjpch7gaKfNgI988/UwLdXHSn2s4cO5SH8t1dM5eOSbeNjXA1EHTJUH3oqIcpSx3SBaBcBkyc/SssKlRw3EzxvVMFI5b7RKTxYPkpcjTk4FSQ1TNi3yVnIuHexThlFyrjKB4eR1uZZdibL6uqJ8XVPWqPWPKJu/BiZUzDmibyv5xlxLVUzaMEYx6XkwIHMz3RBTtwUbSllKUNIYGR9/ThEqC+ap1x3bboRNQe1jqTsK8EoQac/twe9mUMQLv3HQI06A34bka9AEiIg4gJpGoTseWO9U+HTwvl0rk7b+zmu8xy84MIhTAXi5JuUQtyjjmq675ZRIz5OPIDrejHys220AxtHTMQgZLgJnhtqGizZADfTqtpUYtwnX6xo5EXaTw+QlC9aJEkVFcvVEYtO9Y2UWb7bMIlTOVfGNUOmpYOn1FCwhTX2dhyzNZWruHGfKNXXKVbCrmlu0gqkdOE6cFOzV2F01zgLOaWo40FUWTXoHKcqIVrIkF4moo5wq6Lv7rlEjhbaVAviI6rdPmSaH3KiUGZTF/kzouXtCqM/JYVCmLVmJdj1HQqcSvT5DiZ41iYqaW4ezBriZkJaCyqWB4fX2FAXWQYZppM0xWgnK8C4LNqiVkg971NZmbVR1UPBL3oeftBFyx4QaxnSkquR+SriRPl5kl1zGLryllF5QmNqo0mCO3EiIEqn8jfk34d+lqMMBowHOASpOcB9oKMz3WqPyxij7i+Br/scf0MhRslBSX4MxXRuXcUwOSjeU4QDJ3pk16fK7DyyTv6HCp6TxfWlwfxqj8boOoK4j6UubhlWxRrbs/mhWFK0MJ+Fo8KesMev9UhmpjRdLHwwiJQrjJGPqs4yla9gOMoOwwtzZJiNBk9V87862i2GRBVNOLyy61ezszOvpkrWJblYTMWwPbJpK6jJ2D2N37eJJYp8GrTUt2PqrtUvdMNvoI0vXuNeFkLQvv+vDOAGTib/zw6GilHzyw6F8uMN+2G8/JL8X5RMfDvMTH0MkVWTAEbmDDEhHmjxoKOMUezkgfxygHc0t7aAF5J7slVtmr0RhnSe9irka3/fcWk9VQzhb1RBScxAVqgbh6obBhi9E1RDhDiVVDWE3VUNYqhqiLqqGyKgawlmqhnBhqoawQY1mYHQMlMWSNDB6BZUnPSNdxjN1CmpWE86pTAhfgDLhc+bETdcIKoRPVJlhL//uHz2oXCoCzU4/628DI15oh4Wb+Yi168X352tXKI25j4mVuLNucgSYDgotT+bGBUTLH1yWYQ3VtOTdSPFm5rpHG6pmuwcb2bWkAFqv/Mn/rPOgJ3+uAL6k5E/dHlJ3sG/LsAaRFPQuIIV0pkjpg24HVTdwaqBWqhvLl76DXJyQFQ1VBnLhXtFSc75gN0M7+6oi9HUr+GmIyfcNcCd6DCXkPXnzMqPBSjYvA7INkjdDB4WXH10mHV06mrlquK61BSXJG6CtzP92PXefu0dPS0Hv9xR2PVuK3t0CztRXG3caEsEkg7FT3eTnQambMw2CXCegDh6WxZs1ipIqiQSER7gDZPpNLOA27Urm1vosJS8hGe6C6YMMi4qfj81S/DBb8i1QGKoYlnJSJfsdfuoLwWqQLechbdAYIbOXuoi/RnyzytD/sYcv8m9hdxnq1d3ByEGSnLo/zmtV7kOj2CLkN25oPO+5ffusfoQV3QkgCW8ehbMWKh7OEYmQNwRp/gQpPBXGE4bzMCWrQV+AY5orSCL27GzHRkL3dsMS0FdLSdmmabAb+gUi9mAX7mOpvx1JB/N2c/Ex3oViRSGY9ZYfm71KGqUBMrfBKQSgK3FBU3dmdVJV7RksFE0wp9j2yygOYq2A5FwQmrk2pLfdyWoQGJrbA84/GS35v/BTZoIki2y0BncO8TOaw2Q7DZHrP/6wm9/+2vy5H8u/dReNTT7lusG+EkuQfTRLqSbS6BgUnbwCAEDivQ1ZpM1qRiVy1JadOFDejMtN8urrqy+vgb7G8gots5esti34HJd06P0/AuuXv7hPIPIs9Cd/lOYw3ygTvsocf1kmfOeVSDheJNwsSKdDG2uFhkKbamWc5BAhzyjz8FZoYV3Dk4OzdQuZYT1JB6VJSmRNVaKScH7Mk5nTdmuw5aEmH9CYR2rQLfXXRFRI3iogG+AGZz5NqYbGi7gWEEP7nKgKLOI6rhh0HRPtiyFmfaY2ByNzJzHKHZN2oaS1XaI1J7kR+GrNGPjuokn4JFANWtlqiFYjhrDfQgVn2NFqxFbDjlahvxP+F3JR2NG4tNh34yiFFcR1DoumN6v7B/IM4S7i+po91zi20Dm7UudsodMlgNig9dJbYP7CyNQM1643lmQGcB8IxjAzp3FFdRrfMXMaryymcaEzqB0JKx0Je3Wk68yumGNmr5xrZqfdGRIxz5UoGMeUXSm2JvfgtJDHf37JF7oqPvMR5/uwEjm1H6mfnHIz3+p+VaeZvMGwmYqTqGaSWZGcNNPQDlkv8YYZWJY6FTYApN2wAQVNDRuvdoxf8fy/OTs1TLTMl8xyHkMfkMNCM08EZeDEo68xUfJNPBIAimuajuN0QzoeSCushubIfPA+ZCcfjCWmktlJ3u+aegrcAeLaoHVqYGpltoY9rhgi7tAA7fCAGCxr/C9hr/Z65Sk2zk8+kfkdpkpeYUZxq03/zvPONTQnuvh2GJ1sDPYXlhMX7yF7V1F4XktrJub0y5w0pWDWHfa8BjZSMjkP/QxtQMBY/oypKLlqWDbMj+HUBlYCUlPYeXhzxyncgaU5BI55eUzj8AjXr9p0TPAujM5GAC7uXPCAcXJx/uE/dZJnfWE8Hn1UmbH8yUeFSwOvcbjEA9EKc+K6WR3KNds18nqwU79U7crUG778fw12R506MZ69C/iOcblrW4czV/O7+Ung+itaZD+gPsFjYBevGiQrYQOUloqPJnTSa3li6prznYgGddT+t2tQBjCWuLBreeqOGlAy0UGwrSI1aRguaDE6CVuawtQhMhZuLgzGeYbmjdneqmVXZXSq8QuU5kjbDWuJEOvh9e1+oTbVkzBKNCq9TFZsNJZLHd9baQwzgvwfVxrDjAAjQIRYmo2Cv5OR3eep0LOuPEtzeB8ej5fLY43sDxX39Lg55YHzMJDWShwmXZAR3wKxbh0eTf6zq1LVipQuJS4ohEYtAJExedMy5BGcJBuK71UhMzDn2dqmgCbzS0MvL06tmuYc64IiZYVJObdIWWoM+dcI/MqHN7SN7YA88sf/UNVkavuAIWJutg4n33YFW+WH9DNKFdWt0YMyKGEbXyrxrW8h2DhQLLgpj5e3IiqFHb384ikfv6WFLqRA8voNPJGnPD/Q3K8/6oLHufcZJ39OjYKtbUez5VvkA6sFYz08WWbMv65lf7WSJJKCANxXwP4Ho/lfftlJtrO3yUfBbN/7h0YC+OvX+tG+2l53T8cB1b7ZR1Ydx1cuRtm3SEbZV49rfhQ2CprtyG5zOapY7fQm4pzG88FgACWvx8SnHnPLVJmWowFiGUsdTwbg5r4eWCPk4YxGYKNZfZuqD3J3t8A/0DFaoe2OkLcaRW7yCW2vOYSrE7o0eBwN4Kp2ldRKAFb/XbZp5sozk6ZMtVqf+ck9nv3+Jemv31GOJna5S/PDenLQtTn/hiMrc9p4IzUVBfTKbW3GDQ/P3PCo0aqipvy/vBk1nR2pDHGMAcoHgSK+y0sS7HHvqUjKqZh3kH96d2fX7SAdDjKsDHJVpaYXNcCYKHr2AAdmA1QGBpl3bzm2/IF/dLoA1je7AFZtTsCKAVi1WYAVKfhwaDJTYyPBPjuTkQGqWgWoYsOemnnzDGTExaRFBjIq2Tw6KNHm6kU79j6ykHFZ5S0tvxOSOxvtWCzddsJcjc1qXdhLq7wyYqOjMt+MGkOTCzUqlH19BpRV50U40TEshtfsJ5hBbpoBK5HASlQ2XB1yUQVvbzUbPcAUeStg6sj3UgC2cKKcdACTpM0tHPErgonmwi56BSnzFQwCxS++BQPN2PZsAwUiUehRYjcDizwrINlXXROO09cZ8ylgb2nV9XxkbEsrJiVq13xLODJ/szn4EgZ8jWkAw9RjAOs3wM/7rqCy6Wlnm+rB+P5zGf7eOEbhQ0bx+JPuKA0267kPz3dS5S41oPPt50wotXA+9Rx70Ycgs96J7YBraVQZo52H/GucWb8Kxq5dU+qgdT3jRv5Xh0iV/vcH3PwPX0uidOgrDlJ+5Vdsil3TP75L2DazrmY/Q9mYLep1/H9tq8H7F7FQBnCq+RPOKI3scIEgXOF0kKtFn8iaPeq5CvdtaGot41gNRm/RPe1F5joYmlhUGuUyz5r1DlSYh56SicXY/VE12vIQZCi5jG44hK26WB/r0jlG4FcqfzuCXoXCZ7QDb6/tdDJHpzuKummRtXZbG3f7y9/XcITu7Vn/RneiPZB/4T+0o/zz/0GPHJONF+5/SBb10RgicLMQUSayVllE4OWRGNq35g4pYLIk10Lt02rLvoXhsOS8FRESH/ptrvkH3uPmXzyXa/7Bh5lyZ5Ei1f2uVFdIFHG7WJxzGu2Wv4EHntKdAXRhYKPzEy3H3iOjAGAM6lryP/9glkg302T/lTIJzR28NhvRTYkOuqnF4YwN1/uDtB9WYAEukELd34R8Q8F5pT6WYhCf0y6f/i9u/qsXchAPfomA+70y5Sua528l5YtfcjiuEOLUNeCl+bYVDfLtBrTJtx0wXuPbBmhb+Xa9SFPlzRcOE7oGwc/yWENTVbylwiR2MmH5A7tV+vmLxluEgXwztOWfOhHcKJJO8g5JfvNWiLiPeKOfyuN30CrrM7cCQGFw6+/M/9S5QlZQ9vin8mB3PvU1oANeMr4eiSIYZjI7N6TNh1J8yW/bd1kL3Pt9+97SCpuRzMlHOAMPv9fNP/hyzslva8rBMuVhnaWPlSmf+RhTHilTPvsbTPl/ypSPasrHixTKqe0Ej5UCj/JY2u7X2yItkJcb2qpQkdcbx7DrIhodyHaCuv0alfS26gMfI67TSn3bipXg2zqa8gssp/uzwbRFqBy4LWvuzYYkKUWSfGnt3SNZzLf+tLU3G5TkPemgSUubaf9epgyZlD0E9XgPEjMBQGizCIeRwLjUiEpYKutnuQFb+0DX2ge09v4utcPYfwBWj5Hs1C41twxikLqTvVlL08qak7lqvhXwsAZ9BmBHunc8HM7Mkg/I8wkAKnj+u7fwOpIkrhxp8T6Ok7V44yRrXiVUkJ+W4hNTk2wAqS1I+WOyvwVB1Ta3vI2C5G6XyXBvbffnfTBzz8fv/PZTQqfy5z8gz+24oCPvn/rqBduDDXm97ebjn/7qBXoL+PmH/ypAaozUg38VaOonJ96IxJokTk+8UdN+470R0iJJm3pvpGm/9AVc+MlDSZv8gqNpf1NDUiBJJ2qa8k1m8iXlaRJs8IC1vL49C4YlTVj5NBjGGX4rbd7abspj4FaB5VbafxuRXi2Nfy5rCGkHIcCGvzjTA92LwVKNpg0RV9fzmgU1iE2egjZuHMtqB2Vi0taebOhaq55cJwUo2rOedEByD6Ux8iW/HjZh2Zj3/Vwb58Hu9rYgR0G2DWBJ6dW1rQD6Dx83kEw0syNnXduK5GefQIxgWtkMfde2araTrukkNlw69JDp5YDkltGBv+eQ+2+Tsk1U0by6pbgS3YzHZnSzlQ6ii/VGPvmPRLm/8z43/96biBaOPseUj5UpH1L08tlKyj1M+XaZ8vf/wFKf/qUi5X8cYJ7P/9LMUl8pU05+k6XuFfT+i/9A9J7frTTg18oke+0HJ3PveZpfPzApXx9QEfy7WsedZZKdsSFBoSLcLbm8BRnvZVtaNeE0MCG43DOqVmvWGHbg0ha1m6PCEQZJvgzs46jU8VvHyYEIMzZaPfSFlUtZLtD72CwCVS4+p8FYshY3nF9NcELN7qhGVfTzPVrYuZTXHXCKB1MuXBSRIhW2B90Bsz+mPRLYHkUdgKgRGi95o2SiCK5aVpqjLdNomENfiTH8taM2Rnffchnvz/9t7S04VspX5+dzIMMo4jPqrlRQmqDj4BOYhcwYVLEAOp/ncQzkKHuRGeQNzHAfWGNk8Yx1Up9wyWt2VYswK6ii8tHVzOCps2pFWrCjItgYhqNkgD7FRf/jX3bzj7yaYPCbv0ng+n8FDKaVvj2qKf+zSGnwPJOwlLrNWsFGjb9fKGCbZb7wYabcXaaYPF+sQJzhtb5USXrPQ0x6oCz3SU35aJnyxV9TSl6kGGuuDNY7blof6+TMcYbmx8l9Pm/Q4D1r7bCCiyNg6lQFFxVyKlTCXG2U2QO/jRjEG520datQoz4gMGEpfXCs31TdOMxzaODR3Pg3NU3xixRBzJoUmCS+efJF0PjV5GgFYY8LtnWNK0ZXD1mkD/Vr6ETCndGgHslCRWcbdLULXqVBV/sAYwk9AjYNemWD6qbDzS8BkwXcyLPx1sanyb1Lm9ILugQDPIOXlS/jwq4+7ey99SHIZ09+1YhvMjlo92ogfWF3AlYsqJSiS7vFGKVSizBqncWoZszr0jCGycGPpS2DoK3kxdsd5eqCbv2qQto9IpJ9czWgwQrZJhusPFY7MU9ZPvJlJw9Sz8AF5bvQ/vTzv6E8HKkWrJssTFF0TC07CCbBD6ksHHSXhVdV+tVdDm7MHIzgqop+o9gfWKPaixhTbb4x1WaNycOByswxefkDd7t5c5YSQ1Z8qZ7MCIMmW7/ZV8jun41lzTsQxD+3IX9rlna3l+446KI7/m+PQXfRofHtPmVuwyrjTn8a26ZUtTVEntKjeFhZpDWcgBrtyS/dWepKOvRrTU/dOdZgdmKso2j8FoHg85ZMZNXCUL3GaQ0KV/XIkf/PR1j70UI3g+zMa9zfaC9sh7MO7aF1A2F1cq5RHbudKtAO1XEzFNlPG/1i0egZDaCPA+jrHMCjCxtA12MAd8ZSzj9MPQaYPczyGAAsgBnm735gppbrL5wuqkvHQEMniZ1PaRv3UNoWlX6v2lbjF9/j+sP7vL0+TNemImurLp8f9DPoIQ8Ig9hQNHxACOBieR6W55DPIB9LMbHXt63dmvzYoUcMTThFwu+b4AVRnXzCVYqTnHDhBI6fIMZKPy6ns6g7pdZ+9evUrsvzOWe0vYjOC08KtyjCbfIAK9wKejlLsGyudu7yN+tFy7921Umupw58TrvwDbHSWy5zVEOXwy0ay4BByJwtLbV0p9d7upxagaD1iE/SR5/3bpk3CzSwCFzcuFTMGRt83HqJGFhECEI1PkmEXH3406WaQKvx566GNugYTr8XOHX1Gz/fkPwXOiT/pRmSt4AhYUCeX4NBmx6pYqGME0sM0Hh2PKaeHb2jGsFyLPVHdKyLs8iEpGMzDFmAS+lpBCzJw/Tk/GW8kURNLOSmBGxNsjKL1GMkPWX7MLmTViJesrxlZybFRNhqIPocbUFXO8vXO08ZB5PT+nQ+42r3bpAHomXi5wkHwTbkd4iD9AvavIpxOsys9esYbi++i5ZMLh0xyjR4tFkIqj2lhDdAK9SVsLWbpiWK7ekTropV6KkUE/mKxpirnYlIZsDlpR53rTQrXdAz8Nvc4tT6FrhZcOhHRH496Wbs4lE3i7bwzupOipQaAcJVjSOqfsrNBneprayGYghohs/gDdKVbcMMWGA3RVRZ+oDxF5ajcr69AsufLk9fcW0L8kw6CB11qNFQOqpGfAZbtd+wwLnAqoVowstYoGEeQoR5GJSK9CxQvhD8+iDM+jAb5xv8uocMu6Dgpziq2GH08FaA+wjvJ4TNUDX85XRxr4W61yKdss4tIkCr48NipdG2lteMEcaCvze3YgJhx8aRIZqtUw7xKp09TlzE2ZuzlSuYvWylttBWIu5UDDPcDIOOkV3FHGG3kkWbe5YcewpSwUVzzk9YBa1wWxHlw2WUj2q/w6LfYdlvFkTfTUARBoiKNle71dmQAtoLaAgFbUP8EQHOwmGZsstklvzGwhHGNBUwBm1krvFmcDq0zmEnovXOEbewoZ9vh5dmGliVW3RxZMNs0SyPuyppTbuMziXAYxaHaSLFySKN04v/amlVSQauV6eultbFHOGRinoHmTlXHVG6/AYLE1b7NlPj21GNq9W481TjUbrTLUzDvMdNHJVIXSwi1vAikIZFitIUwcH9WE1R2HoZlN7f7Sj+A1ukYoH2u7pCiKE8kg1uLlYp6Fglz8TlkdWZlFUxq+NyE4WZnVSWsEhAvfvL9g8I3LpaC9r617Z8yhFYMW4JZ942vIIEeAtFL/RR1ocCbsuAJOh+0HLsQgVcqAAoW2/jwSnv4GZDtQJLxQzhsoDc10G03DJEETc6vZ/6RA3qSMqGDXJNT10TNmgGQqFzVDYvjem8lBGJXkjNBQZhzfzZZ2hV1DCzXEDS4y4hCYdZ9E25zABjXQHC7ACOe3OyScH4CcM7AbwVfld6p8KuYMsvs+G2XwsmP9mjO5YC3GVg+E5ZFOOl9RZinQoNCEoaMAUUZNAM16jIb2I9zU0Fgi7I2ZuLCvDOBElBj4Z6UIH5G5pFBUITVEoWqUFDfyxLfYROpHshpkm9DqaMScMAt6v26S6jIHMxaunAWu8mJb5ZoGhiHE7BA7pdtIEE3B6BBNwegQSwFgHNi5Ssu2bjjXsGd9FFmWnvOfelbe9k2d5zZpgD0JepaLg9DXflvJCZhsCCNBgLAIXANLT8ytyWIwwK5XyvMAfztuD6DDSSm5UGqUSqQAqZNMMdQAqsAIrz/JhHFfK8Fr/zB2XRwNGQu5GtUiPnst45ZC5kq0wKc3aKpcjfDixC36qsss4bjHjVs4uum6LzoNNDZs14yDzk/qBW14Zc+ydfXqMm4KYnTqrBDFj+rLLTfCEQku5bTKYK9QcpzTPUpqHVf8YToLWynYkISatPGVpNVMhFqtLq5wpv+6ddSnSdtNrCH2h16aX3VKiWvidZZYFjEd9+tfN4iWvHI8W1wK9EzBz97GYnIgsYs9rFdABC83FvVGGKIcJO4kZCwXrATUVNc47obdNqOwapoKEjbs+GuqLyXiSgwEZuFRvp0Xbv9WsUq6KdDdJm/qAPv8TrzGRygBBUkNK1ab0JeZDIu7naucfnucBRThJukK2zkyKA9+N2ibpTuNPuvMPrRLa6l3GEtZxGJtkrrgqsgstcOlh+kQ/n6KZDbH7uFXnKrYAqOjskQ0ANxzFBIxZplP03ZTGAZ4oBFAuhI+BCpK940X1Z/ML64nTOZg07cgrqdHqOhFPLi/zEuOvClTw2QK9OMpdPQ8qQ53FXhRNnJSNeIAbGFvW4qzxDWN6LfRJu4gXInjGCSRpWS2UaqK1PpQoh+GEHG9ZnSHiU9s1mRYOC3aW42KNe74zqvZb1olY/jZTdDdO+bUoR9A2HHk9gSsztwovVk82FPHm+kKuIZye98Ay9gGeGJlzZZ3RV7dH5rZMfVkcGGm4CyurkKtDGHfkR+t+8ULILR1czCPInpYpxAQJVrw6P6o5NfrLT6l+3ou6B69tN/Bz39edWqy25jE6QZ/VIFtn2RhaPpr4DtkcXjyq+S/bARUN+KshPCLVAJ0w3HgjVeQ+MolDLgFTwuGNGtCJfNZqGMgLUpVuDma+yO0Pbh+/uEwLuQbVmRSnJ/WHRY42ggjmjU2N6mp3Rlltpy6m01ei2EF2XYJWuQLKnGZvuWXQOsD6iXR3NBjkZo1m/Lko2wOu2iBy7GCRnRnQRNiK1489Vgvd4deY6hA5hZ0MuS4i+kpp56vOOnpOW2EutHCqcaOBu4Gvt8NG/UGgoY02EGjLYg48egb7lZIDIA4RgAAITeaNwOuep0zkBjgGGvsIjznCPGZ+gwIXXBxURAmyIerndOdSshYEszxaZra6+JMiQcEO2uCE1BmxtGQJgFXuyVezJ1mzNY8xzuaQtH6GxXKS6fNZeVOzbiqMFVwxlNiZiMSYCB1sQQxD6bBgcqOUMASkTnRsk6ISVLJy5PbJINghUqwIjd3iK6PGuwp6nPhAJDYkOZAYoZBGWywxyh7CXUJQHAAiRrTnHsoINHqc6I4pwJHHDmYNawAHamhu6RTZ1bIjHiYSanTtixajurBWk0J5a3urGos2rTVxc7jYqaObfbQabQV9qt1sxeS9mpEWXKgjALGvS0aVONDL/eBc4tIvt0PbA6JaiJyHNyKGLIIe2hiGDkkkv4JIOtdWXRAibMM8w2o8bYjyN04BAtyw3rCHFUQcp5u6sK8rKWmZ7FkWyut1FBR2Oumyh+uwtZOgw4lymdaXDXWr1zqhWpe6o00OdhgwjZGL5RmPHRrEdByCSzaYQBpaT7qCcYGmDuahRsQhz4mC3Cw4u5BjX4mDX4GAKMYGe6gEHBz1wsCXl9CanVzhXQDrtgotVQK2utxrfrMkCxccDPfBxUMHHgjbdyuoEvVWNPMsw+DgAqzSgB5EVfFytOFxwxVEHPg4UHwcmdjh3if4wW2Zg2NjiujO3jFtsGVe3jLI9HYCRzMDliTI7WNBu3E6Q9qeDaTjMK2YrSj5nU4XPeWGANatLc+EhcCIGFAqOpkS8F5bYaZ1JVN+wCI0G7x9lhCp3RoQqdR5OH3mIUIUTazV9i9W6YIuawKyV14ZesX8YNl9r5YEfB/w0To578udHqgooo0jQO9S4ER0bL2L2zm2N7sWyl6vJwjFntL1Uno95o+2mxmFqL4Y3HnkO+ubsqr7aMfEwwHExbDTehQtbi+hXdYaKaslT5Nf2WfRQ4bYHaJpwmIas6tChPaT6CYhM2NTfC1UxMO0WQqvqUl9bqibabqF0OfMj4rA8Ikab5RHxeNTjiPi0Wz0irug7vl6eTRx1y8OJIXBtLh5xzxNic0o8BHoQdzkk5iluKyoOB6KFnw9HJkBQl/NhrRWnt1pruNBaQ16inAI4yro/BDtPT0AMxgwuL/C1PBx3xkZh7JnsmjmzmVBKj5IbPJgG+NVXSQ4bzkoKPShTfIigdJ53r0jBB4zq8AD0wSslSWuGy3JHk3Mn2ddexHhZ5Xoc4BoNmWOiRQg5JnOwSHWDCKaKuIdDsJsTtIiTfbrr64OKc1gYSdVgFML41S2IakPpEI7Xll/DAEEhPSBPuTqGR6pjOCRjuMuM4YCMYdKMYVLHcIBjeLgYw6QZA11Rf7AcwyTHUFcXaBOE9XFvyzAQyLinTkgmPILTPhMQQ6jMCVcPbyIMUs+xt7QiPcF1cYJ8t99yl2G0GFh7ub39lIa4sbk8ZeXQL8ECSabhqpZr/SppVAscWEk+KX7UvVYmcTniaBxzOwvmKSKE77lWHc8VuZVC0lVTK8Cdxvfd7SZRUbHToOsg6XBYGUFAnzrGy/52AlHZdaRd0XJ4BygwXcYKEdTplEQVyXorw3QEYwrV4Ji/tYBJsePBOIQ2mpFcBcBWW2dYa9CNu8mwdAzO3PzzBRZKB8X3v97fb4+PlqVnJetK7GaxXYHdpmT9EQ+qxG/AJHs8e3IQacDPYCyLsZV55DceqZchqJOwwS83xkBhqgT+XSICe9t0GkQSxQUFfKV/1n56e4TFjx5GpzYYpov94KqPKvk8YsKNubz7vBam4ruNvfcMfWCHLlcGpwcyMdBtPx1HgfPw3pWpEQ7iFIf5KfoYgdMR3Iryrmj1c04FD3kaM4XYGUd/rDlAdx3tS2lupGpy7UdVV9zopaKejbKBo+7xs36NbnWR8w4dxA2VBdrfbYHM4oTF4kTF4tyUxQyq17E0N2JluIBJuTKxWZkbuTCJWZhw7oUJqwsT9ViYG8t1ucmMKDfOUGRVBs2qxJ2rEs9elcEZq3JDsSg3AbLsmkRd1uTGckl2L3xFikMDtRyAHcE6G3bY+SkdyjUvYnGu18W5pmNxrptrca57yRfnunJxrjcjqixOsuDFSWYszjXF4lw/3+JcVy7O21/w4gijmPx4Q0+Q7PkNMujZRJdDFEQ0N5Ya11R08tdZjlx3TaEfv3GuIxbLa93QMg5HT5lze9Xc71HDi1tg6DibO3Rp6jibOxw03KE0c5Kds9zhKTqp6uQOvdlnWKudCUYTgq3Mc666YVo4b5rMy5vGY9IBKjVLDhU3tN+ZxXpIBlb/tLKrZsFmWIOmheEnzT4D7VHUw/Rz8AxMP9mXWA9J0I0nS3aPhDrqIGCuErBbOvbhnoJ8New+jArytQcSZtow+zCYex8G5T6MelKvPRXiZabolgrtGlww7ZqJJW8pSZdbkq6oK+naozsRFg0TbvVgrSJSNLNQRUWeONcZmLcFyvVByWuiiwrY1dX5J6KLejP8CbvQCrhVf8IxXmF0FGzPGupPOKKDV3qgQxxCdQvcr9rXYJv6E+4v/AlL2hVg9SkeVfwJx1wz40+4Af6xHRmfwlsZHJEBlt3Cs7BrPAs/4wDQ4EE2UKb6g0XUl1YR9aVVhpEJzERw1AxP202Q3GpoBYPSO6UcGQilWFJQin6EFneyeCxLFPqUxzKneWr1UvJYBqVkL0vpjx6RP4KSx8LPl2kUlbRfoVSmykCpx7s6DBiGzxZKUSYRKCV0G5fR1mQPDXblsWROE8ypZ+A0AJx6KUO1CpwGBZwGVTgNKOt1YJlAUUyM7jralxLPta3t3wwea4nVoHWoF7oRjShfbshD8g1vmZnSoqRUy5LqPw4BLjRgkNpGtHmV47BnKRSVH4c9dRQNoILbCS7dlkz6BWcdLuUBalJEIGrCz4P6fFTNCs3+raNuWjfhXIYqGKIpNEU3PGpX7xkf2Cy5Vn2pBdAaqz9XqdU6i9UW9MjRG6E/Q3V1Td+xqt+PSw0P5jWAH/KmxvozDlKDTAupj2Up0VD3kPS3yptQao8rAn3hl1Z1TfSviL3hFya8ZmRuObKR6sioigq1jy9kUEF1UG139njcYuo0t1WLxcaWpxyUccrpdjShoiKb0HuZrqk2jbfgLdQEqYL2cw2jEpvW6OzTnuVXonwV/GJFq511llkBoe5mhGL4RsO+GOKNu6Y+CXiotyQM8faqxNs1xDs02ypUksPqwxmKpVmbaTajxGt84KjiLeZGTliIfMLQNpSSRtA20lvWqpKQyq81BUPbP4OhxUfcjy4FQbVampOhNbtzDVYhYl0NS1KRamiq5iFNjTCvF+pmXqW8bYOTtGDe1qVuqiSpq9gwSOqF9IIf4mI8e1LSVAXaNeijMbpYNwfz+K909V/p6ktEVxf/K139V7r6L5GuPuUYwnrDCyOs85PVRS8tWV0gUX27EtXrOojq9XMR1etfKFG9vitRvb6DqF5fEtW3606+rkJUFy+YqC6eQVSvK4jq2+chqtdXiOoNvaxC9RQiXu18zc29nZtbkdHQbNa4rWu9HQoPWzsvVGHqO+6iBqWaJOiilHiZUUp4pEKllmRHqreqSpUExniZQsQRgb71zlV6EjNLW/S4udQpnTkjfdGSM9EXBd30RUdUX2RQPSDMK1s3ExEYj+yV1j0uPKPC0Xs190ZQ0RcRa5X6Iiks60ydleqLQqMv8rroi4plkgGYpYl6LExUXZglMxcm6rUwDLuC9VAAukzxcgFDAG1nlfM2jVFyTbtRuGfkkqgxg55s0oFXPyapyNM+G0C+M0u4B8+2pzJvvr96wwpHnL8/JVn1mChNdEv2557sdj0hrZZEEXhZggqOJSvf4CN2dtrSWWloPZjROjzpCBPXHOT/BxrN/kZ69j3p2Rr1YLjRPkePltpp6neqNUeCPZ2TEHadhP4zmYR+G23F2z6r2D/lDJgxk3gMh8UYdNn/r89/Pn/g9f5xaPtjo4cc5Hbx8zs+b3YefetNv+ki3df3uxf53GbBRd6dCO7+mS8JWE9GdIRyFERsv76fxLu9fJD8V0OnVOATHOfCa8TliubWOyOS7eJRJfLWIX6YrDQBKKxD/E26my9WyN7AoJdw+FX4vi977aWDI/ZAHFXnr05+AVdJZR5GRP4gv+7l+wyt0jNNZ+uwBjCkg5zwcjJlPhyheaxDC/dPIxzD1iwZlmYRF2kNImKykv4Uidt4pB0YjpI9NdGpi3FSeeqZTpuoieF2XlGRJuhqIE3NWv3Ehvtfj3jQANb9bnb2633AqzxWKtherH2jhDRMX/vCTi9Vb/f0Ep+eU13rWBckv/2j0unkQ66e3KfDON5tL08HNe7EoA1VjUt7nrmTap6HzfOQeR4wzynzvMs8JzFrgoju4JLrHRbIRosRNf1UCJZ5sQotRjpa3GHgj/DVuNJwyqW3Y5x9aEjpz3kFsz7tGQb+k2XaozbtkTLtgE17T5k27vW8W7PKGSmSLjbHJFsrhyeXFYcnt2SdGu+ed1k4ywJ/tJcQsKb9BOh/rpZR+13rQ512JSvfAZv8sNFgSFA9zHcYaknv5TXoEGwA5Ks9oJ621Giyt/1TrbB/qgmEpXBppB66Xi68aM3GGJyKGOKUMcQQOzM/u+2qEUSs7lpsEMxcEmULd4bABCg3Gu8Li/ADMYJDKIsea9SXWJ3o+DB0MoKAV0QElLn6TwyzqDYVrrqnMpy4BkxxjQ+ZeNBzTCwKE5ablgq1LZDeKUDFeVO4UcQNeyvdr9TpuCinMsLECcpfqS7a2SUp6tEXxT5mdmdmFu7hMw6lTZolr8FrBMaTTkgQqqEGJ+heu0+bijtKNyhk0y98E39iZSpgGmP836wYbGgwJ/CzdOhZz+lx1FaDoEdYXKy0CQCO7td6ZhZgwcpXJwLhNrGgMS2p8IeiWlKdWhswCOJNo1IdzFVRV3LjMjUoqb+AipYPho5ZikqKXQZ62tcWyAcyCmGqUb0QcqhIqoyJYiey5J7GHUKX2ojgbgL//dGLgcfb/gng8UoLj6ucEsRWVODR7QaPMzPPA49eJzyucryO0mcCj56BR/Q3czV+VJ1hAqvxo9ydiB1VAVC3E0AXUnoWxF7Z8hYKZBreap4GChh+x5nCMKsvdoMCsYyokmLXzgLxOxYOxFfOC8TfdIuoRLG6xCpiEkV6GF4rYxLVcu/mrFYN3VPjHcGIfskpy2psoqiMTYQwYtgMELSS3w6ysIhVZwLDpmGjM44QdKbXQ1yIuocOQie6xQ9iOOgiilC9YQdZb3zFQ7hmB5ySdYy/z/jg6xbcpb8eOq4XxHHsR428CWERwhVtJ3NoCJ2mTTdhZampw0UYk6j8F2NvBRqAlb+WMqcPvXJRzmcUUk/LeOrDk7HGPJOu7565YuLoPvSUkfLUDmQzI2lqWEIaE9q4hG4Zl9Ar4xL6iOb5UkQh3IZgoHsBNAcz76FMnQsw4tYwIsbvEqoebBNIQPg0Oi0TUQKsrb9zswk27yb5MoQ436jxtL0bhYVANHbBm5cpr8RI58mvqvdA897IVC+JCobVIevPNXzHbQzY8JCjqYeIxa3iN+JHN5yUIdaEz2ncEbqR8h/q5zDIjN9hB5cEAuxwxJXUoKbv+4Izmv/GvYy6GuSN3fk570K+RGV/uiW8dFgwAl1eQ8U87ewcBqC+BVFWisAd+96J8ObuKJ0CbxlGfFJ/lFGZM3UEyiDn58gueifjfMHH9jB8CAOYvunIuzdKl7OecrxoWoOMjGG3jI5yPlSpzj5sZi+JuwAL9P7K0HfcUJfphgJGF/Fxi5nIUXouxW6ztYdjjCgL/GPr1Su3+LfVHLDgV6a9apsobA5HpLIM7tYAT8g4RzAefwztROBJEWhC+ymtX0bnl1IOwOFgWlOM2Wgw/DENhWs8ayJEgOkErTmctwzTy7/2UaU+8yvzNoM51UG75bGCeWXo9pCOowpnd56Rwkwu+rp1twMrwqoFPjGguIZIphcK/F1wlqWzxxnEcmXWkfAYphorzyMpaVwGdddZ+Xu+4SSvcxp/bgL7rTHBCbG7V+ojhRi/3kmBWijlanQ+znTqmNMgTqA9DfKKGKABzoKoCl9J9g8znKejyWOuidKMuV7lLLIynZsvBlA+exekiw8xy2LNcg7DhEX2NeChwWKahWt5TYmZgiYYTngNAuTd5evYjgcmWGk1EmG+GNGL8+eeJ9Pk5we+ryHINrrAtwwenNj7fnyY23+pPlbqY40+1gkwbxgzoZPxgJcxX5XziLqmgUyPvZfKLi9/6r2eRmzcR/QZMkb1ZZpj9ofL5QPQgIgq6oU8T9c7XwjyyUDWBe0xCt2nNRLdk2hS+n6UIc9YAgh+PFCE/lSgMnaQObwKIrmocDW+WcHzCZ77bcX5iO6I/yGkkGd8Xup9p6OBKsh5VmJCUyoqM7W6NslW6milshZYGQpi/WcuiD1SBIE28WfdiicuxnQOxvoD1/cdeGBGGBv/bqN1OJ6/DQP9TZBFtgQiJ0XiMrizN19wZ4deriXDxw9DxYrIzr81O7IzRtSohK5dRI3I7vzkAX80R/a/Chr3+nPEgY9mx4GPTIg+GwdeOJVhoI2FxIGnMTzjwEfd4sBHZRz4sEsc+NDEgY9mxYGPFhYHXhiWldA741A5VF2Zk/kFKglT36CS0ISGjxWJ+8anCFFJl/DwK/QXrgnPFSU+egFR4ptAEv/p9vF0rbAa/6fAqrevGunYcI9OY2Yy8b5johk3wKczMJLAqrPC0WPTJsMK4oaEjSX7sIsGGME8IXfiMyRrkPPcKUBUVmB55VvO19iqoKZA9+PBTt7COreS7GuQQB7uSvnyi3WwDnookJd/xzblahvL8mNOfsphKHWXXETM1Ked/B8dOFyC8/LrXuhsLGQqPtMRZbYC2w5jO3qO6yw4EDtj1GOvfvf3oRfEXn20+15Vj0caLXILL/6BO9wsnRJMpq7cPbjLB4ftKfvsGUpCqCSuTH4zLMLU/iTxWv7cUU9jXjrJ53mCvnxBEre8pMmP4LFCH2v0cTEeja8DA3p7c/WfKRTtSiHW1WC3YSU87dVp9ddbh1ukTlemneFxo44S0cwSUmYCpgATEzvAmSE+WOrfttH5CWBqxvjELcnU/zf4IyXARnnvxo93T0hjwm2YXFcj7d+aXE5nLpoRNO4s15/InRw7KALWnBKYStxcc7cnfnbzZw1+doCfXVlzp7rmetptQw4Dvar9jj+sQdylU8PJd3yLvw/OJjp7qyQnHBPQFNicRXHeTIpzSDBqJYTvS09uzvPjhpq1sLunXI3Qnuom2me7aSQK0j6NYEvehpxOM+WVUJELk5/ntdbq+Nyxfs91goYh1cJ06j1djfUejI6QQAANeAvencvJFkmGu/4ARzPLRzm6j80eHbIl33LbRnW/nLfgJPsfqoarwQ+pahQSR2ODECdBI3RREateo/c2yQXr58DRuLb0GdfMnKRmA706jdepTEiORkSXd5kbbQ5FGEnYCfAj+HBIUmJQ+vr6SqlgVila/XQrGTiNpWCHgF5skGyDXho1+TM4AACFFqHwqW5tcAJzlA6x8uN1t26WPSpD5MZ5uDsV6dHRQ1fezxvLw5upkJNlAWevZgPL1WQA8bg83HRmz11NTDQLwjebOTlnJ+2EOB3+zflp2BTsBL7UHmCXROpDXuPIQ5Rj1EkqSptZbYymDxp/KhMg99F0kJuwFECR78zTbcOb1ZpiMZPRb2RoXzEM2koFRUM/B5VemCA+5+wE70P8ihvlLq1rlNGFJ4fd+b48TcOxjF628W+rMEtjN+/MYhGXdzL0Zhrv3GXMXxAVr8Yg1apWHK00KLwKHczl6TtEovB2Z2Gytk00IrOvAi+v14YyTNO+NO2O3Qy9hTQVprVRGt6wNRWkQqyIh2jZS2EMhhXx0jplEvAoTZUvYuXB6SFAqMuY4e3osFxnuKaCp6eU1mMserVFoiyr6YbbjGV16rZ7+JKJuA69co3dzfpkkH1byV2m8fbhLB67WWbS371TR6ETK4zuPnj3kZncCR+qUnA3r8f7Yzfj77bhXaqU9lMRC0Msk6vjgQuYclIBEYgTGOOSB1VwlbkL0bK0yZCfy6Wim02lIaoK2/TYJWtWU+X3UqBR+bS0wQ62Y44HHt7zFDwoVrxdt+4NtZ20rkOC/8rdtsvUwcVGhBLoAG+NpoMZ7UjFl2xvI0Baik74Go6Ek5/WTJgoC4mYzRr+KfxJrZXplI7WCJNlJ+BFUQBH5i00cAA5fca81dQYg2tv7qJ2gh7biLX3xnat2bA2bIQt8u+KWRUVkJdeTJ5a/cSYkDRMX6ph3T0MHnjHpi9XPOEBnIubKgxujFM5HMr9bCeSBje02mmq4NNMNqUzcKJ6p3cq4sF5vBpNXx1NlS4cQotD8VbPy0kZnzrXa+1z90pjR52xrNYZqrTkNfNPO2P9F/mR/a8Wlf95xZsfumVyUHwHQcYVeLUuxANKb8ZRXoxz1hote6EGcA048Dwd7txyd9fP5Oe8E6Li1Cfd0QtcwF4I2jk17RJBONuFfYbVQC2tnedtRcxEvm2g1RgZ1xqO7aTW5GFftcVsZ5VTN5oSdgTC/+ha1bAwLPAo4nkpXyQSMQkW8/kmH6KYpQ6DF+mIoIGi+0rVoeUDgHaRvm8GPW45Zvx+74FjTjwdihm/jmhpMaIkVWZQCZrRPNJloGA3BG98CLbT6ulO+JR6PgDUHWwpY9/ALFdPEkKaZIVXDNOhCM2ttg3rtnCUKnnYk3Uo/EMllEFa570rBl0kqTuYhgc3prdPaPhI6UaC7pZt4WzjxBGqHdsqy6buqLbv/n/svQu8XVV1L7zmeuy99l57n71OcoBDTqxrL9NrKEFPawwxgMk65kFMMFFTirbf79pP+tVvb7QciEi/m+QEEmKqWFPlU6FeODlYUTS3iFqpComAiooYn8WKFVtEfFTjoy31Qe74/8dca699XoCv6+0t/sxZe6655pprzDHHHHPMMf5DnbLOGZE3SV8HLrAndI1NeqxeSmaEiSqS8JIUBpx6Jw3jzW1H50ewxNHV02i0G/cunXZds2OHHC01+7FdpzjcyJOYaJW2PfxpR6pFhKr1yghHq3rJlOrW7ZBswBN424TR+/qWicSaAPvewlRziRsVbRvLYDQ1Uxpmx+422f1XWAXAMp7sPtfDkEoeo2/lYllCgqza6aRR29j8tLS9ujLcoLT2WNgP0D7Cfm7SAPvVIffkOXLpz0Sc+nTi1EvEiXLfJ1UYZcD8bsKRsqItgTIcNarQ4hvBr2gSGp2E5ueehEuLSZjMPQmX/npMwuRXNQndnpWck9DjU5yEjk5Cag8BOIQprdguludSUvWiSlutj5iEqsmpXS+wkxC8kTp9kzBQNxiro+h9105CSP7pb/E4CZ2oaNuzDKbATnnDw7pCGZ1toqLW2x6RdzBT0Y9xpll0lL+inL+YtDTgCYXzy/x0NeVTO5x9ilU4xXydE6mnvclnRBWnJo5oR3iKuazt3p9z8TlNtVonLnJueoo3P31qkmixnS/zTqnZ59LKYi6Nzj2XVv56zKXR/1zQfuYFrZhLdt2Cm2fQwXQqrVtuVs2nkwvmjLh9lkc4nTwuWsHPsWg9FgI86qIVcEZ5dpXRpGuwljXK5NpofSJmoxTM7WoazYmVeKuYFTN+h+dEyLguuxOfTh8mpVkAGrufLe3YM8sVbn6ipG5Lep66tBO/gRcP+B3+lHl6/1uDuJPmFtShIltb/jTTkOP8dULh0HpHUjxAXeo+JPuvZc53cSAm2yfsNs7OrQ60f6h49O3eZxkhMjDfl5JdceKNKKmbsIubTYOH4/BMDf49qO7LGoqpx6ubfDspYbMnkBzj06wazw37z0CoWUgUDxryyWMkUhL9KomR9IgxXBAjUWIM94iBcXvAzxnhNI6ejcBMjR1UnFikHlJgU8LM1h1kNu7vTu6VkzCFppsGNJZQ82qLLJXlBVncArVDN2DVaWTHHU2SeblB/swgaXSZlALrHE9cpEchwfpr2hh/4oQLhq5Q/pG2XooXeBixm5DzWQ/KHKTkxHhQruO9yFgbYHyYoNNogk75oKNH+EFncPVEynR4+MlA1awbrdGszXyj0Sy0PGND7lrT34D0oXCPH8VoZCs7aY1jra7oS/M080OIhhJxzmUs+6GH9yElRPYv3hYp+E6QhPLjO4GsEU68lLg4jPNlSNkyHOk56q+3cYSRwEmIMyqX6I/9A4zpSUw4EN+xkjS1yalJMrsTQMgdjr4aR9Jm7nDBL7WeyI0/QfZ3GbH1vVuN3iVfKjXIQMj3C87i+ZTQ3VFZWs+oQAE2umH7p4cH9ZGkKR9RH+msT82IbB+CZCCRCx4LmU2a2g96CkiH0sDXj2Eu5kgXPxW1NuJ2qbuMVpRQVpiMlo8twtGwjkA1yFfmS+RVlT4JndACYHRVDlRQB+WUlPK7LuMua3FE6R9q/GyHueedQpObf90JyutOo2/dEU2uUVp3wjyADdadejeRl/K81vITPxT5rnH25hDbh9k87KgrJR5gvI8vCwcMOQAYdmhAyo662R2foyfLHhdH6qbPs8rLI/Kke7D+QmtBSJsTZ4lDu63IPTo2ebnHEUJkRIXr5AG7Qj8bMufCWuzC1zCk0U4YVz6xiO+lYLaxcy4jfIXrK+irtz2pdOiuxZcbeTlB8jwmN6K+GnYZkoGhtkGAXh745xCujrFRYW72dzTkFCwEB381pMVrnGi9k9jTASRO+YJJLJztFyj+F3P5MJiHiVrGRJCNFD40MUtwmPDR3kGc7HfcHYlzK/RTEqI6Lp/y4zvectwTwhYodvIN137omu978NZInCIqJ75CvZwS56DUwKlidUvTWdQztsn77vYyb3zAc4wLnQMAefJPiCfLvzMTv929hs5QpSrXUKL21YnauqHmSc5rTOEpHeAwjC98foortzirdu1ZtZufVad+J/6Wh3zGtoZnD7m9KGXW7ngXmLkzsx213gunsobfyQzcZ1yrdEXLnfIROceSvm8s3C3qhxHdsCiQrsiv6JLCQOpyJ4TzOiXdegb05DFalj/gKkjjPfdYJrE7L8caS9QXVfeRDW61aEVm8LA6ENtzxJM1jvDTvrahbAcfqWilnm/f9VE936bfz2M52I62GvpsetkRZ1w3iNmazqH9bTPmqMsL92Cu3E687qF92EYcSv39e3lY6u9XvdJgdkgt0ZeitxnqkNnuEBIzZ7v7J6bIA8dbDLzNjle7itfYVyH76Ul0q/3pSc8ZyR5pdS3eU3bZpdgN5lVf5Glbt1y4iW19rGqBofoqZMfoVyJ/No9kr2tRMLIH1c6hseX7Dk9FP1Ivjx7bXyxMz491NqhrofVNhaMH9yZ04vC4yQD6qvXhcDP1/NxQaBd8zljoX4+p3uRJ4Du7mb+RjRnNmT5xsRD8ssv3ht3xbLf8vRS+uY66yQDTlx/qa+ixz9jSTXpwgSCdmX1y+/1KbNds8lm6TUh34WV7m2sqduPr58mPfbvP7Gb+y1N61uvRtNloE9IzHwJCengURslDc5XGvKaM3UY6MXntMSuCPYp4tgIR7GW+iGD40LVdPbzZ3uF2uYIrkQPPSnEwwHBVy8TaJ7KuqlxSASoS5GD8rDaBuqjL8ehD60ftgoj0UoohsRWkID8lCTmFAj3QcjHfeA8Hno1OfB1V1kaaewhT5c1PRyDUn0SjyCpnCGLhBFmPhuIzpftXy+LzNXtOXtRZhjpnz15n5TRBomc9ODDQc22Rem+yZ4S5N4E0urgT/f8eXZb/D/FWS34Z3mq/DDe1//XuUlsKd6lnPU53qevc4ljuc7012ut5LjiI+ytD46sjimgJ1sSlPZBOr2/S17VjZbyCZbjqqyI7reza9zAp/F3fdrIvvckwK7yrc7cBBrBeH0aUyUcYh/DBXsXsS/rs7aUiIagI3S8YEiz7ymedeBP7G78DK8Cbb7O0+oaxbv6+KqPhBgXesKuXzLpc9XRz1VPEkWeF4Qzl04PeWdXDYhF6XknvnJipd0LoYbLQBcDTl3qMwoMWq0qnaptW98yRcXpKZ7WsdFZ09fdmVzpf47vVCQOftFBD8gtoaUBIY60KI8WlTj1FpoaevfSlSDWa77ctAikRZVgSco4TzHfTiLp0JJWNags9ZtIqcZ1hKcROyy8QqN08PN2zH9KrDf8FxZauIiSMyM0egJmDHgZ1lW9p1yhX8uqVvJBLArQcOPuzyJvWn1437Xf2kKbr5/pr8ja3NYOGQs8gRLz8LqfoWt6AZxvYsU24VQNnqadhqw6bAQjl5T5ZubsRRqo3eUozB3SBEETGYbZFj75q0nvP6YieZ+Y/+hI4Vi/jrqz3CF2zlHZLuwioKH5EH/U9b4c34e4iLrXsHJZj59BCVMvHqt1s9Ub6JPhqgfhYdWNJczu2erKF0j8LRXHp4Tg4t6bV3IXu0udihxFIg1tmPFgdc57vr1FRUqAbxAgR92V3UBRMtaJpdS6cXudCqZMd+HMXOwtnKnsTr1IziXi6gzL938YCAB1M2itnchJa8BSMaii/S8uzI/w7OUV98BZbeFNe6MqX3SDqSHaM9Nn9WrfDzczk5CQwYrL9r2U6W/my0/btkOmFZVe2Y0qNcA+yKoQ5Zfav3nkYcRboS/4dE1Mgc1Hl2Oodh/EJU5CQk6lXUO/FvvVv9BFrk1cP1SZZIkzsTD2jRyXhph79U+vmdnCyVCr7PvmU/OdhVOqN6x+OYAfea1lEShIWnxBFnzCyoy+7hlB1wrIwr6cx8VBmc1AmeApRz7EO2e9dopIxpb8XnRIRjiBTm2ZYvhbqQ22E+gS9lqHPYEOiADgVnFZhr0cElPgY/WwaOC3oxt/prXI02919s1W2j7670LplMfyBLM/5fuu4N2O/tc8tIiVxYmLif/V4GpkvmDLBvyurAfbj/GGN88Wm0p25qUwcnYCean/yzBYcI2JF2wG/OW7l8MddPxJkDOqPNSlhY5E634SKkaXWIPUqHed9ayS4SFeO3l1bgA+LFHEmfqtNBu4zGRxAp6BBqTICokkPY3TW7p4fMLqPsHSgDk4QIBt05ACNh2/fSGOMAdpMNiHb+Qx56dqaEratYaRtYDBc5a33JzJHrWPYtX/MpdqJOxss7yxSDyR24/WeDksAsgHfWFTmP0y9+DqC1CGA1NOwyQrRmPA13PrqTgGM1NVYIP3tC7H5Wz9QVtTzneim2K2rl1KiRgur0d3krsOCuhj7n41MEiLCesz5PbXoaB7IUGP0sPYxuaKbal5m1UADdfDknyH5M4zwu8X4Z0iYF+H1TEA3nHIbHsBe5NvNVdOlTyXxTQIEFQg1VO/3LbhJha6kgSwEvdEOrJmKaZMi9YGNV8AsYuNUV3YSTXsHu22UutwG+CNMg4fpNBI/U2Q9te+zbdwuNkjyd8h2cVjjvlYyoBbjeyaI9KxiT+GPUMu2uxNp2usIa0Ob/C/MuuWAdFvHzI60cbq3FRmpRA9CS8ucZ+kJMdrMLsOCRDwxJ9sdxq9HtJ5WsRFRjiYG8ouwOF93B9RAzidmJHUDB0BhHP7zYJ2833npet9aH18ivy6AwdQU2pjhehwWiTdcxgRib6Le6egFdlDVI0zb7tKa9xxGbVvUxtyc6BfbFdfivsUaSDfWMEWBR5AVDADj76oYgLOpr5/iLj6dDqlyYzms+CxbdjqSueFqCfK5cRjQsZUdS568V896zL1aSXqXerWyv1dnyg+c02nPDLIt8ZX4S2JsITFsei770rOZLN4rACzzl3r2HWv733G2/XIb+vxYvr3o/1o2AKwXAxs1+3Y079vvF337/cdMkK34Z1uJIFvzzrrs7DYYRUgMYaELMN+5fDAO7wLrD/AiZRzsu64MePd+R+TOH8htFTPVXMwApp8nsnqm4JND9Rjazd7x+RtP2Mheh7pKyiJZhW/yYji1imjJbpQaPFfmY5DAaUh8U9jK/ezzN36+LluWkC63aG0LwQuE7UV41KEFezoHfPZURDvPPD3tTA0zBdtnHqP51veJaW/5XM927oKeVF6IGjesTtRSFuO81VMx6Nn0cKhhh9UrhtWzLM0rHf5sTRf2ym6KyHfrD3yKtxIeHmxqJQD2bPlSdzN8Q/j02tPBX9gBW6TDzVrjPORgYBtbIXnYxlatgdwMNdqZKlzj+P2RULuiArWqnuA4F+BAwoHYY3oyPYVFfjOStaO+wDWoLVV1zq3C5PRBuiZjhXWLXZwFbnwJw75FZl24wn1JxBUnA7AjFCcSlVenekufUcglB1Bjnr8mP0bZrpa0C1MaEWHf48ihbLeB7Q3gUDnWIXM/Y6jk7l6bBVshpFbIb8vAl+YpqWZ5zPrfbFeQkJ4hcYvFZAW780wHBsPq3AZDv2Qw5N7Z1xweva1xzlM0GsIPOz+9gUXNWgmni25WsxbDC9UsXFVTJJD/ubPerlrRhSX/aMfSSodix4XIDRD1jVWQ2whlKT7gFXag+hJuIHlCoBtrBQ1tOtmp9A6piTRARNVpbeLXnJ84OdQFTU3oeaTHw4SqqBRqdMWq2ZVczdao34D5DNuEXQGijGzwrjPP1hNcFufAFXrs5FAjw1Ex8r8hcR7Y8V/dpIa8K/chByCQXnpZME0WdgdkRXZ4ch4UOQIBwSc176Wbkqfvdtc3XYW5c9EDYxf60Q2EnbGGOLqY22/FDuvY91x7etxwcyd56//F7ytVyAFNeA8t4mN6DcMSaY+d6lDtH4LfRXSlV1i37OCsclqzDw6hHxqAlB4uhug05+Sk8b9uiBZhhFqd+MccoSA76dlN81hGJshO/PUdGDrERG+wcbe98ysna3SB2CErxrqmM+uNeI5yPyPywxx3hwvvm+FB42QTG/J6um2x9TIT/4uJgCTiWIyPi+I73OjFhDrp2e0ddxdjd8ZspJA5NCYE++PUZJ92OvGlQJHN9/tHnCuya3fLu7uHxkb37YAyIvIpUhOkl8sy2Vk9TwRI9pb32sxvTlbtAH/T7bR1d8lTw3MYtLla+rGdPgHxE2AUwlPkGhpQ77wiyEYxBhPRB4zrar8njW6zabfOrkXmpRHErlzFuKssh9zAG5ALz6MJ7Qa7R6hANa+MHTDbgHsxwTGdIAhodqfLIHD83EpPlesw/st4eRUut5FLeRqCjp1ljVlBZnkGasPtbnaHGx/z28S6mjTKJnuM61l8GZIy3kY/nEAtgNaZD4AS9d1pMFbftfOG3EmWkbXXmXOxF8Ipirrc3WBB7HI3QKFp/WWyUNUv6BbugLVNAIeED5U6vkZXe6ZmT10IiOCNaxsE3MHxm5udtV6nkx4D5t4+6sA5cbFU6D/tU9/YW3/0w294F89eQ89x227vIJD3caB7cV5pHd6DjgDaWw8xXD0B9LKzNhBuhTtDE6VmvYYMu9aHREQIpqzIo3uvCAosfQWn5rmn4iMBQpdphoK0uo7uAvbk0daBLMRveJZoIskqCFvV02P6/kp9Y49I0TGb2M+DQ4ZuINBAl85tRPIOhISQSWett4hOPsFs/A6zqurTbKwmQjl6uevuMLswFeMTUpvKb81r11yfuv3Bv+5NQohS8G+Uepx8BOz1xh6q7vrbg8XTU6npB6swN0KOcTsNz9PopscZiFyAqb64sMg5zv+Dk3fvXQhKdn7pscjP6nNH+WnhjiJXsj18cuF5sngeX5R/8kwwYY/zbOJMbgoA8TSOCD/rD3XXHeqpLIpbBkfD8BKup95ISvNO2MHxoHpOIxEkil31kfJLjk7+NEepIKlcwizDeRQAvXS97JP2bV7uke8/uke+P90j31fH2KivDa/UhjdHG165jeyavSa79dMyCUayHx+XEVotV5CxucvHz9U6WMv8QlpxtRXkOYfbcZ/z1ocxyIXJKzGMQfB5FkYo7NamNtXmS+B7z9AD2JRibEUYl5x5GvbrWrdkOgdAtbw5UN8+LqmN1LqHwTcaPsyzentruoMGsEz1MMnTit4MH7jyhzp2MEbVycYp0arnWf7YmniYoxao93WgaFOienWky23fnkAxl4Zw/TH1AlRf9NYmWiBJpQoDgNT6d1KH9Oy5b8/F8SUfbp/QvTBpOppfIHflrli/d3JB7lJuI/C/vNwNdw1hIA9IF2NaFSbs/2eJtOwJJeuFlZ6IOdtulW79kdxqZe56ZggfL8CKwrShPoqeJW5/0EGvSp5EgRG7DR2fzGkojAVYYmBmyAJvtAegdQ4wuGJg00jeRjZK6Dg483UBwH2iyKGE/YpFu4KQgvyLE/mzn/JOrr34Whd1bVIO51bRaCz+RnWPsFslPyITSYz24nHNjoFDunte0R5Qx6R3h932QOlwZm9br5n7Jdtd3dRUZcVkl1Wh8u1rB5pzItjROz4L94w5wGYcyCIk7B5oN9E4fsnOo9rr1Z+mlRu67SZgL8einfvaVXpXSMV7dj271Ifnjh/av1PeXx2L9gmrNJJmt9GM5uz7VqyhG4AD2PcZ6IDpwvN2zOwThcrshePPtC5nMgzSo0YDx5VFT1vo6VgdPRSlUWpkNVTiar1gS9+orNRRuVQHBbbnfFxiZKXJnoOB8YvTyiY6nX3xFdKRgippQLokzZF0oPvOsduv+dBD/i7ebu2gg+SX3E4WvhSc2YCr54LsflknROcWFb30xZCBoKq0I3Qbc+L/i6wl5I7J60iCGmtSyxg7mJfIrybyLsTZfW6yoJsOwlwQn+JtxT9nj63eLzpytkmYtUH/9o+ZzlOM0+nCeS4V5bMBbVGhYOIXNr0xUbz3peGY2Qk4hj2gnCiyMoqx7ALg0l7fCNwfpLl/wOGlJ5cPVXkpkyg7cI8WB3I9+ZoKr2XwsyN7z+J1Va53H/pHnz9C/Lj9757KH7Wsjp9Xfes+b+NIlA7AxmOlgXw41DnkxMju+jip1q6DDMlgJxno4JsvAJo3vPMGVRGo4zuELc9rwtmmfl6zJn9O2Dn28hc268yZLvd2niesMwreEgqYfTvHFp5L4NCxB5xtTS/7bbkjGvzOVCvjjF2ozOS1TXoxy8+l7kuEj+sREHBFMW3OJswAlg6xPDhQr1crge+5xqmFkcwI/fqXpfr3AnBnzZYLiVguf1lu6wsZUSx/WFrVUiE0SuUPSytaKkOBUvnD0kBLH6qi8KEqy3wte4AVH9B6npbVUVRniaiCX3ta9tonYjXW3mGQ2D1coI6QAmD6e80YRE4sbXWk3mjniIyHDNpRHTQZk6R5CP9Wd4zJdI//JkgbsrEYQPzgUDIocqApRB9SHMMBD1OUpCMz2GarsqkStcuXKYX2cQpd25NWMVS7oMKxUW5EpAcu7SO9ib5GJ/p5dqLDbptPdA4l51izSlEru3a5GkDUQVUnoYtae027QdfagRKU5AbhrzjhutNgX/lJTdFW5JMYwIVlo4GvkiHO3v307DufoXaTvScE3oTUzN4rgrAxdplKgrhdyOWkHRTyoc185zc/LfvGBw0ff3fvck/vcm/v8oriUnODMfCfq5uI+C1EmxiYsb41sL41IDSSAcRg8MxBCA9BLlMFYl3keUc0X6TgKInjrYrtW14sqlwkfGmsekMXS8tAZOfEc5JHk5RuWWaJ2P2eyOIn4JwhRpwTctzkUlReA4sA5GWM00v8lLXv0D5bFGqRnwtVEY6j+GcpJCQMCb4IyaaIxdp+CkWDm+HY6lfib7xTvlv+Dtvfyc7E3yEDZJKaCkv4FfxKxSP339729gIYRHaIMJTO7GgXbCryag/x8gceRTCp1eE/uGAynJEuVwpKpZQxKAPQZQcgkGr7ZDxFplRhy5ElbyfVppLcqu1rA0+nktS5Mr4QFlXrppSE24pfNEBUklC4KaltY5BtZSeia3fCe8s2jKoym9AToT17IhoN7kjFFyIaF5MsCV9obTZ4A3y/wKRS5zxYRfAKqSRLElaynfA32Hku1id/zKWjm/CDLyUuiAuRGusJCpfIiFIwL9HDFKVOE0vlLnSewrWPTBS79Lnek6ITEdVcEOleuyLjQJfwMkKhc3keF+jJpJJtVxq9sCglpfgZQRLh8yJ8hlxbSgk9aqwqlGr2USrAHakISgUiVsKkdp6llFyeC9M/abVLV39IAXmLKAHbFGhpJ6BtdtqF3uxLgnNZB4qOu2/neVzklTgisRZ0O5BGpJDH9EAwP7kWOFaRwyx0qspA/3T3qMeUMPfKNvLEFe7duH74E8KCd3la+U69f8TtpItWuO9x8/tMMZI3cotNCv5O7lezt4ksFDH8ZpNXfpMpVZ60vjJXGVaOO+liHPzZqk6pZgg9NigprWXNE1pQoeGOiEB1oQ1uTZqylI2ngyP71P3SSg7Vge95BRTeBnUuYasTYfnTFHHPdAvvf10OWucibk4EvAwalsQskc2cmyWICBxliMToOSNpi0YtZK7EUqwgZF7SWuF+zlMvr7s9xhD0CJ+0uA9rYR8G2md3eaJ7xNdy1/ZmkykJlrpvwQkiDTRvMp2Md99keoveW0w7z+n1TgVOcjasUNJKfW1w0FqYijYbeZMzt4h5YxwUbQzoUFAR2DfmbcxuIhoz2S3+Mu21chOY7QDtHhwR+a7ztPkYKdzKKdz6ZVJYe91kj5MFSaP7i6P2IAJaSGP3Z6Vxm1KPfCAyqtlFN7VHTSa99FIG/+i4tmbpWRPaT1Nuyf+h/Uzaj8O/Mp9JNaQTxe/7fH6B5YxG8Qo62nl6nN/XZ9s4PB+aPdOBbdqd3vRV9LYtGKa6VdMvyQua67hVlsGWFWDsEe53ZeGQyTreHtTmZPSbxHYcc9SVuJntGm8P45dwUoswmelJnfQEEZknPB1JOnflnLRnR1oDf7WSkzL/ok56klQ5CVXquyBQd/HNO5Ia/k17z4TPpMdWPb8f4l9inAO8IhkC+PhQMmzTquK4OtvzO4V+CiJqrwj/l5gZfapo+8X7K9q+LB5beYLRLAw/n/Nou6EwYMFdXm8USBpLRhurygRGR8Hqzd7sKqbVoCjyhfAa1HAqZF8q2P2Dbs6lMjeUU29yey/8oFvwKsW/8iqFvNTPp1CUTWTw5zV7tqZPGGmflAxAm/sNHkaBV92R9rDMTJ7f61kHP49txO8N2gs0RwEYXPnH0mLSyBDL33cK9Zs4PtacCM1njyh6QAvLazM5gbqg7FMz7qKfPSJD1YJRaggWmMHkBKmIbAFDHaXem037BEvNhZ4epzX9ZKESEDb5k+URk/944gZ7vNtGbuShZ7dPxmhh53My9keDctFqG2oVSXN90yzKe3k2eskfJydP3CSqb8t+97D98vsQstFIfgP6ywINYaeYlS63kiecnbbWSTMnbYYhDutW0qJv7kkI0WdDqfq0a1M5Mt4CmUcMmEPQUJMhJp1ASn+7Q6xjbIwommBHGhBlbqA3zQesaIJ9cBD/5w6q0CoaqnDRH7a9pen11unFenyh/iw2v9ZbTF8lWfdHlPb91T7o9lUTXWKRcmh/tc95fdVEJTlRR7BcTYHYRQVXNwSwk2ynx5g/sj1kR7wJXUgYwt9CI+yO8fYJUrIAc1DlSqOTLkwWygwegzQQIYEJBVUO4qR0RyVIfjOc72bjIlgiGzNv2olpDyYX4DRqQXKCGqBbyF7Y4NrZtLJlQbJgWr+KZZTtDEGKDMG3Ag343A9in9zqky4T80iXYqEprMxHuaJQtDRWKMKIzszptJVZ9X82bd9ilLaQeDP0BlAnJ1xB20nTT1sRJg1GpuqZU8te+e1mTuhHI/Dg7AQenI/Ag/MReJAEHkwGfwYCD/4sBB4sCDzIz88JnB/ODQtth/sO52BjVnqVjkZyug6qgwRg67Kba9m+p2V//9vZIyfG1gi6F3GT2cHrDe589unZN0cYD3dzn+0JrrYD1vSkByuPwfBkm5edWHafS2tTnB0weVRe75Twwao7MOHvKkKJ1Z9/QH0WeNYIKAp+Zo3wodji40+duq6vjp8My4w1yAwHBoi5k018g1fNTqoZDG2MaVLfsMpZrI/mEZ2Zk8eK27A7dWTxtqeepveNGd+AI0a8D1hZyCkPr9kICTxKzSrWMnILLdVkbfRKsSCucLyxD3gaNcGc3trv9bQ8NNYj9QuwljNzzkhbui6j2cR1WmeH4KvY1Ni/FtJAe1jJQtwKCGlDUGJGBloXc/kNV8lmZwu9xjzC8ARJq4MCT7PvhB1tQOhWgVluMEEGFcQaVmhIkX927UgXWLdJRtd00hhGNVE6kgXnHtqhPpxVvEtbsNqfcD6eThfmv4d2CceL7rRQ/qQL0Sp+D+LXYCK/pb2hXcmCXHnkjBtEMJ3T60AHOKqneHHx7jg/vyQkFoYSD4gqgb60F+Czp31pMvsnLuz7ROmm9OmX/XUL7NcNzvJ12w7xq/u/D+nIDFKvK2olAzliUX7jDwQay2vUu8JTOAn49dGPdcx5HoWKTWufB1ROg+N1FY5XAywKOF7XwvH6ORyvX4Lj9ZlyKS8cmhn0/uUBU5+wnmNePs19neYa2Q3Wxa+AftPOFZqg23m5ulFfqH9229I/0j+/W/hY48+L6DPeaTONhsjW3GG2Au91EQSYpDUrHBiDiqP6S4jhLhTXPB3HnE4SxJ9Xpyn1u6rjkXaI9MoQdhe2q+4E8v/BDgaF18bVphXED9U7udu/Hsoz+DYJEKhGK+/2FC7GHDAZk5qOiW5Ct1tbZFKT55iTsaizVbcuOLXfblUQVUV3G+Ku89u2qHg7B/oxDG4a66sO1w3YG7uzfpc2065G/MAwqeRQgKFIHwLd0Ss6jx5O6hqDbD/T5hLsfS18xaraQSqn1q2Uc6z41L0m/9ZK37dW+r91Lwy1GmbjISxC/tlqv9fo95oZ32tTvB/FOCaGn4zHcNpNxxV32pDSNzGEN3vYrjSI+s7RpBYzx2hqrkj2hq1v25Cn0t3G4hdp8fnr2TUpPp8CiVX7iNI3/tse0/hvs+N/vr7oUajBF0cFJWZQgI38QsceXdPEoM6sQ3/+Yxr586Pcm3o751w3O2g2qvexskFRoDEcmLYc9PhyRZ2ZXnwZzXYHgFuopac5OyD/T3OuNPFaJpywXCNFf5DQU+aCeG3ei6s4oAdMqR9L8E/S68dop3hB0utGfyl7IU/1ci8vKfZ4B0oZma/SjMz52/O5Xnq7Dn/v7dL9hmgW+Wvtz8vcmdIdNwu89YRfUuCtL4OAh3tRZXvqxrepxXuUNDnT0kgqrSPBCEDoEaXdkvs0Z7PeOqD+SPAQa2CZOc1ZDNT3xF+vICOOfq8Stnj5m41Fe5+FEiiOe6VDRaHTK8xTZyTac1Ld9qHon3TjMfagAJy/yljEeYxbUbqkKBztFS4vCtf0CtcWhS/qFZ5fFG7tFW4rCneX3r+39/4Le6Xbcxh8+jdHe6qaKmRNR71IFdwR/sSjHSCDuXATT9Q93IVHtZvtDYHURl0AKe9c4DPyD/0CLZClun0KRf/KLbD0kaUeaS5yOVa3DnG+Tbyj6HkjRZ5Vkwec+qweUVLZEFNRkonf4xUhpis15cOo9my5dYhf5ZzBbyHKnvprAbDVwl+JRBvlbSgpZ/RS/0j5ck3988xFCNE7AwfplIKjBKVjmkc6GI92iG3kIQzU2KyIZ9toYWUqY0MNFc07DwN1cj4HQg6AE89OzYhmtWViFPhs1hEyWG3TKSapKxYUHZOfsl6zt3AicWXx7C4k8QidgVuBXldlLUIMXTdzu4RQQp6RDraZPvyx2xXPAiWG2VM0rirUeFw1kxLaL7D5jjV8iTB2W7hH5YN+/qDf9+Bpjpn7ljv3LW+uW0yoUcLywMbOUW1Q6QhoEZAuPIJUJ2eruy+xJmUkU1mivI08PxV9i7DFwCUD5nKe4tWzoKkOPHEZFs9FRbmloYgZwkDfVASebPQMIzw3dtP9Ry7bs+/KN40C1dnNauA45YysVmYfx7JPxPDBPF4rfrtxou+f6FUn4EUOOFzHAhFA7G7nLhOaBpTWdcWuFWCugeKgPk3+rOlq9J8ooE9NNYia2je0OirfmzV9SYUR2wRwqVDPXuY8rYBVXGrXjRwoBNv2ihoIquu1ylq8VGTUek23TBVCw3pPc4aEa30RlGn9IqLEsj5rK5DihqZncTXXCD/VYGqt4x9b0dZxucDDgMEc2wgEE5Uq5Jl8kPDvc8HvRAJbC+wZ+AQYjHygWqwtjjQWgOp9qIb4Uf21VP8k+ieP/eTsISxNYNFWqoSlQeC6pjknAel9FG4C1LZivdSI9dIsNgzhRmu8qRIGJQeisfPHIuo0sfUDwosrl4rwEgAzpZqDz2xjlEFSkdcUdTEFUvkoBgOHtvpw91TPeYa3Mnf8P8QYfxES13hwGwDXPEF5aJh8kjpEcRXOfA7Zx/KNI3zTS9cKvnHIN0ssHJHihoJvAss3mwq+WaM7NjSjLZ4mj7l01znNWY513Vfq+5orlYjFPgKR5Z/z+TJ55IJVznKW9jaD5+ebQbI33X9WduKV+lVN/SrZS2Wfczr9nxU+2mcNzflZ/7X4rG3lz2IPwk78e4pXBk01sL3dwDnldC1cUxcgw5CuVUpXoNRGRewFgF8KrgYvv3+yrSJWmqvm+3N3E1mo/BjqJw5SJIVdPla6F2TxLGXDM8rwan/aqytWcY6ugT+GjMIIH/ijT34yu/4ZXkKVUCdLsI6xMOVxIZJkPliNonBNr3BtUbi0V7isKBxGuliLBbzYwr3OGN3pPPtzDO4Mnh1Wxgk7xOACa6lgxaLzFk8LKFZBm+XkPzD12oKpz1amXmNZZBam3jwrU+dslAvU/2BstPmxsNGjM0deuLjMcAwSK3GcLFAvEd1FMxom3qleco28MipiBtqRRqUsQ4wP37XB39FP6qqSuvZ4SV3LtaFfOalJaIjXkaD40KhM82FoKqd6Zz+D6MHy3ZvVsne2fr4pf74p0+rnYjozHyXMLJQws1DC/EyU2DYXJZbO4ISGhQScjRT/237/0FzfH9p8gJoJ0FHF+j/a6C8Z0YOkkG4WozhSKtMgJly4RQknbJ0Tvc4Yb0cJmyxxplI3D7lcPZV6BwtIOLntH0y8g/Thkf+tPXDCJ06eND965tTaVzz3Qyde8KFzD09Ord38u/jvr1YDyS1xp5DggFdrP7dy/23f+NHbbp1ae+e73nPrtd9pP1NqH3rem3dv2fW62yanFA5u6uDkZPRdhBoLTzoaqNyQ3jbbofXbJbqB1Hx208lcnHCtyxPVMHAWAa8ZA5Ezs3kESQI3QWtNwi4jVTXon6Y5pJeDTY6nVHXsb0JokSkIWAfkXNo4eHXaBGXt70h+D8jvxsEURsGBF4/wb/PFI5Av9jjS5uqxWCXAGaHKrlH4op+HRPNTRCz+yQDJzfg4/d/a2r/9tPnVs9zVU2v332xefv93Nwot157x2pe8d+nlbwGFf3ft/oHf/dDHULrzT77lLfjC51jK/z68ehJYe3lTl7/uKe/68C3vlqZeYF4zckHlQdS861UvePPXfstZI5ebTnvV4iev8o7IZQFad330dIVnsElLXeSIdbMTGNyWJYpE86CXWInaiG91E9mpRR81rl9E5QOEbZfCgV52hxNvysHZkCrKZATjmAOQDvfvZCQ0UF4RpG4zehjpR1aP3+i1A1uh7ePC2hOYklTTfxIl9k6d48wAoHYC4h3Qs9aNv+khxDT+hvyB/SRevigHPQ2iyKIWC3tEr3aFFmBETcPkrHIsHq0hOFdCeC4i3Xsl53JmLkXwLqwgwNdifHo22s3qG0HDi7KviuhZtPGipoIJJN2BluuV/jOG4LuPaJ7z7CsOEwrL5ZH4LMWT/f4hE69fRJplvxmfJf+eDrPOHG++zmwaYTK4zvxVkV8JYfdSWWpG+ZmZ2juiy/rAdRUZ0FcQfaMDYIqsK4D7ir9n+nKs2HEsJ6bxH2vOFQsZ+P/N7IGrecRn5H2RUb3cpA4wMbJXfd8t8jWMDladRWrE7724DNE+24sT8/i//gf9X2+R5n+erz8HKPMwfRHZzcnj/2H/25CbxQywt2F0AkBpWSgxWzhsYdRR3W5Uo8yKP+NH5zpFFgULQzcN4mNdgVxflJ09S1H8Gi9SzG1i2zcVzTH+CPIfRL/llADyUfwGo0b1Yf0T659Qqv53t8jX7VsYLlPk6/bzfN2LddcxpMjhsUKByYIQ/zcM51A+GfvydZu+fN2uigqbr7sHae0UwGhOGRitnGF1NAcKgLB4lBzsDZ4uSwVk9ia+OdKw3zwzDTuqIbO3KU4b9OwBFuxXm/xAOHqzKcAvaayOn596aiPeqIhTCkrown7XUgxvi2ypRuMgXgoIB1mGcqNxQ1Mo2zS3oYJRevGpgAbMbcQYsmVgomVOq8D489WQp1Ayasr7wExIhok+GG5RYgZ843mOOx2VIZuJyvAOONgw9ZY8Gv7i0RlkdG1lzrDXGw26z4FlNLUdW/LzROYOEpkTE6aXu9zT3OVelEf8Qx1rYW4fQaYaIL+nZPozUmOxYYBzSl8DHKYHI9K1U7EIkbKVEllNtBi50P34TGlh/512/tx0p5tV8Amn49edt5kVuW3d13kcQrOR3fz3kLHwygd792Pi8UcPRupQsKajydFLy1oOFBmMEL0nu8fptKv2rNcuG9LfiGtLLXvPp/N0eLVs9bjonpXtF2XHpcolyBddHxHNTccfoC31zN8OTOTdLvaEB7yNOaC5MKNtKK0rMPOMmK0Q6Eojcqvq+dVZ/gsQ4Adr4H13mjMYkO92GlFe9lCvrJ6X3dcrq+Vld/fKwrzsgV5ZtXiHU5RVYGe4T9ZqHxePOJsSd3ydXCVbbHB+FYgNYaZ4tLCOarKfanZZS4b6PAx7hc1UUKs6nu2+xbuI4HXyu35JduSvZR7K0+MUc1kz+/EAs4zpo40O/f7lLUktByJQL1YHztDMCgUw2zXAfOH0AVoi8qAlUbwfRlmZ4r8BjLFVzpOhsgJE4f4rLIjCE1jiX9IrWSxVl8t8KEH5w0J1zS0iiLK7W/HzO7OcZnXkocXMYOErsGlxI36lsU+vX2SRF/IjIQU/NSM2JWVieBDl4yWsWwZK1UMrxwKlyiRjXS/7IJbi/xuBSfmkzxBEjSBZZ0OXvi5mQ5P5hDrEMK9qlgOX2cHuU9yJ7F/kL6zTD8pfVzngQXvrwbuEOwCwVOloNrMg+67RW4eNPnWr/OX5+Q89hkfAGbPROwCDc5nP1d4f9JEbN7vpCw4w9u97g8keOeYoPn/OSr1BBtQ5HL75xLuJyn/H1SZ741f1CeXTWwrejegDKjsd6UY3a2BfpCkXmGvdKzpAZwY4fGWaAgwXUbuR0AmwrP4K5a2c2MgEw+ss7Lo2a1RyJJ7VePhtJuotBWBO5DjyrFD3C520N/bOiE3/IONpUWqZm1Fo/1vKsU9DFq0+jj2FJWWOXaoc66ZGedbkyyqngcah4J0Q1+DJ7EZwMRjT4FJ4zdilX+sVvOaVec0Hr7nCa37/AtMjhV8ihb2jv7Gs8lT3W8ecTHoPUhE5bneYefrTLbji6jf2uGLO5mHEwPFadK1FQrQn28g7IQsV/uCgeowBo/HXjZbEev+EhFkqlmqWikQLn65VRnUT6JXd22xmeqRa0UTUOPLORjvxYVZTdw235K6BI8Be4XJbiLf8pr4l4VuK3uVHcUPMfZJ7bbhwInFLTiR6hK1vL3xIphXO5tKBKoXP3iiPvQufvTPh0uDmbgpuyU3BzR0a3JJDg5s78rklRz43d/lzSy5/evwZfcqUwOxMOWfJTHAYaRuqbMupGNfzG8V/ee5KGEfqiXOo7WKdcuBXKdR8QTPA8oafcsNXSKox5/nNalHoInmB83TNt+Iqkv4LoRPbXbN7A9MbmKzVya7+tBOfXvz4eOnHnz0F18eNGxQfRI9kRlg8X/cszM9qd/wM/TWHEpcpd9Oqov1WFcI0oAvw512LUOf05/NzCUG0Zhp+UKTWIMN0kX0JY90Suo87e8JYN9KtVaUvUatn0X2sm4E9ufQtOHkWxmdm37zdiV8jU/UwdlMy5w9XTdhLatzDtaRnTLjJKs7AuMl+c5VzchYwPIimrREYMZg6E7mL4TV2/LIjzni2Z/cRB9D6lWxRB14IT1olW9hKNkLH8KpuWkS//Rx1Eg06o3MGlh/sGdmmKFxAcJeFK/saVid3PSOMPuRkX3W4q/LHR5jQkUBBIe1lnu152FXnTR85ERWIdCJ/sRDsGUyKULXI5tKzkztQbIi8ibtxqZh6S5Ra4B8NdJQ9bzNHplMHDn8jzXa1HM+ISYz6IYngl5+Ytp9vLzBb/czN83pUddPKF/hzARqpawPDPH1GJepegz7fgTo3pkzi5RPuQtOa1rnc+QALRDWN/+KGijGMfKFFGNj42N+bBN2GGxWPC6Ef1+M2H2rR305aRZe/5mxgkm8m1ZHeKkhgdmp3wDNMhnTgfQxe+PiK7N8YvMBvFy1B8QsRJJADLEbF9wMZ2M3qF8geQMraOd6i+lYzxsTPjCIBKwohiQfTAz0rJy7ucPibAU3nYEWkfFixqPT1NZun07OJpGb5ek2LZYnndgGpnZ22XqZQN6KGSwAuTybpT56eve8pBAXpxU1k9/4Pfvc9+XeX7t3gyf56puzty88W9Odns7DKKptsPjafkGv+487HplvzPB8boZUDm7vTrvfrm64FWWY2ttSLn4VBsE5QJXCyPMman+9kbZZMOkhV6dmOVQe++hZxUocappZxDPI6bK3lMtBLTy4rehmuH2dqICc+LX+zLDo5GnPRCft2vhZb+dc9GSrMlw+a7OaTSfb3MMHUP/QK/o41vtIr+O5vouD+okDhBoGDeFJ574vN7n9dxLX1r9wiK4YsQCqKc5tdu0oLyQmdNGQmIdFlKmplpXNSwNyz1t+LfMX4Y/gLiW73oEcATGRwJSvC9l1Z4sxQKHo6srAAVUoe2+JQuFUUdbKF1DGd7H005lpMyFwB9qxurY3JPKCSCffBsxKaDmllRIPGJnrWdxhg37Pmmz6oe6rCYONbg41vjR2xGjtENQyW2AwPRVI3taqvJMa5C71PtzaiS2knbV63AC6CAb0GZUNHD74R4CVwkOAqmtGcdZrzdrdJw+SN9u8hxWtlJghI7i7pklZILOHW+1nr625aTarqyDaygSdyarljoAJX8vuQdPE+kSCso7sDLkvrmghZocDz1VhaWc+cy5UNTI+WJ4/sMObfJq1nAgTbM+awiX9nHbOoqVjTDldKHdaewSuSXaLP2agSSonhqm8dulSV/bfRD6hY0tCypZk4KvmrPGvb9bXzvV67eXdt53u9NjPNJT4Owgrah5b2YU57XrzTtdu1lfi1WseQQ6BqU+F6imSby3XuGJvyJGPK3ECdqgK4mD6JCVTU1pg7qIa0NRKTcrEiVKJyL/9NEumefzk9xXgQEa+A2fEpZzhF4rvPIUuadPBLrvYQSZDTyoiC8DsiuTuaJrqKLd3IUllsfvCdK/bgPDbx+/k5LviZ0E5MWiPb79hyd3WVs1DBkFuwjj5JmmLSlmwPLxXYcZgZWkJ9WFh/Yc9hFgCV1mGWPWp7+mYfmylcOdUVzqlJvg2Vac4ISH0JHSRtThc6SAYwxiovZf5F0D6XOqeucKAQSJWlVtuCo6U8u7B4NuSzy5wnWYlmM8Jw3Jse+XiOadebzDRchsra1blZWzOJCNGbLplZg0T2G237tWbanLZcNnNG47lsr2Vt2albI9DMGV2dc0aHc87oKmd0ZdqMrkSFeMK1nYP2ZjD3HAzmnIN+VCKQikTr0uyNKPHUmRr02Mw0sxUs9hXMUUbXedlTZMm/EAkfPOvhvIHOP1SvPHUIZ6pOasiKIO90oTz3S1ISWPcTlZ5o0pS6ulewgiiIKCKEPGoAsuRpatJK6r9APMUygyNIrZwD0Br6ZVO/U8HJxFSk8504+pKufMJygF8ebGwxsyNG0xPZ+en3JKMpSUY7ZKYkGWcffXfO0SfSQz9T9pPHsaw3C3m8gjxuiTzqlDqDOmZe6hhdQEido7Yrf2f6lhB05G5LlmkLhltiVjeaxslmbrKYucgScQaXZQ2tEYmJ3tNQ3YnJY4rtq8iwN+neeql7wNVgP7m80pVtYIDdqzueBP8vXGnOaeJ0FSrsRr0KLozkCy0aRg/cnFeoz7XEdDUZrmaJ8tOKOgJWxul1zOS0VK1pY9fnlaqzPYQToYq8Vy4jfd7rPe+Vno8Kja3vAJKOz3kcpf5hstCjDuO04NV7QQcnelU6YyJWZgmCR59KJVq1rFOg+pcjPiuavLNwOveY8chugbdqLMqSTh4QZGCYrEAILI9tjpzF6gs/JL+GmM3ThlAt5bvkqdE0XOUkNgpL7zMVKgPClkr/noxaWH0jbuOcDUxPBR+Z05y1+WuW6WuW2O4wuRLcgO1L/mCVM6phNz53Z4ioS6hUklrP0KeXy9N39lErwUaZ1BL5nvdRKFa2IjLKSA2JjkU3p82MJ1q+JdqWgmhr6UFazie7kbj7pfy6VPXlM5i/mp93pu2gxsX00VAoiL2Xxha4yhEu1teGmg+RFAn/rIRt0EX9NTgMcWhX7MVMyPviGwJuZZcjx4GCS62U3YMGIS3pFS4tCod6hcNFodMr9G3hLBzpJn1s6E4nahF4PBdF52FD5cB1s7OgOxsL+j0WdPOvnSh9rWVBv2BB5b51j5v9irC1bTaWbRb2w9nLNJ4zQp7eBsbynLE8Z3KamzLNZ+e5WIHTh5jY1p4n9PGcmZXnzEyec/X5YX0e6L7uKoqA6TxnSjxnyHOxOgA1OtPYrghzW1nEvi3pFS4tCod6hcNFoaP+6F5hq1bGpuPCW4EgrxE3bw0WRRowLlvJ5TiirreN5o0P1RpNHR+r/gSTdRx8TaWb3f/9P93YNIuQCiN6zSo/mgh2mZ30FgCyYLUvZzf9aYiAjIF5quhDP/6R4ToJy/bADQgJSwaY4BYk3Ny0cTq0wSO/RYX7kHG4wgSaxN0unm2T22CRGgZoofP/jwvnQMuB2T2oVMNaPWo0B5Bel5nsAoLMPfHlqXuxWn/MRX+cPfFigrgeNp2nGhyyefBRmBS9h5NzUzetEP2WnFWF1WGr/Pm0wxC9JmxwPn3DHnAo1bCit22WN9UVXaaqZo2XCXUBFooXHj3CF57BBCqvvcfZ1BbGFB4L81Qo8JjQDwIwXkfTJrE96JnlBrA14wfik+xGcJCd4g7QAZ9GesTSi0Y0lIHl9KbW9YAzyrR7rW4g/j8vU2aVEF1WruJTE4c5ITTeLGaSkRn0dIkZV9DTbAL8P9vKNTklnGFKzh7BDO+8LHVnI5hRggUkd2AJ5pYI5k4jmDuDYDmdFEzF12jNPCGoa+njzkYf39LHzjbo0v46zcdZtcvlqYnfAQHVS4uA/YcSX09PWklrbPUr04ErkoGd6cCY2funN2Sr+0hmFNt18nbFdh04twuUepuKsaXTqGDEo0i+dBEh5sCLLmfaAw4wXweArqh2eleD3EFawIaixu60Jf8i/U8/bQfGhLbnik7cag8knqVta6x2nq9ovEnrhh5x0SIKplHXzdnRy8nc6rk7abhi2c+pYsldmY3cXsGO7mzs6DM2YiY7DpRp/hjJnLo5Z5p+Mua5k35V5MupNmBzoJM5H9fkVebEvCfQVI85XaGTW2bOZsQTIlCz1g7Uyij7CdnCCC8hPVePc3cmrWQgXSAciODfeKy+Te4PgCWfd2jHTuDJjaSDW9MQGX5j+fzBdguYPWP/5JzLSkK8luijI+vytEs40JT7X6+ei32yLXeLclCydMOzNxipj9ceuMeJ/0jqXfeayrkAV4EDnWa2BAbfKd6o9IHJDke4h1igU6fPcsyNo9AYH5PM3XEfHa+wH/bwq+i4bBNsuVuUs+O9G569QWCBGR2v59Ba0uOl2vFE+lBnAxqpkLibfT0X4gQPpbvCm/C7s73tn+fwQgXevVSS13jMHpoO4M8wuZYA45abY+ZvncHGsbKxL404zxPxM7hVCDzQjoWtBznntGucJjUlkpAoJ1A3GZjO5QMzuNzTnSzEfvaPJ2UHTsSRjkj+WmkVa863ivl2Ivjzr2LeDLFhJ0FPWDQKBaHg/1y1Kbh/EN85gO8cEBYfsQZz0F7Iwt1ti/wSg1/cJM4ZvXdY2iK/uIlf5heWk196Nzx7g4zekhaVX1o5o/f4ZWU7VkZvwWIBRhd1LUOG5/k6pnypFpByx/Jytyi3HctveIWDajJLx2p50jEycqyM3EpqbICYKTIVz+ZxcaAiNiSPkpFtf60egD85Iw9S3vYYuaWMHOeM7IKRXak2KyMP5oyMoQMPbxU9C0yMmQPo71DnWAvDCxIJgfi1rRsUk9adTUbjxuANMJhTXeBw9ZiYKYyFGJwBBaMbZGQtLYmN+ZbEeXl7viXRegP3eJu4Vz6dF+Bb4I6khmgB2ds/68BTKUEuZnnGokzA6dJRhwQnMRpNgQfomVJ2dpaZctTvFr5K3l3o6ijy1t2WLvygdTzOdgOv2U8WXtlemO2+fLRNgsJrZYVzB/fwZ5gjvvVkufB09xaUJauc26FTSytEAR/HAz+pbiGhFr76WY6ze+L3pd4tcMzN7vI78Qc8aybgy7S1I888nRgbcN9JfSZJzq78pIKAYDdxl58OILreTQawR1/4gWzC4ojEu12mL5hY4d6F/jwFgeW9ZzSfNnyGaMxdiXyQsV4vZ/JaYbVk/w0y0EJverkgQV+2U30/YpGEcMiTbdDI5qb2Otu9a1yUOB6yuIzjSU38fmC+7n7Ew+aboHrDuRON9di0Xn0jaSAjF7/OFB6ZeaRIAIMizbtt2YVPcDNqc7/ZcSWbxO/3SqThrhQ2ayf3fjpKtNXwsQx/guHPJebhdOhWXXELNhi6pj0kbJA8LjaQVo7n/zl7cjz4h487LyRDDOWJB49N/OEvmimG/pMn5uOJajQ9/iEf+3bL8gfjyJQ/IIFf4E9kDlN+KUMMlBJMXtEekOKIZpaCNYxlDVNiDVOwxkCZM2RFsKljj+e8gSWqV3bFXuTwAoOYEoPQhHR3/gZlEGwNcgYxORkM8mLLaMdgEFGcwCCyZhEEGhv0+G899l1ZxCiL5A+RRYxCZjIax7IIr2dlEfUCUhZxZ7KI6WcRw7A72bj+gliEWUjbtAliGzwHi/RoM51FjGWRygwWWdesJhoL487+fkSBrFgEV/n+J3lGPPsDPh7w8wcI/Zm/TvUI5ipkgEiLZgPkGXRpOWCz3uykSGWBPEa3bASOQC1C7JbDtL80WJVTGMo03qjJZy+BpFhnfRSqBVudh9xvMMNh5LfJJWmHPbyDpMBV9H2t/lrJX8JmVV3UcYAP/8E7kV4Kuhcdk6uA0oMNRS7OS39eNZlhovEK0Ys1kqjon5cEOLf0iF3TPybZf/+NAkB3tg9t9H8oT/QhYIflegDOw1Xa9eDPzCtiaKgmXoEAcbpp2O9pi29drLZGuRou2Rqr0tBstsYAFWO1NdaaOEpVW2MNZ6m4Nd3W6FlbI3LFMArnTFyd4oanu8sf1f5Yo/1xugESp60mfp+3CFayCsSkRzEZ/40UtfqL3itFA31FyUD8HilsTi98txQ2okKP6+l3VPfckU677iHRHMImcfzfQpZ1eO1V6EsL31y67iGbT6Xnuleh6x4rYZ1G1JMHox3OCv1NIjdwaqcut4g4ELUfZstAplh1PI3oTKg5jpmpGieGxTGrPd2sgS1rFtMV7hlbpj3FK8Zk8MrVWA65EjXZ0yt/lePrVbAKJy24qqxyKnpVXeVUFTnYI1YKEZTDrj1MxKchBkxEnYYXBIVTZENvF1RybRJVUMmbg0qspKTyhEI81JxeVyvl2VJJPvhSWoVbxvW2+GYZzlrfGB+O3yVl4fRxv0kKq8pSfy2XFS4G0we79p+D/eiDHZCKIvuPG64foYriUEVxmISnuGdCOPFqOYRTqCdAIQ6IiR9KmRwmHgQyjlMWwRmhJBYxSv/DW6RAze6wihXKvGG9iiEHQw3j4J+Gto63itbgY+H3rG5AGFKTPRHWIJ6rWbOuOiOof7U6pPzY6Q54jmfoI+0VPBFCCtL5KbDe+f5G32abLHnnw09UA1PVtTwoMgK7dJ3axGfc0jO9KswbBP/8OqrQYcrmUa6Xsu9aLJowsVqQ7MPj9wSqsFfWN+m452Q/dRDx5ZIl8QHh9A/whbX0A2p9H+DqBwAN71fzAQjbSl2dQshpoaxXUN7XjhPlwJQpb4pgIO24h683SvlAwziLjhvbcaPx0HnHzYyOV1TTDNUj1e/PexzkuOEhwhtHPXtuRodzYZv1TFCmToW282C5HwNt9MLURdJ6AqUmlfjdHC/705WfGDuOo7ymoii5+OxFqHQUx49QiMLsR5/SWJQw+/K3eVVy6f7VKTWAn6d3MnQVv5MDHM4aKWLPWWx3H/S8yg6zyytFS9+K9I4vwLkM5ylCSFdvgppeLe9Qtvpr8r3qYSK4XI+TSQT+EAjlYBFSjXK0cfh4dVMTG+Ujx712LbvsUuHJUH9uIJBzjXkvb2j2UHHkyTwB9dZnTaFf0iF59hOvaMtCUxdx/I+3/WZHejh0Sed9abDWedF1Wxeu/ezqKWAZW7B2vnv1eHbth6457nV0KSo6PpkqZEkBPQPsmVt1e7bnMEFokhP+2ye+JC26k/DAxew+OFl6xlkzeT0hdWXTMpUSfAY2QbP2uo9cerR2zR2rp9b+9aV//oQPj98N6BT/R2+8+uqrv6g4NVpv7fOe+ZUF37td6v2D94k3nL/+o6j3gtenVy3Z+Blcvp4QK1+Ty0mi1RANR/rd61oSrF1x6vcGf/DIC85ihcm1nz90zcdXXvWBs+SRyUmyTvR13zMTlR3uLoxvODYqdBSBn+9Y/231Th3b6243ONwpbjy8+rnFOPeNx3TaTWYgUeIeJA2yW+71AF4TTKWVSSCrKsaPN4Uwb/wv2/9FVJjC/s5eOdnDfGgqO8a/k/heL3vo3vz2/fb2veXbR4vbd9nbR3q3ZfYcTAL+lV+IsaoeBElaeiZ97LjpZtft3nUOv7ift21oXPG1CDYyp3phP1uXDDjPJfDFMTiYyD/wcjp+3JwzrrjFzkEQ6/oS/UaFn/OnJ72dBOnJf/9g9c60Nrb8lTe8D8Ee9gNrY6chXaAznvnbgerwRQ/wQJMM+jmgP5CTMW/j0j07D+PON3jnoFy+yV5OpfJUkA+JC04UndsS721KPNBz0ha9ydJTKmYH7s1HbX9Od6y2JKpltK8Fnr8DwYVWoOxwbaJ1JJtVE2gaZD86+prLmRDGmcsgdm4Tybmx9SnGgOT77jN+9MjYU/atOZ9O5PnMnZgiwtEd9937iLcRSbazd3349uPepibz1L6ABxzB2kvO/NOnf/cZ3zyrrU/eLw09eHgSfvYTvbu3lu+unoQv54QUPHL5qX+04YR/Wz1VCIvEeetkanKL3f3Zi7Gc3QjjOQcgSoP3pW7xzik9hC9eOzXJ0N/ECGvI8BzUUxKgYxx5QD4BQVCwGpSFE+aPmxT/W3vaHbWXve+nr7ptau0znvfgvo9/6ijArd73pRuvPfmeIWAuXfG7j5w8aV4IKfLDeFD+O3i4jLlUYGyFcBL0pg6K7LMlwzTjTx28fgrO5JaHial18GDLYvEenJL/S0HbFGAKpiN6mmuIGmQO9jqeXx2eLM2Ao4dfrHhoRb3JYtE4MtWKLG0SZ7LXZQ7y8aqI8eX7DkN3z56hlvTibfiu0jPCGKA6MP52h+tHesKrVQClrZYGk6DLJoUCbGySoDneZKlVaWHhOSPSlLL51YAws1INhzlTMinW7vj8p1646otfO2tq7bfefOqrHvzaC2+DjJIbOx951+/90xM++syptZ//ww/JmPwWBuKtD2NQLlstMwfbAGcKnkGa7kaIPrV2o4JrHcZsnMyp3iMqFN0pHQQ/r7t6avJgdPWgGdYImzajHM5TrOZtbYZn4exT/mymRubTQajD4NXTCMEDNyKCMoXbL+JPV3/G9qenP4e3X5SjndDDt7UB+ZCt/7FaogLNL1LFnwRYZwhntn6wdE9dghS4sLUNqCdtK8GaXk1488w0xp9l6SD+LE4XKFhxI12IHQrhKIc6oii3OkyTIaraOH5WsomLxzudbP/7Pn+n282qr0gqTG84jqcMb2Y3/sVX/1YEf+MViWqi40gB4uq9L331soOiXw2+gsG+iTvOtFh673X/uP/7Xjc78RVIDBR0FCjzBATr+nBqO5GbYGAlyOiNdxhPx+c+ff9rP+ewL9yt4Z5X9OXK6z7od/r6EuR9+ecf3HZb0J29L8c//7UT+ruyND0JXXGTpubAmN6Le991+d2Vzuy9+PSBb/9VtTt7Lz51lztHH24/euV7q/2dWJkOaycGUC+a0YmpqSP3zdWJf37ztQvzPvi2Dwh3TU+Wm99/+Jq7lRYMhPPZD/QwlTaygweOflKoeKL2En7IJ+SvNuAQNzmZb5LHsmvf+8pPyWgE7LXBF2VHrv7pT2Vga/mr2R95aLD3sfbhT7/n328W9hiw3ZBOZl849pabhZuGeu8+iVsIfcwkJ6Ilv9zI9V+54x63vweffduBBZ2ZHYhndOD4zQ+/X54td+CW/Td9qL8Dw30daM7owIN/+crXyleUO3DjsesfnI0EC2f04N8feMcXnf4e/PPbH7pRyF/qwVBfDwZm9ODHh47dFPSTYP8tHxqepQMLZnTgi1d88AOV/jH41we/8IZqQYKc6N7FQPi9uJPd9pqTupn/ig7Sw3BUfcwPYT+5d/x1t9wpj0b5e+UpKZ26/V++Le+Ic3a7WN49jEfkypX7P3ztt+JudhLfZ+T3B9+x9+8DvAOteLbfQHUBl8rDUuXt1/34H4RIET+5eNHkN173caFm6UVG+ce+6MArL3uVX37TR376z3fK2JXetBBvapTetO+mH99outPf9ONr77jXnfamE0pvuuL9k0s6pRd99CvvfJdb+iSDQfUxp4sX/eXdf/Gx0ou8iwuWvZh0f/jf/+ynJqci2vzLz97z9x6/hnIGLCGrCuj3gS/9g5ChknOQixE0ILkPSqqMuIj9fOPxd1wtdKznrMMb6M0Xb/nr62UMWnYkvaLxjx5+10g3OyHnF5aje3e8+59vlEEuvbRlp68BUT3bP7z0Ow/e/Urhkpkv3fPGI85s7/zrO7/z2epsL/3UTw7+tP+lA1ZeGdCu/NLJm+8emO2d3/73H3191g89eP3kMSHNzJc+cvnNHy6RF2ZBrPWD/e/7xF9e9Qa/98Ka1DuP+v1QLmz1/R/4q698QVgwf3/YYRIU+J/Y5afcp+/e+8D1BoSQWlujjdZX2wc288tVEwEYIXzmiWumAXOKa1aJsKKKgoJY/fERC9Mki+5g3YmeoOicR/ae9bLUiQ9jL+3g1wXd+CE3Okuh/HLURFhc4ARn1D3lNKdl0TW6BUwhcR0s4uGrvQKPLVzC40P5nOy72Lt0ZK84F4hoLQGqH7v1danrbZTvCenerHZQKFkrXL8H9IbqaR3HdCHOOyO52thu5BBsUIYaIwwOgM/kBMuzC8fphQxzFnwp148EWR0YSYH2L4q/ZGCn8uF8LUrSokRjL2qJH++KkooGYiD8tILfRDSQPgCHG1nq8tsVDGJNVmCpiXoKtZBFildTS0x8QKFBC/xLG1w7zrfafZ41ZPXu2gJySrWT0tU/ZC5FtCUqmg2JCC3SCWxYp8tQMoNNqPG2PQRIBa8EuSc2qFeoY3EvXScC0CROZh/xIt/J/Ch0tFNRIBcOytzokoJL6PlBYHOXuwnNwMcDUL6E9rgtmoWmwUBR3c0RyZqosU5usaOfRIMogIQ4xGGEaTiRk2PrRT/xFapF3hvJeyvx5UZ4J8IjGJbvmZSmYYvXqaAnBb9Vl2rMD0uOO+MRNgw1Asx4Sa2ENcqTBQRqIo9pxQLaMLjXRjindYbtEZXDMY5h/pYjto1lg4HTBgCB5i6RvhE7WNFWOGPqdFNP6vICgCPXibaxQa8M0GYfBghIUstGH0uTtaS+zDGPpWYdR9e0/rnx35skJxXATpnLt5rU2xUPri4MyROutkRga/F71U4ekKykeVjQNrRzORTyYpeDYMHGo1Rb5vAzbV9D29cwaeJPNanicZE3+qTM8JC53VCCwRMe3qgwhw2SX1or02BgZrsDiuHMwxPm3W5AcrURWMyTOpN/rfDq+hFURu8BNRwp9x0FoiwclmJ4KjrZqbkfBF3wZJesxU/qL97rjqee/EsBkGP+OJmbP7XbjPcwW3xKCb/XQs9vVGYpIRm9bDfb8hBOb7KPONmDcN6DKebDRApySzBB7kiCd8ukXJR91Mm+jhLFDEKPoh9Mn097+ubTD37e+ZT0zaefYTItnsbPJufngkKPezLN22TfZJq35s80mexM+nvzy51JJp9JPOv42WfS4mkzKW93AO0+ykyaexp9NzARmG63rEK1JVwTV7g7ZIRe7+EMrSbLVYYBi4FG8YeapIgIyFnjpWldOBx2q3p8BrIKyR5NV5SmgnQSuwxlPleyJJRxsEEvibeeJ85o+idOJ35uJnv9Eb9UwMNAfGrmwkSDc2HVuZy0qvkX4AiynvkhqyTQEhltm4JJtJgBooQIDQYsPKTSL2JO63ZDCBzP6FDSaLeSGAHrTnzBovy2MEvUydyNxA3Sig0fKJdEZoLbiwJLW2YwdiaafCYmLeZQ08MuDHCbCT+kF1U6iFGgyMJaNGlmaVK/LNLM2qAyYskqwsuDOCceLH1jlAysp504fpRuNRD5XwUMJLvVaWvmYvZTphI6Wp+1o9JVPJeZ+V+wLm2M6PleqQVghyJJruiE0rxtLz5fUbaoq3g4aw2VtJhbeDqksyW90BFPoUihyh0+uSNpFtqMQt4r7zmW94SpdjP/txdtdKz6DKLG73ct4BCuDOx0qpgx2ZQ6zeVpZEwpjQyCZqOvuookfZPNKuzEf5wnFXYscGcOR2QsHBFkboJz2kRxgGUKL1GEhTh11uUhr8M2UMimo4HGqGHVNi+ysP+gjaPT4FOGXccRnfHdRKObCVGrT8d7AgIeXB4gHneiiMfdbmNWX9ILZL0gTy00wcBZnAhKSxqMu5TxDUvdpSIMONDrbEqzbKjD1AOcnSB3/vwwnw/t86F9PnzU56XyTcws+a+/HtLpedOl0/N+DukknB0dmSmeGo9PPL3011Q8Ec0asmkAnm8lCXWk9J2MX/9PITW3kHpC376f5xnx5/18X/9hCB758aa3BEDEYTYPz2KEm3UWqhoAm7sYZ7jIAoq57fzTnVRhZQjXn6etZACus0Ee+9wrrQsOUVMS0Xo84quJLpIdPwwgbWGClraU3Q7pl/0OAJEZpH30CwSSV1+zLpBKvCL9plHl0rskrSr83qKXi8J0UVbdxH2qdVWrYLoD1Xv7RYB/f06Ol+X09VX2990Wo3w9u63Xxo+YcXl+vXVsY44Y5EE5GRcTUStXd7NdBMATSX67q8NxtvyZWOFujt6JnQWJ6TDnlYW1EUpmV5IyPBM/fvy/jet2XVPewzqgZgVj01igQ/TOja/xFGrgbsIqKFACmxAiQSnLjUluqRU3T4Zxmop6tEIpCX82BT2Q/kfRDuNNZBP0znEAZsQam6XPCIG3OAApj+NM/Jcyjva3RjRgxcvCLr1iEC+dTbQiPTzLs3ok5ZQWfzKu22aZvfCq8qLV1ul4SK0Gw/qrkThjl0/u3n2/czrhC806ouZniQjrbGmcAV5vMVJYRIm1ugyvS8xFKRNRYHuTGNm8Yb5pFowwz4LhYwiPGWaVAW/e9T6flhR7EX9ExGGUTb7XluqFlErjuPHmfYHFElZ4282L9G1QnEj0oirxtlJHAz1b/EmSujmomj5Ez/oMuXsp4CuONtiUbuoxeIk3Us9yR+J135mxbOngic4ihTZyFCHEURxp+nP76q8uUvVQo4zIaDPXcbw/CwSg7MidsnP9iKsgEw/hmzVez8l2bFE6Mn+tk33GvExmyGfMBanbhae4PJQd+aireSkf8vFbdm4v55FqgMksBYq4IGItC+Bpz9c+FbL7s6atxiUgKCTORqBE4PsuIKCW1KoLs78Mxxh6Sz68uNWY+1Y8960Fc986ce5bi+e+9Rtz31oy962lc9/6rblvPWXuW8vnvrVq7ltnzn3rdmfuex+Z595d89y7Z557n5nn3r3z3Lt/nnsPzHPvwXnufXOee9+e596xee49PM+9R+a5d7mZ+97+ee69ap57fz7PvavmufeGee69eZ57U/Pce+s89942z713znPv5nnuvWeee++f595t89w7Ms+9O+e595F57h3tuwe5a8O3pE7u6etq3h2R3cR2y6t7vXRTWhux4wqMAH+gbHR96jBzNBxCKMtF1tMq71u0+ehvIlkuIIkt2LjVLTKNYMu88SLLhIs6udsT4HpTJ7tyPxZJnqDIOn+Ogjxcoh44oYIoN1IXeIYPvzLA/6EY7Er8V0A3YICYLOfEgbc1ZanYzzYX5U24mjMJyZIYIEZINibTWOdbeChvHSkRd9o+UD58nOvIJxQVm5p0qO0nFq+I/sDQieDOHOgHe+OZt6HpZbv3B3qmAWeQXeOKqWwYpWfRVeER2t8vYtYiffY6ppljljTqt297VaCdSBwm1NKzI1d0p58IPX6S08NTeqCFLM6GEPEg6/r6kY6tbxWwCpUmfoL69kMFUiQzUnKoyFEGJcveKFyc7Xe68M7MDuzXjC7r9ZqJkrK9+wP8n0prJ83zGNlPLwa7WQGNVFm+0l7IPuDKUotX5i2i4u45W5SynJ5uduk4+Ws6IwXkC/Xtx251LkaawSiBclZgWyhzVjCTs8AH/ZwVWM7CQezPwlnAvJ2Fg4qPRpRJmWmCWZgmeNxME8zONMEcTBPMwTSzdbjEAU4xS7ADsANmZAizyf1EOJmwQwRsY8BhXLI9NeQ7KYaoUj86SjakBdMsYzb/GrcEOjjcJ4TCXE9EWDo2QVV9039Bxq1L/lg000tEUhEcqps9kyFc3PItznEmC4KqNm6ph2CLxNueVtknKYPbivYpcYoIhGGFPjkZLn6XdDPYyZ64YWR7WxOy8OTHxTj55F1GWGZPuESxP7czwZGb+ePArowptV1F5Xe4cSE+M7c0+qEOP1R9/CwRfCWJowFLfCInSRS9KjSRbmxkq3YGh2GN6O/cvo4y12krkmFAYEvUYQezaCPXAgZWQRaEUsytYAgxD8hYOIzCNrQIqPidhDm0cKjuJUE3u/fVZDyzHQkiMjIeo3MqtKIFWzSFACJO4o1Msh5iaIKLaPTy9czdozMlkTkZlGZ5DCEedxFGxsqlCma6FUUeY17kpbM3qb0Do6EMD+mWHVLNpjTJZRNb3V1uVb7V7XWbAGKzvaNKD1Htqd9R0UF7KT6BM5xwcfqolz/qqUeKW3wn5zuFY9UKx7yHJAawW8ebiBKW4fIQcheAkPKn246IVKsTraIisTK7SKzKbCskQ7+Q0/cMt+s4DdBmvLJc1ChH1G3ok6Fi+laIQUlz5Tp9fyxXAKOG7FOs4HYjqaZeryJCc3gXRIqJzIs8YHZAHMzUugq+CgSfWwi+aj5SQAsnmacLPrf4vDoFXx2CrwLBp/Up+LykjlnDvhbYnrFSYph0GEo1obGG9Oc3oqx1To8Naj02qPWPZWnAp/NjZFmcz1gmUe6Re8LnABZExHLEjiHeEdM3PoOGl4yrIXbj2aWAfemquPLgCiR8ob5tzEWCJIZO/GRp5ysus2hoTgxNNIbMGXDe6A+9NkUWDc1ZAZdDBFbES612B0NZ4nU5bMACkAK7v48BhwObQvwsOm77NgGG6UuA4fYlwAiKBBiVvgQYwcwEGF4vAYbfS4AR9BJgYCUvJ8CoMAFG0QH75l9s8ot1Nr4MpiQTeY6JWvnBgy6yUbP4jWPE/Se48YSHfEyTppvWl+Co+d5PuYhWq2cPfIoTg3gO9Wy4k2Jx0nyu2UO8B2rF4OZhWy7MU2cqP5gdvRw/4+xyq3d+iji2Qfx6Nx3I9n+cgqmu0a/8cyYmCXzf6rCjDBIfKzcNqfmN2QV9Td1R68FmpaGao4gwSnNUTReiGldWYj/hLGU9XQfgxJS6q5zFmBc14qkKS59SvoOT6SH8E9PRSGRAZcxpL9D+VHFeM0b0AB7QwC2s3cSJt695lzDKVYv6qh1MmustzDnBNJrdtKEQ+dWkIQxdUV8UHHN7LxfJ5G3vqFNTRda5hkylOBMurzIZr4dPaFrMbiQpbwFQMF2YR9MtGEv2JQvHkv170wXyo75bbtV37SSqmC0YQkG6AB9Al8oh1N+3l8drKvvCjRR3yEufAuhqzHmedbjyUsMM2vmdrcQ9JxZcZHuIvxEo6cFvjL8AGaXRyafw1EiU3arUQKQ06lQoQXso2FXu+IRWnDc1nKx9MtQ8E77KfUQaqDNcNQ8Ht4blUPeg1BqiLv0p8rRCFfUwg0/BdgX9TLyNI7bY2zKSNqSbDc28k9LFslpEjTc67Yaa+4kSl0TrCSNK+3eEnE9up92iQ0ZFBCBwvTVWupvmVmfbFM5j4PaiQbutzNtSVGXFAuCDQKJu77eH317vt69N+72m3Tzu3ad/IYR+Q5WzJpNxKpQXVxJiGBdMTvkI5m+7im16XDRghWTPia2wBK6iGc5Ga+GHakFroOAprb0kpMKzHbjlCM7cCF+hnOA4RauUCK7Ne0iBUFFqq99NWKJ2aKndgPownjY5sarzU7updGn8YqkdTqd2RakdzUZt5V1fyRkiW5NT9PgcnVw4YfQUDMceTnh8kQ3I1tRhfGWN8d3rqHERCMooHvMsAzY6z4D1JocpJkdvwIjzk0R9AxZhIpcHbFQHLMKpIgesMeeANR/f1Gj+kgdLU3Bjhsw2NZgnzEqgPrHjI+VGWE6sHdrUN0low8ZDGzZeY9g4MiD3nGsLg02oYeOBMrjH+HBLKPgpV8fTUJcM5m/z7HcojmgeyGUTrNlPq2XVjWSkUnVcabpZXBHtgldEu+AV0S54RbQLXhHtgldEu0BKG7405H4ix9ZQscuVV/ORcFPcyyQF6gH8j3pCIxmEr9xJvaw4VIWZFefVQfbeQwh+f3XQ9oqUl0xULTrNX7iLFGciVBXY6yWXZ+LgRUSoTEO1SgRK3YCKbEf9l3/yliAmVaEe5Pfyc8BsYn3h8yCDzPNq0/8a0XJWKIL79JdvziY2qP1lM0+megpCFSqMr31yC7fjvE9+vMfIPiKxXi/04HJtBgqSFP3T9VD751snA+2fro8KGLEZ3a2pU44UHMmYHdW61sWDnvpwy6/pxMuC+F9oNAg78Q9NntOzvsw5Sf1oMGjMEJQMxF/wRSe7X7VC3eFrI9QOO9m3C52wp9ctczYU7ZyJdgbi+8wieeCoo6eeddE8cej/231+S0cLvyW5MsucEW0EGcoL/6Qn9j3x6eIJueL9/hY/U9z/zJwtTmg23MTmd++l/3ACTfMODfFpiWNTPiBbwIbiDTZpABV8m1SBJ+GeZprk9ppAdkXGNddmXHM1G6ET3WX6OmCsM8VYfs68Is9G0tA/Q/pnsRpclqiflO1xU13xPf0I9h5eFk/LU/CavPfe7L0feqy9dzQNMP8M22+JvuyZ6oSexXuayN636Q6Z9nDTCCNanOfAvMPPhKXBqKsY06HAvCh7S7vzhnFnC/0kdowTW8XQVAH/DPWH2KDRLDYmtq/MnaXM6y+D3xYiZKGv0Bu5lgs3Waiq6yhNZ76RT1EAh0xmllQtAgtXUuq5zMoEdeeckZSwQUyffpcC212icTUhojd4c+CCjh6m21y0pi97rcPo1zrw9jYjYxTFQVDKZRvqMjD7870q0NCRlKhdLe+FE+Q6s3hKlFj6LdTCZFmNN7fKiCn3/G+dl/jQGb3rY6fh+h7XdXdV81SxBn3wCpTII86erU0LeVPJXpRdiIwdzx9hmIufcjlygTHnE/VE5PcNbRXEdHM2FuymSuR3WlXr8fPTQNMgbYIuBQitmuhTv0MQHqG85nECBJ6JSqu7brGKhnzV2ayLSpw7XXmK7SLMecNzNJGYPBBgK0msO5uBMlaTriEqFMy4fY3QODsAVAZ6embu9kP7bwCAnVqk1vEGMaH729XWpoveewvRe++covcDp7rNCX+XzS1VnZ2lePTfHTjdq+T/VSu9/9ziygtMr9gv7oNdmkRfd3SUh9N4K/7GaWusvm2c87yEW+0Bt9olMLMNPnNz3Go4Nmm5W5QTt7p3w7M3sErPxK2GVRv5GoDGNdyOCcrVbmn0ggVgV5tUFRdLVrh/wIFPGOxnmK1EDfPbdLsNpMPqKe55BDPE1VYMCRO1SA9CRPxV47fD2kjsNmlgmQgjHQe+AVatDjOV8zWi1qtSj6qidLWdvJ5r6wEuKlE3RZBSOg9KtmPhedAxHmsxIwEQsN2kBTiD1tiZ+6Tc37+3HefHwC35Cfx5xet27Ge7c3+2N8dnLy0+O0mKVdSmX30O1xO5u1QGmlhJiaNg4J6K5LSW+evVadhKJLJsF/mbYRXcokfShKfeNGKB0nVVczY36bLU1VzPPEWgjJXvPZ2Zr82hJDiklpUYAR10YR4uvQtetw8pqGdbU9HgAMvJlw+EtI1g/dQVgj7SlPA9f+kcgEzk9iXycR6WiZosE+6TkJeaarTazrne02guBKAVHNear7jUrldqt1eFZ1UKUqbmea7sWL7qeYSM9M4aH2iuDnx1J3WLXOt57yem9b5XBTivRds5FyIJXMqkK4A/ze6/wvBcAP6m4M7sYWf9CAy4yogOGTExaqgPOmlUBlGVaQ1ZlmOoklHryqgNMGqzn1Eth9aTRtIkhwbc0zq/TOIB2pehjsJM3aTGBd/mrIZMQdpKe4j8K5nJZuZMXg0Cmf6ZbH4xM3llMZNH557JK389ZvLor3ImHzD/saayncKzzVlv2pyVGSta9+hFOmEN1k/yYx382OjnR8uIAeOymzYl+C99wh4w88/YSmTPeZy2ozrHID4XSsgCZn6Jx6ozp9lZ+Cyvf5p5fdPMtXiNLqUAcvqym86z5WowWbCXqqvOd8/Od2PHIrGKxLy6xuxz9Oxijq6Za45ma7ptYhifbadqLZ+qdh+URjpV3ccxVd05p2pt3qkaMq3zcOldCLfoTVVvrqnq5lPVs+wChcrrA8+0U9X9D7zoPr6ZWu3N1OrMmVpiacvLv+KZ+ihLaxBZLzujKjnNIAWIKhfX1N04BySqYyFRy1iojqj/ZzJUIn6H58A4eDTgcSbPLOnj5jDTzX4woLWt2cABaymkUR/3GVTgZ3cCxokutrJfemsQ52EXGjqdo3U41oJoaGNWC2IOvhDaOLY1atW+K0j8Zc6ngpTBD5jFZ49oTmF4mwSQUoNb8XfmVgnJmuRlg1tTMy3Jlm6VhDLTkmzZrVLvRp5kC6kjZas02L9V8nL4Mh+5fQbxZ5gSEA2onQbiy1E8YRFfV0IeBJRf+xn8HDLlsYzIVQQdXuEewF//FLkN8cDLAwEER8CIcp8GMg0b0D0TnUp+pqGabZAYt11/zMOU1OcfCnmLyFrvlzMiK2cZkXLaM0dHZCWzQf1iRmS0NyJLixEZ1RFZ2hsRm0XNUgS+R2WatES+DLYXcGEFURYoURZsTb1pKdViSxRvWkq1OCeKNy2lmg+H+SSWJpUqsVLFzXNkCTl2m/YC/L20HVPmeiP5sdOdQT5/T+N84zmIC/OgTkOAJmCdCHOTB9+dunl6PYXjTq0zHwJenbSxWZbARnbc6TJx7uVmIy1JjW5fJnqIUp4RJZW2ja4NGeHFzFGh/CNtvRSLtAPahkziVd+W1P4ne28DJsdVnQnXf1V3dc/UaEbSWCNwddkEOZZAGCNkY5Bq0L8EVsBxHML3BLA362/G2VjG+CGLrBnHApzEBBNM1jiEjGQTSD6beFl27RAIciAbhzhZZxc27OIkApxE7O6TOIQk3oVF33nfc29VdU+3foxN2B/70VR1Vd3/c88999xzzjuyO310p+o71EOw7k6rB0nQnUmjO+sXvnkRlCeGdWfEuDsiQkg3Xq+9eW0vo8u/1ZDkCdf+8g7pTgPS3srHLbqXqbLiKAZw1CAlE9YrgC8IsrwK8Qsv8N9QrLDQXgYLdByPdy2D9tKZIv06odBeE4D2wjKxQuaBV0F7Ed2vpd0knTSz3YKEZh8eQAnNlmHUBRWoxR0uY/De5TKYBSaRhpLWOSQbPBE4GOm7/IYvbDJi5Pu/w3lp+VeITt6SCzTP2bqep4ebd5ppdzttwXz5Rv7tntmEojzIUH4/jWJNwFrQS3xtQEFMMT21ZcebbTQOQGEb1TlWdEsHseIdaxUhtU/zzk/I4t8VEt1Rv+rUtyy019E5IDtwTg6SLQejre6xjmraxxB6kvXT2ZPO5F2ZGenMHJ0HEGV8LJebhKS9h3t26S4zBDQuSNWi2q3EQZ6s3e7SCIxggLSoxVE3zkOotjfS4k2I0c50kAmowG/N5fwMkiJFA1rl9unuAbgIhzHKGy1KhC0NE1/r7r2G7t4brru30daNvXGtu+8sDxMPXiJrx3wuhWKVqomHTS1gs2ihc+xAB1t1KPT49rFQz29rlLlUQVYQ9KlxHPDEeV53wTtk0FOiZ1N5q1sVxwpnEX6vhbEYtNHTc3Bz5aYG5rrSWFiNjg8DYkXkgAYQ6/iV87Bz2wYjU9mx6B5C7raqFpXHINCiwjLp10ZrUdca3YuCcE+P1L2sNbqXtQO6l4zGQ0aa1t2e0aKqlrShVhnZckZf0KaYDtAWTVctyuotW9zcssnbabNXCwfVKskItUrAiRLIXi0YqlZp6V6thb1aoHu10OzVYt2rxTWCl2LySDWyQbVKUu3VglFqldaZqFVaeXBTEapaJTF7tVz3aoxrEPBULTZ7tbbdiASn34gEzY1I2rcRCYQ9NDYibZ2eMfZqwTO1V6MEGfQpSONlCtJA927jOV9y79Zu7t0CYE7WmlESX2qJLx2yQXs2+sXVzZhHK/I8IcOMz1D3+SzMP6P7dL/j+beumn/56Pm37ntj/uXfzfmHNeN/pwnIidc3z4KBeTbe0GYOobDguzHJiI1yilm2XF+ZUU1ZTQyjrfRtta0i0q8UkX6liMwqLeRao4VcW2khp820OeXMGj6lNldTauPoKbX5e2NKbfy/S9qzO6PiekYNkuZ3Z0adZtkaqles9hCFW4G+GejMPuHftdXRelDqd5fpFZ8M5ovQ6BU9q6wKy3Wn0lXhNVVVYfmEtCxkYK3vTKmI7dGJIA/XO38dDCgU1Q8RBjPG3MHjVF9Px1NM9XUmEqtaNT4Am9Sh8jv2xQPye7DJ+zi+D2UZxbTj3QOB+jdQF6VqPdixGiGear2n0VPrRuj00jPX6aXf1d7I696Yrnoj196YrnsDI/dEYElhA8ePW2x3Rq1YT5AlUkHVYrWLofWhB21ffWo3fNVnmX0/9VnCLgtfZzM2ok6RQJ+VDOizhGPOG0UWtBRqpsatbh4bJQJ+Mi6MO09QTOqzfE6csHwgoJIooFrrCecK1RBZ7ZAHAMJxvlkkzPuhUaofh+oep9byXKW49v26nWC4biesdDsbMSLl5rki5oDr3nwduwhUgLNf4XFcx6DdEQ7eg51tpd1pyw9qd4BKRhQPAAfTiX19SnC9Nv5Bt7MR+oc5us7JyuX1DzImqWp4YGhpolRRy9NSLQ977hRankBVWeSoA1qeoNbyBBV19TpKSL2uUhjUxNr9JlZsQ8ujdXSsrXiXmlTV8vgNLY/UdK+GnYClILqPOE1mXIzCR9m6WYBfreba6+kC2IanA03dLqcedlDf0zLHhpW+h6gdgS7NibLsZEDfI6syFuRU1gEZBe5P2rr6BpW+h2bzXIEwq4Ka5VefIGqvq/oe41odNPU9xjTQrECeavTm81T1PZam2FApLIZzpEMPEbr6m5HXnniCtryhLCEw380jlQ/7tDzvWQWbXi5HgYm5AV20rJBTpbvDxFhX5xXXnEnrJHXN6t+PO1h/IsSaVqdlCCV/qS43WS+0kcOEvvbp4esGZ1WZIcTHmvSsgQol8TS4TT9QYWyKCwADLoLUvMZ2U78y8vMAPEoz6YNHDBulhsNLlW0qHXoIAtosNWn49BjDYay0POTxS0qYBOFzDlj7Y7c6EvUaXbq8tSG71Ku7NDQClXTiHvX1ZxPpDcsiq2DOUmBwAHJvcwCdRmnOiAF0+gYQIaVl5CJyklK45lz5yx+gD2+VRCOJdkxcN7ODh4X4mdMJ5zXm7bweZ5x1+gvJFxCKCWH7EXjePyA//hl6UNk2z09OxDA99yzIpduQIOuO8YcOv8XebWJikiDcZ2iSgEM6182z6hgFW/Ei6JuIzumpxhmkGseUEaC2wXeYE4OMYwtV3nVO+bN/Sn5CdD8TpTHKifpOjwP4PgV2noWnn91hUzHeP7tDM7vN8mQ8wOUNPNfI9feob9mzMbnSilmZqD/YFXtpY9T9Rrv8oaNutiDTHAB/cI4x1zwa0ZBTz9twcN72NcSxDRE5R/YsTqps3ttBy/LvgDcYddw43ST2mEWjoKvnszrmfSMBpxTCZe+a6Rnn/5Ch/yLEynm1hhDR8KY86vLp97FxB9FliRXsNWp66lEMR49iWI8i9gzRHE+fYFD+dHsiGOyJoNETDqMQPOMECF/WaNliydY8K82Iq0mMGPCMLSV9t487BJ0Kcv8sTYVU15nvgG8z45L+TlJbXf6qCKZsDLURub9rhp5acJGqpZ5eaKJuTqloUATbYWeqoriJfxvUt6TsyCeoJr2HoFBRWt5pvvJ4RroXQwZbXWkiKkezthtKhPDe3nXOehBJMNHgIBpA6GeX5Qb0TVGeEjyrMwmRS7/ueZ0FHxCqC+UCdgl3uoVq8yAcOvytTl6IjePyN40s5Td8ftp7Zqj/2tN11iCmzx7Y+YwzIB50dlBv5jG+wXjINd2HD6Gw6HU0EntXZ8JYHlpYdpGGZAgTqRE9z5CCdy0WwjniqXP+GCyA6JKUUux083gf9bTtPXTwieHhzC+7sOPQuPwJHfL4daBfh/p1MG+d/jv0GNIoyalsqv37DxdZntyfe/cfLCau0DbmWT5xM7QHV8pvhOUdn83fgY21bGhSnNmXaIB89JqZtG8b8ltj3sRCcCi3cYvVNEojWyGKFQILBq+2PKKkJ7CG6jOOPAPKtQ4pFm5PdzIeTOns5EZLPQ5la3oTtm2zTm9K/q2Uf5PSAS0TMUV9fBkhOC6f+n13k24ROz2OfkIjGsfYrCJIiKdRgkI4z8aSZC0tO6RzGKVI5yPMOAJ6FcYH4B2mdj7Gs7ZC8qS7Yov+5da0ESY86qJ/oIRTus0w0NHjAtvIidpsjfED81fqN2nmauIvGScx3k2ZgEP0gZ7Wu7U8PytzrU9eL7aRcp+qmUHlWGbMFoLUU187AG+FeXI5KFOm300ajQj1SPbOFCEd5gPgOSFaL61YqkzpiQaXfXQiIGdy2cFSUWz6PkV0EeSOf1CDTEHkeLWy2U6RavyPrm7fu8uIgs6PqbyQf7tniqQKGjSGOCVgkgyB35Mh6HUoPATbVXCgw+pkb4rKj/LQAZ4p+uYNvDVX5pPyf0tnX5G9hLhKCPtWTMzJj0MHi1VX3n8wXyX/Z2Uwr+8nyuAG83ZK3vZWMvYBu94DKUz1JtFL4DvjNswFwkxLaVPyvymtLqsvrxRh+glHNPUK+WIlgsdMIXiMZKqYK3h2mxRq9G5RvQiPIXGUd1+NKOoR6jTOnilC3QB2SHsZeyyCxQvlrFbekbUay5b2lJBCR1hIyZh7uS/t6li9ktyjx9hPYV/d88kr2BNo+3jK+HXjCgmmXWy+LiZeYoJj4seKgS6eMF0sz4O6c2F4ZHoVZpKUcdirYzLphndUoNta01FdMzmN0NVgYNlW03VCoSXBfGRNnNFw5gy/D8HBM7si9KDlvduNB2igDJwxPNLh5kIV/Xr8ZqZCeLtTce7udGt+FavUgXlEqUBD79ArHxu2uuIycG1Cvpo1Nikicye0bRgjtIhtGXgyzwju2nCCbZHztEHiwKDNQ+nw2fBQPnmwmHyF8iKQd/ON9GLjZXKql50bGLRs+UvcysC0wSxluYVvd6v20vYPwDS/qhnetQbq1Sbok83HuHn7msHkhzUMJaOntBumW+1lpzeRZuOYoCMOAr2ByUWkJItN4MKyLFBVJjXj2QdNbHZ5WK1i7VGrWLu5irV1FZOF87fvc8t3vLj82EXlw7/iIkjYf/b7oxxooCob7CAfFtEAEQEghZqwjhqn0skZ2MnVhc0/RSiBtX2BCZ5nIwY0YhLUEQkYRv+Uua0/87AKdaEv0UI3jix046kLvezpFLpdC906stCt86csdN9ZB5B4mNAOVey82gX7zyoX7D+DmfI6aW0d0S43Ee3cOqKdV0e08+uIdtAvM6LdUB/u8Wckht09LTdSdApX6xgEW2tQB4p5vg1Nal33urqjcvUQyAgzpUi1kY3WkpgIfhrkJdDjPV+jsUHa0uC3nJ+67w8YwcwH4ceM4GeHKSlCE8BH7jlqO6tZbAbSRp/hdtnXyoeMxczS8RgbLBslxCdKhLtjpkcWG5OnkrMod+Lk86ojddeEr/aNaT8noYJzuibiBruNAWaqiDypqb3Z0iQaYGZZ7U34Q2VPjjmtL1g33W94dXRmzxIneklD99ooQC6fcG+Jimn0be6I9WBI4+jKR90oNW0Yt8mZEzKABlwP9nxtpWZmBNeigZjimQZ6VoylGpIcMvf6GmhAP7SBPdrAkzocMxaO7U9XwU4V4IKkw5Sq5mBxCnthxMJEI21KAi3OdGQNOIoQC0NHjI3W2imJMXOvf7A0Yo8dLBNISM+WdZfq1TRkzGjSeoxc7uGbPWpPvftHz3QvWyMP1QR650zXq4eoGlyqD3yqD0AW/tBBchQ69mkMknOWg+RoMA5NefaDFNSDpHNMGbK3w+5jqxj0KDJNz3fdhfKxBwNzLHiHr3FXlmBULTntmpEFP/2XiRcvuAcHraAJT6SBRL0d1q8HfGqslbhOHLVaYaCBtrXORl+pSsJ5pQcqJdQxbX5nN0Ye5GfdmIfobvYVD+wyYSiUnlmiHROHNO7P3JIYkHm6kWbFnBmhooh2dCOOpVXnTeHYa4MDg4DgWBHjaDaZ4R4RpDSDHjA+LTtNbFhWguZgGSPs5t4M9Q3c9MbK1dEtPGOxidRpyZqbVbZA5M5Wx4MYKdlF27uOKSaf40ZUWm/C0vZZwqAUY/HfdRg9xtoD6WDvxNxBkeZon1zGUx5cOGbNsel8CyksnYo0VgGl/ceTl8hEfeWBHuLpSJsgfObuhX7CeDa/8cZxfRvrW37k4K3bfBsNS/uJgbRRX9pPDKRFzjLwzapE+oi0wDNmv6bPQHNFdpCK39g1/iox4/nJ0zVq49ACDlUnTInGVREVOy40DMBQLM+tA0uxDLW7U4cEA4/yd3ZD45RlLatMDCL/Ap8+OtlrJJ2Q2DSOpKZ3QDRmc+XPG8epdEwYH27H+ODsCQgEDi56jA7DM81ZhDdRHh0rELdpZmfXyr6M4zQD2xs1wsDAhjWxFgqAVYQ76FsTAsetUX2jNmZ8ffVV82rdJDRUQreg8nGNbMRB+wHioZdjPaKva7RATIcF0G155F3RfPnlr//kbhx9G+azzruMwOVzUlSaduDM8RWfMZbTvRWEewQI97iGcMe+gyDuMYdIQdzjFIbQQclNyYGZPDT7i6kJacDdrqNM9yVGncXof/roYs/qrc3GRCNP+BoAnpBXPiD1OB4bRc7U6Eauwj8CTAO73R0W+Wwae//UfLtTlx6TRFGo1Ic91cI3pen/I11mMTWaFfDqCigfUIhBFAjQQBP6eXrc5gTBV5M0SrHw9Xf8odOAr5df181nX/PSGX37RPMljmPlPv1NDxVzy08ffrkCALz7Dx29+aq5tl5l4NRoNESqGdd936eJPlf+ZWy/QAle4ztimJmSTJqveUzzy++KbCJWelkqW3mT7IQmO/nwH79Qa3Xyvq8ENodjh18+JAd5KjmcsDncZ3J473993LcJF3/7j184JCUeS9L7TFLzWdV11ev0W8BAa0K+u0QEo8bQUbDDIlCnWFcfnHQOmBMPi2oPTbiCD2Lmq4EKJguk5Oy/+XVO5hCSoebSNaqLGvoqD0D0hYZ9008W3QM3XEqDH1sLE/yzwp5Xc+eA5gnUMqg1rOpyHRMJnDJKYIHn/63nhqb1IVpf/jVDsrrz0r3D6pZjp6P4B2jhX0IDDDsI8tMboeIBgoWHatR9GjLSHcNFIkYltjK7YemksdNgw9yaUSC/FNYReF5ef6DwTKxWuaQ7ZsKyDf++UGuYZl9yzSaK7nVr9Cwqj4TbHeKRkh4TBvSjog3VPF6oGVOZquYB4aHv4HT3KivMRJnhAWZrxveGSqeVNAOrsv7jDDmaWmjJu/z0hQOIk172nzAgIquOs2+wsIzrEQ/HYLXmnP3gTu3nJDuGIHTpj/blY8AKfIYoBTrd3SqJudn7/J5rzMaETBVxck1u7svH3xESsG6BmNVY47Tb3fR44KUaWS83Rcib7JsElp2W8cFi2Bsb0Nr4qlv39SEvgdUBrPM+6xXt7TYuiIfljpJbiuWtoLH97ZQA3uvpiw5fxHMiBTC8LfTvbnmbR59kmLW9qgLyRbA5mNr6OB6bUfiEUEUDjX3bzdZp7H1FagkVyaVbDRgAXRiWVCiO5eZxtimP51ROBzABnkXyLJrTSLO1FOmrFmKm7n4ei+TtiRjLv18pKXyjpPDUJ0F28Nv1riPUbZroUU2jTcu9qjE8yPBMYyJpTEBPwKr62jSDTjMF7UMopLUJB722toHK5jw5AcH6cG9TtBuZe1SeYPV/SnmVSipGhp65/+BL8cLSAD9c1GOY8kT84/flY7N3vfUQgg7Jj5tJHLMn4kMHD84Kkz4kiRf1aMbOCPx7aUXBylodngd1VL1gju74G0pFxzIEJ734NOmGJtrZTKTxe8G7tlvNlG7NpFkeCNlYBFe6sI2pZYn9sV7/rtJm/V0d69Ui3FDZ4O405kS5rvXCAFMu9TgT5l7ufwRV1TpS1Y4BnWRqghhBugNkKP1fTJRjI8EabHq3fIEausUVR44N/m5c4e+KCNPS7VQyX/6yu0d+t9XPpcV4AboH9RQehKVHij98ykydvuoNLcDpK4DYVg5NiA3WU7nQwwEB1rA5mXvCvP5e5huigX/L2cNI4N5byif/xptbjwg57JmofNuBApCHZIrlcQd965tOoaTa02jmMOL2yz9zDhCh+8vOfLlm9wwUl1hP8Bjrh3m8E169QV51ah6qhYRDW97yMcdYVIdMCKNpkxAr6XrsG0iNZX4DWerD+vJSx3aRHb3Td2lLJWTTjY52I6IqO6YbNQRvaunAMVV2qipLD32enddmYn0P6WGhR0AFMyv6w2M+VVHzUyPDYz5gIgNnGmUpwpIdqj+V0WK4dVjpMPspV4hUxq684+teZemwUfgirQyyv3Ert4XOhEsllTHwM44MprFN94/wTB0bIp2x765V0Ub3sl33TS50zdQfbQezsXpnl8pmT28T6p0RwFiav+GZUSy/SPULAyyCaod+FuFaFvFXy1iESAv/R7KIHBxiXNYgwyHOVQbRxx0Mhzh0oFw1P+a7nqNoW5Y3/J/OF1aeni2c5SS/ddgkz6tJ/rf9k1yJsznJ1YD4O5rkbfTsQ/CDonigGkOv/MZjqogtH39UZfjy8d8zT578Pau9zj7tDU/0yOdMok8+Yp489kgz0azTAAdQ6C9GNYEQJnIGpS8jVpiNlhU1AhMaOt00IMW7NX6YymommW+SmU3By7S6JgJ+hQ1pAunX4e/RouwwFDHlZovtPY3Ht9mm5XPZxdDTPO5qHz7APnyO09yiYOfyBVu25PCZmjzc883GqIFNwFNCSmSk62Twg2x7NYrVs11DHmXv9FPVrSdpA3FhsDijS5c7IaVyYefgJ6XbxBWwQbnTBz3tet3dGH2juo/4KlZzKDTkva8HKL563bjZ20iRfap0hBb3HNezqn7peRM/2+H5XKDQatlfuAU/D6iJApKFZzwzHCMh59BhZtllPQZNXk+cr9ar6Bjg3VjedQtxbMPy6y9MuZcp7/pNCOZTc9mPSds+JtSXvUluvvgpWdMy1znjrDJmIh98/iEj6CO/j0ol+/PbrErBEzoVDPC6OwTDwk5onagOzyo8Y2etyCbSk38SmCEjq0/TFlSHPw/Tj3/h9sn5rnewv79DYe6Ojw6nBhsOrVDDYrXQFnuna7FBI3DKBx8CiQ9vruq400t8u5lID56W+iEuOANAIc8Q2bJ/Pov+oZKVU1p+fCR2W6jU1rkasCHQg9KIex0C+UAPtgkGD/CYzOmPCl3jerkcTujkOdulXyYuhAgxHqwerdR94/4G/z6PPNw3Tn00JvCyD3lVhJ0XZLdgVQAcCYG72nN6dGT2lUIb3FfSVHMP+8zsfwN+nl7OZ7rd9bl39+y8lO3uZhy4oGgq5C5WFCFhFC9jE+HrFJYbhbpK2Q2WZn2R3t7I15htL6txX+T5xYr78oo1WK9fBu8Iqkw2KoiRa6KZIincfPzsvdT2rYeJ8i6j/VJkErN9rLeUxg83MHq5Ij5GS1a4sUY6d1pw0p8p2nOMm0XnVKI7+irVlS+gp4P61/HYLPctbJtvMJuwOPM+ytu0BJ+HzVhEmWXhzXOwLwoqVKoQom9SvoCSkDp/uQaMwYD5GNijoDJPUtijUM9jTMKgL+EGxx39yhv9yh/1CvMytAZONFdqqSbT0E9Mb0vpukSPS2QgIaHQf1FuY2HqgPgOocFhJANwJIqFOmK0YtFdvk+1qTE1V2pRJT8wVv6LBnstN77MFZqbfeD4sVtufcftd21EoAevbIHilDLKVpN8HEM+SLp1vlJ6/Krwk3/ve94ha/dkYm8SK4//ObdWeA/HFi+7Oa9+nPyMczM8hd3Z4B25M3vZbYdhB1UlHL+1cGZvMTgRyeuwiFU/jzkHNYZijSSx9WbogqqfyWsYps+fdW89qCYRzv5G0SedK/p+/YCGIaxqYmvh32pz/NZJ5zAzsg+eOklNmPny09KaK7vOrD7biJgY5Xv+wdnNCJIZlcfmyy02y2POYUBZl7f8gzOfvZXj7JW3PCWS4nz2J4x0mKA+ARAztHsYppPnddOHZ53X3N/XW4cHu8ubdW3Tm93i4MWtuXeQGF02soJbfbK4cOvhT6fbq5UqJAwSO9OEz9Ov3p693UVYSFXFhwpPgXaCz6qqOH0noGrqjWqgzq0EJO38uILZeeV//LUv/BocGMsv4EblEf2AVsQJ7SwTogjKB19wLp8xSKlMeDnPsTrXgaGmvCPMdyw3c2p5T6b2amrHLTOrTEAMm621YhVcKQFRoUGNFIa8M6fK1h1d2sPLkgawMlyCKtPAKN0CVR0HRmc8Ah017ENH9Sp0VNoCSMa1vmeAJ1u2KfIBsNPU5tUin4Y18qmGlCJk6TGAyniHZFNErxhETuyfokFjMlyZB31TgyTT/Djs+7j56zUH1F8hDw8f3m9NFHLv1lnnh9Uz5DX489oDPCOUu7eDjsdTU6Pc+0H8YYn1axrApD9NeDAHfiyyeXxVV5YVo/qH9S6X1sWFA+Xip9GDusadHLdnZluAKnQDQNrwK7qpPIZfIj/xeG1xq7w+5u/E7QP+5Qe2D6TydCdyU3mcqWweVaalr9ksBnAR2DJYKIPplituKp8cmrzKvc4vGE9TQnefA7XBgixiqZ7qoc4uLBF9GvEZmHnpEx+q8a8HushntLSZKsJ5G9WGj8+fiNRsQ+73k6RKEynCpftCwFNePtPFonZpohe8Blu1OSHUvoaOABgLKHdeT2WmKKvwoObCNarBnqIGe4phiTCpgnSVGeAGP8n+NkjtuM/y14LnaeRDeIMQohZEfplepmR6LeCUAOxVKNLJfomBcFHt7O8Dsk8IDGBQsbFbYnTGKfxBjGG5XDY/x3kicoYyrxjMKzCwaWVTKpapA27iZL/oay2BcERulUtv4Dydyo/xXgMkiXK1ysC7CmIsAvh5F53M8Get6nrpaK29usYYGitivfB6NRcqgwOGqPIbSBLj5sh+PU/z5wqvAXvsljM3lue+JX2f77mHdH9SG64OQY9KHIBHhVGM80b53+Oh+I4ZuXxNLp1k+OMKLMpgST/hzI9FjuxwXIdCiPcKaGP4Ge8RVe5MEkRVguDMEoRVAv/MEgRVAs8EIfIbCTKTwP4XuiY0EJLaMEF6nLJ+IGmzLJPAs/dpCS+7LE139Cmof8m3Cupf8k2UPatsyDV86Ait9b0ubSDqnD5Y5fRBnxQI+5x9XCpJGPvV+wB2LfpQxDhjDmier68/3lg9XFs/zKuHnfphZh4u2zqwlr9ArDpDf2pBGyizhvmbsVXV40ienkbcwoQzPRMPSpbyGfUfrsg2KMhRPGsmhwQxQ+hg+u8uWsC8BRw1OKFu4+R1nEfZRWrgL1/t7XoYyja9xtWyOXwVbWoRf5vbm24AwhJpnAkDaDpaXdIO3Oq7vsVLIGPE0VeUlhuzdUXAc1rPxD7zK+EjxOEkxYLQWlGrNTStT31zJAd5LPunazSQcCVIRGpVjdNO41hZG64TCMExQBOSLLvWuH8qGq0abnvwiU0BQ+owq/SAa4cESnoYf6q5JFFsX8U+KX/l7xxo+W972Cnv+x0Han7V7mev63FfgpVBBL2T7gFVB6v7koVSc8qTvyNEvLkc0/X7S54XLLiHcne/dUx3yo0NRwseDyRzvepwfbZ1pbEMc+Fni53O7Fedq+qY64CkmP3L+Ko62jqfvPsPzUe+eWTc+iIb8T5CLOxFGWhffc7LLZfDEB8urfS9NAGMpFQNYGTiJLt8s1hEdQCj2/+jO/dChwGMXA1gFGLDmxtch9n2FXQUJBdgQOpoIBnZQ4nQ0GhoqmGsXRPqqAp4FVQuSMFEAE3aL/yKi5G5+y63/OoGDAxVKI9jxt1R6wADjRWse25qAQOrBVyrlDWlS2mm7tUyY7K3YSWZskNgdYCuE6TGJh86P0wdlaCpEVQWV6kJrL+j37CfqFRYXMPX86SKKix3uQqroyu6SyVggLPTH5M++hg0a2+Sm1qLhc+yv3AtimflboNAPD/r2r1NelUfv7234pL3kt+uq/nt+orfPr/it2tPwYHvia05CaJsejYys1GdGmPHoPSs2SPsNDM4csp2Hp9AhvcqXwNhxkH2yjVKsPLDz7avoRZ1Kz6kGLUL1uaegkqsK0y6bI7QDlVSgqcyqdnjrLP7HsRG1Y5ytaNUc4TObktydTf1K3zdPtXkmOc5xgSMfq9GHxmfXh8Zqz7ym5+Qr6mP/PgQfWRJybYD9qnaaQRds+c/AZVOsWFYioZMPq5riGOCRxJ7lwYeXBKiGVj0UDuXR4NriFuoCIY1xOjtigS3YGyyhqS6hrQ0CAgsvHN5rUsB7fPdag3pVGuIa9YQR7FHhcZ1DUkkHyR0sYakuoa4Zg1RXTN3h401xK3WkL7lQ6EgT7V8GDNtmRfb1yhRJ3bMI2OS36uiYRUG5rRaQxzF7pbhuVaP2/rWENnncw1JFK8osBDJfvYpP29n37+GdCtXs6cGbKfRuXZVuAaBgXnLqF9SONmfY6J+/xo9cNSAWMoiPOZ0ai6RMTf54N2/4ZKGySV+fRmXeGfk+zJJ3YNC14uesa+BaE2zYCKJzXJqeGp05eUhtcNliJbCcliDQKhmlqgZTLBZP5Ep9SJnrf1kl07dkK3GV1fpZT9Mwi91kMa/1NkPQtelhozl1eqbgnloVQm+VSUolIRLHG+hWLXakZLeoD4cJv9rUdHc1uKtWtHr9d2iqzW9Fsbc6wgv4hhIgugS/zZXv7oLX8WXOvK1fLbRfvYR89mS+ewhc33AfM5k0qQH3GabXlm3afOp2rQZfy6r2nTM1UbZQh4z10dMIY/0FXJ5XchnnVOVsg1/dlWlfNGUYnM/Ya7HTSnH+0r5kboUodHCrUpxB0rZjz9XVKU8aUpB7mV7k/ctl1SdzOGU7SlXzyGechXa1UwJTKDj7pzOpEfszQP25i57s2hvTjjm5jF7s9lcc15d872HZfCvoTQwLnQVS9HgfH5OJIvlYAzq7E8LzgqCYQSOAmSAUA9FomxfT3fawvcXv+1z61omNzHe5B8oPjMd/76TMGgxBSQRJrIvQTEZimw1gKP8D64bLRhHOhPOQrXtxmvQgKH5AEMbBiBtGu82AKSjRuOjZY33bOM9deWCQBlXbjDNYL1bhwbrdU1QwkBj2qmblW6DXBPTzkQIiG1QwqENfx98o4JDNW6cayM2E0q5YwDjXFWP2ojN7UbEZlcjNrs48w8Z4EQB4xjZJff2zqhgTV8U6SGEKkkMuBwiNgO0A9JslHcU7MHrB4wLDGBcXRbsYuqIzZboWL7H8oEWktiIzSNxvKlsSRCzuaUxm9smZvOiUSARM04Hx2LGuXaEfD11qkcoHBpOGdotRynY06iDJrCyiXVoyLmBGec3gzaHpw/aHA4GbW7E5FGnF2Ysq45sGsCnLIBcVowBUwhQcsX4/iKGLnYMuHC9rlSgQ2yhrkI1dS1+lYZ8xT6k04dfpZEv9HkffpWPfZXfMWcHAG410EId3V+lNn5KcIEsN10FFuvkaY1fJUS7j+KbSJ+hhg2P8zGLLGQqDEFFVZMO46aKBDbGCLIAGOIxSNHhQUjRteBCDvZpDqJtyMK+LMLsmG7QDAhkDMQ8aVtvLO8S7yzOUwsu1AG4EPpJeskCVM/nnUYAWpSEB4MBaE2r6mDYzwZNBVgAIMX0gcdg0s3n7T7IPWiRa7ZwLPIiVacOZQupgXwdYAutp8kWYmULcYMtxHli2EJ6xmyhdXq2EJ8ZW4jBFhqgr74iSXqjuYJfzdeggVAZNBAq60+g1TYwibRaT3TrMQCT6C5DkjTet4G+9w1X6MfBrD+xXMHXkJfDkCTXIoCMRnSXIR0SPhqVaYSPTq+cf7VxHOFMTI32I0UQrOYUNLMr5ReLsooMC+OcWi1IRyZXWM+nq85iFmmMNefZHABPcSr9/hkULwet7J9BK0WKyS4rH92QvcstFz8t6zV2GJ+M4Ip8muU2fqbm1ZDltp5XnWdyXj3N5TaslE/D5hXONsNK7KNHE3Pmvrse1uoTWE4YzhjqCWfYEADtsPqNeaVOxaHBIDPOrmZe4VRqsBS3Ma9ClbV0XqkvVj2vYs4rNElKveGflucui8oum9QlIWR6we/ltBJRbc6E4X3CYTQsmK2Z4dTAaphWjDBAR0RXQ872zyqG+d3b40wkVBBtB9XHkfiCbj2pkB9d0/rmVMzoWc6z2fnGkiA8y1Xp5z1ZlTh7slpjqTbtGhg40S1K+bcOoyWY8/JA9QsJj+tyY3mAx172Bc8ez9Aqj/4z/JYT0TURBIkG0Q9OIf1Ly+U8kc/moHM+a6Rc1y7ifUi5cSOeeFTZ/xDD09ifjqcERAVreamT/vfAjZuwz6A5jJFbnvuWwn+zbtuWk6DHIFwVCfp758F2ynNvQmAlDS0+FEKvGVSvCJSZaICLPNxbx2ttgOIVNP/TT8HudtGJcYONuo2AkiB8DbethK8WXjXB+3wzguB9JXgZZAy1gQBZTu7ecHI3Bm5qFGVJHdO/n30ZKmN93bRC/jCxr8FOY0U0aDTB9kXQnLtn0pSQTQmf1txluBpyTqcxeYfz5PoTxvZQAO6G4QkmbzgYwTet5mZ6wqPBjm5gs9fmZh5EWG58i+NDggxs1A8EHdvN3g0HK6KBAjoI05oThYCxNhF9UD3IUB1G7hMGY0Y7RGDGxAZmNGBpsMPVoymNh0iUCmPTlxhAxjK5fCAV71wYffDOg6kF73zYZPAuwJEY76RTQr2LLnUivZN5G1Npw0IThcZILG4OGkhKD+f01CGs5jfNnSEq/JffdvpkhQbj+93AC83pQWBM5ansCqCO+uFgoXRgyrAoc+7RoM9O4u09qHRSKDJwnJNscj6DW+dl7rHA2LRd/1LvITzLL3V+GxTcb72TNOx1XmcoqPns7Yf3S9qHAmiSHwnmsm+7FtI2YGX8CmdjM2l/6zxwNi6WO2IibMTDC6Qh4M7rAISrOI9eucDPN85lv+Gz9gubvEdwfcGlzvlVIvel3traqVVkls2F8WyV+4vpR5i7ZOURFErkQyH8aW/mgltmuQs8KpGN9s3so306fEoPHShhepEz3g3OlD4BHxsop0pn5xwCOk2rHBTMKWWbuRX0aXmkBrmUZHRawaBOKzQu0yrOW2XRwoCyqP4kzKOa7wQ6MVN1tnWyL3m0nrddKm2H4gcmsQxL5gvZ6JT9jT5CqvTbj+CwL0ewlE/NOq8lt1FiKhd/io/v7pHlVCTkGRLyGiTkVSQkuTRoqGEDaSjo/dsc/vfkwhslFYjH6yMeLokVJSvxqJ4fQVovljvTUhpyCx3EVLWrQY6LAMCU2rNFjwgSSjqekk6dREEHNZ6qB9IJNMqqV5FOrHhlhnRgHit8jaTjC+nEHybcjyUdWGc2SIeGhiSdsCYdvyId39iDG9Lx+0jHA+n4lnT8QdIJLOkYjUFNOsuYqgH1CmvS8TWCMq0fK9KpOxSk4yserca4q0jnvlOQzkbQyCdNLLyadPj49rMjnU/aqBEwoyXggwzpz77ScRYXfuRZIJbf/L/U8qxQyztbXksVSMdUnYrQ51hd9mNXaqDh3V5Hdu8D+kYf+saYujQ1yK/1jbKOm+de9dxgmdsXvnkRAB15ucJRo3MI8yWIORWOb5BKRMzBrtQdEyocSPYjoeA6vcZHIs5Xx8XSH3tp9FcBxDHqg1G/oul5MrLxMRofDVW2ypZyuLK1flErWx9zTqNtvUobv5/aVuRgta3wSW0BWCnUzWiiNi4HaOTCGlukrq3ztL40MO4bieK+VRWtu2pFa2UQI483LtMBGUuYGLzkNTiT3C/d2hHZuashpm3FlqlZ/T4FkTWZGVQQacCn72K/D1Nyt4YruVvLuj0on3TY7/HQfrfoarFBByOGnndKLXez851RnR9q50fo/KTqfOAUJCO13P6gfs4foZ9Dk+rtSNiUdbYOlXU45yOzHcFGPaqYUWgOtpr4EyjimGu9BitdQn33820vWfAtIwrJiBJv66w0/2b2n/PaIpiRLmtfMau+Dc5r7j94M5ScM4W7v2iDZrrUp3R8qDxBMx3QjBDq/sJndxAiDHZL8h40I/zEPPeq56SZ+oVvXoRkVCAqJZpUiQah4oVoEvhKXAukNjAqnGEih5pRxYZvw4JxdsttH5beFZl09zJxVDlW9TVAXlJrIpnH1JUapArVh2q8MkZnwcct9hOMXHTjjojavZadW+i7fHQ/xeinwbmVjphb6ai5FZKnDeknM7lC8DT20372U2NyJfto4tnSHXo779qJZaqrDC0EQ+ty1kn2IQ+cwNBSXHZRh805ZTDyuni8nKF1LUNzdU65+6VuqUzeDi2gqtFLMaPQPdI5M9stcGFqZ5RvgAvTQYbmNRVmZlDMUa+PgVwYilrahMAyGwhVXHx3RzA/zQCu0wHMlw3gHiIPgDsmuiotH0RLwD7dE4gwWg8mcs10JKeHj6QzaiRbOpIxRjKqRrJm3jwGOeVYuiPGMtUmsb5OhUUYN7hjvGwgyWhic+wf4ZNqSBMD7GKO/X2r6hjCHX8msHrUjQ2toawTw86AIJo2zoDcK+eL8PQaQt9qCMOGhtBXwahWDRo36ICrntdnT5v0aQCtPW0y9CTJLGTSB9C6KQSHniNRa5Z8eEAHmCwXE9R3K+ivwlAN3hlVxWdVfEMgQyvjjqiMCasasUynoVMeLv83Vk3fONLHfejEVqdsIA4rJd5GFdRvDRu0EJ9fKezQzC3vLJK358nN0tbTE0ZCwnDNKmRWmlNQSNBYjCoKCXQpWqZDrpcirtCvHaJDNhSUmOFLBnTICd8sFu7QYUvssGHU1WrCbQyaO0hB7hAKci03NohewShu7A1y40qNHNojoEYrhh4BnVFrAqVhq0ce1h53RHsMEcYDRDhK29UgwiC1CI0NUaJCnTJEaJhTbInwlsCNBg8xYEZ32nMLd++zxY1846hDsEyOQJ91v4kEOkSJ79rzCK9iRp6q8Ck0ewNbFu9UrKguH0BEyor8s6tHzHrEhgiG1cQdXpOKD7mWBHwdvOE2ffUndC+xfMhrqhKaZ1uDhwlfit3ERHCo7MkJy0sbzb16/B3QPf95lzqXwE5Vadlj6MGw/LZ7AJ5AYXnylmPOgfLWxWMOAkvF5aVzSHTepc6lcnnZHMBlE+PjW3708+wrdQnBQD1qIhFp6GQoUoqoBOhA+RdEZo1Kb8cMtpUPO+WXYU9BoNZUzWn10CDEKQKRgykmG6hh2fDNQ++ArhBJNLKwS1qTGJ7QGRZ8nE7GeUI7a7omXyL9ll2lOE40Pua36xpvYcF5VUosmkDLKhCCpOs3nF+kWrvp5N7mIiDf0Pw8UEdkM4YdurgA7NfqMjY4EF1MYBeGCdfEhR729aXmi15oYi/yQHCG8A/qAhLB/h6oS2FB27SQ8HcKLN7e3aU4tPBmfoazI3pnIuDkGlOgOWPffebl5tE8d+UmuXT7WSXXKR9V9Z0rALktRADKtaoeYfSIC9EqL0SsLQfHNnc8SKCXz20q/2Emo+4M89lCKBlwb4/o3VX7LwekR9m+Lu/MyTPFPcZAEVCMQbRDAiH73GvOa002Iug3fM4Q5UKhiAj1NAcqRTySTWsarYe9qbY+GtV6kFS023SePw8Q63LDjpncm8cJUsxQDnkgkuS3XlI++ALus+szqvKLH2W7/9C2u/Hu36z0MrUyFSGjpeGGsF5mdxprW/6S37/r9iKd6DFxi4mnGLOPvB2YYnsOqFde0GBIgdFoLh9Xq9FUzMJA2ZBBfuRart3jjyJmnzAmpApfsZuQRwmHxxJgft485yUOT1ivFl2bipWYxK18JaapBvpuISROkD3k64prJ2rQS8p/cV5PdkC9sGREPFnmI5xxLnfBJcWp/dZYux1HYeB7rtMClAMDNl9PgKeo0+KD+78S2Af84tjhl9vfiDBeLr0rsr+hbEE0avs71HOvE/E/k5l4Ir5uvhd3grQ6uY642MgzX5+18ajNJ7I5/fMXl+8+l+QAEcDHXqUFK0Wo0rFDMZGozelsDOi8dd75sE4C1OCs11s5+5e3HfnU7x97v8uFp6XvY2k3MkmAOsNgbLPtQ4Uze9FtIsncUESNPFfizcrcmf22HkC5txbuVZxFeTwPgfWLn6PA2lvtAZ7MvblYZU+oPJX7DYj16tm/0Jr8+r91DhXTr6ve+epyaBMdLJx8+gpZKqehUpLLza+TH8i5t4opPC7pGDnWU+qGN/Lh6+ASL6vzKntc5l6p6zTHulEtyW/17IlGbSTdVZBeGpWQsq4gKLBzcy73N1+JY4bVs+47csQayVHu6lnvHTdfRe/UXDt+ruwgvjooTibn8cBE8CjzTd7nfcby+6J09/gm71GcthOn7BHcOZu8z+r7Y95ckW3yPu7Z9w94NshD8FLvIU8/vs/jxx+R+TqxyfuAaz++y218vOTqx3e6/DibK1YwwJ5+6jS+TPTDL5qqPI6P5JPH8PsRmeFO9kFaKX3AVcAuub3X1cD4IXwjSr69y62NmO6lS2VdV0WfZI3wvWZYPkAAOnRc9icMwI3HnMeTChnHKSo10G+zfx32OsLHJP/H/IIWUY9DTMXNklt0cb3PU8CrUs8t/T0zCgtDNo8IzVj0EOrRIVDzTNHOE3CPNswcIgKCCvcX7t5LtMU9Zvuo39PND5fSVEOew8ZpTJJYtNFiygT2J3xh3t7TG7MgrmOKH4l9rIep4yHYiLvG1nIXZSD8GMun9s6kXKC03dJdpvWP40AtzidhUtQxEz+mehcmCLsqdk5tN34ID++UL8LeSI0VmWXBNdlkWBiIXUAqIlynByGGi6E7l3ILFRsB6PIRS50RemC1oUudYTHCHMBgYOZW9uDjW5HdClqyFV6FyUdy6ftIyHhCe7//s096fZ/J1Mjw+ONe/2ef9/s+kxk2rmPY/ExmJ4AAobe1BLWdMYQQ2LJjxtynrJAo6l8C1L8ucABpPIxRRzTxNE+Brtc+lDvCul5BD6WYqH+NN8Tuq14mp3oJ1L84j5e/xG2vQkoF+J8Qb9dCpPoHitiYNSseZDtvD9TLQs9oPsC/LDpW7e98uKCxU6hogJ72Iw03SYh88Ihfz3D0ju24Sih4DEZGhHWEJo0kH5vZKb3rNntXZtZpezca3rvRqXo3OlXvRuzdKI+eRu9GT6d3o6p3o+2YgY3evdfV3sUE9wb55wdc7V10XNW7S27Vu5HaWfYJjB9rQV78zy8qv72KcjKmYccGq+0U0eUjpLJIz0HAFyKVypBSVjIVrlbs5hGmlcQylcSmK0ksU0kMPKulCghPRNp/9ZLyr/69qdeLy6990qWiNGFECmpeTUwq9bV1NjhT6iavBnXGiozwJyawXTwve3iYxwnLIzCzQoebkHXgjCpmAKMbO0ZX4WMVjzQxaiMI81wJ3GwTdI9ziqQxRfUErAmgFlMIcg2ku1HaVq4hg0uwNZS1oU4DU8ff4TbW132rugT83B86c+Uvf8BVfIEN5YVqEFVVyrgNYKU49y2F92Y1/X7CUTgKohxDMPSt/oAOoSdou+HmEbsGlp8+HdYcPHGNyZ3qLZCDQZiCcfWgImJcl0P1ytNY8oH0RkQvBDViCAqf1ugaSVHFc/QAlOGAM5uHhaMOmxkDxrOBdft4PQbVyNCRO6xy9E2Oim00JTsRdpRsI4D5EppitWZhtoknuBVSfGCCmfncz4a7ZgyslwlTIQ8Ll7oIjWoYMYyXyLhmg4cduUuIpjyuqslFNDbZpHpOTo8FgHk487LvG08HPjcGzmp3yBoEGhlQ6lu1WS1Fg0LIioLkfOGUvEcPONoDrtk+Sf9QR2U0Z4EFH9IZu2smp6XPq2c0YiG7ohcbS+sppdjC3w71lK7oFmGwvmXzEh9hPWIKCHW/7Gyg3pXuXu40hOR1r+wTXSsPboACc3vfCBuCxlE7pQ3Pzhf4X8obKpIVTAybZ2ELd51T/uyfki18u3YRDYz6aIPTsnZ8Ji4j8KsMnEdQBqVv/JuMTQ6iNCayAS6hPW1djjg0dBaVqQoR8+cNDTk2QM4MxhOybcPVFP6AcJ8IswdDSG1qZG6tfep9EHrm7sNu+ak/crhBDVB6+c2TTvngltyfQcxN14QjIeiIWryWMPiRgc+R/Zo+T9El1wBZJZZMPAMcJp163JmnXWsZ1iHo3DKbt+F9yonm87X18+c0n6+rn/+O03zxmGPfmPK92jKeMTkcxtjQUGcmAut0Da0qQ5OdRbh7BL7csDxI0TMT/f5nQtojYAe5nSE9lHhMoEP/LbASY8w3bHLLLVA/OjuLZA6Sm9Fvx9kXNFBPHlyulkY8iSG6UR0A3lQcy7JRnREJ+v5eit08dG0yrXBsWASKbe0e6LXKY9Ca3Q+TqPt7PLesgzgTWg9hK/w6GYKmGUkOyK9G3kBhqBBVJyE23XMmHkW/T3JUIkppnSgwiYL+RL6eepzirX/Kt8HI6kDZp7ERZYE5dICqF9sIJGjn6TuYKp4zqUSO6tx22ObMfmt8CO+qZR8aePgA6OWBFbBaeqB12mJoHFR9xAeuDNLlivxT6k7ZfdWMfCJ8zMQI4WaNfqWwQPckv1nnNRZpjTbsrET6jbbXWQgPgQUL+7nAQoY6FmVXuZEBQ/ZzA/upqk/q0kC1bVJtqH7ykQYNSPistUPdq7BRaxvVldRTZCi0MCMV4W7iB7DZzPKJK7oG9Le1uwukL7q1NUOBtqHRb0tCFlqRDLQ5K2aPOb3MW5D1wsmz/bJXlVquyLNZ9+Zi4rYPA2hva571JlAAHns3F5NUEY3fyrcyHJO9Cb7y8ep/Dn0V3Fxks9/SV7Purfu5Pk98GDMlunFORAGs4AlqmcBI5nuwfvNFnP0Wtm107WOUAx07En4Ml0h0eEcHt8uBHOullGQxt2Qxw9DmYzup7xx7ldAVgvzAYgQ7hm6eot0pBjoyAw3xpG+goSALVM8hee6AdSS24SBkSQlGRLk5261sRbZhGfolxRyN7RO5jkupXXCgG8EhZfFFKdIPNxdTmHlRPoUdjJZ9M55AXZLcgH1akid4PCkb96kr75dKrbjy/oOFpFyB7xLs+m2tmXICH8hnk/JZL+NsFtFmHJN63PKzVlBVJ6iqM5nbTCPJFEeQozKVBuZj4OhCHg5bhl4E02BY3wnJCIkA9FbwSxd9eWUR3I8KWVO9vKtzv4O536nmvp93MPc7douoIGQY49gsO20sOgQtJFLcvBQjC43COcWGUmgr2qjUrCvJthy4/x3kdC73LhH8cyja0jCYUX8zjycpnA+ctwnBYrECldlO7qYPYflxaHqEgy32IcL0cXusHTC75R2YMMpWA34m3R9bnpnh/YR938G7Tt6yO2L3gKoLYlN9ZMTAn0ynvBbbXfBavOOIaaxT9GRU9aSLzaww8iJQYFQ0N1V9XIwogXtMvA2wS2I07zTg4so+019I3LYJFdqSzWfLxqoq2mrpQOUeMAGNRZ4RCTV8OoJPBTO9cRUbpPtm0GONE4Ko0LCliFZlpNEiminGZOQ7+dheRK7qSgnj2EpnakUawS++m12kZctXuzVaVVRFq+qA2qA568WKrBLZiIfjmhA65USjVUUmWhVjb0EkZ+ytXpyWa7N1BfBKCF/nVNGqAKOrkXISCxKNMpPG8rMx1bCGSR5pgKqYCgWMD4FcuOag3/TgNGbslhSvhEyzaxXupS9AVYC1nkEOW8zKwgwrar1G7a+rGFRVDJpVDPqr6DMCnQmsLuOdvVfNwnUJ65ohzG0M/Ggmr4FvbXDKoAl8K4OLicRhkd6VjRBEFVzy7nbj3yqV6AJ6WU1m1AEPsRYDIvkyDaUu6alIda84SyliA+GsHECBIMjSQXrgqx4xeKagcAMpCW86VnQNxnS937HVjljtmEh9lmKjGZxy66lxV/F6USlWD8jDpjqmcrpqmFp16DK6jmfgnewiUFdbcl8r8zZ7Wz6+s6sQOlRay1blmE90IE7udXPZZkgQO+mrDMQg/KEEIz8NcHnL7htaBnRcxHvTu9ruwGjPOJtA7hXedGxAlKW1O1F7mRERJ/yYzGCzDpCSAGShGMSNnYzZxRDoRnaRPSwa6tabpsdbnnswagRSd0Usu83NSpnHkOE+cYmfQN1R3i6MDQCh09JUPRVUEBIFDVI4AYdM3VWm5EJEVz9J37pevfKoorACHED55yeW6LNIAT2xBjre3mXJ8H2OKFrCFpms8U74yZBn08ueoehgoGhX9wS5fzdkXhmpGSb4J3/wB+U9l/iZBuxknGOXWDJhPXYmZ0TYzRmTdb36bq9Ddxwc1R1W2P9e7xJ2iLfBuXgmrBqaNvtmWhv9WVdbfcwd1uxmH/2v2gOPuqO6IMfsljlxr3tmk6K1rDvis+0OK/R978yRddUcWbd8jiiNLHlAj+HtLrhw8W4f/OSi8ksO4V6vIaQ1YWJ+wsTHdAkTcy3DMmV/Bm/Yy/jpGxAa8w1EoCQO87yBlfG4RlwDFs3vDcLDnwaKJn3cMaKPhlFsaY152SgPN88V7Vnuz1vl1nlzh8suvezXhFfpr0wvuV4gWoCjyoLlEh6mWsPTCtAhbQbkSxuADrM0VrgElciDS1Cl3GfOAKJdSxG2TZwZLH3eMdiBVwEMNZCLLEeRKaXNOCYazlZ/MMiJlNJx6wcMPoD+jSiPo393pWwDQwjmCcpLNNo1DiyqKIOeVYgnpjwX8L22PNdg+Vbl2Qc8EUZ5iUbMrsv7LMuj03DcLO/ygfLiqry4WR4RrONGefqgKi9ulCd01Mr+2jWtwcIoC/J+0KiWZ55sM09eWT3ZbJ7MVE8YYbcF+hP6OuFrPOONVXSQAfMZt4znxuIwoukMgs2XOSKoMnTs7C/AuOAwvOZfysD4X37KucBxXuqMyf2XzD1UnP/B3BvcwlUwqBGxEWxYRvASxOEv3/XrroYc/hBj1PP1On2dy+uvf9TV6N0f0oj0zWq8b6Aaf3RSi+vK/aMn62p89mRfNVYyUn0zozsHMvrQSWed42xyZP0sf6mR0fv6M5pi3PpmRu8ZyOiOb+p5FzK67Zt1Rovf7MtoQgNWZ3VG70ZGP1Vn9AHTk1iS39ffq+MqX2vC8j0PSH9JZ6V0NJSRPvkWf2bB10itAHwgN8GcvR5z9hL/rbM/2TuPauDFRS97h0tNay1tUwiHCoTgIeXjXsUvpGV/6RXZsV4HKpJX09TAEH5aEX7aJHxhdI9TFD/uWdLXRwz3i3Dz+lL26rGZbDVTahlWdC3uGHrpDciCBN2Pv+zow9LJFnqcA/PVHHiDzIHZQ73z8taF/lsLv1rZroE9ZbUqffpNUBTJJ9fXH0BslsY8jhMWsE9nu3LRmv+0yqccGKC+mrxY/tzhAgr2hUU93y+ANwwF632c9IziZML+umbCDk5zOnMxRxVnO9kP4eVWpm0h7TZNK7X74rDabdTKPflMVO5lVeUAWdXHMGqodhv52Z0p/fmx2PXwH6BVDSKBPL/zM07Zwm6l0/f451qljx0axlUGqBqPN6JMs+ahdS/RZW29XA672rz1c9mL2djTtO2ykW17t1s17rDb6HqAwcmfi5mJbIsuu9R5PZ/WI3AxM5FtUQaOoBWwZIHxcvH9Hfx7p2vz+YBrMrrDRQByV7O600VencEeeFPX+V+kB8AX7vfQHNMNW+dP1wv7RveCyJlZqm09ny331uovSD9roVDERMGfK5Aj3kzpdx3N//WXOiKcAJaWBZvV0hS+71JnWrbTwiyKc3pdYZB3eAbHliGePV6dt3vQ1DCQclQ+ScezCL5i0t0RogDLX+DexNLfHfR3R/tb9uPs79s9PHEgNecd2M6IPEwhc73zTdPhItE8yQ5HnD0PhnAMpp5yc6znBPEO/e6wh7+LOFgHp6NGsmfBFFMpsKAhwe1e4dygRuiNRIVLsR7aDhx5bO+GFDvMIVThUDdYQHblXY9K6F5eXNkNQNgcH8AzD8sz9/QM48xzvUpzlZQm5ru5c03EMIeMgF0vixqH5Em9On+HoXiMcdIihnJ+sQ6NGQpHhqJeEjAULofiWwo0WmMTWHl/vfOleigew1BwCMZ1YzROpRlUKfL2G27h6IDthF7WSIz1MOTjGIQYg/AtIel6EL7harLC7K04CLAX3N4N1thTe/aYO6zHyoXS5VjMUOGInHpYqmna5ao/jpZS5e+dVf4wUbT584cwZJFNZwiqXboaMtHaMvJHCqUN+gxdiYLRl1npAvHL2XeA36Y9x9IJv5TJfdgzHAcxXVdB9KDM0QbfQDswfzB3UgTVPKaix+zB3nncDGQfdYfPzsfs7HSUNAZm5yiSuN0bSRLLZudyErRcwZLisWeFFLfm3UoMivIuxaATLm4pBx1XcxgEOcdLB38oCLX1IQWhMeT8X+ucj7NFYxf6uwjdonHh2bAvyNWuO1tyXzbLmH1omp1tsnS/Wht9mkY+PrqRv19X5ZhZOqbk30q4+qjDj+Fp/dQAM5tdM2NZHIZOEMp/Lv6EnmwNlPfm/KBwjSyB73f2VgovKVbk9mE3XIOtRjOBlUioUm0+/1qnHM8uSut8GNai8YVsFMq//dy//Gq0ozeFqeKkvRWyak1h2NrrvPvALto059bzXvBxef5JF38fcg0fT/r4uEyFz7rCQ+T6cbdi5I1U5iSqyciToSw3HmTkvprFEkw+Vq4xNF/vrPK9ivkiVz+PuwboTpi5W9/h3OchjZ/HefOIkhvmjyEvaJ540xDnL0grYnoUWPRjQswnXDgkNP5fGO4CUj9X3sLsHQIhsGQh63ElaC1Zbsjqyfa15HGW/EnDcpbMDPmQmfrXykVkfk4LgAZg5i+ddlLcN3pS3FpPirfqxB+2At1rVqAlXYF6Xmdy9Bp0X98adK+rCYvmGpF7ik/odVanp18nlIxcfMuseqSjAEtQUBVSZe83s191xtmvSnVRuZeLSmeqsQJJPitklUGTIoOZwUH512ZQ3qqDwEF5ygzKA6cdlE+OHpT/rx6UJXf0qHzcjMoDRi6IRo/JJ/vG5OOuJiuWr9utNWc+Hq1Us9HxiDAeUVVAlXVos07OOOvEjMXHdSymm9JACK0gl1mdQlhvU3RvWk2h1C6zK7Z3YwU9XKhGMuuTNOTBeON9JWvo2z5pQysDOWNPlwTBO7cz0VfZNF9hZ7YMznieZpstHQgnudfHAZjp+/6MU0NErn5ere2bDTEBhfM/uFbAWEf5FB1NiuIIs8mj8tYpaB/fWz++TR7juJLPb9cO9868j3E/RpbUVZmZbRW+i7P/vFvNBGladoUpz8U+jvNhvS5OyJYF7OjGjaUJE2WzdAj3GM4N9JCtPq03FoGuG/GIdaNBXbMLvfN07Yg6Y1pzbGWX1zw5g5ov3x7Fje2RrfsZbIzMupecfgtT1z+W+hsrRV1YR+Ttn3XeVzJvzmU+kty7wlkGChs9DNGZD8OV3bDTZVGBLaoja7re596rZLOWVr/2yhrfbrwD+6l/kWM0xrFAgDIzhpxS5M92HMv1Qs/ZwSqJfgzaNx/I+KVq8N3MExRm8/TsdG3myZkixdQ5axLsPuqcnZSeIZdhafgRyjD905JG1wabj8wmNbQ5lq/GEfU9nmaFv3fiVHHFjBWTa6miYR2o31EKMmYuWHqUeO/CEuJWxsKI8UAk4phh/jvzdLxR5YFnNQpOubbvuY3Gb8ohS1C3K6/mMbHZw9+OAuO+Al2aptsCaxxTro6eLbDxHDnYAm8zBcZkXp7qsfp43Fj5iDPXmzCi2aHTCW4qui3CdHuKvanMOFXuLeO92YhcVg/wQ5aL2lFUJooZM7bBuZvWD7XQhrFprgl1ftWY3l7x9Dtdym7D86fIVnA+8vFBu4rcZtlWvYKw36uMzH7gUUrgj8h+IEvt+SujtEj7P+8CIw81KOJ6L2BTGBPSuNoLrMidxqSPzaSPjXVfQ2afkPXXahCSai+wPN/grPK9kvki1wy5juOHzOnL5W4s/S4I0uVTQXnCl3mYj831JoeI1fkkgk5PS8snCTuAS1J0a+naa0rXDrii7KnNSjK5wZnS0RghWccN0RfJ0XNdepIOylru8l1U2unQhadfp7M87+Cs876SeSPnNlNK7qmwcMvMqk4DqGTCE+op9QygMdb527NtOlQfMZunJfdUM6XwRs8V7btexUhTihQmNw/OH1Vhi6awtyp9jJqVh0fPSoXxI7H9uOa5Sy5fNLT2iKG1E87paO3GkduDqyvaukr5jNwd1On91mpzcJ3uDa4dsTWQdhx2dW9wY5OormOi72BjcJWsXG0yp2uX7wuu+w62BVd1W4azX0chNR7YFciE3y3yQ5oqsUEqoPBvfu3tIrjCmYn619WSPpdh6BarZdhu8/oWBAzn2S0IX2wsCLptHFwUTowmvxtPsSZc1VgTXt+/JijRHbNWOEo5p1wZ3L6Vwa6OZ7k6hGe6OgTGxO90q4N3Vvmao4QYmqJku+r9uTqY2Dvx7krp/wad/FfJNuARI+TJOFHQx01PscZRpZ6plMaj6E/M7lZu80VHx/MCI6vQBcHj/L4mH8o7nA3WSIjMQmhkwig/152OY1w8kmO8tuIYu5QeNlcrHzMGzRrak2HdZiout9dYvrhfG7dLazWKLq8YSZd227oLf/bZNFfYPeuuOsm+ipI31w8vqx6uqx+ut6ZTYzj3Q+yKXQO7uAlbXeBpXqH0ftpt3JBTrjPfzLlP4zzqTDZy3tM8PfORqz3qelXXxu6jdlSZhe3N11ddfG3RzwmtqGkfHuzTKcjy3qc5A/PP67HgrsmMAyfU5lNsmphMEzT2TGardKr6cndRrw1u2l/97/6abDcVRr6z4tTw1XnwQM+u0Ped1QodncUKHTdXaF8JZXCFrjIOzzjjqG+FDportHe2a+++rm/wf7j2pmUHbtUqs+lZqTmsTvs11Q1JujN40AF7BEcn8n1ucyJX8m5zIg89yXROe1K6fDovz907q9yXnZM66Di3Oid1mp3KHzi6K1zVCzxp9QJPWr1ABEtc6VF4mc9ApUCVXlTeB5sCeUQDsm+5VHZIouxHlk2os+QHnFTTiBOwU7ZC03PY05z/jMnc1hShQQ6xIQcrFttji+W83Vto2DAc7iOKg9rOAR5sThbi9PSsuEEWbs2N/TPIPTqT3CuykNHe13PsfHOMpttr0AOb3iSdHuvwVoX/QGpjk0zVzUE9LdfDFphLscM9DilVMBgBjmMqbDkdpLGhquJvubNv651X8tSgTVOCNUaFNpOPZ//ObIB7a/X8o/ccsz9/rhTx79ScpXdu3lnvpL0cu+drexPagK5ut3uJMnBhmNMmt2vRxvXOm3tuxetRZ74tPzFZfu1Rka1mABQSUQOILfsMjHkisnHIQsrXZ2AHHZUfbJW/9hlHNqwa/nFtPpM/R9/CdrabPxf0vYshT6Jc6prn+rNj9w3lO+VN9iE3XyMCCiXD7OdcFPLeWltwmzt0QWFDqifXDj+8G3Z0NPs27I0Gplkt3T5lpdunTifdNidpJd4+NVq8PeyOkG9fpcvxLjNetXz7yGmX3ytGLr+DfVOt7arTwQrfJ+JeY1kN5rzlQ9drC699unsvK+Ney4XUprnRyrhDxaqhAs0QadjIuF3VXA2eVKjkIm0+w5MK/xkQceMzFXGjsxNx4zMVcSMj4oYq4oapPTSwIq5/uoXK6dMUzy6kwqAYEZDq+2sH1P4nnGpHeEq1/7XLtf4NCfYsqgN2aYyZHnBrY6aPu8qeaaxWfsTL1hXJLHFhE9048rKZF+8KvVyjlxv1ctjV653meq9enefoZYNeXg5+BrLk5Tp9+JN6+WmT4v3m+qvm+jt69Y+Z62Pm+RfM7+Pm95+b30+a339nfi96+vvtevXvML/fhyAF7Qv82/xZ92DRe6ncSB/34HzCxeQCybnXk0cZtqqJup7wg0Sqv3lOLZvw9/OYzNRePC6TeZu8XTfHuGHThE0WQuVBv5uPq1tSn3lGYswzEDAzNcE3nqZJQNNONjJ2sp9UxwxSSHxqk4DcHTgETuwh8PmjzoClyjsU3apvgU7MAn3xP5Jxg3T9ve7cqNY84I480v7Hqu2x0bV9dGRtk3xqO7h5kq+UzSdjZn2e/KQDxwYam7nHZK4n650fNVF3jWtP3jGuDZSCrGuDl9eGv7Oqx2qYiBXOjFqxSen06UnyMSioVitYLefHQy68uO2q94/Sk4+N7snHv/fG/fjo2v630eNuhYJFs+rZZLd7lAuS8g59/6SrtrSoHux4MUxo2RLwBGQ79gGczI2VH6fglsAHsKA72NgG59NuRTs/0Uc7MYHL1SXfq2knzsdoojMG+zulHvvIq8iHLyv6+Ufr9G84Izt98XuPRA6PJpE7vvdqe+fo2i6NJmhEDDlPpM8PIPprT2G+ZQ3+gA9nCsQ2kUQA9Onl5/0gSLGg4YCri6U8/GGNjRAULvF1GSEzVY+2/Dw6kKM4IKypQ5e6oXrqbYZpIYXd5VtjhDZO/u9SHG9sP1gTqakJK7HkM67Ekm/qTUUb8muXH+mv/0e+m/W/t7/+9/bV/yON+t+n9b/PtxVHXCJJNob5eYe+vIN6Mj65U5/cKZ+vkq9WMeJGWrU9UvdzO6SfrQ+NHms8/nz9+MnG42/Uj0Vqr8VVEeTN9kc42fkM6NCpwzdk+lIerq0f5vY87LxZ54e6TtPbG241BTPZX8Q7NaJa7Rju1Z8G6hjuUGGSIXxFwzs7XuYYHsBLYK6Q6pgIO9YxPBh0DI95Hr3c4XuIY7gzxDE8XuYYHhjH8OBuBBbc4Lx+pnc+e2Rjj8Eutml7t/7v2t59Mwhu2tYDNIglu1S9AG+S/PzaRR5oY41ffsOIulNJRS1k8HpaF7UgGV0hewTOTPX9kpdX4M9V2UZ11XTIeXn9Rd0XSn1Pugfy8wgeEObnaMrst334o/0iPMW7jnqHGcLdWhPutoqa9+sM4NMrzFMwbJkA56Wvd6mfxhdlrAFeHQNgg7CxP/XEz9zxz3fqr6RQgHY1sAr6fnVo/aQKt+z5MuxQIqY9110oH3uQoU8c1SqjgEdghyUMZtdMeqPnLbgHNbRNcqFsmv1tM//vD73yodW/9btvEvJZABx1RVhXI/zUti/83C0Xfe49/2bnNdhS1pmfMJkvucTW8vbM6G+wCy2MIWilfun5/dV6rE5Zf5m+BR+FMrQLdP5dXHwrgqvLj8Ivj7wrmi+Pf/0nd3fdNWnpQyPZ/ETyGfgEwfm95ieeUGGyF++olLoZcBLufJq+EqWO9dzlpbqa5ZdtlnX9b5eVlNryzaW7Q/L4auxFBwEZxVW0hNVwtzdGr3XGapMC98hoe72xnAPtM35kdZgTVOXKbd2MSA0kgtK7HNGAEEmqdPch9Ki7t4tI98EmjTWEeF/FOIKvAS2EMSHHVD0i49trISog74ylTR6gpHGE7UIkNmhsZD+JBBOIVejnY4x9VyZzxRjSFZ0jRVKRhJSgT4Wmj+TJ1TP1m/qja2Yu8SFXTiAEWN5hfCVvTms1wdTtgTz1aStPT5Ono2GNEQxWaCjbqVGqfKJXhXoE6pigi77Gc2Mv9JUm5eHZ6erfCVMhjACjEBKZ90ENZ30QhFOMYzzy8V04RnH3Mj6ZQ5f3nCjFPl72jUNiyxXGHvQgS2DnJb2N0eN3mfZBo66L0jP6tJ13+mq72FfbpR6EDW8v3F2xNEjbpLy2lJQxzJmM9sKbpd/qNhRjMrXb8lGr16GbUG9cMRSo4goeJMwuLL279xwh5gRiPBekktASRatZTX0qhcrnzWq2BqrZEYJMevCcAZlqWJo8le4uXcRGy11wWJqVuHPyADUpXUOkXEeqWnX6ahXYWrWbtQoMWSVH8nazVu1mrQoUzx4zCFfjJshpPi79IV0zJhJUemzan1oIDlrAvaSCunI+VawhgLhvANCLqPwfn//UYqB4XSdPbjlQfvMz5yP0dFR+62M/qy/WzDo/rIK4VGXrFd/s/fdPLxXOthdd/aY1b/z4Y59aKlahUpj1q47UTy/xEwB/Qp/ZSLmlkfLlQ1O+nCkXenSLWlZ061idwfGhRR/Xoj3NoJFyayPl0KKPa9GHJCUD0/3m7X+jHRCVn/zmH9vbb33s9xeDHcLV+uq2ceHgf1rBun3uzvd++D1jXxuoW/UUJfjNbmHKrY2ULx+aUut2s7YqklF6ArVwl/fQOY0eenJoDz2ptQgGe+icRg89ObSHntRaHLQ99D8+88RPB3vV0sTZdusjv/fjG3/0iS1HDcVufqUVsDZ/ZqlYXRHPUck6X12N99Fi+khxzrbpDdvk7dc+fXVPlv189ftN0uPl1dK81b+Gcz+uPSklKs8AzImovbpy9UchVa49BONvFtpbBVGqKmgLA1Mo1Gydx5bT5YEOW5VLjR3pHZg3lFM3Aa/uU7MX3/bh8uT4gflygkFP81VM+QbTRuHr58iDN1/vv+BnzrnnZUfl9TlHcufIkcLklfdnchE2uedond38HK2hJkVeyPzh3fnz7r71bZcclder+vLSSjpHpJ4yXnr2tbh47KQJly+DZcqUewyoo8HQ11iIoPhWi/nzwMPO4U8Tn0J6ithRCaI5+mBvkEP6h8lpDNODSj+kHv3m+vJojxD1udcLiHIRKLaY1CHHhEV8q8LTUWUxjFwsbLFigW9kAkQAHEccLeFvDxg4IYxD+QvJvLA2f76c/vEGmE1WXnudyBW9qHziYW5YW4p81maMwjkrkLdBCJlsW9hMgg7lGvCZWFoHq0qECg/55MM+8G0eJEs2OBf9uLiR7DN6jBYPyR3/9iBUfRsH1QyomXeCrfXWSFESgc45ht5pvPARS9N2hqmaCGjz5onsaJZ6Fe5l24Dy6iDlHGcRMHYgkLtSOyS7tHxhHs33VpQbcRmTup4z35uUpcX3GE9ZU0MGoMUBII8RDHpf0d2uAZfL4wBAAe6GbBIWcjtG17/iaLGqnypW9VOF/fBhVLs4BQURVEmFxMC2fVWjodrLKDtPsz+lgG7yOrbl6AfMbX7s6CkLIYBk/OCRnlPbUaCZUwZw+kagGXjYxjzuEyVo7C1yGbtR6rRJHjGeNmOcr3gLI30RyICpkKJc/Za06ND0B0V6IubYOh7f8mM05uhorA5g9gX58s4tVkKj0sV6Hav3B2YNKp/0JvKuNQ9amcuPecgALmD0+ntoaz4l30kOvjEfmhzzXEdEKaCB9RQklO3swgEejTqAtqUWA6KDCO1O7dnuSG+xLQHPQusXGIYj3EfVM1Yj3uUsGoBg+6icsi3k+agCReXBDah53tpDSZlhgzTUKKZRZJIQJtECTW3XuOqGM3mEICdKFL5sYbtRf4c5MGdwuzF/fIAVxhqyXbF0s7nmtIac1z8LGXeX47NsMsZnORl3sYnkuqkCCcgsJA1XvPLHgq1Vk89ykhXeg2c1yQzeupuemqPDmwxQII1a0Z0prQkgkjYwtoav20nFEw45NGx/k7TRy0cN80Tw+kbrpAO5NlTZyLg1RoIcCaK+MP9IhN/WHoT0Bh9nPHrZER77Y1+Hh5L1wNDk6U5Ei1FiaRsIc7WwqAYJ4B3K0OdBlfioSQoGUtKvCY8tMPlYdrVk2sFF7m553eHOMLwQfjycRS65siErm9xrJMckNhPaLJh9mQGk7gFgdslcjQ9g3STLhlj4Wl3r79Z1Xp4nd3Otz/15Xe7d3KnfySusrIQq8tNv+25sgsR65zsmdDvDmgHFpaRi2KFimNHV/dw3iCQacdtX9EINMOxanJEQ4CHSVS/HeU9QftM9UF6IKPYBEErbuxGs7obyy7KdWrP7hlD4GBVNZWcOqL4BQEd0npbBDoYKXHq7DO56p5Pd4hYxAu5Wj7p45F/qdOtHY3gkmYzVj8bxKLnUwVZOMr2p9A8g7OiNNxzLXo69cendVI4fwCv7KNEI9/KDCDA5sagt6iKj4PsqU/oEm9Gql04pHTQP4ASoMJrVFomkUWORiRqV7YXNegLCBiGuWckIlbzUadHaK0SNLiUAbGhqHKDGlzptTFHOHmBD+L6ihrfmcnduveNIg1wlLeIR1SjSDKL5aOz5C+HBfjVRMkRNlFCYKEOE9K91Q77IVg2NVM0get08aCrx5JdR2f0uFHhB0e1T4dGFwltoao8ptLWo0WgJwclGuPD3kFVSp8FDJ7MmJkBDdqF+lX5ogG4ajYan6hfuxbHdR9z6zlHofXWrnie7FP+FGhJ/z4zZ6Yuk+CAlNDol605fdSWx4fJBM+8gD0QCGc/H7pEygyX5PXYPIl0fPUI2k3eOSNnjLPtIPRqoQs9SvMaXB59TkShhE9MiUeNQMMNu1cVv1Dia+7DujoPkEvV3U0A5D4Byoam80aVJEVGtWopY6V+Wkbn09o1f+bmf3P6Kq42KzGWU/DP8NDvzT6flU7f+1B3xKY+oOFXRJaE9D/APQCXt9qkH5xoBCnN/ZH6u6ueoSCHYjwHOXd53LsGgoIf0+/WQYV8ru7adR4c0NGT3hc2vw1Ff9+sOfdtWhRewbXSaWTkjspJpkF7teqqu3tqnOMaC1a+wlskxoGIX+u6boW7//OQWHGYc6S1dLz0YDSiWJ4dwjEnLMVb2c4yV/Rzjx/jfX2wB6sQAx2iq/IMiqyi/4hgAczLawzvdfCU4xmQZXQeyIZKR8I1Vu21MG8ewDoy4zK1VeLJKGLbCzAPRdhLgSCHVkqvzlQ8WY7WygAJrtVNqE+wX4D8HimnsHyZ1oZ1U7luE1aTGDrdNlm1X+nY+BUKcyqd1sFeX/uUUCtqWmRSgliXQTMK/2ZK+mSuauVSzJJzvTWGyoKip8tDuhgTz5Bbbh9Kd9xTJEfA0YUvSGumsfBItFonK1yaLULgS/TEN8sMASCmTGjk1aTC6oxC4hdO1LQdF35VA9fbz1XpkV39fTJkUbUkRLMGsSJo1kIWnDfH2sCEeG6IncqgrBmvlXG9Kqmdrhp3PJL7SmMsJy5tq1A+ltXGTsljJY6XJF9CuUppW1CZ1BpKmtoKssX6BMWt8ltoSAltCsx2hbUfIdqRoR6fRgI58P6lYGMmIOtSZ46aDWi1hVzmswwdyIQENzydlPubz0AzFqM9Y3MhGTWFUYMAly1xXPlXi75q8WZmKYE9Rim2dLM3dxmqotOBaWpB8pZhxHgGMV0Wcvt/6i8BNV266S9Dra1mTKMvHBWoRH2VhDZcPVpHwCrPbSL7zUnEzfpRl56t29fyquSh0Fe9x8pDl2dFiwszcZOvRPKvva44EtJ67jxZjR5aKFVJgbhNMH5ME+ZjVxSVQi2RSkXxMys4nGm+2Simo2NKSHnWAabr7bGx74IfKw0kugZMUd1acXfNh0NrshTEmXtYdBatl69EYlrlislKw5b4ee0zKvElvOP0y9+VTLHPNZcXtW1Saq4mPhaSMzKr3txNetLAOAaIXPQaIZtm6Avba2Dp3hVsOLoFtLoGVHqh3ft53si2/3jb10Z1f/ueHt/BUuzh/G35NffSvWZttd78f//3qlt7zli2NzXRB8by+dLU/Mldl26bri26ZA7oXFWzL0ji2uxKnFShtjCFLZJza8yp3YK0LIHFcJbNRLvt75+Cyq7dGGr91Hq9zPNgMkr7Q34izvgv9db0JXHLEArzQn+6twCWTySWXBCpSY0jdMgbXLWNPxusd5np9FZ0flxPm6XFzPWauj5jrkrl+xFwXzfU2c32DXq7ti/zfFzDZRv5f1wcAYCIKJ9InXeCXrpzXw8ApM6aZzM5zGvdrGvd54368cZ817ica9ysb9ysa95MNTiD77yXZWywtYS++lE8u5SuWipkjS/lMvlKeHSmCI3g1sZT7Rwpf7v1cpIdJez8u39v7fClfae/XLOUT9v4c4Sz2fmopHz9SfN8RjH45NQ940nL1fK8+qeytqG/H69vJ+jarb8+pb9fUtzMyq7sNiyoZlrx3cT7dK/LVvfMAYpePCyWt6r1EpsuL+d+/2nJ02y7Q+84vG8ksLKpt2IsbXTe1VGwys+g3thwtprbNdI9vuGPpoS1HhWABc23kudygfOri3KW8n7dgOD1XpPggkyV8/BKDIQEFKp+ukqcr6jyL1frFIjDrzSfT2Avmz932gpO9//n3b/mKfDQpy0t2JL/wyNJREWnrxMxeStXVu/dcaMTl0+kj+YuO5GsbGbxIEo43Eq7V7eVqHA298Eg+0/j0hUtCekumB35vy9G8MPdf2yLL0LS01IVQCcnY3zkj6y8g5dbmzz2SbzgidF1ntGHp6JFGNuc1s1ldD96qfEVTHywiwYX5lDQl663NV/RmZCDPySeEEazsjeNccTxfcQ8ludFfCV+qhuP4sOFAaPvmeEwuH4+lZeNxbqNpK3Q81h8Z6NZME+dMyyE5l0OSYUguOpI/p5HHRQNj+ZzGkGw8kn9/49ONMiTZKYZkUtI9Jz/3SP6CI8JN6nQvONMRmOwbgRW99dK350qfPkf6+fulj9dI32bStytgVJHlkxiBU3wl3ZXd4W576uGr1zz+oX1bj+Jg9HwAidW64JdIM0WSmKieXD1T1D94+np+PnFPEeTPuxo/ngfDmKBaFSGFBPmLj+br6iyDIyIXrDuaP79+NCGPes9HVEK1FO/orjxfp/Mmmcuff4mvyPO9jmyr8vOkb/Ppo82+7jV7rZd/X/7ipfziI73vs6LT1t4EVNrbDry8/cf3XP/nUrWVleXZU2Ag3kHhiqvzQgZAsm4OyAWNrIsLmueYayRJr++B/li8aWt+Qd67p6977yEKWj51zQyvK6Urg6p2V0OdWnXt7q3X1MLFbql6mm/Kyavb6IO2DEhdPb/ZciN4IhyJa+WrjspXbZgFLtIutp3e5Lo0C1wmQzl98ofTL30ME7man7t9n9fiiUw1lbV+OvKig+EZm66VzxXG1adh6PbLgEZXPQZVf60G6JONroMk3FQbjO+m5ZuVjTxhErIzzio9Yi+RSeJQNq62h9USlBx5/1IvBnfdK33dxc6iq0I+8png0fWNasVKK6xaa8poMqrigXVV0fonUAPVip76/reuIQBHHt/zfuC+tWFOlG7bNvmqi/9o21dlfTyczSa9ww9sWSpaeevo0TxZ6sFMZyw32g5Y26JW+fguWt7JLxjptissq6o2Hal1t2r4kfcfyVXONk/aeUuai0jMz3yFbWW7VWWpHx3H+b367ibKaX01cwNd+FvPogGF6WozFE+nIaZucHhVG7+R7WrLVgntKlhp2NjVwyHS/x5zgDjWMPB6KSxBn3vmlqCIh+HOpenJULYryYBavzVkCrXsFIr7p1C8fAohYBrBVjlJkt0zRaeeJE3dmnx1kyrV2gTevQXZHijdHUR3AGR97sty3FNU2vHGdlL2gtQC5K09sE1Us8GEoQN6ClULmshT2DbEJSHIk17MbMZwSFJlM7ZEcon39Kqz7dQAqbas0Jc1Y7jL2Fz34D0iDHSP6lGZv0/9hoEjPFdUiSZzT1Fd8WMCDgVmZywNOZKPLeWePbwy9DaFje4lROeFnIHN/5RUdkLuxuxeN9GGTfYySwedxlEKDrClblJa3XkcCNjQ9pJTdmLbdiIOP/PYdPlY39dj+nWyS7+es1/3dxW36KoncGi7IsxSp9uQPrLdMtFQmha2jxoDVYwdkQ6yPTTW6KEVje4xA4iuMb1kzFsSM2NIgIFdwlqyhKUfDL1kgYBO+XwR92/XE92uJ6POuJ4rs6JvMrSGrieJPYoyM6CVLbqFbCmuaywjaodb+igMp5uIVQMr5uxlRar7cxgbuDfOE3+0VWtr0aNCj+PEKZU/DF3xPrcg/mm8zpsuHFQlVQQYn7PFv1GybVM/ysceQrZg/HMg0SGrqTmiquZtZtWlP29GxwD7Zdt82cGXIlNFjS+TgqeeAe4RExKIrkR5W+etndO+T9SEiOfcGCX2nwVjhklGxDPvokMTFJzbp3quVnRr6y9sdNtGkznWeHzsqGqIIqBR3wA45g5ykJRJI+VY46dN4UGb5TUPW3AOijOXwEI6+4qZrvWjIVCjdkPrtrxmKcwEOCjSw8+HSYIRH8wT8KIcolWSXnSmjD13hayEqNL0DwIvVpLOlmmgYiXpeBlJx5akk36SToaSdDxA0glIWtjujQ2SbqtpeYQ4uqizr1NzTpVGStv09Md5bJ4qZSc1ZSdK2WNEHJI/iKQJIou3K6xSAtc1HMZGsHp1LIGrpbXk7W+n01HjLekc/kQ8uUfGAYyC/GaussibXOmzRNhcgyEFkwdGkTXngarOQ2d48PtRIm6DiDugcBIxEcVTxhKpqPf/Z+9d4Oy4yjvBOqeq7qvu7a5udUtyt8B1CxFaWAIBRjayjVSd6IUtbLBxDEl+8eywG/a22biF7PVsJHUbZEcMDijg7IhABgHetZKxGSU4a2XGCQ0oRNk4vygJMyiJE5SFJErCQwSSKImD9/v/v1N16/a7jQmB3wjc996q8/zOd873ON9DptR3nNQJnIQiaoT88FIOODr3PRKOc2LEx1rG8BhNxceGuwN0fdWKvko91fKW5kwMjkyySRPb0Yvkhm7PapEguLpSDDT7o+jPra3OufqL5+Eq4hzr+nqxrm9erqKv5LsgXMXAvFwF9dMD8F8YJBXT+4X+HCJ1cIuy5o9/JKkeJzNDCuEu+GGoyzxZiI/wmlzDbRD7FmxY0ndHZu56HB4Aj6sZZ1egrpPADXbv/ivu7r9089+CmrtK1vGjegVcS1rHE3hNfFjGMoieBnNq1iR14W3/qtxmbJUSsAE6P8bRF4y1Uz5S7tIIrkrQVGEEsXtehqsGW9YqjbFo/1BV+wcl9/UysYfnzSybB8Nly20epMvH6ZSjNg85oW5Hxbx72hNuRKcMLxlp3JHqXqMGDbYdqkNpkBs1fNhaH5PsQabqPMi0giMMJk40GyxOq/r8LGod0pzCp9Ejzhx3TBBcHGm71wWQjwTcNYcgvdDpYkWjBzpy/hE6kCjajWVBp17s1Gp0tDnPVfvwPCAa7vpw0Z4y62sPyXQLYIXpUC+wZl0OpGvH7LXpGtyO7qcnUUgAhgLA4e79uQZVG8Y4h5I1nfZqKW/BXA6Bx1wDdUUSTvDOL604rPET/QYGVb/phgpV85iXFPG7/mEIKEgCkldK+z+cxr3pJetJTBVSK4mFa9UL1JLLj7x+84J+Pk0Inf2Cp+8XrB3gZwMnyodTvIjeDNIm6IyiwAHvNe3LZEr5RBwfPSBIfhkWbDhZzak/LofKUG7Xh7dD7RA2Pkn80Q8LXiD0NL61ykqCJebcN3vOfW7OffPPuW/ROWMK7QqJcQNDWR4I0kZX3E0aXTF4kgNpfNT18sbtH0kxnp4HfXIslGrXe2uLWPvh9yf1UgUw+4M0soMlQ0XhLb+u5wk1KINuyxEq6EYsrShzueZxyBnQYbWHHORhaTI/5Ify23vnKDYL8uG3C/KhxlD/VwL5wWTVR+YB/3ECOKL5jMBzrcJ/WOEPxoLX0rVkUL08eP8F6DuoL4Xr/+IQD79rIB4qqGvJalUiAMA0A1hND2TniLhaKcKwrEn0fyi79hxSTG9+/hygpPA3khOjjxhNt+4shT3IgEFAX2ENL+HTbXwiC+6i2a6wjTucKzn+xFmwHwlXXzIif148gkdDms1UefctlsY88ABPfI0r4KMJYVe3WBcizcS/wKBpbE69nZt3brFxYc26wSms4bTehIIEzTHQAANcqKs8eORoGPLuEx9XvaHIC/GfyvCjvVrfqGnZ4Y/58U8z5SoNo2va2tTbsLLoGg9FJIj/1x36IMaDGA9Uj/16aY2gaQfqUS/N2CkNo+qNCFdSuyuFGEpGfwTrIIVgLC+VaXYPEXWSCZ/l/+sG6l4UevGbvehWYoH8J0CGy0wdcst1MKsGU7Hvxyay363fkTXvEjIewtNh5gQ9HRJ/b2e3cvQiI/yVhStKxJArat1/reY7lwU26zlUpDWIsurdgYKUiwA/guzMJxgX4PMI3xI/HcQDXvRTXfQI13tufKaoD8Ny2uTiyTPeJFIV2vjmVCD/137qF+V8148fpf7sBtSoF7EFDtF/HE0kAX8EwrUI4B8FY0FMSHvnAlNS2Nr+zDXxBaDVX4jM9IL5i/z+n3jdMme6s/JZ6Ktwz9kbaPr3CLyRWscXtvIKs2kzmZh9W3l+em7KW9XsFK1ENwZTMJ3tZHdOQtVA7xj5iHaOhlkjokdJ/LvEG0U6buJJpH6gN+8+11Xxyj0InBpcFhUaDUp6wu7G0vVvWxN210dawkxkmhOYzPwrTVecQAXPv4AH0R4ZdYjduh9BQkNgLDZn91BAcQ0UFyKdcE2+7YGKWUeCpE71UYaWgO52CqbKnexADwQsIIDIr51QRxjFXzJJSBkdHzXZNxrpUVb+/6YbXaBBCux+EZQQmiqpdugwwtdq9JtZPVEqsqwnNd2iQqoMXLS+KHwVtRScH/ILcNbWa5COqbfpiDuLQLQux+tsiNYKiNbmQhTF0wYgWgNEI0K0mUMUlKz5rCBaU4jWShCtO4hWHDgTujtVcijjGrwxAdE6aRQQ9wlxOgj5Sb3D4wZpnueCvr4Y6GtLgd4jG8vQLziwGGisSTYD/Un1JtVVpQVypM3EN8df9aOfNDyL3ZJMafPaocAJew5TuXHBhYOcJufVRToIyJev2H71F7AiFs6uo9Sqe9BlnoZxiT9mo8hR3HjLSPQKnBpP/pKjQWc/nl9iSQs8leWzTMUEMWo8T7p1SgRMmv86SNhVOLdl1oIRrU48JoItzyUfYA/0g7IxlG+G3kbxFTj8i4H9Bz+qg0i+AU9fQCpAO3iTArnaSqX0fgBWgndFVc3bFW32CrSlXpv3PQaBbO5Rc/t+DPKbfkGtv6+gj/CtgmU+be+DCQZ/jvKD7PrinPY1voGUeT5UkEIc7iGhNq4LH13Y+Bm/bbrHn06cbXnRj5rAteXhHVHAByrp16qAqksSkOWHwbSQ6EtEde69gOc2t7xsCuw9OnHwkYnGBV4lmpIQTcEmtG2pWwypSRaCSmmt61otUWFQHBCipzlCoB2+YTP4DuH5rcaFVZDWScji3wuiUXzj9K4Ptsfb4SkOViCIzwa6vl9FnJ5/NDrg854eN9YF/1JLOKvmcRYpEHw1h7PZ9gn3TS3prFrpseJt+ivWjwSq9K3eOpDKxIcrmClSNMu0XKA/n6wVAv3xmOkGiRuPtBnGKIm/auAh9UMaEk7W5CaGHNro3Vg8+QH35PuLJ1e7J6PFk5hPYDMksCILePSfdUMI+OIrhSvVpxeedk+b7ukjOO7p1mqZyAC8OV3fZAI36p3IXpw4GxGtH+GaKHEbThahQjQxwPgemD9kP8ogHNw9uxGbbZNnshkzKUzDrpac13npHy+K+a6YhbgrpV3c10r2ZaNBzM8jU7pUOS+tHDc7Nbiw/kSjynkVfdChrduhn3e4/3oYoaLDYDf48k0e75XQb137DbvJHrKLZqIv9Ky1xqK9i14H88423yjd6ZO8OxqXdjuMaFmnPwzDk7rvWUAt+LZJKVARrvVyeMAN7hcycNET8iwvsub+ffv2CVp/2mMwilyhlkCh5s4MOxH9TlAQ5/J+S0JBM3qRl39vhxu8Cg0Iqs/lxIGbNpPKjYq0sGPHmuKWIHRRTjmIvVzdEMFqEAKfFr8hllkk3HyZDZc5xGll0u5shXzKanK2lrPtn9yn8f7DfOUNV541sQJooF1zB+CXnaPSeQfE7spXI/dzGumQEJi/22lYhn0gKw+zOo6gKWA+709yQDKcfcVYBCl8HYsgBT1DfR2LbUelIblh9SBFrYsUe1pWR3KxGFhYHliAfBkFfpYG6QtSuEFGOVLYLlLUCqRIrUMLHzK6o3LCOXZ0qUlCg46eMxSA9sDWiVc9CFGmQiwP1SoL56cCj/X3BN4y0UlPdcPQCkAmlx4BCAJDKEZmzPEX8cLulGmelMNRd7S8cjjF/LbAwnACQQUCugyTBQDfvdVTWSh7pn+vhjtEUZsfKCTrKAq2tHK3AHPfVi/nudLyy22A8j7XXNFMOyTt8PfSPtyf22bzbsGwhdqUDotml+wzdGdNT/ODdwueLFS9uUTzy+7eaRKaFPxkBYEYGY9CuyRCPO4LI7EoPajsbVEKpp6CSVxmqH4QOT/7lFFC8HmzGCXgdbUu81fNPLSgWjqTpYyeCMadCGEvLQh7aUFYpgXVni591+U3TC81kBnJKPfkdKGqY6jNpgvmW6ELJVpQGhW+b8NWd9vfLEYT4KPdaVfIEjMUPX92ScOJsJcDXIo0LEQcQhIHHvhO0SEy2IzShjCx1xj1N1XGF+uNWDL5ei9EEpLZBEGbsa6Zr5p/GbqQuAPX0QJSh31uLL4bC9BDDiR4gzva4PfQhpoOyyxEG0wZMRjk2RSIUe1lV3pHWhqorAF8MNE3FwKDRlw1GXMaOVQhXesHSKsiFQvmdHHFJ7jV0x68ccoupWRt/z55cO2klJx5RkYpBzRnjyPYuiNY2q8Kn7Ivmz6FlzY/SaISubHzkBurR0y29BHzV2EhCCyT6lhFV0gmSndChEyx7oSwLzWkPTnTUqIaQmDC3iN4MQITPGsCI839Z7+3PX9ue88dcZH+Hvfz6fqI3BJg3wgkrGy76Uv+JJZvVysntu59LXumCpRo7GcZoKIgTyi/iTvbrnf00JZ4i9IgQgwSGjxEaeilY10SLmLu/mwzEQ+hHPYtOKUaWutHQVaYXdC4gso498x9esbf0wp6Ye1/W2BdUFIrs84pqc1xPQmXxPUfm1dshmmQgQj2s6Yt53lmss/+ZEhduId0UJ4LHO6ejiTue/bU/by+zqZ2jlKz0ZWt/22xpaADZbTSJtz1O9RXop/AXYj48a/B+idYdh9hPpdBUH+rEw2hLPejMSo6sqe/btXuXFeOtwabvCavFxgzN9pOdYtOMc1vTgj0uzp6lxJoclgYq02psMwbAxlMNCDj2EPtDxWCDM/L1XK3D/mTidRXjcGU3tNY9ldDddU+4a4/esoYRo+98HUnCtc6zuqBVx+6Xexde1TlVSsC/cz+nTLCu8b2QreBdqtx3123kYt6o2Q6O2YgdXd1oDahAoQBhtHWCFUG/OvpX8Yg/unAFYGFI2GguoXEx0DjS4XiSWDVdAjtxf/gR3cWWKG9UcXoYqZ7iuwkw/s7bhg11YI1aT/iFF2ArctZELh+Qo2lrtphZTJJDlSJd8rpGKRK/IZdDmzxTAA8CASxsAIljb1aslIlBGNQoMw/+1T7qC7PH7Nr8WddYuN7fXyL28E8e6rZSWHaFrR5Lnh5GSUxQaGXCvLNWYWmnQD8G9su1FS+Nkf955gdkqPVnWuqmXLfaiyjJo8h4ZVvEy/6RtU03OxW5VDH3KaDyfYww/O0Vwt0hxgESJC6VWhYW07D2so1rJm5Hr5mSSt+p1G18CqZZmZkxPLsU6qxjH8moHWVn500k6nATbPlyOh2Qm/u9hCLrNLV60ZDRvaTZAjBdISBMb4NGNPT6k7R0Jruh/CbCSO1jNmNAyFtCPkq7afw6cG2FnX8aPEp7WjZ2QV4qrdwAbBgqxatNotKTddqs2hVag7jyrXawhnXFHjJnx4AkbtDHzDnWd1JA5jXQ+2hCq5KNkO7X89NsjlQYVjxKlTDVe7fPrXPYCP9SR+8SnhHXAXvHKNwDEODGHUmeFnUhpk4ppIO6mRgB5cM0vsvcvmNhJsZ0PCWm8vwHXD9RAgLgDEMSuvs37Xi+nKNwZJPu4CZVaTj0nxyPc325wCOeaHFhhh4V0OnRQWIIwfiKAdxMDX7vRoAR4I8oWzq9gDCGucR8RNE0KdJxADjX7cH1dmIfQ+6xR3MrTcHF+/aBdDfy4YG5hmpG0kSIzyXVNlJ96zFS8qw4VjWXasCNGvd8NYSMGrk6IBMHIULXjX+ZeHsYX3THuLJ9xd+cdY2kHoB5I4h4z8YMJqcoamt3sQ6QrhxAKF9EH8/2OKpNZ6+SAaU05lVfmyh8usGPNqxmPg47oVuH0mC4l1zwKiJYPEkdk9mtT6E1nGN+L/Lf1eOlJpfizfVUuv5i/XSEpc1/sD39iQjbYoXEX/wr4h4xV9/TinX+UUo17dMsr4OknXancjH/oVJ1rpZZ5/puJMPMsWzJ1mbvIVbXZpk9SerQbL6yySrB0A9JKsKkjXgSNYASNYA9Pf90MxMYZo1oRNQOyh3KuRsMvN2hZnHIIQDOKkGlIyhDq06SSUGQL36UaYfFKUfRSfSAUwt7h7Yxh3YsQphUdKPTgvaAviiq/agv302PLQ3AcsgpC3thE3ESR0ilo6il1Ytul7fMqUa7KFUA9RRw2VfKdVwD6XKJ96QnmGrtgJKNbhsSjW4JKUajErrUqJUJqdUgO2wUiov8kCiiEd/aHqo1BcWolIf/pc8wN3h23t+YwK95zeerPz8dm/m0qjj38tTLFOoBg0o/q8w7ujX0/x6OUR1CI/xHwSM86rycGEj9xtrTR2ocVT4oUgtcLbYIwEcxbbYBwLeAETZA0Enfh01wdAaZME+ZeAUWbMHRZzdjZQRTIMbQRMqf894nbQ//jfpAIXmLfbNdD476gvq3t4lhf1qbdavVh1K07pvo+zaTtqnRfoWKrK5k7a0SGuhIus7aVOLNBcqslY2sBaJ5xbBrsFWtTkWQaHywSDNpX6iUuRQ44chH7sXQCVc34G/sOAvuq+ANUhSW7yKilfK2NxWeqKMzS2l6kQYORIELSzQovuGCNNXajh/kW+KYgYf+G6cQYQM4YrzSR2mUs7BD+zKIMP9O/ueIsE8/IiCnTSgcqhM58BGD3cRZU95iHpLDsN4gR/Wwan4O5EPOcv1WNDXNJEdSCZUVvvkoA1o7VotZEkc6mAIvfjnEGlFDvhm/NeW90azt1LFdVeJ/NKmQ4aiZ907UhvN1z1Ihd2+FPvjraTXhaX7XTRRvgPJ5nnwCcIsyUuOtnGhwyEuxkuteIg9jfFNc9YQcVMAdF+8594hLgnFxecwFxWCpVjTYEnIIOf8EmXAVAWRetntQcRqGPhzZzATwE4wJj8qzOQkWxMOkrx9DQe9ChSoSjetJBK+5ofoYEH2EmU/pWWhW0XxnVSqGD5wiZdL6hY22aQATmV7tzeZQ1zMIXZziAvGq2gfGr3UIICCvM47z2odeNJOQNUX8DFcIqXh9qqyMNbQCwfKWwa+i0EeBZy2brVdaeBM5pu5NZdDGqMm8xx34hTDgbPvL9T0wQ56trsZBTrZoAeSkYOAPOwBYMACLD/r/FrRiYBGymiuT0rmI4M7Wv78nfpzsdPmlgHlwVRF8ljJmNTNvntK0qWZPR9hlHQ4v0bZEWn/K4YvEWOpngROSROoe2FDr6Sl4/4CSfodkvR3N4MsMf4Q+27BPbJ8vjnlx+3obEC6+iKZlvMeO8T7NhfNsMM3K5bAzRMX5AJDp8pzDYHHwQI1iMzSqurQl92ua2oIN5deGba601e00rcxx/icVfNJVrj6riMzq6MVr2FpBeftMqAzujf/okYr6amNZJOKIr0IEOls1N2GEhBuuYDsLL5rPvylJz8diuQ48AFfWyCPdchjixOmsXcOoHpG7i84ct8RnZ7WVSoBD6YC+0KLpUulga84McYpGXDgfPNOntMYFLU//d03JPjx3TxOZnHstA2D71sMnqqJPy386cOffrBgA2r+O6DXPEyFiWcBLrUwKKuGyEy6QWhHIjioFulV+U1d28+viTyN8O5pNCOm0uQlVPdmDjdoKq080hVcHuPXLxpTKd1t8qrQJydk3T2iB1chWjmrT7TZjwlOMeBYZvYiYZHR2wUOBL5jD/o7g6kMaibibxD/pk0rDOnxoO+urHAnyuHjCvR9vopKvFJV7xGRaPz4QwFXtw0vadU50QjAzyfn3MSqSW2ioxdmemep0Qtyq/43o2Qunv1JMDNbPoOa5GOXLVc+e/2i8tkNc+SzJ58T+Wz7xJLy2ZVLy2djS8tn61Ysn314JdLNHBmkEG7cm17ZZqv3Q7Nkm63em1Ym27g3Cwpnx7/rhh9pXu9vRTJ7/coks+XSkE2yk2ZSo0pTRP7RHMS50tRMQotJWS2GsPRRCksbvTi+bvmi2utbled0OCq8zRnPcyy7cSjofGFdt7KNb/3OCnDlcc4nxfWO839IcUtIcc1C4IgXleJOa1n4AqP4TmVvY3ULWQJ9HXemavy4R6xrLi3WaYcTXZnODQXXSpTpvq4y3elvWabb5Ckv4lDIyXSmLNOZxWW6kiTXhauT6WJ52APOWUJx6eRb8V5gS2XMd3K0KeToQrCb0/PSgh1H9BwdaTNefsQuLOh9JOgR9EzO56u2fCWCnqD8m7T/50LYe+u3R9hbO1vYe/0KhL0SCsieXVTie+tI0Zv5VnpbcnFXKgN+JIhWNICyENiDHJFOEELg2n8RIfD1KxACy4RrfkkQd4KLiIFvXa4YGM8SA2MnBsYLi4FXQgy8EmLglRADr/zWxcAm4y5mm+L/HIxEP1I2RCz5oRYxBbJ5Ygq4+o9a9bWlN9wmr7rVM4Xdq154vbVovcI0uh4y4omQhlx5FeTda8nDFyK/XgjpbJPXasN6WL708R2K9EXkbSlSmgkpD+MNNaQcTRTJKtrbuLOjhQoq/rABdcVdbjCp4ftMdhbuwNmX+uCGbOQk2C0NZL8uH/Jsgja129XJ1mOIQKrkAsES+ENnx22HGWO9+Ffghpx62Yesy1ySNd+aNX98gQa8vIETZnYDD5tSA1Vt4NvtHhv+K3aP7VnAj3z7FvCJb3UBn1hkAX+lG/Wimm8pepG7UB5+HsrD0pB50eAdiZBa9TJ3wRitRvHQiAuBy1+MuAhFxAVEWoBd0Yjz1E6DubEP8H6J2Ad0gy/brdP1A/fTRvPmUlUUOvt6ZKlsVxgKwplUO9Ml6l4QVd5owAbqkzznOi4FETaB8WF5Mr2ra+YEdUElfrtB9jCEGqjEXzNpCwlZu9JvSK2V5tFIa3CHqmRXTPT5nvEQZDOpzJC4OAPLijth06rTT1aTipqZIxJypA4rSS2tTGTmBiSzAept3qXfDNKHXiIXV882L6dZka43emY5JTUIJ6Fq4cMnf2BYUo3fMCKg0fSl1Tx9aWXPvh0ooT5mONnzamZOtRsL37SuSNrY5PUrfWuM6Q7nEyfsYNQ4n3O6PGY3D1S9ETdwxD6fUJt0lwOzEv+hSZjY2eko2v0uOnYlqarnWI2uhrL2aCH+ZRvqMKBCmU9ITPqgRCDfRXXREgV3FVJdGjmoRmoc2pf0LT5dQdk9mg09ArJUpbXyajXzdmPXbpyoK4kL7Y2PiKY7hQuULoK+ryg6vmQXgboAJtZc0zVFhKrzGswBCjVQb+E06hanmwu4ABFAGWUViaKTaL51s0mVa5CGypLBM8nk6yInLh1KCGqwFs5Y5Z8qszbjO0qb8evPfjOum7UXTL4X6PLzrDfjos32bMZFS/6r3ozJ7M244p3otuEfmtI2nNe4rbQNm0sXLG3DpoNnUy3fVrANm7O2Idcp6m7D3NQwQrtF9nikXuE29J3Tp4AfvCRdA+bsxpZZcHeZfCvSu0x300Kwx4aas5sW3Er9i+B/b788AoAe7w81CNhZW3LFPGOVMD8J3fNDBlcbCOIjNP+n6JqdnTZkjbPTthM/YEuB87JTiIukunmjunnnl2SKeGe85JgVoSjeNjemmguJBq+7x2gCx3B5TReNTNUT2ZPCa3nZGcu7Z3AXj5nFY7MltqMWzIuUwbXV4iUys1+GvPScEn/BWXUwLSf1PmkRgaeZ1mgevpO7yO+RHWu8pKowLNRjcLt3bONp65bDo3qYse3ji6blKWyK22mN4/Q7pgjkdMa4SE6/Ywq1pafyK5qayD6EgIuaVbyjVuXOtTFiPnqCGp7z8a8o41caBTRLgQicPcuDezne4GZ2H1vhvMHn0ZIR1fXLWasOjXfMDhbkbNsZ8gnUwXd+jWCL33clmdD400EeimJZno1+7j35i9YGh8hOJ4x6lrv8M3BTdvo+EsAmvlAQLgLVy7lbkC79ojdz8Fld18ls/H4/iTYw1WADX2qQahpJADEq0s4b+rqOL3xd19f57Ym+ruFLDRJWDa9rebDz2gY/xmt52Q7dQDX2ZI0+B/AADmUHBwzGfhoaENxjCADVqwpVlOHQ8js1IzLXFCFoq9DByaF7FQOksucafQeiL1pTm+oJiyVYZTXfPWN2PWH0QEAyy9xTXuMLWDmUQdVnhCp6u9NgFMnQx+wTDMDwaYPLrhk5seSVGcWR74+puDgKt1WaJ+xoBSoFIPFCQLUtlZ+2yASPjyBPa+9F0D6F0IDSmdEkYfxyiH1sBBpQg3fosmUIH/fC6jPQAbzC8w02UOnVqpWOK04fSUwcJUeTerxbxVq+CCnTFkVEMu1nKYJsAAc9nyCEJ0qprEru6GcQL90e6AkSpiHISogZFIgJPkAjoMXfCLoIgaQFlMYSkyOE10UG24MMKjixLJHBFshQ7Jcw+n+M9afswcWHFZaHpUUDKMzdCEW+ld0RbECWI0Hf+C/h+xKwhwXGXVHqM/+4w/nHLZSuGHcl+gzGbQ4Vg7GHSuPWr5sYE2kTFekaLR1hzKEpc9OqFNPCjqCaKH5D/GWLeLXFwHHcuXEbjnlnK2iGOlIy4YEbaRBF+VjHve6sxqekx3EZ/kFmXd+0czSCd1Ce4eBzs+cx1bMC3+aZhLKb5s7E784ko8KyOg6C2H9bdzWyKeafSKoPp94EjSk4MS+fmBe9J1S11HSZIblklCF52uQMSZcH+XuhG+/+jvIgT5PwXTK8Jvmu5UGeNsqDVBfkQarUX89hQjZ6f29mMyHZxa/Z+G+UDRHwFPcm3yE2pLRC87EhT5t52JBpx4Y89d2y0/zyPpOfS+w0FJnEOW4O2VJw47mneM/Qw3zo3/CRKLM89HDW0P2eoYfdoRenneoc3TkdjHtvCLbzxOA/fTs+nf+bAiPitH1BdBpkcc6qLEh/ykCXkVeWOqj9EknJgW7LMJdzusKx3XMzXMc57Oob8PXhZnkV5Km89eTNiKo9ew67d9oiBHOgkXZpuxyW9bfhHP1tOK/+liGnAtXfhqq/DZ3+1tdcKz6NAMr628DpbwMmwJqrvw2W1t+G0N92Q5z6eZANblja/yGwKtVNgepofTSrS16KaftLNRM6o8GgbPKDM6NrIbTDMYOpxncHK2hl5n6UG99ZwsFu74ZToUofbISwpk15D41LAKMFXwOxZ898wp/MI81yccqMo2n2MW6H3n7lIS8qE/24+fLRsI8YZEF8M9P4MCqR5wLvhdJTiO7Bn2b+3bKuMe6VRu5Kws6+rHp9CydzwGwh8liAGmu09BDlXSQoNWeckM1QjTStl5ZNlizqd6J2wJVnsvtQRuV4ZQbwlAKTLdWoZ9/0EHOWAWEq2b1vP1yTYe7LpuXbPZNMg+cjcq0uHHm0oKP3Z1o4L7pD863ihhPhgNDuXs2VxsoErFPafwqJWLKXI1KVAzijuZ/977ajZw4iPDlFF2EoS1/1czwI9LxF/iCMHYcPVZrSVYgwbpybBipcYFIg5hyoOxw2eUYtLeWbdVGZN3kufG6seMFJAxKp/GECCQVmecrMJ0B4Mhx6OBexdCsKYtWXBwhduXzKgkVVYFGVeKRYpIHIHCaBWZzm9WVl/z7kv2ZcPpBuPJbK265vufxwNXKW5WK1WcXc+3ZYoJObkltSnZkjc9lluqeJgWFUrKB7lFTQbxlg2MHB9t7NFTHqdH+pQeZbU/MdOe6m+vPvQppfwtD0u+TPuXN216R8XnSfDz0U8vMJfLrcYdGLZ8XCMbq6P/N78Nn/NKIPFTF0voSDGfK/jLflZX85beJ/FLE0cE+wtlnzjuzoH9jOrBfZ9OHZZbO/hZIicuH2EAYda0mboyB7Ke7t1yDRu8bVWrOLAiiOl0Br+iX7R43Fl72EV6pJ0OHwEqQPs9mnRSxSKwOzQ4V4qR2/R7MnZZ/5O0++c+QIOfLYOaheUBaNiQSFNGTHHyJJtMz3gyZrHdanr3GSWmzvbH18TUr7bbThbnJREiEE5Ry8YoQDU/NA65rcYhN8UzdTrQnGft+oJpM4ebntnwpBzI8aalWY2mvVw66VVePmQLpq/Ki5BXuunk3BhLmO0AQb5dd7ZZMm+vOWBEGuLD27oY05aXk1mtTB2d4w0iUjcowBKPEH/BH3o9hiBr7+27vhETVyqexukyU75Wt9Qo6YfYRQwAhl7UBjHVq8t+49BuqPe/HPGdqToI+UQRneokTSuuBVdpO6F/vx3mieFjS/hr/Bv3PceyMrFsGmkBBG3m+ceATv70mGDxyg37pjhEhyXrhTiY9gY/binQzL+UIGo9ShlYt1h2lKwzRumKY8zB5AtHR/d9z18WINaChmaaLtYJ1oCs3S7HyNpsXpMaNJK4MKu9VqNSNtfe6ck0AaBtVt13isqTmPcXcheqBn63fpNzzOw5Ub3N/BrK+fAb3kXM8YQO76UYT2DzT0nHoLBC42ZL/+ZDSefs47ahukZUUGUE5Sb26IHvgpZRp3dNCpYkm70E9ZLUmKyV3dl33Z2wUhLoTVM9ROu/IAmH007EHFiEHqpE+GNwYdLx0OfdknvYm+rUFT/hcETfnnN/kvcH8C9yvAPy8QuqIFA8uX8D1D5D8cUQDVBW9nakels0PZVCJfIIv0FPhSXkDIgRbwoyJmNMkWiABNhKRAqPOsZC+dzHxWjBlsO9kHkXI0jbI/gi0drby/gvSb8vkFnGkZBDwB9g2jbYZZrSVxMhyf5vfnaJPZHjTU/BLEQjsX4Zgx4pF0SHfQQr26DqE1hP5pfiTP4q75+yw793OylO1KvW7r+GfqNjDG1EP+8vk8qNcrtLf6JCx4ssr1rRqWYX/2NU84sVqkSW59+EjEf8dT5J5xr7yJDr5exEv4G2bxvuzrCETBHK7ZVHavjTPcJ8rxm8jrr8sqVPRnph8vwccW82KYv6OOHoFh9ieCEZXe6oYIg1DBFTnu3fEkD2WslVFSQiOCM8P7/jFs3xK0sgtoQ8FWf6bhVu+11EF0fx/S0HoR/Ai6pJFNCc3CpkZ7TIi8CfsOI2RAwiZf6IYiK9xkliYOBfxqk6Yl2MHM8sEJdmBLBprLGz6r+7bSZpyQKl+23c5W07yaBsZusCmEyY5E3IXjA3Y3uNs+PYQGqDmXeeySP+v3wgCJrM86vXDtInZQQrE89GFQRuwAiB10EVvJQPdqPEN2pgBaAGQuXazJdo687SAq4aQFqyUc0q5JMi64JF/B4H50UlAasU6A8suv9snPklvKYsSdX4hU6CEAXBQGx4FeRtrAqYJEU64RyDiLN9EFPU+6xi6dKTj0+l4Nd46LdznTkTHGZu//+J8/afbk06mUplNx06n0Tsc1NckcI4+2ByMK+HWMbHC8cQiZLR9l9rlVydABBkVb3qmWtwymfXD8Z2VYGNplb+LPxqEU7QoLNXXfbUgW2yiQE53v1RsPTaszSSHSAUxmZJWWQecX3oGslr/xha9dvZIZl5vitENMOzdeEBggrNRgshpjrDw6/ox5B8d5qzCdCoPEPpveYFAxkKweB1y9+EeSgQ1+7SZNPi/zXHNHFt6dVSezT4qYBfuJZmnSYT5phBFuinRE0XzGK2YdlsYRunGE848jzGddcbMO97a88amk+Wg6dCRdlQzeQvE65MQFDEP3H36WMw4BzsFk1W08mUpYv1fz2C+3ydJmUSHstCaWbfeNT2EKC2wgwePB8anXY6qDSd8j6ar7klUHNWaR2ufNpT6va1VJ6S7SqgNZW5GI8dWMIEkaP+hofI1hHXHPOYSPWnuVO5FiHG3YvTXgSvyXwdV5Zfz8af9Vvqf8wircXtaSoat8koPLedooe5E2R5lVMc5ouS+HR1JnagCLhNxCSCDQ4zLhhHVp3i2CCK2E4xACsclrcxJw5BzN896PdjIQlxMiQ/6aldPkkJpwy7GVTe1sRSocMxdVh3nonXjdoVeEZqsPkWA344UIUHF/ZiDMy9B/UxqUfR1FEVsEG8ae1Gj/hKWRPg1k6jzXcEXJ6VZ0hs9ifhqWO0GOcV4Z455zq6dDThcYqo6T+ssGzdzrEQdTK0skXmkEXh71tzwCT0dA1T70n3mvIGQhB1VLMSw/Uo3SchvWZjW9NlcGbS3FMZJRzNlGkVtvkpOoCYR8HW246vR78HLfD0FBsCIh7fK51E4N0thR5GuXWTVUFJbTs+0tKAi1KDR02i3NT5YLpkbwoBaxqpr7V7Ic2shX065gy9ShlWlBWTGF+lSvNuIXadL1qkjSamR71OCzFX0/7/uZaLlIjmA7fRXZjjbwufz2Ws9jIjF7nXFfZG/rF9mOUfTzvq2oCj8pLAg2eVfqvdBmjJ4ZNDHxK2GzscVu1tPbbLFru4YhFuGaQs1ktbGTwlJwN5Ok640vorsyi5yf0Ur4NdzuDPsWOjfvJJ6xcshP4bYfrQFzK2UcosePjO2VGlN6o7fWZfRE6XaQZ1EYS8MNkA/11/q0wljoGB2zwoIY4F7KZkMdhNHGfUTFmdFFSMEsp1lgfN5IjSU12hhk9M7qGSMcWDg653ShoV/doCj67lD9DYzqbK75xzhA6bStT8oJg/spbIiEJgdDAl1aKAxxwhlvW6wGiQyiYx8x/qum7IEAq3U8dAkj44+ZhL4BRwP9PALtpr/VOxJkzXgMWsWtHliM3zxjrvF4K4GrCh8qxLzKCfd5PFAN/jHXxHE2wZPZbPT+bZ58wmywt13FMJ8imd/uXAf44zb8+eF4s7sJOBloP2g/k435FBL9+PA12mLP8fsG/5wPTwc/O0VbojGk2bTxq9JQHWg4rPO+fqIKhnXO58wqWSx/1Sxi/KdwHfJ23FBdxRjgT0UbPO8qD9v5c/oVmOTBz4RtXUL3lS02b/uir0O+4Pq4CK5C8KpCCAQKgW0KgQAQuPIq9Xcas9c6CPDHlfhzdQGBad60bLGXfIXAIwqBc3DqP+EgcMKHr0aF0UB19iOaSX5Mh3bSDfGEG9qJeab/wKzpv7M55nlbPChN7m2Wp9/Uts646edtz7jpn3J9zGD6m2dN/xWl6Y8V099cnv4Y/mwspn/W1+mfcdN/2nL6JzD9S1anf0kOorWc/trS9LdPqEKao5t2o0QVjO6SnQuBd8+CwC/qquOe5D/1IECftnXMQSBv+6iDwBEHgaPQm22fEEYwROS8Xkhcn0Ni0Ole5VvXi4aQ4B3/DxSQOO4gccxB4ksKiUu2gwlccLC4YGFbVuG52YMKt6k12AdD3VDHQpaXT/XPgceIlm+v0fEiAzJWUD/X6if++IgogS+B/prRX1yU1JW4mD8TPE1dueOBeya7N/X4Nd+T8un9sQPfCSSACONXQDHKPe3FLy0SDQTxBhD5TV5zq/dF9epKQ/JXIdl3kDl/o/e+QB2GfLgo8lmO/ujpUdcTkYGDUThKn5zEEv0+ttJ+0Q/6/WfrTohyvxdcv5fsUv0eXmm/F1y/X3b9niv3e871e2HJfr9hV9jvOdfvH7t+T5T7PeH6Pbdkv19cSb/S1lnYwTypfduz6PNJ20H2H8yx3dQ+23BSOll1d0cY7Vv04yIqnLKg6xc8YdMyI1vhih5tnklbMGnRHNrpRrAdrewBaXOTVDpZ6bRXyecZ+WzL57R8DsnnMflM5fNs2BHeThqXzxegnNRbC082+XwJysnnZWhHPl+KcsIVjKAd+Q0HPhhgjqId+XyZfAq+tJ8vn7IX2+vlU/C2/UL5lN3Y/j75lI3XfjlSGsnnK+RT4N++Ev3K5+XoVz5fhHry+Ur0I59b0K+Uvwr9yOfV6Fc+x3ADJJ8b0I58vlg+n5b+E7JMceETaOH3L2fYMdjCxzjY/KNVZbCOVjt46TEyAM40qw+RvWIGXNRFAX2LqV9mIHFkJyqd+It047wo/62Di8j7fdwg18bsYZvSznXaIvfc2FvlUGVO9SQEE17TPOa8BUY0CNjvXzRpZYN/3rSvK6x+ghtVZhd+c+yOjsijyXW3Oec8WP7k93fwmr0ukcpnzS0tJhx0v94kXV2XtIT/wIXMGFRJwgFv8L0Dt/BmVp+MTYAtL/1CGinN3V48Ej7t3e83cQXe6QDFdLUT/xjyBhAvobMJrvDjV/mX4DFXFc4Cnx43ps2e/NRvf7S6RYAEY5Wt3j9BX0JoxhvbtEf9J1s4T160zOGC9xUcwS8ZSXgOX17yB+VigH4r82dIIfVmdxaL5GUfX+1YJC/72GpHIT1lkS7XYF5s8lygzqVnkbKk9kp7VNiV8+7ZBXwKH8wyYG8qxIwZMHgn+F3Ym8pV/u0ORej66QhVRZsQ+ruqNAHUIpNTWXoCvzVcTOAzw70TWOUmQJ6m8gOe+9e+tvv1GqDaNxwuXhRc1DTSgpL+XalHK4JMU+/6k2md3Pw1rvbF7/8IMc/AK9TfL+jn/Zfj0qBTVdd3Uf1Tzez1c6qhPMQQk9UmWK30TiY7z7O1c56h62BW1x67vOZnk2tgP/C0HW1f4/x3Zxygz2I9dCj/82//dvbRV/lnHEayBLizkKsne1eoa6ird0k4jNsSHBnnvIIlYXvCyQyVFg4VyJuFcxfu3bMW7lOrHW/mZU/0YF5fMlTCvKNu5EcqinkPCuYdc8+OVxTzjrqxP6ljv4R0nGfc2M+E8IzGsXd21tiF7R0ujf2MG/uZZYz9D4eLsX92uHfswyWkOxfyqPPdUecvhF5lfPxuxLQH/NH2tQ7Tzoc694uA/7VlTLsQKqaxhKzWacvVOoPVmrG6WjMW7uwgVmfKqyVc71NYf2HVz7m1P+Ozhvy+ihcB5ysd+sW7gwXXum4B0fb4u0orSE+d9z6fwhGs2N/1/PISRjx9Z7qn7291T98Zd/oanLsG5y4e+qnZAUXcKR9runOSPgzIqylfA/3qy9dQv9bkayX5Pjm2N6H2ibz28RXUfmFe+2he+8gKaq/Pa1+yqM17tGVXfn5e+ULouj4fLr/2C/LaZ/PaZ1ZQezivfaziah+tLL92mteezmtfWkHfQ3ntM3ntmRX03c5rn8xrn1hB7VV57fOBq30uWH7tFxUjz2vPrKD25agt3FZrk/eopZUn5IJfD0qsxglwIjQhzerxawv2D7S+EAwsyKxIBhb9P223ek8GRWo9TW4CGcXFivh4pdhxJyryDGlGNnrv0ETngoE4TPWUTWob7D3g/JVFRZfy8h78OSAsqlZ8j6uYoPRhA1E9QYkHXKo0/XWYflpHTM7ZXlSpXEgaXDtxC04OtUHDmh00dPScIaeIFTBNTE38QUo67dBFodH7PGEl3QttiCnf9B3swkNXdCTKrgbh4c4M04BahTihbXANAUEC9aQIXKRFPB/aYtfj2wbbvMqu0xJNLSFEFCu1iR/QySRaTRsJlUwhbk3DZQIM4KurBn202fY0tqGsylvkObx4NStjZqKtHpk8owweVkkAMAZixMXXDDI4Gpms7rSIhORZN8mqQ4UsS/yTfrHET1u37HPYXLbQxZDTgWKIoiJN7JNadgl85umQ3y9ApzQT8pLA0BVaxhPC40CDIrXrXbTN0ZjEJCzQmAQpfkUXf9sOeVO3qN6EUFP/LggsFFf0siVjInDY3AVCJzU1pre7xUA2UMCqiMSbBR/RFM4EzD5hsnsmBW2uSGg9oXsD9zLL2hRODqpDoqXPci3t2wmHup006Ez6wGYwz0YlqW/yhtL+fXqVEaglRIBUMxY3DDbSNOaoIFKT7+y0+7pMR2pA+5nqXD5fx+vj+EV6u5/TWMe5Uz9TUT6MAJ2x8wPUFAANMFAGamTULvBEBCiNGCsOoFAYtPogSmGXONnC8LUA9GSF2TkCAFSqJUjMXHEA7ZsXoO/oAvRSWAAUcPxhBedtaT/AWXHg7C/A2Qdwvjl93mxwPg/g7HPgrDCDchmc/SVwBg6cQQ5OtoNcplD3q9ko03XyPgpfAvUpmYESJoNtMCx7Wozc5cWHKTtmuGFJhYf5BPD6MaQyyX7/t73sr4fkuZS6Ah4GprDlXFDg8hAyKFJ2CNzfV76Au7itHljfv/qCR8bJA1UquPSyfKHiFs7QK0RuXL6EcXUhH16di4fPK8TDRaQMDyKAGy048i8Nv9TzruFgLwy7sQ6Vxnq0LD3kkoWM9YyM9Zgb61ISxWZKQ5vnCEOLCBSzh/mL1xXDfPQ6N8zh0jDLjLQTJjjMC8HyWekxCj5jc+SetWVtgXXaAjvvMJ/6VL7eXnb+U54b81o3UK652/vn3Od51+A5NsgNI0R4Qmkw3KTt7VfR1F/I7VscBeaP2/HnzaS/TsfKLcv2ZJIP6iRnoCM86iZ51OLaZIz3Yz2TFPHgstIkj7oxHc0n6bD5s3/zyf9U0ckFmPZlpXkdd/M5mZ9tro0T3XnJKfKJIJ+YCCOPBTozOVKeCIqpya/HSAhPBcXkTrnJnXSTg54M6jRM7rzRyZ03uBS5mjeGPZM77ycjpcmhPAZ23sy7gp8dKRDt7Ihby5ESol0ybh9Yh3BGEe28INq0VURjGXW9tMz7jhPXDfOkwX3FVbxS7RnmJT8ZLQ3zpBvmSTNXwH7XLAH790YK6ey3Rnqls9GSgD2DJo+bTrIpqUM3EV8NMD9kUgL9uEmFPB8opOuwV/QO5hW9KysRvSsqegffIdFbqNsjZjSSh3rguIU8Z2Yrec4aXcYzbhkfYm7X7CSW8XhVl/F4FddIW+hB0F3G6hb7QTAuz+OFMJs/GqjkfSzQWHTHye3rgd3fuylsvhOOKa5gg/hHjdMny7r1bo1ZprfIr9ZnPWuYbw0534A3DGweIMoMAtRUVAzoE/StgnzG8bXgLzQfn4Gt4BQDkWXH7qUbT5j9zUsjmVMVA69idR78LwDKB6ud+H/BqQx+7X+CH8uvYkbGIxd6pJqiN2Eo+hzvHiWVVAUAvH+QrNsHgHfeDIIleKMQGEQ+N26i8iDwe28iEEYJ9ySjDLKAWuvwNQSTtSd91Wi6mreLsEpQN1p5vS5ZHb883bqDDHZ4fYuWuVthn08JyMCqzUa59BFAFIFT3Dqk2ZWKHPirYMshzEbgeFSPv9TaAXPj2QFBJco242qVArehAMIj10AqUYJn3OlqVOQY08vVBKOGrBHksob6GAqD25dnHQ/ARXmFrMGxGxphpKt3goVBHhuP6n3DSBWbvCajfTKITo1CZVrZGTiDj0DdECsoxXSPhA9CwlJQ0wTxeBCkDElSoStEUkHiRNxL1diqJrqsuR40W0C4S0Nm8ZxSlyvKTjUdF5MYhDTzwb26p9frnuuqG6gT8MAQ1GW65pKzu9zq2oVr2+UZwKCQDXN7Up6Z6c5sV3lmhiDQMT6bSQXlSUHymz0frwCdlqYNiE7K9E7KxUvyerpwnr/GBekIXevyv9U78a2iD1YngrZ6pvYBV5zEyWjC1FHtSlXelLHsQyh2Eex2pX0JfoBW+LvS1fxR4yVQbVe6Tn7UYcqcwHUuIXb2qwV5sMEfa79akVoavI7BNpNX0xKmsiO5TkMmvCO97iboQfrkiXypJqv1Sy1Zp1/qOPA+4MLwvvpht+3jF3HMegqcCCJoXkJ6L6nmpdLVvFS7mpdaV/NST16Z622O5Hqb6WD5ta/Ma1/MVYQX/OXXfkVe+1xe++wKar88rz1XNbqM2ouoRpdRexHV6DJqz1KNPq+rGl1G5UI1etbkyk2z/Novy2ufymufXEHt0by2MD2FsPuQccIu71mdznMFjW4udL35kM6voPZIofPM+z5hl1/7pYWuN699dAW1Lys0pnntcyuo/ZJCY5rXnllB7bULa8iXUXsRDfkyai+iIV9G7UU05MuovYiGfBm1F9GQL6O205BTf8AUwE0RCM54HShqbol/wAm+qpxyOstvWGVtLtpCpUcdL5RI1EHlCr2wrNBrOoVe4PRPAV+r/imYpdDLr8JV4f3YPGq9SPUgDF6CsTxSSXN9ajiR1iGqaN43jZQPXZk82+uyHSdu3EIAAw1MIUQ83sLI8vChDoVF9vczTMHOlmVSlFCkCMYPEya/rRmU8Bokt0mtVZjU4y2qpFTulskyHVMiRC1S5XNEzi4j41YHXFoMTgEzCntX13JDfl5CzIobR2UpIeLZG1stNEeNYi7+Ufno8qNXNPuCDAOA9ASQXgf8iA6BENskoASz4PTOOUwF1nrY0U4rLKmKVLH7Inc5kWsh+xTkggbk6oXxcBAP3Q4InCK+gDl01WHi1JWpcBEKdKj3t4zoWziHJv0rhroh1MNeqHNW6DB+kVODVfJJZZqPgQjpAB8o4CnjCuCDuYBvMlqQAD5UwFP3JqU7bNnkoDezQZ+Po8Dkww5gy9FSO4A3kRulqZo0NHO48q93UzaXsymbuimbPZuyudimbD7Hm7LZ3ZQuPVfzW9mUzVmbsrmMTdl0m7K59KbUndSL1VGhKmg5JZk8YyqFKn255bBXF6psWiTogXjHLF2idRrEe/Qe8Par/DvdNaDX6dUnXqEP440JLaak258o0PROXunjLn9A/nBMH6gWb49W8TrOmp00TjbucuM5WUUs8yDK3vui7H2vyP74wyb7pctiz4uyx74PD/6k++BzLPH57oOvvhAPzhcPEh+amU/T6p6aez/7UArtlz2F7x/hd++/BskaNbakWYK/UWoUBpSnAjVLoPVjySjMd+pL36kvfZj987MZj2WCKfEHDFSQ9AVqSTu45GplT0gjffTFyU4HnXYt+/vPQAfcjrN/1C8DqmNvr1IFe3so+yQ/h7NfgTVM+7ps+hq8X5td2orfr6YTBLKL/FibEXYTnFRIHlflxeNsJV1AJR08gdU7pqykM1DSNedo2wI6DmPnlTRlGv+rqavWmE9Jh/IJb1TmKum8eZR03jxKOnQdzOradJV04SZvjDo6tTiHkXePbu64VQw4ZudiQhIrFiQDxAC7DAw41oMBAuvNhPXGTtpYCtbNeWEdrQTWkcK6+Z2D9dVdWB+ZA+ujDsZHrML41wDbVdeYJwDzisI+GSLMlwPrI72wzrZPqN1qmF3bSZtLgTuaF9z1lYDbmX5F3zlw7+6C+5KZDe5pB268ybX9QOceT5UnQJaG4abiJdcVev7mshbgkpmF7DelVL3d8L0P+Nu6gL8wB/AXjQKeb9ZeY2aA39ND15hPAcFffZW/TAS/0ANfGmFv8n7RaojB2xXWP/y9D+u3dGF9bg6szztYnzPzUPI/P+t1Sflf6o/lnuTnysDXgItt5wt11rn7nTHqp3SGV2pt6seZaue1qnR2jkmFhtbdEeBGQf4M0TEJSlm0hzEDT8Y//Ve/+b7PPflHv/gPHvHEz2qcVHfIZt4ho4kzuBUrbCPpKZLY+NdNYT+WVCY1CNYpGCckDZ7Ywj/iJBGJQB0GdXL2BFo8QY9ldoK/T6h3ib/JOx2kcmA/hlsD9z41wZROR44UKGCl1GNGuNeIadG8XQhZIsR4R97RjOvoFDo6ZTrzd7PVO22KDraXO6D77wnTffyIcY/JbxnnqmS0tztBnHlr6JMXfYXOznnQmPilVK/P7f0xvSWYp/ON3kdNsQjHTMkmSKPhPGE0AtQpw5sSfH3EKDRPaGBmEfpo1GL0GSJcSacmbSjs0iYtXAw4ca2tW3sXBRdD46Huvk2rtGkJkmpu06JBiKqa/q+pyd57mjHajFmiGQRFQzi/QOOTENBOVqggALnV+N7dFz37II9TC+TWLSForSEKAfnybgCeFo59tcKxr1Z27KvhHGTiUOfYd8KoixJcleraaDtw6bwQ8wzxeey1GrrgSsHBKpixy3Bbxkcb+eGv5Yf3PPlwYVYvbYNlc1UDulVh2gwFRhVu0VUYs3dxxqjXVRVe5s2t3npFmArPAN50URKvbvRWKbogWSBNikSsaTc1PI3GCws2eVEqZ+1MOoILydFRvIjxeA2jxONhhYHgGYu1iUhCiNszihvJEaxkoMmEEXGrwjjwvsuBkofbQvqPNHIBQOhHE2huExO/HDg5a/6NcXp3NPQqcTY0GmVQ7KIBYwkiEX4SJE0FSUCQBIxu0wXJaxEPgiBRx80mUoFkVwLMYx0CPJ7xmcOaYrYbSoNvtE+pvZaBIbTP6iZvvfTJKElj9uqUzV+ZRrs0GlnWnFBwTDDhClYEF58YUAWKPmfPn0Rb7NVuDPCnPWfl2Ry8qSnetHrh5hFEhJQiTW0ppBlaEGmuL5Bmu4YgWNvRdJPyp8kWZL5DQLsqlSIoqxEdjapTggXg+e0Y/zwrPGv8jbw1GcYPuiFrRJB8zFw3RDlYBPvk+H6OcM8rtiOwqAu+dQq+3vUHGgU6GaCV0MDl4VQAnGJ1RJeoYhhXuwXWRHygJr/TJemnA0dh5pB5lWIdbfs5R9sedESNxO1Bo8Tt2DKI20OLELefKHq+cw5pe8SRNqG+FZeW4oOOtB3DBXLmYhwWBE4rkqiRyD1k0uq+Hdr8B43WS5VvrWrk6qkM5Kq6B8moNa6yWnsaGFTMoVfptpxipdtpHbst2f6mFssGxC6XPmH+vkw2VfTl9/QVLLuvwJHAD5IE0pRUWq2OImbfaNt1C7VxQUW1JOM6Ch/xmhb61m+AX0WTkyij5vgj0Lr4avUJl3X6oQX4IgIbJDUlxzWKfIUzKTTDaWOUlBPs4PWF3YumFhkEhgxqahHEXKFhsq8h3fOcIqT4jpAwcZjn4nBqXpGcIVA3a4A0frn8yufhzZnHJV4G5PPwNOO2x4l4jsEoeIsuuHLGr1v+EXfTqtxWqZ38Blb4YYVJgP2rIUt5KtBcRYMr8yhS8wzcI8BTwJlCmDRUouAng1vskaCYT4v+zoOqXdPZxbfobLJ1CiTSLI8HmIZl36nxcJtoXzON8m0MDS9Pq03euvzdmL5L9N06vNuYv7ta323Wdxvx7tr83W59t13fXat2kOVje7EB0NgJDtr4M6SFFxyRx5iHY/JA/qzXwgsO0cs2s/BmRunQwguNWR5unygFcaALg5S/Yat3A+yqcssc31lC8WA85Q7GX81lF08PQh6IinpHFvGXP+1M4o1eLNFIyZ2GH++y+icKVn8qxyk1CUo9dxY+4c7CU3oW6knodU9C3aDSJYKQkePXw9BoZYfGekRVyO0ju/uOVoUG5MVpVOEZdB2SPvDbq3kaXZe8Gidf1e0GxJvGjuS2zDuY23S47KYrbj8+oQddELmjurJnND/19IcpHYEVzbiQH31aF+vujj0mvrPOtyTYXkQ7gNQNSK2Tbwm/bczFx3tUeryzS/rGuDXH7AMFjXtQtvtW7wCv1fg69SikSvUH9O5GCh0Ik6CQUV1YhU3eF23e0XEnpwLJKEJ6C3RlSFAdii3c30MiFJuiw5CIsGNB6XuRzh5bRmeP9XTmglVs8r5hF5PC53aXS+FH1B+o1EnkEN7LsXYRbVRljiaqRTrrLV8b1drlQut/Z7RR3K1dddT0HHXUEaeGmnaqofc5ddS78Pln0wa24IYU5C+mDb06/r1eLR3pqqPmxObAKTbdowt0hC5fiie69O9E6XGJLB4rPf5g9/Gd3af73UNHyrANQuHQiQg5Fn7vr+6DQXd1b+9d3Pe/yn+LLu7tJX06tk/ZfJ653h7YWtjP37e1135+jWMTctVjl66cMvlai0jQu9ZHyBzZ8r4jezhmn/J1bc753/tr80W/uzY3zd54t+nS3PQcb7uzvUvhNsel/7E5ts/ZHLt1BbZ/mzfH9on59obp2Rumh0fBoba54yIn7Wh7ihrvBjb818uJGQ+4C0iizeOX887gSBlBzLwIYpKe26/tmv0J4/gBPUz1/jd/eGXxMOk+XF88jLsPh4qHXvdhTm45DSIjkorKYM7a+CHGoIWRZX6cP2WLQ/5C6fGXuo8vlR4/3X18wi8REL94fK70+Kn8cXY81LxFL/Oiuqxi/E5fnt9nTOjyixiER8TNScBQk4wGaTWuo4E2x1esoycK81r7cOadajNcI4WVxEfURgZr/GVZhV3qhYAgkdYgcymjefP1ZyyzaJg8k+l3bVjNTd7ard6abyGs5ppvQ1hNHdTiYTU3LRRWc5O3RsNqypf5wmr+aWgqwJjtAl8AFQfM1fqxGQfeVg8fZauZq+l6vLmTWloUYT/QF4STCcrJBOjB45LMMKdOFtyVMsyVrNCelmF6Hob99mXy+KWIOpSEe1UmQ/owuAzHv44+EzWjofwIxJ2/fzpZcEm0xz3FRcrc5gM0X3XNx6Xmq0s0z3REvKEr9VLMV8Ptz+rNoi/Vz2iH0puGgkh8wRr0FrjeYs0zx240J08S5B2UR0LAMbS2bJn4xYiTrJTKQ4L6QPdfKTMq9CxVF5gOg1bnFlkM0B5ZG7tX1TdyPmyx65DOiW7+OnQkDgkLy0NwRCYe46sO/H1iVYQNJcYFqI8nEBljIg3i72/bPE40x9Cu6gw0roCmdLIMdwnKEecKAMZ6HHLOM/oOuRer0Jswu+yHNC+rap3csQi0lkHG2xHwXCjWei/6D6Ynw50X/yEYB4OUPV527vetxrRudnRxcuclHoEuILMff9OqItFLi5Djzh9INm4pT2VtwOq+o74GnaxPXGNMh248aGM06dzcgb3Pdgf2wO8ta2D3+d+GgV1rNB/nmC6lXqm7ANOZdVi8vuP0OIngr3wdCDzmpr/eVaYyxzKfXjNlQmxm9My7zDN6gvzIoeQObG9Hf57qDvnrVtoWsoMu1Nax0NTgElkTHi6DD5yg/N5R5KVjUlUj35ndDSjWQeY4wceJSQT2lvfV60fVbVaXi9m5we8yD0Xi39li9sdsM8J6y8kO/8X4Gpy267A8WYCMcCyOD3t3yh4n5Ge2uW0yaWoCO1xmm8VQVGVxFjMuZLx3lGXx6bIjaMJBF4GFXin721yePc4lVyY/caPL4bFZU0XiQJIWgyzqZMipmEV7RhHWo4NtxJjrHnxeaxO0pMDQEsuOjPP0BHtap9oW9aUzByFvYlJqgbHIXO7I/r2jzD06kVYmsO9l0jtcylcdpnr5yfnX0fwieEb8zszkPmZE5XmAQ8/yKZ/UEcoDKVPzQtpEbyEcqmfoA8n9YtE3c4HDCpoarb3Ontf2dBbiIEcUEFRxz2iwYLpty0mPtnk4RhEZ3xGNot5Uw2MTIUA7LG+bcHrFhblL+duSY+axPJe09D/Qx52SGOBnPAb+TUSP+GwQrfIcguI449sXRfcbY7unRHGmM2IwjcLfTkTRXPTY7WvxZ50M915E3aWIJGfqhEtdy7DwQ4mdoIkz1U3N4luNZRxvIC/KiULJZb4DXOb9c1OGunyh1TxfaPQs8oVGmi807mR39uQLjZAvtMF8oX/0bcoXSrk057vyJDouX+hWkZd8GAJUlXHs5gs92l0ZZXKhYBduNJ5UhF/LcNDX5wfV2i12o7sN4J3tRsHC/k58vz+iNhm1SVV+j6k3KlyN+/LXXZ5eLzTy6w1luYtM7f/NGMMD87jpqtIfcsY5Htwzu48f7D6eLj0+nD/OPusxgfFt8X83yLB8s4pg8mQ332/0dhVPrnVPrimebHZPXlo8We+evKB4stY9WVM8abonUfGEWRNvMRojlZkBdzDnj8WVMTPbryOHomGXpMSVA6EeWS5d81rlSzzoYqc0OTIpQvQyB6qmhuMhQVEvYSF8Ay5fgHEpn3F8RS9G5QtnbJ5QM/4/jS5H9x4HH4Ji2MjaVtacIMP3Ln/us/faaJsbxFqVzdbpIJjtzw0F89GMBaT5azFVpoFCmeVOwugkQB7njOLd84zstI0CkcuiPr5IEK8g/v0gioF+Uwy6zfAWcx8EOCmqOCk+Y/DDRG/vMjkhjy8n3PFaxt6lRjO5eNtUfoXJsO5OmYtC8+MF2dTbOu60clHVvD1pfr3bzKiKl596sDoJMcyPrl/28/zZOT+cmFKW53ekoTPBmJnZdjApfnxixjt4C3bv+GVHHgaXepNW63cVardo2drraAUUZPfKj6CjuZ8CHjn4hROHxe47PO69HhmHIDtMdpiXC40WHcpYbun5pQ2zf5xpyLE7Pf3N6j5N6SXfn66CK3dz+YQM+FZeYePZ5iMPCwR/+pveHt7VxSQWruS2d+SdeIdTiDL3ftObiO8huQize5+BAi3+Y4Og7LXU4/SZbIRJdGL8WYu5PCqVb5KlV5h4DiZeCSZMFWjVVd8rAYHoPClUvm1zrh2IPZ7IRPUg3/dr0S/023CqH8t21hJ7kqAYfxv+bsWPBmB6XylR9zvaLSm8mWAzkxDc4dJUPEjr+JjI3j596EYYvOmve6cPMWeuualoW9Gj2bNAzTkLZN2T5HC7Re3wTcVItQHb04Cd00BQaiARjl6D55U7uu/wTZrlZfazcWE+3LPzyFjewqVeq1RKmkQZjmv+6q43/uy2lLRwhh6+abRbn78ROXz+5pv5gtzG7EUzzNLY4H+Nm9LK6L9jRuBHDzycVrJ+QTfhSCsw3gk3+GesrGGI2E3MZ5c3dCvy0iCsuAw94n/RTWlVGqq6hqpsSHhDYdlj19YpK8ghnydt24cYfRyusSV8Hxzvvz/xx1925LCsC5Fy+uSfP/H2vxUMPJgGTNUVIh7ROB3UTtiD48wMz8fTUD9v8I/ZcXM/vhy149ukHXkNZz4WuSinpfzW2kdQm4/PG9a8ZFzNi2ZOzbPlmhdMXnNGa57La56dW/NkueaZoiYCBFl9eCqvfZK1x83BNK+MKC2+wKQ8B48VHQQM/gpH0eTUzQF4Ad7y6AHp0dz66IG8s2nTGZeD+mDRjDDsSW2iw/B2UvHOdJUMIe0jWEza78YzzfEcSOPxv/iSdzAdkiNAaGGjtF7DqLYaz4ND6UCCiciOlJ9REidDtz6a9CWx/A2R3kvaXIX2kn75e+DAAcxzFcrGhw5I1wO3oHSflHEhLlYl6D5dIx2a+w/nTxsofCtmmEg9+bsKHTfwI+1HI+PJ/dJDIuNmc/L1flcDP4fydoaSBiraJMorJv3yv1WyU76pJQbwQuoVtYNk6FC6ViaGN9AuYSwNQfxVhwCj5AiGIbMNkrW34G8DlaX7wyjdx1VBMlmpLlCMpLEDaYRa8uPWR7WcTfqlqk1ijDqxt6B3OT7lMy1OLQ9beHWy5nB7GIgJdAD1TQZlXc34y7hytx3E35tSA0pwsN2QhTcH21C7fPMZj7lqQ9ynCZpsu19QwmC/AWeOpN2WNrOlt7Cl22VVi5aaaMm0ESBFRtOJUnya1y5w+JjIHpKS3mtgjAgkiIAEcqR0CQYy+22+/7C0GEkBjK6SvWfqhu4JCC8mJc1yKoH4IYFI0kyGpSDM1u9RQwgZOQa7XeYiH7vTJpB/g381/ow5nE5SIjVntRmiJVDW3IKpQet+MGKK9ZiNjfu6f/g95He4AFke1uYdMGE8kPq38Bz1ZbHlweCt8n3wdaPyw+IJw1IVNERpjI++YxSUz7VpgG/B60Yny3XmqeG5GiJa4ZuvNQyxJGkdRl4uWWX67CYt8H0hUleI5PFn1kRThXDiDJXm4Y2zs++CJAwrv6feFQrvKEznZ+XL9HGyS/gpJV6A6F8iBmbnfuG//UL4NigxvvgupoLxssfclyg7eoRCNbLHnXpX2IaNXDU7rA8biMrqa7I86juzexACrTqZqZ+xfBuFmRh93oVLi1xi9LqmNY+QtlljC2VVPKpAh1DL8MWfzMxOIWcJzN0FbDXIjKBA9BagoWx4Y4vKe8iomlsOastA9bIQHk68S4PfJv7EFhtnj/AnWcWGauYCagGxaBOwiKXeZCiKBj3Nne4Y+/hn/Oi09ebL31vkRKtP9A16jajZiKwfhM2oKd+qtXqkMco8l2fac2ZqW5AfzZvv5csNOPz++V69YuFXm70FX73MvSp6y6odamqofmaRK3zvVb4TfxJ/QMSXeVu60i7YySt7X83tQl3Qo30ipVAE2ugSaN+oUFYlvtf2symGVkdSUw95WKdwL4mijP3buCPVnNSqenjba6gAUo2Chhu2KG+KjNuJjf7jKrtKpZKzHlWKSQ2S6g3Cjl6F/Cq17OpOezBPAw9HEIhKbVgxD+TdtGAaP9BpD+RJm9MqIvfQzUyDumrieDCZVWcZjATsRn7VkeIeObRfCC1IXU/BKhj2Kp7bNkKJWEHndj1pZi/cmRvnT6TdAaSXvaZVc1ki5WX8NvnTquQToSKlKpDr08RR3YzopsiIbjKfG0fftvtkE6+Cr4nslxtkzi2pWUVIuzpkN5Ndfj1noi4G7SauKvfL43f+bgBVnw/nFUwhbbL/pLVPGGqpb/L6yY3wyJFBlSpiYgTViyE+NzHoOhUOzfKQm8WQ67rwgg9NDL6OIUNPvUPTgzGDYiNXvDIDvc8gzHT8WIXgXcwFk9R1iqvkv35w7b3Yizeqd2j3u8JJP302MoTklYetTPgjmSCdc7InhUZ9JUj7cTtThxryhjYzWQL+DRleHTmMX+KWWofG1eeksdDOVlxmZ4tJSwnfrVM+6WXNVAhdHaH0THnKeS5JN8+m26UQ6NuNKEeahoj62eV3q8dRnfvnhmJ6yEqPmQlmRe1heAm1V2fr2nFi0iFgSTX7J28i27mn1UiG1Fi6mqzOtt7RyT7/CU1SW4XiusYtqB0CwbJRwKW6Q8hbn4tqqlPs08yn0FRHqOBrEAseGtsZowLx12pgHRBNshJ/mQ5WaKTVYCQHFMCla0xz7iyZlKEhPMVPiBAqIhbXcFJkLKS3zX6qv70mGVTPJLVynfNNt7Wb7I9O0q2qH9nsRzHVUXnItO3BkPvXN9Rf6evrG6rghw39oaH6kBkaCpj7s4rE7X3VvqFoSMrAUSL7fW9nq97EFhQmpz0iQ2qGRKNZI1iNg6Wv5hmhKiNhZSTCwmxPBgCqy8o/1uY/HpFztrkm/3WN8Zqr8x9bPa85XK401FNpVZTVIERmtb2jbYCvJlifXaJr3GCb6d8n20MccToiPCRvydXdKhl5GOC5+GmufjK0D7qzkfH+W+VQGxkPjrRHkjoPNlS+qeWj8Ula7WbB3TL5TntNZtt92J6Dspq9XQCX5DCULoSv2Oyart4qIxoZ99F0pGemPNBmhZ0X9hEnKJL/VpPGbpkP8wO7dm/GwSDs78jBdEQwTE4WIAVQShAFemU+eTeeZO/pl1fyXM73vtFIEGdEmOp/EAIRJcNyRAj67R5t9TtkE1QbHuVpWkwB6VXhfUBX5UazCcedkZs4vo7MKh9dpEshQ/6zjxmE2cZdEk9/LskzLqJKM74zBXEQ7lXKyDekLWvoZqrjENam3Fecpl6rT1iRpKF5sbY7Z0fYteOcS1rxvyNkMuoFaxz3q20N32C/IntyO062pBrJCUz89BnD3EujHTRVqUErGMVfCuSk8XbD807GJuUnkOqcp1NdJtnEXIUka8asqNUXZdfJZq1qeB0ORkrJYOR44BFW1aDnTQ5aiWjeaanLCA0LKJAN3cufv63U7fV6UZ+3j2PgbdIJflSTfoF8tVkrL2Sdw5KmrpAe+2UeLXj1DmzBMSCHTbXJExRAuta7SrCkkaxtE9zwpBGmAFRciXsTGYiTAbQmZ9eqHXQuqdJupurSBTiDoyrOOvJeONikVKzEtYq09KZZjyL3TGhFbwNgMIqSQviquAmN4RQkS48NUE/qwC8BUV/By/icYr8U6OuIzNsAGGRxhMUICCggHBbCS9YkfQJMoUf6LBPJAcDDAzAtHgvJ7FkoyQsRwryjlvWLgW/SHzOMI9yIh0Ma+HaWbmFx9BvWBNBcnzWqfAzBgz9pVK+SWtkFY4hEz7CfTwolOYOLW4YVhTt4ITb7SRB/Ve3XYHtDne8YCP9rmYealxo1OcllBHrM8/pkB7NmnBXc36w3FutUxR7j7UZsE1xjbXStxcyanHjx3wRIp5HMHoWqgnQkkbCiVbbuqf3W+oGKN6KdbFZBZWPRJZLxmrxnCwcDWnq5YQOxE1yzCewYYysRSkavB2RJgD6LNkZT1gifm3i/mvrjV0ID2z8p4Humf1dwILHqfdGNlPBvgqkMJpxlE8v4awggBV4o245AVtJ9f0Ru+5vVCc2T6vQWPzk9lau2py9uO/wJxICN3shLEt5c0SQ0wY3ubmdXUFy7ZYlOBNKGRlpmlY2pUQHMOGMULk8HUpsX/cfAVqeYkTg3ClBFc7b+hkD9t9LQBR22msoeGdTHcfMJKDrbvHBGxNNkp0CsPpGFe/bRmxg7NnR2akmoXsNwV2ab2RUwKTOeUSO8MNu0Uw6MPDM7eVebxfuymA7L4Ds2wx8GZwAazj5vRLRmiOAAjF+QxXplwc6sEFs7qtf+DfkWpY1HGSLHQqbIbqIHUAAGpAI+EbcSEGmyn5+SAVeyP/X02Qie7eGjT7pHl1G9HuLevpI04AHK2F0Iqhf/iIwuVPJUU+IkR+ihtJVUHk37xqfugyq4lfQdaEechkXs4Rw6vGGIXMBhrFt9VJObW1qvEPCnGdyrCqsOqFWaNwFgfjtSxjW6FZYZ8qLdBJSbD8M7VcbfrSkvD+qySek3lV+hBTliH0n9+xL/IHTO7uLfj14OzD9QXBEz7Byu+t/vI/YuIuf7tfin/bbvLnClygOBDWS3lHitKWfNgI+3aB416+x/rMsU7yEFve1ihRTYtFPA6ar6pap+bjpUrupnWydys8wgu4tEi6nlb25ZFwNZ9o1U07wnLEztepDdrddLmxEcsLGHFNL6mo++cUenbZY9fNdGfW8CmSt1ovbuSQrLj7QrxH5KJWj+0aQy3jh0YHzzQU2for5g3S6M68LM1wXmVxn/2Hvu+9xvfOqvP2pudoYzGL6/fbmtFaJ85GD1xvzu1cFKsDqpHISd6iidKUvXUzj5HXy9njqlMnIOVaK/fbkfT1UPEYdk7H28u7SZZVRGmGLZ7IEZxndHzk0hcfo99p21VKDWUm9xiYlmwd0o2sjRY93Rg3wssr3cKVY+ZQxxalS23qLN6mWfNNy2kSouZP//fJ1536WnfRq4vJJVrs8VbMtpiZEU5Lip5ZlNK5mPGhVY0crGZUAOWFlZ9yiCYufOdEhXJTfk4aqgtKelPWRXuVmN3HbMKVcBdy8dkVOTM3uouLy2h5L6L32/501PPfhE6lQ+UCpBgzmBn39fpc3no+OX3Z+v6My2AzxSS8+owU6M3uMKXo+M0yFQiLGPuvLjx6TR36XuGZevIuLgQra4Grkve+czsLSiYlvEYVw9QDWLXIzWXaNS5w9FrbsT75MGpJ0+NDfctHnun4p6PnO1Ht9WrJbafAsgntVq0RiVZAuN9AWeMZZEzJIc5RjaLDXZdE02SxgqvJESK2Q/9smLLRe5EaLDTvmKcpsVY16yqxWUa+9kdJae2vAGX3SylZBTrWCztJT2sLfM8P4DsxNQrgHJWLPsjSj1dur+axXXlc9sg5aDw0/2uYglFT0ecfZwOgI00Nzw+kmi/0tA8yMy9VEy1KY1ezP7nIfLjUr2qteMwkRbEL/6gxpJEga8bQZ4GRpfpze3m2Hv8YDRC4/LkNsnH88/b4vf6FxDN/ibi4uPJL2M9x/pMF7z6oH3DsnqZG18n94otNfygqG9mttghxJYx5+W+5h+RvvYPsHrJd40ldrZ3V7L0Dq4g2mvxqDNgfYQgdYL56lZcA7dGtHo/1DS2hE4DXlxeBvXgB4AOCcUMyx/RjhkmMklJ4Q+zxnhXX6uuOuqP14wsh+JH+aAb2+v5h2XQphQH6LqCpBv12Tm5kA6PF57vaoh3RILzp/11MbVj/82kAJdyvD6lp8gjIgbOXNhyPm02o1lHAE65fewK3Bzi/f7pkyY2tC2MJcf73rnGfadOux7MOw1yVASjY7b+5PhA+PJwXRIuKiBiUff0MNaqYxRV7w5qnfWx41eII9P5SYqcuRxdae1wFGjd8pzCuBiWEdwhDrEgez/MxOPJEM/SHMNaBXAOCOzN3Cji6DPfGIKiIJnXXR6EEbSIdKN4wUH5ss3pC5IzSiH6MtzM4qqQ9i1QxyWrzh71JeR1DKzXwQH3AG9lit1SIAy8MjB8URW7+EUSllEkBhNYjl940dvHpVHX6P2Qybr54CR6fjtNZye375s3HO3pLaTizvbBHRypMd/YrgOuF3LYXpRbQ/O8+LxAv+etbrxztl0TfwPAQ0MbHuE9gU24t0trDCgMjGTOxykvPg3DFySReLZPSlkqxP/nXFWFpcla9QKQ20yuFJHtduTVm0rZHYj3Iq0q5AKQqcElKPyQQi+sWslcdyqAYUaSqjdhFa9qKs/bdVGgm2+11eziHSN2kmkw26sO8poFjlTijVSZ+jh+BLnfN6hygWgSg9Knu2ipDOjOGucMUWBMoqQJ/X1jFETilmvYTehfZwyEehnshoSMQnuWtT2HXFdq8Q1FuJaiYoN6M1iLXCAWdn79XZTZBCor3whbkc/49GilrtLJJ94or2qoF81pV81pV9V5VCrjn5VezlUPyoX2KWBdUoF2rUwqQr9qoHYqJ9RFWdjDTIYeyL90p0g9GvRxngTA/pVK+gXBQMkTKqgsQkhOId6dMcyiZ3ItwO2c29LTdl5V2kgi4c4l4Z5ptM9yN+h4WBwUApKR9nT/ZCu+5Phh9G88KT90t3RSgeREvczup4c/jXVF4gMIiMIEwu1AYZGhZoad2d1GQUUygbaykivUTarf1IwZqd30vRbPp56j2n3RysBBEzfS7N0csKQIK0IA0PwHQABhNon+3XEroAuXhBVDvrVPQe9iLI7WgEP92qBS1WOI8eloWS1EMBmoIDC4bib0cQWKA4Zr9BEIOiYkoz2kB5GMu+jFb0vFC5sFlkIlHmUD5eQZ3i8/gZw0ckwhhpnz7+BCrD47lEAkfYT2HwBQ5XgmIH5NOpvxp+r8SdhOhrZY4FuHvmIVd9t7n40Gbq5h8YEJLKuTTAOUvp2/HnLbAISgH8IwD/In9vmvAUfwb62l4nLG2Z1BirmOgO9CkivAtKrnuMhIBENQLPw98js10JGtTeG6W4wolrtBmpfSmgLwU058MYdIiASSxsZg4BqZDJkA4DGA5j0cLsh8O/P6tCiQFOKj2zgNfyoq2Znpjt8GohhaXURjutsZjjcM/x7kn9PGR3vCaMDPs5L4e5obRcgtqfFiw4+lvDh32n+PWIJoPPIvpk0JpCRzEmpbhW14kV2f4l/z/PvBRP/VYAv59xYznIssYzmoGzqUahgiW8OZRPrsO58d5Cgng7vQAcDUs+A1BMN8u85HSDIXwOjO/WJ0uiOa60ZljzDvyf595R1gLIOUNalRNYVpZ4xjZw2fIemOUWOOFmcH099vUmwepMAS/U6tLNU9FMJVkTBgpXvg3/9FE6tsAy7tPVWXtvUnNSm3VaISD7uKVGmmrT+t7TeUS8JsMLQvEIjvQOiwM7J1BdZACOaEAzycRDifr+etO6YuEOIk0pxCdNSCbNI2KIXXvsmNZo18I4VSn0ZXb3TbnRBAO1EB4a3CGWYrX8tkX79rhZj13vZ7/7lPwQ3kjGVQXU4F5/mDXXodvJ9AU1xS3fHK603/rz7D4hIfy8AcouqiYeESBFA0+CQ8eUQmLfhhyP4ccg2Uae5Ov/XEv5EZt7aOSpf67gHRvvVXbAibzFmL95yuv3Z83DDXm9TuUAHC1fcahwpjjCty/C/2U+4OtLDUE+4BUnqWCc6KlUJIsKnDBzaAqkLMgPZ6fpARevArD0SjqG/PZMRSyubRIAbZA0LYgYJ13mtVTrFAIu1svmFTpXIkZ1V5E7hLCaTrarGhNJ6sIs2S1wkqKiH0DgkBV99ZfPmKZS4wabAhSTogNg/UKHRu3Ta27U7H8IOyIQ7GP/sZx9/tzs5z4e6/0Puf/6drvDgqIBXxGYNhepj64ayst3BeujubFjs9RntgRubzZwLdYuekfqYDzdyKJS0Xxhz3PoNYId6yOxCtl3Olt1pfVTI90X4V+Oyqj8Z7AgawHrH0NfWbcdk8O52K5tKBvdnU2/TTSh8nC2Q3yc2VGEVxrtBKc8by55tWN1BB17BwNI2rGIb1pJoUnYhGs0B7bt9WNlBB4L6roJ66HZkCrw6o+jpjZRH5kVdMlEyLIkYfypsQi5iyMmnK3CUQDsWCjc/DFkCh1zYvoxHXiiCkKxtuY2veeU2jocQrQj8abZzJIz/PsC6B8WL42HKNTgRirDyXjhfn5eXaxN2cZEdXgryNQ/cmgci49PVMihjt90+G79t9sxv/vJXDPWiO6R4qFBGFiWin0hgBTdzdptyM9l5Hyizhv377N/P+4eUhv59Ya2oT5/+f6V5hfrZoNTYhbyxmaBo7KzSrXwyZwJtbCbQxpqPt0cZNVoH6Y4TqT7q2jyftzndbfMo2zyWt3nEtTnt2pRlLDVQDOp4t4GTuqR5AydcA8elAfC9X0X0Q0xOYVKSqLdxJWVWBNE534llLD0zT2k3aQfBGR/tB5CQiAhSmiUoumNYbPUU5O/LiBUQxnXxj4vcLSu9KrMTcqSqlvW15M6Hy94VV4mgjjSfV4mgDphpR7P0SYAgGz/m589PyQn0IO5eAE5fhuZDH2BHtfNpaAjkx2o3P0xZqMEq2Xz9nbQ/+4rXoWkDNivCe3m7901CA7Brkv7/JYE1oOSOufdDXg0oo3MnqIxOIXIMWlukdA4gBjphckyFyUSEySCao6hyHL0qWJepZMzGdtKGpHQfQa+RoUJU9XtaZ1DOZWsw67jp0wgQQl/d/YgUxVWgPPi8t5Of0FaO3MhUsgyQjDOqdzD1bANCdlCHv2aeOeNEgDK3BcFQGa/5ijkVvgsAkQs9ucoONAFX2cNqzjwELXnf/0/e+8DZUVT5o93Vf27f2/fOdCDAkAmhbxNkAhMyakhCgks6kISQsOT3lt9vebqfzy+ft/t+y5vBfQTj/njvBWaUgCOgzApoWHEdEWVUwLDiOirI8Ec3KOioqKOgxjXqgFFGDBoE4Z3vOVXdfe/MJDMYXHd/Uab7VtepOlV16lTVOafOoTPLQiv8sq/cXgd63T5R/hsHrHLLAkIJll8X7iNV+Gd2wYjN1dfzTXPCcl6qUlzGrezY3C4qRHoLw7ovd5KSQIBA5Lx4+6wnZW+Q2oLAiFXF7LwN292YN8gsWlUiWnXF32Hj5aUKY11MKbMAaBP3Fr7iN9/1dsUOHocZW+5/iOzjMqngEqmgcK+K1jf3itj2tPTThr9gwwk+byQnFyUVhjhAtMFy2y0hGwmwaAyHOMJgCrALk3IGxvd6NkOuUJ7iBhvt2ypTJVew/p7DOr0rqKHh5eiJ/3bn5VQw00oZVxouT1y+08Sy7oZWd0irY2q1h4rtq3GVoX8Hn+GyXyHfMrCvrrvGHMw/lxfqeglk2lQt7Lsq9TIbX5raRdvNUveG+ldI/V3S6+XC5SrsM6juOhvZoFM1AjZjuYMqMp1wgdi2pX19ikdLhp2F626hL+nDARoI/1JWJeWD8dCZgso5gsrqJlSuRAcLjFiFuDKVlNwM6IP9R3i/su1ebeTsar8JfX18lcPN+9zwanM8R+dDOsDuE4jWNrBrSvrcI0p4V0+OJtD09y8rdpxAzz9vT196mbrHEdEClxeJRaqTvq2vV9Y7uDotFnO6EQ9w/tVc//6+KzZy/e962eo2t9a7uicBpuNvu5xrp+em9vQfX+Lr5K4MJaQedXazzmDSmm50HtXIQXkDvkjL4hX0oyuWSOFpVn7nIr/zqKchBrZwsVEGg8ohPgBFdvQXLOtiHw/62oCSSHLhDwPH2+71qoL1ynbY6ISw0QH/wtko/UKAyG8vX8GhF4m4TGuj7Wvept8ucFdn20LOk1Q319S8zIRn4erBuGpyX/JG+pRJlaD7vhXmH3/BbNFUlBn/nDlIlHlf6TwU56d90QZWAhK2mVO3S06nPvNPcYIs4VZas5oyRc2ZoluhRab2Bmn/B9UpjqkwWH1rOvI5JAymQ/xMbP1p/5m3GqzuH8RSmIvGEncQyt/mgoaloISdv9LjQ4ODbDQ9wBkT91b2UeQC/NZBeWPajRWVj8zQPnm3Js6tnGqnIwxIBfNzEL7ndumkIUnitEGdttOkDfJqQShzuegLXm5XX3k/rgHdZ96dW9lBh/uhmGoMqLew9HxokEZokOPP2fdl1lt++kipJz0Ty7pdGCskb4BfDD99Z7ChXuJzEbR8BArWN6NhmcEA0/5q4N1oXGxTM/ktUeho9SE6CAxxwq2Ic6/fbOpMGggQG47ocMK3Wz6lI+82fUmJwzpxl0l07kuqt6futnSCJ0Pf9aobtVKnDiJYX9pPCbDjqa5ZfPV2qH6hVNyuL+4GV27mSaNnTP+Zl98PoxKgY9rSeysbD+UWa9uTUDKBagjjm7Pe/WtX2xH5WNd0cmShdyrF/omsW7MRNpeh789n1P35VM1t7v66Hd2Hu0xUNUYc1EgUOIgOtYrGee0wqMtrYpl5mDUrhKvhwNy6XyR8X9/3d2A9ybEVEf4ytaIJd542Sgg/4Vrp3ruc9KcTVvSa9EV6G32Qzq/0Pys6Me3/pJP+9rX0o683JR4fpoOUMFFMuJESfokEK33Zpt930O/P0bGBuOMVYIuUNExJdyMJtssOrD4p4fpjUrmmf5mcLih5lJKvRrKV9tLPJ+nnU49ak7KNU/oeTpd8++n3tfMLfV7YcEVfoKVwl5NeM58Wi178uo5+9c1P3eiYdCe9/uv3rTSg98Ff2umnvmZFR6fj71Dpb95r09uufkWVvItSj0hfpHeV3s/vu9+J9K/y+95xO73/YStamE68Ew28myCDdOc1eH/f+/A+Qu92+jVOH78GpUy8B+8D19K+NL3+BrwPX4sSP8Pve+jdSx/n9/7rkH4vl7PrOqR/7315+Z+7MS//5hvz8l+8MS//ezfm5b/9vXn5e27C+xiVGaT383vfu1RaTj/A70P07qe/YxxG6b2Uvm0nvYc/w35iyrtuMISFsz25lOD5pXKYKrZ2sNO9Vk+LbwX0zwrYflXujKVOXcE4uTFbif5ZJc52Wp7ND6ktDlxHUbZ1iCb6FD3qEBRN88ENU7+hYJf+WZSK4pzmjw79sxz5iN0UW9XoS3zIEVk2/eM//M8V30l3GvyU9u9lpSXtWqK5BF+XIHAPGkA7A1R1U0gUhhstHUwg7boYLp2UidaKtw4cWfktxqmV39qgC+W3iA2V2byR9iKpzY5COEYsFdiTdr053B/AG1eWBn90XW8G09vgykVMh3aLsZVIbABtxog84mGInQo67J6o62LYw/hp199BVuYQnxbZOUeYfcU4s8f8uki4ofFbr20Euy6OHb7vmQ7YG1hL+gdVomG7srQV4n1fsloZ+DlZkZuzai7M3vrt7HOfncFcllV5SVb8RVmVW7K3ATv7vNPOYAbzgoby4nfZWaXDWDFHxE+69I7HXgdFM+iIC1WfhzUQB7nf/vi3ToaF6LfoKQFK6Bt18LaEDeHhup76++Pf+vhR57dzPB6fQc5nGXXXxVEH7vvgthXo0daDn7gY/iAffgmxdxiGXhRwJgqfLdd9iafZ5//hNfznGHdXj7vcBXBMRB6+E8u2to7uIfYkwz3Eb9xD/MY9xG/cQ+JxRnqIiYrLZjcecYmJQAdm5mhCnjh2giQIbsmIAcIbLlw/8u0AJ4tCLXBuGH7xCtUqBtmDqiepLDzIzelJK0uimPNQN6zjkEcVuQbCgQO0Czs4Ypoj8rCKvuUIz4s2RxeA/QBx5D5EakHsjiSsl6mQYRQi9w2UtId/VeUxVx7z5bEQW6eVVifrEVG7lzjicpTNgVf3pMYe3eGo4cABnlrdZRI8KGKvv04DoiqWrwCN8NNfaZ1DYHT2TMvRp2gzr3D3dIuEBJ8rPrfaaNZ529i/JGYdLA7EA66TwrGFc57bS5PT34Y9ZbplK1qLI4y7od2TLVQYfYMdds2tO+KqC9LEuUiJ4Cfx79MX2d0R/PK5rMuInW2sS8NqVaV9pssyTy+udFDXJg4PCbqEWHMF7s8IGe4HHX3ISud24+ILY2/BF6aW7bFVPtq+Xbp4G48ND9GjVrdYQosd86EIpA1bj1bPcUuBr2yrWsVF+2rIHuJic4MIXus45Bx8X2E/7GFARZ8hQXSZmim52o3sIh/jAWubU7LqDIxBcDEIpaZBiEUsUhgE+MlJSg2DUGocBFcPgmsGgfsaMqVJY+FQjwfihZsOP5dy/4q6s/ctW0MxuLIRx8ZjV8vciOh6T4LsBYJ0VTzu0bRmUayrvbQFmmjZHhjXI9Vbkxr4r3juc8+vxYwz7qTZCDGPe4AttF6UGDtcQAxg9GNyO/SqtkUd1L0h5a5pfZyptoRreDWqsLpeX+R0e7ib6OGIFwT+yEpGuKrlDmrhQtkjmRvXxGliSVuKWmBB3E6OWAqHVinsFarH4/9ra61Y36K/gy6+zQiTqbaWQMlmDpsyN9rp1SrVOXylaykcco5DKBf9v8JdzsClJYVAjkuXs4fdpVDP0xmEXju603sr0cbEibbK3E3KzBAImiV90b9hgj78BWIwm+llzOqO/juHgz8zC/i+VMfbCTNX6yZS/Vtg8hghz0XRSdVI+9e8LD0Vomp62544cF/N75viMhz4/SVMGWinlJ66EpHegcF7vcZegL9K7al15m2tSluvXvTHaiveLhOmtz3xmubbcVT8fqthwnmYcF7DhPMmcb3LilzvMqRsa5xpWoN7Rez8z63ip4J6jfqsWmvgJyC3uswaSNbhrdtiTzIlzV4OE185/t+fr6hXi68c/x+UryzA/9fWWhpnVEVcD9/k1YJq68GJd/6rTLxmycbFcusU55Jkzn1FLVQW9PJl641TcQHMeEe/nrTS6uApjqhdzAGiGz0995HnBr4oyQ6sF1PLFkw9/Tdm03+1nuxNDMFM/xYz/VteAatT8ZzTnc3iUV9cTfLM8lwdbDbiEAo0GnmPceS7v4eFNm/jiEoulo0e3xngmB8daPcpzubT6cjAsT46hKqLm4kzYFGw0lqVTXliuAvgjZfSz8A4r8KfDg78q+f9lBXypOKtiiv00iZw0Vl1T0LWenBW78FZveIEgbc1vEfULtVPUboJwGZJHAlrYah0AEAO58ZTKdjAgTdKulZiPXKs5JZQyh6NpNRDL+JMXjAglLw06qFKdVti9MNCvM2fsuvBknCXGtfEpx8FAu9YWzsRbnobe6Oj2BsGA6QTfCg5EcTcYV/02LzGISzDpWShYQ4ZMQ6HsB40jVz3RX8gBV0gNWwWbVcHQht4MyCZ0trafLZFzknGYxumJnopFu9KWIEGevGoe0pCLCV0T6lILBdIR22WcLOurniKoplYSjmxJOyzhKsDsXAgXiaWEnFtr0gpNJRTk0lJ1w37KyaTCzIyobYnQiaiyG0iE82VY3gYmrarhUxOEDLJOqGj2AmmeqGRC0ImnSKBLEBAz4yWmgmEma+1yNmy/FXiMouczcuZy3gz5jLz/tS5TPzH4TLx4eEy9cPAZeaHVTX71etwMh0JIWPoCqHBOhBHhu2by7z15stRcVnHmvfgR8XEmucfFv64HGseXdc1M2I8dobEOImFzZIYi1xsMjE2c7ECMR5/mIlxc0aMFxSJ8fhXQoyTeVk8A2JsYGdTEGN7KJImYlsXvepsy58x22r7U2dbC/44bGvB4WFbxx8GtjUvNIeWmqO3ScvUJSyagwzbnGXBwM5Oyutdbfu+mJ2RHC9eEQirCwUCdOkv40gKOCr4aTn9xk6RVEYX5qeNdfPExJd/jURvCPlwQ7Vo0f/UEonRxy0OG4EwDkRZr4dzyMctDmDXIVgsNqcYDo6CxmqBhYgrHI6QlB9b/BlJLSjl9VlKR35s0SkXQRDuiQQptSV408ElK9wzghHQTT/2ksXCFchS/KllKdNLTjxzdPIO09jFk8Yu/mOPXTSDsfMO29i5h6njrOaO+xPsNfew9ZojN0i1MGJKPlaUvxpu5q7OZLGVnhbXVspiBbiWtuFGS3STBxePmimp6hGzlM5WRGJ5f/VVlVj6Zt75oW5P2NPi2L7lh40CInfWItc/jni5ZBpQ+gPEy/5/DPFyoa05rbki/18rLJRoDdcIYhPlkYOus7V7GFZrsyTBUFr1w/ZXtVWWmYw8CxOjlcXVGVuC8qVzozOk8uhmlR74iZ2qyGbn2CENmpKZqdLWdXyJlbjKTjYoF011Ixf0G7igEi5YAQvq0zCXQQWLtb8C0+ZEaTZY0Wt/hS/3Ks0J9a8iJ/SFE1Z0x16CN+7Yiyi34YQX0DtxwjfRw3DCzYLGf6XHk6iXMG8FhAVeyLjQXwybamKGAaVz/xPm6DL0f6XT+lvp7UqH+iv0JqW8KUvZrFPeb8sAVBDhidJgQIPrCIutTmitqbzVPazM5fsB2F+W4QK6knZ1R38b5kF9Q1EM0BtrV81WWa5yi5KVdamiW+XYv1aSaVc5dKTWrvKOkr1IMo24Jsau+SXB7N2Yg1gJGa1l105aRa54ENXDtvTmozKoiCpcgZJ8GE9WopeWqVH8UCutx2xRp9d9rdtFcDJXdLuu0e02KHWL/zs8Cl6M51y4/KIeid7t1bXvI1FT+IjTVGVL9pjVGn6jlsJnoVZPpqNQRuuwUOsoqnHQk1RFUQGDXigqqpmiour20i8Nouh1kqJCSbUKWgpUGIiWgqP7qWYtRSD3DbWWwo9buETWUvgoJ6CHKmopCvoJ2skv1ErPUja1tVOxJqUn943ietbVjtC4EBJ8ClpfO1JqCeDeVJiey7OnREzPzZiemzE91+w/cPnQLFsq2iqUnZTF4h8bEZ+Y3o9wEU0zPdcwPTdjem6+AwkzNigknGkK3em1omrqZUuZZWuKpvNVxqzpiB/AsVPLy9RFWmmncHGEhYEfRNQBqn4z9bqETTV9jQjE+do3ww6rSofx2vdH6TC8XSbaO/RVo3YqoeKbtFMK2ilV0E7R+8ZmneNlRZ3jZUhp0k7pOAAF1WppKtUqaxwP/0w+4T/gTD5BqxkL1MVqxgbynds4c9X62lFm5gYHH+n6qzzSr0QPWZgymB5Kv7IeEvMBmyeeLtBDuloPWYYe0tcrwGLrqNoJU8+VjdlcWa1nRtPscTM9pDu9HvJQzMU1ekgi6JA95hXHiy8msFNfysl6xbY4hF4x4sDl9B4VA3wjzcinGtkUy6lODuXsFSSB3BMNtJyKD6Ri0cbXSaQqeks5mGbAohiRXwmmNRYK5qVYiUQNb+WQ3jwl+CoYuwBvwcGuCq+wy9R8Jg54+HZ6kpbUeWsS4cZkHNHEakkn9MRqIeJqkVLOr51Er66ZWFHcypGsPcHYy1D1BNWIM3fXW/haZr2Vr+6DVD32Qxb1cMRr6jJIvnQcbu4GcRTu1qU5cEsRQKAGZ7YOuHYQt2Lq1TjAC4wPMB/5G1pWxXyr6WDXNY5+jG4FldRMrGuaoLKWFEV+hExVVtcIITMXyXBb2XAHMtwwXAwxzKEe5iikdynZ1+FPN2OZ4X3hAOsneUu1GY5LZMyCnLqcjLoCE06dyWlqSnI0JTk5JXWEYqkYgH25sEXQlOTEXvS3TcTiyW1C2JCzv5OQSYUZbjUnFScjlVYa1gKptMIPeQhSIYYIp+NEKmFGKlUOBaJJ5UR6BalI0PWqpgRFY0Bv0d9SdUQTNQR/FsoVdFj6JreTqw0UggBPIVOII6ThMGmAkVfZ3AVcGQGga2LmyqThyGbAEQrhLFX51iYWMUQhXgOFeBmF1A9OIWtpLgRmtKLG0QJBBFKQG8qBpYEgmAnn+shDcxsW1IPbeK+Q27xmxtyGqwpEWvXvzW1OODi30ah6guqfMrc5/tDc5sQCt9ENC6Vh03MbNfs1DiFTZCCrU5FcFTi0ySNCqB6iN9ZAqgYNpMo0kKqogVSNGsiqTDQm1+qsyPXEGZIr8LMYP6cBPyfDzyni5zTipzCGwRQ0HuY07giNq+lpvMbOo2nYavB5H4LRt2lSJ7ZAE6aR1GsZqdcQmM+QesJ8kRrSEiI4YgOlS2M9bixnq7dym2sNba5lba4V21wrtpkbI4TO+1qqiSeMWNDxvKlNnjcO30dsnjdTTJjQTBjmwaGeMMKD9bwJZd6EQhqhnjdhw7wJs3mz4NDzZqEQayAPS2j2ldIEl4oFqyqkQesWSLZamHpVg5yw8ItmzcL9V8jCF86ehfv//iy8PkMW7v+ps/DjDk2KJ0zFwv2DsnBzzBPNrStKLHcGSiwtvnVFieWKEssV6a0croz01tXSW1dLUEV6q39NoceaWuCR67Fc0WO5BT2WK3osfe6D5tYVPZZ2OMl6UkhDCge96oyEIm6mx3K1HsvN9FjuVJrbQwlu5Ngpni5zzS0jR6f4KUU10wtmPHPY9A7T2MWTxi7+Y49dNIOxCw/b2LmHqeOs5o77E+y1ymHrNa25dTPNrdOkufUahMgwc2nQ3KpGzW0p09w2iKeqk8RTNS2eMkxLITTdrASmFRGYsmb31ROY+mZe+mY1LWp2CzI5d9YS3z+OiLxkGlD6Q0Xk5Uki8sp/RhF5ocNygnab+sKfpCkpNRI0q4/dqdTHR8ySzkNpNauPX71WW4YjMCvIdy2uVh+XwvSBu+30htenY1+00ifaIxwAb/9nTvlunqLzfJVSHqoU83wtT9F5XqaUz1c55WlJ6ftSlgJVtTuVqro0W1W1O1NVtdWsqp6Rntr9Y+ipK2D9UMIuth6zidIOm6YaJT5q82hDexvLneOiRppy3muztrgCbfGIrdXFHHsDM8JayyptOBJgZ5/4nap1CIbCrw69wnsStCDQWbvoxkEELW8N0/echHH//ofs9J+P5XG/5zVI+EGe8B3O8cM84ZkTkbAnTwCpcIc1kEp6ldDU6M+s9KNfsjinTrp6PEviC+s7ldxaT6PojMSSroViCsJBjhouZpVBd/QrzMfhn8j39LasrncIjd/+ZSu965tS152apAtJN0nSp4pJxyLl3kKKLurFLzVnuuZfs5QbHKUkcnUs8ZD0UpzdRefb5G36ernczHOF6eKWuXhAZLmspGLfk11KR7PbEhfja0l2vsJCXcCnUAtUEEkC5w3yu+wcNj3StWvwttheJLsImAAsReJKCzEVe3WcQ+h06PzGThuQ5Qx5nC2PTVLKBRIDcQv9eupe6v4L5fdF8rhELo3b6di7OLKxwjmv07K89FRcOrcwe+CgAXVuF/8ql7EXtr8TxXivtNniVq3TMuu6tK7B2MKYWtg6WjubWjhy+tplS7hK7W+JEXHlICs+Vdy0cp4MxUpA1T3ZSbZeyi6VYZkPzaU4OroUC4kj504eOxcGxlA30nb0FPb4jLOgg+ukcA5tzXEZ3WpU5gfN4NIUtkI6CBXNvIhwKHM0RbThKx+2nfW9ajs7oxvwjAp2zO2Ofu6K0GjMkeeoI9KjUQdykYStulEw4QML6G8+LBwPK9/XHmZWJ3dilymUgLE84OCgv1SNucvh9pdLHdff9jgiguXfNEy3cV44xV2mBh3xwTnogFY8ds4LEXuKWXh6wtKySIob0sUOamQHDbIas2/99KYP+8u4A3kwGL8hjcNujd9+wm9EFzSsv+3S+A1r/PYrxm8Q+E0owW9CiXCmDd4TcGVWEJwn8rwOKfCAkieAgOGEasTwS3tv+sQkDAHEi53G8IDLPne5oH6NYZ/GsF9juMNjDCcUYdjnCYZ9HguSYFQkkrocQ+3DAkhp2LARDgC7uecDIsLUjk6vl+nH9ZUllrXKBgTEFNfieW2FVzpAo1lXexwVtc/rjjrrhF0n5RLy9DooE9Mn7WRo5SlDthHgj4s/LOrw0n6nW16oLfIybFIGzcu4eRnVL+gaROyBfG2PvZzj9gDBPUqQ2oEhevwbn6bOVn14p96+1hVE3RxRN0fUFUQ5alDiAF0nq2lMj+qoHtVRlQkPaW/9W9tID2mHsM8W8SHxlP12Jj+kX/uYz0zYkCrLvFGiBL3WFZTfgedHVknf4n2I360rZ4b2aCPayJ8E0QusvOp36xwFqM+tn4ceG1X1TdIihCQCWeEJB5ulN98Rn7dmvHTF9jUjO95wRbzp8uWIz5Aj+psJK8fwefkBFE0TbBrgg6E5Mrl3EQLJeEa9YwSzUle4Sw9mP3jV6N77Pv/Ru7772V9TBq48mPGI7ppcJ2IorSG6QRQl0MZgsaovfeOzX/mXd3/vn/fOvqrBhqosBLLgqOZS6wBT7ClU++kI5sGNHNA1X80UO0+mm6unG56j80yHzwSBgSICoVTbpyfK5uUICsXj3adrfSdquONo5u1oe1rWtd529CJLmj+TWvsm9/CELZUeoF4+YEutSMtqfSmZXOtvktnUOmFPqnWPrrWPmPW4rhVptAfswHkNw7nmWpDa2+FOcLnaAa5s6Bi3f56dsIADs2hrJceImQHPmIwJAmKBwsY0FvidvnAcjy+3uW/uKvsavPz6uNk0enRyVQiutYYavFtXNdLc4Hc3N/hprtKCedXe44rNbZkRDiONOHAYHCvdSbx5bT0oMuAHH3titgw4QLm8SBC7HLOTQEev4vXf1rPX1uu/XeTDry+w4Y6MC3cVmXAHh57OWPCQXZh7Ny6YPPcGFsxm7g02dAujXw/gJjrIWrBTt2BAt2CgoQVnFlqwNGvBGcUWLMWfFVkLduoWXAVsn5vLM4pb4OkW/GruTFvA+JjFiDn6J75ucZfw+N35ddkBvt2VGX8oPtREIocLR1POXSdOLufjJ5pyDoWhlfYjcHv0Zbc4TBEPU/poMsUkfXgKztQyVdm0056w2AmaSCG65NGBKEg4E1Uw4Oyp9f02Lt+2UEpHE91cUme8tklkUmMo3WcntbUcrrsau6yNQ+gUmLNsrNEWpF5mB95xFS7+WeLA4X/KDgPvsOMyS0iAzAoI9lJ3W0JHRY6Au0nSN4vQ5Zy4Em9azgGGqGtXxM4pTlDfiAbgfiJn2UJZNp7uXEi/SrBcgd+2FRwS6SK8L1IXQclVwTXOiuxCqUm84eM2ttAO8Ce2bAPR3hiIiGLMER2lNF93BlxY25CN6YZvkNADM2hl7VVvZWRaabbbf3hDaefN1la1YntzCrCLDXcbG87FOKb90GK92u0PTPsD0/5aQ/traH/toO3v4yizuuUIPk8HrJppM/cKSyC2aTl37LJsGwheJtKES8RxKU/tCuIsLLSK8zqWeX3QLcB3k2wH8I1kug1AeZoJ31WY7x3yiGW+x03zvSMuszyuON8h1mWzYrg4goraLVyQYPeCIVqHuV3rSfdYb04CdEAQhzLvqzLva+tqCFxVdRhoblwVgWjAvRlXCfBiooToow7E+BlRVsSapyJGCBUZE3YTRYCBjFQgqUGn1S5NDwgp9HUgUIEIhPgxn/CqwAElsTZ+i5ZTo/ktWA4vH53WWVkhK7JCVgj0anw/P/t+tvmuzpbvm/D9Tdn3zRn8Zvl+YdzQjyEHvk6qWc9pxjF9N4X/63YTMSGEQUzCht7KCJBj6tWm7DXpMy7zf4WOi2D2qXtM8+nQdFWxU3lKWqzy8Xo6LUurbNKox+ho0jnF9Pl5+nHF9I48/YtW8cOolX/ZgzAgEmUv1BauBUseY/2bW/TS8IpVbRXmugGzlfJGthGDlJQ6WvUSy6lCbFrmAS7TfocdTpTTT8CXMEIORh3ysRtfqaUtjEcLc5uepKrd1NJv7X6W3jpUGwaT0yKxIOTR1faEnGPpMtrnIofqXK465W0h/LTy23w4bm2BlqyKOwOBvpDBJa7AUFcLI25JiZswtgx9Nga7KmNelTHnHBdidLmMzRjuqox6VUY91M7l2FjYlREOtXlxILbD2JcFYl5cFkOikM2L8SuQbzAkcjNDonudgu0Q9BR8cbCwcnFE3z4li5c5NX9wweRT8/sWzPQAaXHMLOx7JSpvn70VS4tIGvXRpM+WWzp9thFdstB6jfYmQytoP4uydjsJr96POol2USxCJ5cNrKIvuTocuRt9UfOCIIVMKnNrnclbvvnkVVd+5t3f+8z+2ctb+orHjLC4W6ajo5Oq7OB1mTwukbbhUVyWLytIuD6Y5AKuW5PJ8q0ZyCWspv18oauWIXgVV1FfLsXXV3DXNUkC4+WCQryiSQJ4+pTVstHmHJrxe/yepMRSfoxFmzDYNmGwbeLJsq2h6QF32BwoF47AI0pWcgxmSIPrC+i5h56r6LmTnsfTcxc9z6DnqNNdj+k5Ts830HNIddfr9Byh558h8hExyISeA/Q7Qnn0+wSUR89j6TlG6fPoSRRZPxJBP6gcOIgcpOdCeg7Tcy7qpfwnol56HoX6aOf7GnrS0NdPwtPrrp+KfPRcgnz07EJ99Hwt6qPn64APPV8vEZnqFdRLvzuABz0XoRwHDJ3KV7AuLCGyHjHzEgJg1k9G++h5CtpDz0701ISNkLzJebfXF7Mi+ojMjrQUH8HWo6M+XmFS6uz2xS3bbr8bHy38gYUxnCZ0Wt/0DWCpg6CWqRFAlhYR2HJnWIMOEyh93s3RLx/1IQOYI8k0lL31VhT0kC+EQTmGfbmy3LrYutlBvOr0DipgTtwanwcBP8Hcyz7o7vD5UnkJM3uXL/fUSvHiZeqAG7eiN4i3O0wkrR1qXCXYahPFLo5d7SWbNVH1siwtrlw3duPFLMmoI9SdLDQuM1DcrCuH6QriLOz8lMaDyPpx6CrZnNYVPlMGo6QdPc0yqnUva91Cjk5OXHWvGJHDOplRIpwvoi/0vk/i5+1T6K9B3Vw37eyOz8OI3WandvQxD9G5lzs7fXkOIH4XTQx+FmfGTl/c4g1SB+F5m5+4HCRTzA5OoRPVRiniAIKUEc/ohwOhjRLHZfX1qz98OqJ2ljC1KUenTMJOffqR0xaDDTLY6QgSypkHvPgUyXxKljkymYd15l0685AXnyyZT84yt5nMozrzbp15xIsXSeZFWebYZB7XmffozGNe3CGZO7LMHZzZR1haAerzBeiABppAITyo1B1CxPSEd/0SRxYtsRHLR7hDD3hJeS0cEU54SchmBojLjrjd9FqTV5gZtMhrwMYHr6fT5WJA7zHQY7OAfp2B3m2gR2YB/VoDvctAD80CustA7zTQA7OAXmKg+wz0AXfm0KcyNA66OL+vryGgbYh79tUwXiCjy5Q8Akp2iFDcXG+JG6OP7LZX8YlY4US8gGMsaxJzBXKPfo7pEsbcTLI5p9P6ayPZnLNIXSiSTZqPWzLJJv24EH/+ClxNqNEVloRyIZIgFgHCGgFhjSrhjqMKezSmNixIlpFALM2m4/GFtg1ozAYKbcPG5qGnH7nhO48+cffz+tAfoInHF5o46IK3bAcnvdKG+94RYrJJ2J6cht3/fG3VXiNWxYtLmZo8X4wCZIronjlARB/PZ9kqoUyrC2/C5mtLAYc6C02ev0y9iIwua9RLHNVPLAf6+EzRCglIOQ7b49OiZfFp3ekPLYwMl4iPO2xCYwftuwjb6+3EZVyddnyifRtRQHv0ZwmzT9RWZluYfnm1SsuwBylrFryYreTLsv/jFuzSLRnSPTkkPamZdRnU2c+mNXiloiBPoXUB/YmeQOEyMPo5zPXSstM4xgPNY3xO3Iml08oU2oZtxoXh3e0IUruNUYCfWTBAz/Hkg8ZqwUn3PMiCbcuN48IwjzmakvVzXBe4x8koubXT6jGU3LpIbRFKpq69KKNk+rEFf/4mo+QJRyiZy8tbudtpauXqGNuL1T0NjSR2v7DQyJ0ap52mkaWskSCVG47J2vheeXXihYUmDhG3L5Q2qKS0QTVll/34V3mX/exXpsvqurw1oqnlcnepuPW11vud+ib5vRvN2sTq5RI0P5wPdhU2N30QVgsTtjR9wsZhrcQKbNDBCjOLHSlrj4qTAs4AY8sKOZ6UxbKinH7zG0+JZUVZLCsSEJaG6ddo9hGap6lbMjR3ajQH8J3a3q/RfFjQnMBeYkSjOWJDlo+NYVcjGR5Q8QlFDqrxGzH4sSFNWQxpyunNie7ScvqBRJvUnFBAdczWbNUGqoMZquO2oLrHFlQ5H6F6o6A6AlQHNKoDNsSQ2Mt2NKI6wNSjgdxGgDjGZjduBBhxGmrZ6TTV0hZjZ9zWCESbjhOLbFd3iKi6aNfHROYKkbnp/fsMYbnp5/cZgjtRWEpJa/1K8XkcLEemhH4O4km9O6S74m+EeaAntgiKWyBRwN4+asSQdjqvKWC4RRDcovHjMXHTBx985P0l4OIKQb1GoyR3ESqyn4nW6iL7NRJP8p4HYXuJoehN/JjPmyhKDgp40CZqP/jfUpoKbmEzRRumCQ742haX8o2SazZKZV7yaaO8lkgIS35ZXrHkV+QVS35IG6VytlFyzUZpxtCvM9C7DfTILKBfa6B3GeihWUB3GeidBnpgFtBLDHQfQy+FEeuMgU/NgG1d9WUzBz7JAF+kYbfMHPY1WY+ZiofsmUMflfWYgR6YBfSJBnrY0dC7nJlDzzXQgwZ65yygFxrofgPdNwvodgM9oTQ0HVBnDH2kgR5jaDYkd3JgJwd2cmBHA0O6I9OLtoQyvajvNTQluBqaXwWaXwX62NjV08tAj8wC+gQDPaA0dL+aOXRkoA+YuidmUXdioEdM3cOzqPvPDPSQgR6cBXTdQI87GnqPM3PoNxjoUQO9exbQsYHe5WroIXfm0GcY6J0GemAW0McLdCcdHTLxzgER1BD9mRLHZlHiqoz+DPTILKAXCDQvgCfPMzISSJJ5o3ubkSKJYEsjvBvyqPiItNqdHBGvFBkwLZS+FoBjiT09boOwuK0gLF6mhcViFu7Jcu1ly3U9EMuZjbIrD/iWSOLoW9ysaTK3uFkCy6Lhs8V8JoAaO7co+ep+a7JJyZf3W7OxANpjTbYAckKJzd6Wi9ovlMdmEUZvbhJG09d0Z32yMdKN9VwwLUZLOUrB1FJh2ItZsAMt2FQVhNFt62qWVFWfL8XXFwDVaGtqra8f76zOzaPi+Y3YxAuaOiWeXi59NOTSQU/iZ3Lp42T3dZyIl44TufRxjXLp+OhFTr+zxvqvVN7R6XWqu34mPW9x4JnLZ+ktIln2+5A6+yylTekJaW6CMKL0XENPSG1PoCek2GfR84AL6bKfDtLzbHoOu5AuU3lU7lqU50K67LP0dx096ZRW74D5Pj3X05O2wPVFqI/wOQf1KUiHfZZyb0B9ClJin6XcCK0IKXgnyrNxWd1nKfhilEfPOSjPhvTah7CyvgT4+JBe++moD+m1n477kF5T/hKk15SfnktRHj1PQ3n0XIb66Lkc9dFzBfAJuuunAx96rgS+AaT4VH4A6T3VF0BqT+0NIK2n9pcgpaf2lCCdp/wlSOcJvgTpPJVXgnSeyvchlfcxb+tHoX4fUnjCh56VNXb9PHH4GIcJi4ctNlkiQjovrsEIJUo2/YXIhUVcXBNx8ab4vP9dpMiZuLiWiYvdMI1ZynAetvNlkRMbIYUoD105QZVpah5NPFaKBt1AEbqTPaSxuJg+3uKwuPhovA+Kl7NB+lLuUG2ElM8Hf4+f1i/gd0zkSNRxHrsvTfu97ggDMe51Yzh8qNOWcFNxhfAWPyLqwGXe22ii7PeklZCv+8D7Fs0Z/U7rIW0kT0DDHkvqte6KcH3YFq9utCc4QruE2+clNTzHvXU1ljMc0ZM6b607ksZ+Ply+81VF5fu9pOXStRywF0ImPOLq2pqKW+iP9qS3z4Oa33nr+hpi+nJExyOyq8LbEpcjsLtxDc//wp7u0JmAik6CDYUNHXeNW5alQ0B1/FYguFpmeNaf4Njj3sGEiqtFrsA9fsCTAXGkgH5fnnQ+0oZMnGuAknEmxmfwpT486Qx2r4chwAix/ITeFznDHpR/MmA+NHRayHCEFDXkx2kB42GN8bDXeH1DbhTk1zfSAs67G3EeEyJy6DSM4KsG5z2e4IzPwHnUE5yvE5yHgXO/xrnf4+uGaEou+uJSRvx4TQHdfo1uv0G3b+4qi1bs9NdP5MbMLzwhB+0gXlPAemcj1oMa6yGgIOFjhzSmg3o27NIYP+kyxv3AeMwVjHH3Z0sMfrCnCWM6C59VwBgAuZR40nWjp3+cS55++WNz9eisAt7jKAAXVs5k/NO27miFKF7oX31j/nouaP1RV3yo0W5HR7SrgvSx2++pt/D0cBDkuMZ67HM19MRZt8KPiZkSmAifG6QCjYmabE1aUrVxEhjyx7TToR1TD4MVvsECZHJa26S0qnY4Waza4SrP/cf4XEzzx932+rmh9OiEKx3Th5ETVP7Pxx5LP3w6tFM+q2ZcGbhbZODGIGXdqQdup4tdCRj6WNPATfjx2YWB26kHbqc7pchw/Khs3PYdpeU6ZxeGbcjl4UqqHaqThoQeHckxMiLHNI1IcQinGZxj/oDBOeYPG5xjDj441cXW0vb6Rj02u/TYjKC3NxbHZliPzS49NvscHpudGJtxR8Zm3MFWEYvuaNPY9JfitUU+62g+6zQqOB7Y94ErP3LX9+7+SVHBsbbIbgE45mST6Tb7oLPpSUdm05jzn2o27XXy2dSnR2zAbZ5N/XrE+vSI3SEjNg7R6JAesSEHOgtsl3Y3jdhgKV5XGLEhPWJDThPjHjsq49t7jtJse11hxIadbB7xZqHKm4X/pDPpUTufSiOOdMCo0zyVdjsyMJyDBuZFxQMzhIE5oGRgDrCaBfvZXM0i/VmK1xfGBfkxLgeMYsTJuBxuWN/wI1lKMTw3/UiWJxWvL4xPP5AYV9mM2oMZxbsuJXNnXCXVde72bGi8KWbRDMbtT3pC7VftYX2j9OiAHrfBSeO2U4/bgB63e2XcDkBHNKzHbVhBR4SxWtE4n0ZL8TnFfZset+GpFVoD7XpJctLr2vVCdU5xC6caNkOjtEldqjZlWzelt26oBDe6lN66CcLDQLhfI9yvoC3CQaqrEeHxUryhuHPTCPc33RN+/NkHGjaaG4pbtkYsBxnLcwyWuzSWQxrLQY3lk7Zs14DlmK23a6wowrGvoxHLPq3wNbs1W+/W7FmoVkvF3ZrNKHeoLeaMdcDW2xZd9ER+EcotKFndTMnqFpWsLpSsrlay+lq1xycslMtsWZo7hvPdkG7uEKu5cNqNG5u7M4hbi1xZ4zRkmoubA6z8cdZcV7g4AC3RfWPS9oDePz1mdtusRKrGrUWOPakLdusuGNHVjTR0wf12oQ/usbNOuNcu9sI97LN72M76YdSWftit+2G7MEFx5s29cBnUdjj6tzV2wq4gnlPohMsEqcumHHG5K8eUKlfkqM1ziuzPbiDRARskOqgMjQ7aQqM7baHRAY3sk4FMfVaeBZpGA5z6IbKICvjSifNxZDiCWhzoySsA9JtlSpQYsKERMduRAEJO4kjDgRZyermQ08+FnKVcyBloESlBDxnowVlArzTQAwa6fxbQpxvoAyUNPVGaOfQKA73HQI/NAnq5gd5toEdmAb3MQO8y0EOzgD7NQO800AOzgF5qoPsM9AF/5tCvN9DjvobeMwvo1xnoUQO9exbQrzXQwwZ61yyguww0S+HjI6DHmjHwkqzLbdPl9syhT8263EBfNnPgORmlGeCRWVS9OKM0Az00C+jWbIYZ6IlZQHdmM8xAj80CupRxFmU4i5o59CkZZzHQ/bOA3mCgxwz06CygTzbQIwZ6eBbQ52Sk5hhSc2YOvSgjNQN9YBZ1r89mt8rFsfuUFseyVkST4CxQ6shI0EAPzQJ6nYHudzV0nztz6NcY6AlT9/gs6l6bkYGTd8eTTtYdwwalXbNA6cSMDxnonbOAPjubkQZ6YhbQC7MZaaDHZgF9VsaJ3Lw7HnWz7hjyzET1Zl7oCdlENdD9s4Bek42QgR6dBXSSTVQDPTwL6DSjTLMc9c1iOapnlGnqHp9F3asBHcbnrbG3J+eJDvAv+VTpp3sCXI+K4+OgJD6uoCRu46MulLtgxKkrmtb0BWuVzX6t7JXWE+w94Q6bXS/uwmVyfWepQz3uIDjwE1CLBrCWbU/V+XznatTpTn92px2tgyMV3DNJgnT8Mza724rg14Pq/+VzVrQOd9AC8eMUB3zdY0LJvUJLbqEFxlkTwc7v5itrUE4vtk7SBrpBOzRFcezGAexzpTx4rtLl0bF5cnmDhN9PCvXjMpXO3+c250drRC9rfGwttq518+rp0w5X1z9vaucLndYnnCxt0NFpL6gsbULptGYPUDqeSOJyn7vcAbgQUlWhFTr6ciL3irOejkcBHRxcHvRyHCTZfTFqAZ1EvhLQgIhTrBX0gLNMenR0R5+HT5t9x0/hvGHv8bPxsAIDAqPDZy9y9HUFe9TqYC9yeELh3qE6tBe5AMqzwHiRc8TuQLzIUSVPOOKc0YPlSabp06r4eVoVf5KQ4zxWF+JPmZWfSUXSy4j7F8UR4alwiX0Hgi04+N2vcBk84lOXiiPt7ycPOUVZaI0O8LxHmZt6QbqiJ6GD40K+VBPAbToHvgpZZ58u7DH3bYI0Ln5yzfU9KQ7X6yOwymFBJ6BC0xVvTvjzvTQFeujX+TVLPqLv4J5sxcVJwGKeCCYYw/p5D0K60NePvOeRhefDPW/UwXm7k3Z2cuAmNUY6dpIQL46+XMqK5Ih9mrOiDYc/V24K812iuVBGxzX2tA+4FnzrjFvwbaFUSalHQpjaEh+JsOlH9SRzoVvF7d64h8a/JT5qHXSp8VHx3OgU+Pd3tgFyLuJsVajeuXREbsFtT5eDgDkIAjYfYJTlsq1JS3RK3NLNvXjkYiuuI9rYCsQpY0z4LupCBMqBu4AjoRFhRBYmR/YkxwKRuZQ/6qkfRSUeKYgcGR8LRFC+s20ZxwSIjxVsqvSJseEiOUM3qmFoypThswzkWUuDHlwS6WEZZh7VLIrbZYhAPUTs/HtY6WF3YEOGIeNhZf3+H0xRYZFm073EKiO+fMY+Dj+nhM72agof51gjHHyD6dkRjuLkHKWccZTyesxI3E/THl2DRDv1nocJNi8+SX7BceSniXLYpEjJCgJbFaTfawuLSOAhkvlGglvY7dHv3Dpsjnh+2+KhZsDDKhW08p1edkRK/x0Oj6gfyD1RqoXiqJLYYcETpSOXThRuXLRKEDtXvHzKFROPr5iAS5orJYiYxBc2JM4J1Pc2nFE6RCGOdkbJ3inBzOB7szXzMuxKENqIHb7CemupbfemXUR7lkiRLPGGYYk3DEv8AFhyy9vSvj/CVQBa0QTUNTPY21bYqjd99Kd22v8zO32U/rPSJ+nvbXb6Q/4hf9+xJP0RvXzEjlo4s53upZ/I+FE7vd2OaAqgfkxG+IQdghdYzvie3VbqpOOU8bpxO/0YHI3COMltzP/xLP+Xv2GlbjpIeXfRf5+YJv8dWf5HKb9KhynvCP13Z57f5fx3ZRm/0054PEx59tF/n2zOtyvL9/V2qr/vKTsdoP/uzvPtILB3LUnfS6kl7osgqmhg3JDnV1tekfXpH1vpzl1OupPyl2N5v4XeK0ThjoYLcrjAwI0fdRAwyhBV01H63f+0ne5+2gzWPzcO1of2WozhpzBayG2nY0/LaN1jp5+eNFr/wo1HRhmtJ5+W0frMNL0/nOWX0er7uYzWZ6fJ/7ksv4zWwM9ltD7fPAr3Zhl5tHb+XEbrvuZ8X8jy8Wjt+rmM1v15vglqwu3UDRiukDujOu1wIe/zT+TDVSv0e8tBhgtwT//ZIcGiHCwyYJ/7yqGra8vh2gzc+6JDgsU5WGzAPv7tQ1fXkcN1GLifzaBXunK4LgP3b0ccBIwyEBFP0JgN7SN632eIeKSRiJ/t5GF7ADSMzHZ6YJ/Q8IN2+tAkGn6YSQIZhYZf3Cc0/MVpaPJLWX7NcX4hNPyv0+TfneUXGt71C6HhR5pp88tZRqbh4V8IDX+lOd+jWT6m4dFfCA0/lue7kZIOdDIJt3JfRNOSMLIWSXhOodeP4F5vaMyRgAkMOJaruaaUJx+00sFfStuOQr9+0uF+PPogpAK4wkSYXPnUlAKw4kSYDm5FDrfCwBUmwnRgI4VOGsl66eMPHbrC3QXI3RnkP5UPCThaABzNAN935CEBxwqAYxngz544NK57CpB7MsjCBJwMSBloAo7RIA88Q3g+YybgVxsn4FM/klXka5iByE0VPCMzcJSIdtIM/AYTNDLKDNz7jMzAb04zox7P8ssMHJiQGfitafJ/O8svM3BwQqj0O80zayzLyDNwaEJm4Heb830vy8czcGRCZuATeb4XqQnP/EhWkWO4M9qyKdi8GiDvZ5/NB+zYQr/PO8hyALji1J0OrnnScX3fJZqjCYpuaI/lHV0+/yDLCOCKm5Pp6mteRwBX2JxMBqMMRFZ9v7LTYfrvxV8ZsnqykaxGR4Wsvg+yQm6ikmeFrH5AOSeR1R4eJWQUshp4VsjqR9OQyb9l+YWsdj0rZPXjafLvzfILWY08K2T1k2Zy+WmWkclq97NCVj9rzjee5WOy2vOskNVTeb4hSvr2qJDVcdwZC6bl7MhbJI/jC/0eH2RzArjnvnVouGZyBNy/PJyTVb1AVsnkleSESSvJQlNKcSU5sbCSvIZLoRxELS9SvmeO4o44iTuiY9qOQNb7/i1v0KJCg04+SEcA7gMzgJs0LwnuzuSQYJOmF4HdfmiwSbOLwG4tHxJsEhMgsL199kHgXuR+vufXRKz03x37zax8unFWPn8qd//PMSmR2U7v3S+TkvZRv5g0KX/JNI6MMilH9sukfGaaSTaR5ZdJuWe/TMpfTZP/2Sy/TMqJ/UJHv26ebPuzjDwpD+yXSflcc77fZPl4Ug48J5Pyt3m+MQJ9+VQmxVO4LzqnZfXIWmT1iwu9fupBSApwRdY7HVwzTQGuwHqnA2umKYCNHRqsmaYA9r4ZYNm8neNeKSxISwqco6sAtzSHW2rgrms/JFjzLhBgAwsOAtZAUK+dxKdeZwop8qnXF/jU0smlnDZ9KZ8eO1gplAMHd6K6/t/QnvI3ZhYeaJyFP5rHlPc8n9uf43P7b2QW/s5OX5g0C1+UY/Bz2bn9NzILfz/NrHopy6/P7b+VWfjyNPn7lMmvz+2/lfa9TTXNrrdnGeXc/luZhVc259uR5ZNz+29lFl6V59tPTfjZPJ6Fy7gvlmezsJm8kbUwK1YUyPT0g5A3wD57MLCGLlg5acRXmUKuqmYDfkZhwN/AhVAGGvD96GAa4/0HzIBfrRoG/GVp5DsUDTgy2+mO52XA+1X6TtU84Ndw/yGjDHj/8zLg16qpB/C6LL/eCz0vA/6uafK/O8uv90LPS/uubx7IgSyj7IWelwH/h+Z878nyyV7oeRnwG/J8t1HSVct5wP+M++LMbMCb2SCyFtnniFUYuwesg+wBAFkglekBmzk2AD87E8Bm4gTg6LwZADaTJwDvfMMMAJv3RwB898Mz6Z1mxs2NLDDuB60CL33ImjwpHrYmzYovZjgU2emXrMLE+NcpStp9sJKKLHWqkigPzbHbv80bBMp/gP57xEq/DMJS6b1n0Gx6Uc+mr1jpo5L84rNN2R+T9A+e0pj9q5J8T2dj7q9J8nv+yab0vt8JcrSV/7qkf6JGpfRT8nX0H02hb+rkpY3Jj0vyQ68HU6WknfQf7dW/LcmPPNqE4nd0izj9lt9JOnXOdyX9I+2UfJtO/p6VPiHJnzylsZQnJfl319s0Y+/4nXCO71vpDyT9peMas/9Qt7TS2NA9kvypeZBtUfLD9B+dkP9Nkm9oQuXHkvz+iJIf1cl7rfQnknx3U+6fSvI/8BAVsv9MY/gE0h/XuIxb6VOS/o9PIf1Jnf60lf5c0q99qSn/Pkn/0MNN6b+Q9Ju+05T+S0l/23dYnPE74XHPIDQBp+8IG7P/SpJ3NyU/K8nPNiX/WpJ//xwPNoiA5ul+K31O0n/6rab030j6N74FZA5Q+o4XaP9qpQckfV+Fkq97QUb1eSv9nSSProJsk5J30X8v0JZBN2kxhu8FadHvaWcgyYMx1fnwC4Ljy7QBsDn5C8c3Jr9Nkv+FsPLSUUrfS/+9ndZ7SX/yEaux9B2S/twJjclXSfK1C6mUCUre8SKtj7QYSvIPksbc/ZL89O9ZVvSiLCTvtNNrJP35oxpxvFaSh5pQv06S31OmOgepkHvov3cR45Tkf3rIaky/XtK/tCQtpSOU9CTqpXVOkkdpQvrpBKX1/56WZFrXJP2qeiPqN0ryeEyFD/xeGnqTnb5Xkm9eQrlvo+Rd9N/7aLwl+a4lkElR0ij9d7Od/qMkf3QMnTv2eyn8/XZ6i6Q/djpoVCd/wE7/SZJffgjdNUHpfS/Z6QftdFDS9zah+CFJvnU/9+5L0ru32umHOT18ybYDrTX1OKi9x/rM6B9U4i+2LOh57Vh1JyUEzZNQgFUoq7sRBJb2HfbWNF7XXg+g82yrl/HYlDhpr1iC4A4NkuYnjsT0g5kLXyrH5YChj3oRTFZitgehXHM8qy630QnM5aw9SQWZK1IipyJ0PBuPsFZ2E6xg7Bhmo/R7JPq4jegHDZjaUAZHqXdp9JAKYz/azwGA2Jd0eKuy7V4ot7W9BL+xlQT1SXcdinSbHa//OauObb7zi3D0NnvqDiTaJMrHn7m4aIAixAs3a6HZWzensbdufmNv3XTyySo4q1DBiqyC1cUKVuDPGVwBrdMZ5Pk5JJx3a8hNRciz8eccgURgDAtwbxI4bu9m3XJ28x20hvK+GX8uILCP2dxHCPBrCwguTrA+3+q0/qfovOnzxZxCheTZ/kpno/rzxE1Z4oo88YwssSNP7MwS2/LE+VlikCdWOTF8wBVyjtnNM5snWRLA2EIAY/Y5GXVz6NboU3ZdglsS6KmQdIoDEFiLZFG+i4Gfe1qUsqeMVSpRSAOeEkLwwQYeE9fURJUSGVPJgpurvc4DQGJmOhyxJmA7BLY/sLkEhBDw4Z2hTGX51Pb0ZfoHZ5IO3y17a+LD1i32N7TH2tjh/PbEc3u1FYMNP/Q0pbdFHV7KDisd/tld92GcgjeDYoI5UQ+ox7gZtsYLfWYT4uztJOqhfRyxCjs6q464hmLshPx1yY8alATwZI/FEf0KeLZjkOZK4GzKirYEkqUq39qIIVS7ow/yjZ0qD6wtvvvZB7wSW5HVbIqCAKU8MhyHFTfyOFgpTUJYmpUahzdqHN4orFvsyU8igk4OM/uiYzsgodXd2TBhZsOURl6jKSPGS4B4hKHN9sCwD5Fopx3dsdI4KSkkSBw8mCRdRIhR1KWcBCOfzEUOJ0hpti7N0UTpTFWXCYsyFcEW4vSagAdsdcheOJhgYVBJeGTESgkq2qNDHhd7HD3LCAFD6n6dnbLFcHTE7Zg/ZTcJ2SxTMXzlT9tjBN6xtoY1Iij0TEexZ7LqKZ0DxSqO6Ifw4Bxj+RVGIp5w7UpvcZJOYiCu2NkQ0b7WYsMbdoAYCSeB0+7ksLITJ2MnjYGBHF1/IHcgwfedJi5TKnAZKcdKAuYz5Wn5TIWmT4HPVGC06IPPhMxnwg24tm34jE98xs/5jJ/xmSTkAFpUh+DsZch6gmzImcGFmOuUxQCyN3Y8w2ccDinMfMZY3THzqAi7cTS7sQ27KYGJgN1weAm+XTnX8JmSrBCluAI+U9J8ptTAZ0qz4jOJAqdx12gbS9M61wyFCxJwM5YzT7OxqfjNjcoGkYk5siXmyEzWvHiEND09Mbu+4ZToL7rTb95r00OvHMXv3by5wtQvpmEXBdc3hbToHSaQM01FqYKtnP12qZVWEzZytlDjOjAhdDU1iquzOa/XLhjQTkrnBV6cmX39OIKHZFbtghqNlWTmXVys8bI4j90uqBJOyBM+61KvCBfOQ30zH3ZzPsz7Q7eJD7vTchVHzOaIdHi4umTmIAH8jRvfk6q3Yi/CHldWEW9bLTN2bQ18G1PsDBipr8Kfjm4dP7xtTsmajo2Bcxg+74DPA46oWskAKNCJmo7VZwzjIKxeHZrVT7c3EVRybq8kZbYMX4FTM8NXGA/VxPB53Jex8b46BMP3JMB6sYs6il00iedzTrB9Z3q2z4HuZ8T7r3HEgpRoDhakyoREa4tVw8VmrGxX/8BcbHbSl77fEBO1SpAL+eCDO8TvdaIPKQlBv4LKYbpTJhs9jqFHV7feDTTOeAxWB8xKlxCvpu6EVb+ev8z+FsbMApboWwqeBnD1nKQ8xOnolMfvxfkuHtpdPd/pxMX5qaJjMvvVKtuvUtVZykKdckKW0sYpHaoLXLjTWlXH5ZH3OlqUyKZ89BIgVjvaiN45pz36uY2RHP4JfwZYVl6X2MxiJMPuKZhiev9niPcVOkr7mm/vpuWMuRrnWDevib1N3Vyu3IreEN6tbE8v+TTsqS3hPMwlBDpj6FnIQfSwC6gjJr2z0mrH8Sr2wDOI8HEwsTS/sLE6oNXziUekYMOMkLCKmsXrrRzGorV1p7DQ5DuclD2yWTJrBY91Nd7Qzk08+CqDATZqnctT0u1JLI5WgziosbvuUhzc04CxgQeOVK0X7INEGkGTODpZNk68NKV2q54qD8hUue4RK/18lWeKnlTvylK+4th+r0T2I+4sjLVNHtgdU99EfFlfn1HDwhnVys6oQfGMKisezqgOuEWbhHNlT4yaKXcIu16IYTFsWcy5wYkdmnK8ASrwZNpdWMyg8FiYlFJv2zpmPvO7YehNRIM7AYq3OiUaVKS9RO/OebQTKaX+tgQDvWUrAhIq7DM2tHuSOYy+wUMR1xUOyxJWJU5pxLdJbFLwwpwNcj/4axlbJdvE3rds1RcTTNKlPF0ySmBr/4xGVONmBC6EsKdZKI0Hi0UHRB90ZAHuIJTBOJcx/xQGGbEzUoeDaGWDjc3OVcvdWq9zhX25vZ2GdIRYuC1htmizXpwJ8/UMIK5W12dymku8eeMrKMCBtpVw+WGbM8iJcLmj6g6vV9ic4TaOki8iWord9W6v3DQLaKeJAvBeRbA1L+Z3oDLHsvIs6HXaO1j1ErLw/S3MbMRPkVsa7nrqMQiaMM7YOhJxXWfTCHMIPwcYcvAd8RORXXU7XAhoFzP64obNAZ+JH3AU90uWQ3bCActsPFdZ78CTVrZr8Hz7CKVcZechLvl/vXG57oqUrkKj11sPmjLoLdF1Nh8uCMeuHqwYaXljjbej6zgUZhD7wtwcDEqJzv+P3vypn1obaziUlbLBo/TKxTSYIF0qCMI9LoEHjg50uuwKR/ULMIdcyZ0uXM98r5QqXRS8V3IOBzv+LhYmpF0rratxLUzOidfRmRgtCqUW32luF9g0MeeWOY7vu778s33L95UfCou/yk4nqHb70pX0WnXz1OshnpRUJzQ1Ayf+TFuVCQvyS82skbtLctt5GX1SLCcA27ybQLs1uxqEBvW4qfPPYxeTDm7gFHta5UXAW0jlYu5lR+bC6qZCqJftkH2LoJv57Ly9WkJvnryearQ187nO1rxO8mU8CavoIidIWtZYf8H8p+X2P6+VRC6iiCGyHDdK/LWUqOCIsQUPK2m9nWZQ65q4/3bZiLZspMroW6q23dl/e9q6FSC+KQdHvamhw3w1LQypjx1rYNnKcb2SH6GCviu20l9q8aVoA3CcPLQpNatHf64eNxWUX53fmHxn7Ny5Jr56h+mAyYWuseKWy+stYdzC8zN4Y62dOqmuqh6VZMDNp3kNhVMmd+rq6q3xQSuEQ53/7c7tVC/9ar283krVb6ZEruaCrWtrx8boQ1Bty2ZajZoQuQCH7LW1tmZsiLLVSKJvnE7Tf+Bd3Fd29ZhQQJHEm/TtVT9MvxSnT9Fh7jQOudjand78dStazoF+acXejqkKtCppS/4Ja0L6D18t/Pj+PvlREUE7Fvo0iM5I33lq9C6aU/cj1BgdWJKSW2BdErqYl4dTZeGQU4bMGFcvLK6sIu5Uc02BsxXnmptBUjpxNT/jajgB4ZZzU0F6vikz36hX+phlMCQmHS9b4HDuLKddNNW0iw417VonTbvWP2zalWTe+UdPOe2YKBqpbTs/ojfWjuaWN4Kgp85t504KppgwRzWBcMZSc81N9SUyEaILeKIIxd+5fTNNi7lcXLFS/6Az5MipqveEpOg3/+T1QqZNoVwnnKap2WTpk2WC3WuJWCjGPk1h7yhHGhCFxyQho2mdW0McOLsHK16IM7EtccT5sRnbrElE0xLbk8mGYXjM4fuS3wJ4KPVpUrcw3Zxbq1F6I+UAisinlpeoCaixlFAmZJ+doB01i8kmLZ3Ha3fMK6iN6VDlqdChNid+XOqGMyve55bEo7Vi7aFZ7LSmwEHnQVHn92Djvq5dJo6f1mivbsNt1Rbp2wtCOTnwIo3ro4ek5jJv8jbTOgY6hFJrM60GJfPqgVDwij8X7thcc5kMCgkOE8Jii4pgviuvsluggmuaEb1sbU0UbwiA4WLqjbRrPd/hph7pSRGMnnK1EstdpzkF+K+bbyukC0NmY8yzfNrcKcZUuJXsDFza9dAnbJnd3tTyuEMbpjVV+KjV07KkGk7/zwpVaOt3l/86vJkAKxu3eDsGhxOGl7lZbWCK4Ygc4FTv5N4XGtmi13EMQAn7IHQan632Ema+HdA/O2hOtkr0z6IGuyN1arEZpHqLlpJLJpv+WdRPLbdnuVpu59UqG7pDQPgFCHdGEF4BwpkRhFuAUKahWf7IUvSP//A/F47BOV+n5Jtcsnx3pcgwVaHMCRqfzRyO0HkFg7LEnnJQGpLzQXlgRoPyQHFQXnZmMioPFEdFQNwZgXhFEGdGIG4R5PAODJfZPDLZrNo3eVbBvKp70tyKXnKrfDrER2ckusWpVgo/6Wu58WvQ+LMUCviAne/DwmwTVnwbe4zf0lGVPvS4xRs75ss9sqE6FB0xey1VqAPgYJC4zl5rHbRAT9GDOjeY7kMpTB36nzvpgz/dBy9MfR4kX3e9R/8sSnWYVJo+uvTPcuWjk49wliPSI2f+eczBMVxwzs8g/Iu5cmcTcE5RBRAlPJo3DpuJAuqu/rwlNOL4stnLrmcqyDeuMctILawdO+y8gxGjcGNN6+nSH1PNRwpV2ir/Z6tQ1Lo0HPqfOaBuXgY7DRjDbkEKB2zn3cTZEE0uU3wMSF+Ey8hz0IV7LcjV6QE0DgkxNXE0EIrT0qpJ5MhSUK6E1VqLLJjQ2aLY22w5td5iy+8bbalnwM4r2skCI31sSW0BShevtAYZKHZ6AM8DxUca9+/T0lYEMN/AYk4DcApMiVK1rh2ALFjE7Ige55P7gF33qkfOHDdUhHw5jhBAmorPb8D00BUfYbiWVHQHKmpZ7gweqlPMKRJV3aE7ZQiyJJxaAX+wTrmjCbehAm7fUxluc2aO2ww7ZYYVR3nFvAtLWtm7bEPt9xyqh1p1D+Egje7CsVqKASb36D7bNdM+u6cJ9V0F1L+bo97ahPrMEJ9h980QhxbN9KDo+bW1rhb80YhaUEjALao1wuJkmlJzIN3fjg5ZklWy2HqnvdL6AEMssd5hr7Lez4xwpbWTkVxl3Szf7GvsVfY/8fsiQgq6dO5Mix8y6F48Bw2KdnlSMW2G7FNoCI44rBW3ScVRQ8VHQOkJVdondd0hD/+F9VahguiwotBRqLsFHl6AQkTUbcMzsxXdpZGoaGamRDIcwOsN3HN5bCeBBYXGs7JW5NjRB1g8VFlsBeyCS0FNF7DtRM7L0wlagFzlODYOa4iFoyFpsYQcvF6FPDNWdZ+9CkFkjHNf2rqxXoNFx9/TiYUjEwVi2RVo4Xhc5YigjuhRArge/mfULOLhRxeLqIhQIwSwfapIbAYv3XeXjepteA76Cb9rRFAKS5YUTYRyKLNwc9IC9Sr3GnoP3s/oeNYd3elQrkC6iz0Yymke+7UJa307y1FhZ8KzInpZU3ZQlN3vu+ttfaMW/Kzn75o67HRFtwb9lhJQvXtOWm6PoSBqgUxmjov2plfG6d7v6F2YKZ3dtKXW+uhOj5FcTeg6IjC7edRqkJjpHZ/uM963lDLlpWzdQAM+m3dRj0JZCFXhjy2cR/1F1Hctoo6eT0NREisZbalHRAcNYia+YGNLBfbZxj1WgrqRlSaLrbJmGyXhnVlmcI2ScI02ythJwwhtJ9iGL5YIjlZ8OTgJV8RUpAwBhbfSKnMLvBbP0rsvjn5UZi+TAYvIS6w5F7seR4q+24t9HcFKdJkxDbfW+SDRidmjlRYcvlJVj9Ws6rEKqp6yUfWM2GLmg6GbWNw4cqGRisrAfr1xYD8c2qXc+mCy+tlpUD/bYmdUVD/Hk9XP0AJq3X9B99yV657tou45s1vTemdPEIBTPNE7a2vbTO3MEQ5sVjvzttEDiTla68zKQlesUxI5G9msjRL3WjDuVeLbjZ1sxYUdpaIdJetU2PiESHVhtfF3h5anUSGhwzIU+s/LVfex6TRb11/SZYpdS3dd+/hixSQnol99k8iinRg2O7o4AreVWKB1QpTlsHIAFhjUZD4XsOWFD3UQzdsoOiOBGwxC8Znjo434GEfs8eqWL8BHO4gBgxP9lPErr5MO1uNQt0QnHMukRJ0yWRUbjs+V2e5lVlFsnxWhDO5PeCuz2LbCdHR10qYdFgGJzWZD3C1ap6zYzpWtf2tEN3VEPmMbJrGSXg+FOpGMT7TO8lGhD58BMDPYBrgNEQFoTlAvURGWaEjEQjt1RMbubYS2qUPNr/nFIyd91sc62w3ZcqRuTB/EhqAmpgLRSWyGV/yuJ4je+WjPtBzWDuMbnSQ+D1k5wSZHLuyZbW4XtZXd63F2uWQgWfmyQcDEHohxmhPtESvL6D72BSw9zeNPLXVWs01GREf96KykhMlUErOlCDb3bBrqUi9ysDi2qWJDe9E+22yPAQd6wkl8LjlzPOeJdaKmLTv9slxhSD//TYvoywJx2Tlx6UyP6Uz3/WC6THUsXxaOpRY0KL2Eq9qW7nybguWWlz67JMS4oRDKcPfnbb7SEf0PKuZT1PTo/6CXsft0eXoWxJj4ygTrM8ZpFh9hecpoo2PRucvIeU2uTm3t6pSWVjgi5Q5RYu/AlGoLO1DiYhRGDjrZmFN0sham0yRboWUMi2D5kL7EzgV/tc9Kn7rTLlq4DO+20ifaOUVbwXwmS2F7id3KdtkiuJo+x8RiRW+cB1Ecp+HeJfSTFTlNPGD1pJ6IzZf31LGLSXtjXKrrwQywidem37FYH8elFMtwimX4tC8vQioDKdwLhTtTlOHOqAw3K8OdogxrRmVYWRmYYVgBtsH2bFs3DGK3dXeH1Oef/TT35/tXpF85Gt35Ttcu97IlAq9qc3nE5sqPNv7RJowqEntBbWJdNbYkPHUzq+y0VzoDQnIYVGk9nKBDNCxBZnvXsaCerYFsuWribmA5jWNMGwG1UJSOrNjzexIxjGAjBrH+wVUMdK/NBkJiGMSCwZdfdsztC20H7cYl1n7wViH2umXt7mYnmsRI1+VKTj/tfUtMX8q8wy4hnlGJ54gYVfKqy8sZW7iwGUtcEl5RTp3zs6ycUWdTqcJvlf92epjNZr9dKdrNi7aximnr51hYlMczDNrfhbAtY73VWu3RU1NLWu5paaNZbit70j/FzJoDkfLozudOnk+NJrqAAdJdsCaTLYdeUtwN5jKUpS9DLXK62HISbx04IvFbjNMRv7Xh5GbuZ0XyJte4qJUrYOHaKhZITDcePO/KwDrsUpfqS2+jJwaJv/Ho4o6Mw3dr3PQ9j9x2BA2uS4Prai+8MDFacbEeaZ/GDO54nQxrJ8PaybB2MqydDGsnw9rJsHZwN4xt22V5cNinL5rSoxV2KF9l5ausfJWVr7LyVVa+0uWjYKxDbOXFNmw+N6ZbW5+zDadErGEjOxrp1swy/mPKDnqLkmJtjklTQdt7J2y952L6Yg4Y+9SErS83JCVcHZApDPKiKWPsNQk0iP3odUm5RnRcx+bVPa/GZhYOrAM4YWNryN/KbL7HcZwZxpGQrgoqSCwR/M6GM3ZoTMYJ0WMyRN12IbgIiB5jzEkTH/gT5AagXBJEq0TC1e5YbOSxlaEfbjst8K9LrBozdrACZ2M7s8D0+L9nM4vwZZdIO+8qXguwK3PPx16FFltENNKj0NzhehxSkdi6IpzZvpXtiaDWTdj8xurmnY10Jh3BL238HTT9rprf7P+W74Z14waQOb8Q2xGfwZwf1WT5cRZqMm2T8wHsv3k3ptjOHxbf/1fi4VyIA4p7Hu+p7Et4gRHrRyoVZym5LCAG5LR7P6/msBkhm6rzwukBzAvZ6MNbl5kSIjD4tqQkzed7K2tNVAIIBGjLYGz7FB8XLD3viRnLCS/rEE5gVEKNC/a2GlE2eue82S0RMVynfRjmgW4Nc9ytyRSt4lXR7qmzTVvsypUJf2tiF5piF5uCAyjfw5o53twdecs57HDWkjAcJwZ8RWGLbZ0rNrP/rQYjcvcCXA/cXHOYNboXss2pe3nsXcCXaO1uYM/afAzA9sS/EG+X4yR/+YVbYY4sB4kuGL/JyVDOpf6FXL6foLA3AhOas+/6KG8BnqdT7+g+scF/8dcWkn5XSLpmPye9UEj6hzvkilQh6XHZTtz07izpSEumKCYrbgjb1rzwAK6DFoyo+Z6l91aseeIT2maDsthKClfyEhd5zhP9DbN7i40vEitKY6sbVqRy/cFscsXXdMAll3BZ2sIcH7GwqNCe4Exx/e7g4pUXM8fj25p79C0qh6+GMATWFIeqIq7g4wxQYpsPyyCgohQ7Dg6dzvlwgcqFj3HYPYkQSEzmlZjMu5TEEdOsWN80xMlR1mJczVKRvvfRIVTrRosgjanyNoVzwYV1oqOJE6lA+FJml/L4MzdahCnh9mCfl20q6KzjUHfLnS1bJDXoV9w7hsBJ+svcC7EYN5753ACbb1fxnq/aIxmYGdrG4NtK5zekJxbMMPlEahaorFZdHUs56UCHHsAt4VZWgMqNR1vMaowVsJvh4HB/EQ5ydT3DQdLnN6Tjsodxkw7BahheWaLtbeEuCYtdsHNSeoWGWEyxECTdEbCd9ppW3uvggX73cG+cTz1dcvbvYPfePCLU9I+YM5aVnhq9zaZJ2LteSDqtdDesv7TQ8C2JnkRPf1tf4Ku5nD2UlUWcoDtEerySZU7QV8gNuy7BZam22MftKDQJgjaP/XKlYBeW7KNxmUMETbQhX6WvgTl8P2UpdtvmvskqtkPUdz+0NdWf5zIqdO8NfI2Xz//6mrml10Z9l8AydwmEH2OiS7v9kSSQq2XCX92kTNOGflUgtC7VWfUdV8RciQUxp7IlMLrBzgyWtC2ws04URLxY4r0UV/g430Pb63qJV4Het3Rj/XTFqgfHW3DHQGwZ7Tjg7TWWUV7BbBwGWAjpCwHjDqLeyHsSo0wDug2Aiy17+k9q+k/OdJ8adgAsYCzL8qfpx4dtNrouGGGLMBrIhE0rsWFpxwnJ2VDD1WG/O8YZhV015GJk3tXwcmzFHCfWqstuTqilyrtPmofR03J+T7tW2bgptWvPyNuuvPq6nbLvT8ugOKGMtFwkH6vp6pC4248+ZlvhlZGIVPtslpchxowFVxbYSI/Y3dFfUsrjFq7ojNrdtJdbAdnuJbzl88A6tlEaBy0AGLRruwUcGeGDIUZa0J1UUBIgA4YMABnkkD5rCBDJgQGX0jYyzkB8BvEB4st5ippzTmqLAw0C1zjSCG4RYHpbvTY6W2K8dAofX0i/FnIAm0vwZxvxcQ8Zt6+0uqQevrDKEuxtYJyyi5LidZmFil5R8VaheN6y1axMMZEtJ7zocGmJz1fkom629GWxGW+nZBWCKLLOAqWoXmYJfJVtlXhZM4scdqNvWWlBNlqOQ0CB38xnDQFYuCsXHTn0SD4crl4bs0LYCFhfcuXaQ7lYV9UFWXlBbqwDO7CawZ9Nj0BWxt1NTVfRm+IKkQNugrQR/fBrwENBLyWhrgSJGuWYgzBtBitebHXR6Jg7cfqGnDTCKuLDJ3dGqKoREi1Hho8n17XwsI6S4Yasb6/FahEI+l4v4kyhExUtSQp9FHu6i+ZrRxGyr8yEr16n9X9n0YP+Jo/rg+OTbLSChOUfHoTOrHuJ1tV40+4j0DNvW4grzyWuTc2Yn4SXyvGO+4JgGCJRyAuBvB3yNyTiaIgbcuFaPi9yZp1PsYwRU8HPQ0MnLiI0Y4Dx/C/g+9xPc3miwDIMHCvrvrnSfazf+HfpQ+nFTdKL58yoFy9o7EX7IL1ov1q9aE3Ti7wylKI3HZQirSl606LeFBmC6U1L96aVbRZFz62m7E0pCyGkaDKiydxIzBybO2ultVC6x2KkLZZPHmLmvHp4loBnaWo8L/gTwjMAnsHUeJ6t8RTWWEAUEtkM+44scWmeuCJLPDtPPCdLvCBPvFAn0rJPTDr8YCA78QmLXXrQmrHH4g1Ptglw2apSNgEeLdEInw0FBc68y9TfxJ74oYFlRZZ3BVb9FbIloAxvEl8QXfywThN1U8ReHxgoQle72NVy9QSxhA/7rEymrnbRQdTVZ7AOOt8UuLwpgDH4KdLVLlSJvJgE3fVykR9Usc8AVy2tk3xLUTNtjZgf0FmS+YFvuGqANfUM4QcQ/mFnjtyQjRpewAm0Sw0yPqAzegU+4IvPHVjjw1PItiRgPkBQGR/gflyKfhRuWqXRMd27VLq3qj2NsXwSm9OObr59e5vN+wMPDPI2PikM2UJRxDl30TFkqXjYiWWbxVBljCHOrSUpgPdd0u8+Wt2JELNEj7SMunIvn/cCXXqAsuDpi8RFxcUYFqYJn5H2QRMyLFxmmTtU7Biqpsxsf+FOWWD1IAXiPMCIYIsY+9L8QiFsc8qlLJ2GVFnEbRLdLLErae51F7MxS5ybJcZiNcKpCyWVTv1E5WzqwnMAP3irukxdROzTRlhyMRVg6dUK/DkjG6mz2c5Fmsc3chQfDa9TPK/QnE1rp9jV2LKraWi81diFltHY/o1Me0pcnSeenSVuzhMv0IlgesQgnrSNTo/3eezehY4niW1E70WphDONVMJplko4cqgTnRUvce4y9kV1kjmnSl3u4a3LyupyxSPa99A6tbqgXrGgmzceZugn/YBWFCs3swglejfepeHh6Y2XvravxV22sACYCKi19M2COiTzALItcZgL0MHZcAHZoVkSx47Ja4rirLw4++DFUSvD52zb6W0kGq2QEK8rlhCkEmdp0APgqBl1JEr0G1r8BGnHlq3dWk5lGTGgHpOGM4c4gVmnvTGxKzCca6aRorlNxx6Fk3dVDjsNMjSF/PN5H0icjLUWMauSGoRK8FcGEdeIm+lfDAXxsPosgQxEXdkogWRfCj5kfy7LKGFItaGd1sg9mcu41eIyToSQngghXfDuAKLHEqtAC4cv5IB/AMxvsZqgLCVpZ6nQKblvBxzPbHOqauwX9smX+VBcJITsizDCCY3mVFBhh3V5X8EKzBcBqOLZI+jZgiwmlFz70KPGfrGk8lImALUbjp581ixJCW1s+GkEoLZYn5WZb+KPDB4EoE4uAIVqCmPiy5wEDw10U0SL6mbt0+oCNMAx05/5j22mP3tJyZmGbaZ/Id1UVRSAmlp1dVrDgeUG60z4YaWcXnWFamYMziTGoF1UOIYzGN5gCW9wLxWvFvlEtpCT5g44A+TWa2uuuKIxM9nGDGZBuLz5mM1pbwrphH9Be5Wtr3iH6DYziaxsNauybdbOSdn8w22n2qx2bEZQL1HwxnY++sC6AT+IU50bPrnGOaLX3e5cAQmSw+7UJExvRRQsQU9STle8uS53M4K4ss54NjLMKNMR5L4MOEItSxV28BUR2vCMqbhK257Lacew17riwppRl2froIn6Cu5VFu4lbCvUGltW0ASZsjzIlOVBpiwPMmV5kCnLg0xZHhi1MLskRbRSiKsqmoDBfHCbZ+Cr2NaF2AZ7+EFso7q2uc1/KtgWu/xC7DX+O/tVSioQhRtHmyY6KBX1uNWNkaSWcZRQ5hEDNjMJpx8bXG+ldQNcW/TDSEPEZyIyrxGjLCMDX/MpwQEdA9QyEfqAjf1TCB6DG/Fw7RREy2iDnC5ZZVniRwfySbd+XOwhonJ6IoRCbHfFVHbkJmLkb4jL8P1+3Bp7x/9ze0/69fLFafWtSY3qcbalIx+XFfK4C7tpmZsXUinHrYFFSuuFfBw77vboabajPm5N3+5PDp74RtryHGd+9CUL5OWKywmDIF6AzLSB59wPfmcJfb89ut8mgAX8+4rLb4/uUGGdmiIGYnCsF1DfDCvgzYe/ILoPywi8zVBfcLfB496wgiX4Yushpb3OBe1IvpdjgyO2t2dihVOHmljhnllymM5KnQQtpyEukL33dVpw0azT+sEY1wz+dtmavuGbiaHz44L2+gJo3wlFrFATqjv6/+j3DtW9vuYya2ykY7GDzKa6wlSHYX+wrgazZBOIGZuwApE7ry6R20UiD3lP2K/So84/KPYeDmaEvRIjXZG35pPUh5N+WSbEZRebDmtbEFElS3E6Ora5eK7Pa11icm8sUOzMAsXOLFDszALFzixQbG3hgnapTPvAFg+454qVTG2PcwelxMxZedGhJmwoTk4h9j6Phta++nODPBspoT5PvifeIme3/bmwfqwmPBtb/ehaJcRBKy/TS12TbBziE4tnk1CcYNqd1l/zpF4ArEvqinheXL0zdq/43IeSeWfLFbyJs/46Nu+W9T+2Enbz7iZU1ljhmvFSHxoOwGML2Y9tzH5sQ/YYp2iNMBRX7eLWUiaNIGpIv118XFbikI1g2mX2PU6k7ac/fgbStI+AVe0hEJjG/EoB8of5pHncTJqZTCTFr3u5jJ+rois65pNUSfqB/Vb0CS/tXY/FS5Lef7NNSVCUydQX/PlTKe2NbqBBih5zpMysvj2CA14HiBLGwQVKiwiN5c4e9AHtr8Ba8SRe7GmrYJai8JGOt3S7NaZ1T7j4qNL4FzCHj1r+uEsVUaO/gwqRoD+vJLQ9IHepJBDP0fQNNNOhBtWUoe09YX0S2r6UDijdbuqzp6iHblLRWhAVn3497jROokHUHtpokczfIMvhuwYoEqZPXFa67yGAsXcFJY5bVfrUKkoy7e3HTop7nRryBVvTfI3yHuBsKstGXZJnmMNs+gBs8/bLuqcOsNMoNq236pmpdu6gifFOVAvuC6lQgopnLq3haFZc0pTZvj4QC1jaHYshXoBl1l9bA+XuZwohjNNfPmFFG/9/9t4Fzo6juhPu6se9fW/fO9OjhzWeEaRvx4QB2xuFKJIs2Fit2HpYfgUc4s16NyQ4u+QO7FqK4ccmMjPBgjiggCAOEURhx49g2cggwAmCKHgSnERZlKyWNUQkJlEWkxVflG8V25vPWRz8nf//VHX3nRlJ4wewyQ8Sa+p2V1VXnTp16lTVOf+T++lXaCOwBLd8SQkQqGNcy/3VH6xlXnqOzL/5uXrVy86R++vDtczLz5H5ji/Wqz7vHLmP/l4994pz5P77NbXMowtmtnb+p+2wnYT2IQvzo4bslMdDQWiCCDpInG51419TbnzLLn76ThSVxeUYZtmjbANaggy8IuWJ6aNkmUeJB7RS/SMmqPpcLLOSxnU0l83b4wVPGshfVg60xyeEwZ/4/G9+uMFzh14DTCF9fFXedq0ooW07WWc272C+bgorK7q2KF1DshU3esnr0GmZT2rK2unLcr/L0wbY4F0O88ws2oHpgQby4eygiMtiGuXCJBWkc24mJwkDU3twipbnTbgznOZtNSl5mujo5TDcbodhtx2G20ofe/kM3WCc24XWXIR9B5XmPhVieLR+gwoTvxbZnrSHvSkaj6t27GFkInljDhekbnWPbCeNjtCmjv4+ZVTCbuInJsg4E/KZTQkQR9SvjuNSc2QJ++rLwq/PcWYhOC55o+QT4Z30gEkvl3YuSbfK345Gk9jo9V5QdsW2F6+GQl8dvmqnDKJhyE4JPOmnv+iLZupbgW8s73NvWmX8I9VMekQGYydekH0XbNqa/k53Sn7avCQQ5n7Bq3mZ8oJPX0LlHoeXsvYuTbdm3fQ/los0Orszp8R/c+7LHn0MHo3chMIvpDckLNYuc4u2EcP+Y5haUrXs30mXR9miytuboaR/ekaygouF5YdV8Rkq/G2KNdOBy0hD/uk0kjnVoDzMy9pFPMlqau/aQtL5z0bnPUNTwjlNidmE8z+QnY8ZssuMJyzwU3/8x8Vdl8DJsVmcJH2WKX10gX69EuZ1gDrY+c2ky7xi3xo63DwelV0YIMheEOQ4CbJ8DsNA4QRRblDaXH8m2vyTJMiNZyLIDAhyhAQ5r84hVyoVtvxz5ZDrzkSQ/SDIOtBjhdBjxNHjFUqPdSJKwp1lyeifIWUuGxQhB4HTQCEMu7ft1KUnQJ5RJc+AwL1IqTQBget/MwXuVby8+FYRh0st1qpDnC2+Ve/SX4sg9R3hVg8Sbl5eS5nLaYCo5qNUAclVXNJ8wNe7h1uqh1eWD6+vHt5QPnxd9fD15cM3Vw936sMX9L6rtkTZnaFBtrlw9Nbjj9qHgs83OEwNGsDkjcrlzy8B6q3vIz/odC+qK/Tys8qXKiz0IaIONt+bj1qvaHNw+4MtoFOnJ2RDk35e6kjQgRb+4ZYKHs9lCCzunU4rfi28EuJ+huMYWEmms4YnW3SboH7RLA7gIlMNb6X+o74y7xEfZpFtOBKpn3De0jBYdC66SpX3LIv0BFn03GSr3vhLq9aM8SU3kw3RauFU1LAQxVnDnrwwxZMXpnjywhRPXpjiyQtTPHlhKtYQHOvU9HQdrprjzda9MlojOjT9KiPaJ65xB7YZj1d4zB8xcAscX6GlXaD3NytlUrYw1u7k11NXKnYtgh9VK+P55zZcOFk/qsjlJW3XvT5P0ok8UgPpSN2doyzp8yMwPd0cTmm76AGFY6ObJnl0lF4oMzbKokQbinOjxA5BybxH/cwdbvyNwgkOHDa44d7jzgJSbnhk+44Rr2+WuI/BUUlOT9dEBzXWoa52yTJyySaiLmgnA5zVSP8a9mS4wS73Wa3WoJ6z9J9vKIgpzlGf9+NDdfoiTYhf3Ng8/7bhLOeeUXnuab6d555RUj+WxPqwbjM+jxPA82UM7LZs1tcxO+TTSeOFP8xbbBxntJTIEFc5zg2z818LiRorHmwri2z7mWL7mWL7mWL7mWL7mWL7mWL7m+D/ft5a4x/mubuwBB0LiQjW4gzZ1k10pviYJLhXbGWdrePy006SjjB9x2ZtUhRYZ8OuHtDC4K8kdVSSOipJHZWkjkpSRyWpozqpW2ihu/HmHIvx5/kYSlRsBXvXCrRYhycjeZQhD/lZItRPaF/bSxKVUxADvNmhmc+neytrQ4hYQef7b+HRb7byrsUczOIENx/7qcs5zByQXsfitiWb8lSYoMXOo8ax16p0ujBIc5HJ+DOejWXjN45fouS7MBjVF6P64rXyYlRfZJco1S8MVl2iY3IhCCb/zFwSTKgH8zeV3TpqBaCzVXkIzyCLcfnfEjbrODbrCpt1bdZYUiWbjdjRel7ZLL38m8lkWQJvhWY2wn7082RBRoOdPg30E4Db9+hDvW4yG7skoNVqezOXeC6TPuGgKfSZT/hk8VdFNIcqvYW/fSIzgSlvVJKhlb64FKJte8eySVYpEIFClLKxTcl444BkbJes2i5ZtV2yartk1XbJqu2SVduLkYyOWq2aZGzRDbtVl4wBYoXZrBEpaVm2U0rGdknRdknRdknRdknRdknRdknR9rdeMnaUHxYlGds0P9XV3Fl9OMuPlqMmTrtmTG62UQsSVocpxSS/YWCziCiOa3AN9wY+s9+bkK/rHQf43d2XJWpJAoOSlt4UJryc0mU24emjBo5DTAOran29UrVO+/agOiA6Ehr7GV9DyLhAe9Zhjes6Y9Q1lB3KGHXwMKbNLL2toipGXVODAgRvpFFvQO9Kv4xRp5xSxqgLqliYfqY/Ocs1Hl2GE0sAvIgeZ/1GjW1TLQ5mMBAHExPdd+Z3oQ0pmlTu3CGGEI57jVocTAUmcWY6zLJwHEyPGCNlHMzKCf/DxkRTakgE56lXKRSOddmqeeJLV6+BEytt+IYtjijEAnzfIxiZ+bgglnYC6tsQdZqgHOEkBsBTt6GGNOIm/YFr3zB9mXoFeLSjYPGrFUanB2Me1D8JAmwaj4qpJPlDmliqj4PGAgo0dBv9ja+hv72CgBVHPmv6sn17k4X2yfhm6PV9db3zLFoXzcdLtC5aPALfXzY06ZXQzTu6p4zYBQWT8GxkIMJ7lW97jCOsR868a+tnFlpLGjYpvHzlcB0496FAjcll7Bt1kC7fuiYSDS8sosyMY0Qbxb3/3SsOftHjb+znGtbAmVZfsh58wfpw1zLmTVsDLhvVES+AttCcVBQSXzmDgEVxzujM0Va14bXhkdnFkGApzNQj3HiAOR9w+Q+2KUwJUY3gBkiNKqJbJFa+5va87e76K8iRScKmGr22JxoA40i2VEGDwhZfM6cUU0JQoyl/vedrKljvBZoK13uhpqL1XqSpxnqvoanmeq+pxu6Gl520jYQ3Nb+IzkkR+XRfcQZhg2g9j2kEC6M3btUHRvHtbT+aMrDrOhHaTT9OZo4zemJL6N+9uYAl5HZYCswuFGxHp9FFXiyZf9ebHHpxBFDtoAVs7Wa8wP8a8p8ftrH76jZZucbC9q4olt2s1/29BoAMAUIW7qD7dzH9jUu3a96GtodlxncURjJoEJhFZPaRORrMHOBZoM9ipIGrCLNuByxYZcZJwdM//5S3HYcFFvSvVcQ378iba/xHaFupCKzIOO3vwC73EZmNjMPA/029jVe/4Bb6sPDOT/0bHglVIvm0VeL/vFvzti07K79+TDHnsvqzt+26lnGMj4f99BvGIQLFEB+8cAQxgu0WL6+Tt3SO0uaL1l5YMyrpoSbatUw9UjZ+Ey/r/ljlEa01ZVXeBlPxecW1nLBf4mw9s7ifNTADIhwZPRIKCXdut6Sh3tXUAF9N4otB62T/Zn9wrX89ytBSvgVb9ajY/ccG0SGmNAQJjhaxGLkW0pA8wj0hCoauweu91yQOjiOCDn48zNtrgy1QbxVelZgOON/iwKeHgjFm9K/LzVqf2BsqqGRVTffTNayhumIT0wR2W3TxHWcgKaMWEsRH2kTjCqUjuefpH9/OjtfasU7bQYsgOjymrh2fCnqxut8eD4t/IXR3Iz9tbt3ovZJHbdrllX0bK36N87OwseXVOm9lP32fTchKc4LB5htEipTxHjEY0jmh5okW0Fwg1Dz7AX8L1wODUO6RQiJxhK/H2Gaavo7X4pkB6GdOuHDwZIYQu8UtV3PopN/35KTfleNXdjkbQkQbkZm9xl/FWLtodiP9NLwmwM2Ft5lI4hNcOqBINNJ7AsTbdgxi3aA0Oo51gToREg5zeGHIycdadTlI5ygrB7EaS2tLOSjdn+01zyAHfcjBxjOVgw0nB/1KDio/EdA1UgFEeIFKtEVWtPmlHIwgBxeV2UfmaDBzsINIq3wWI02I/5ocrDJjsqgcxAmxysGYcrBh5aD5HRWEyAlBGJHpzQcUQyBW6deQjxjrEuWknxSsiT/H7k+Wwu/97mBj6ifo9Gzlnq9yr1nKvWhQ7sUqmghz1VC515gn92qZKO3nyr2IpWKVe415cq9Judeo5F6zD0tZOx+d3FNK6MG/GnU3nNwLa3IvtB5CMeReWMk9Gm7JpwJ1irdyT4E4KPcQf64u92yIaKmPs7UFuRdmLZV7gYYVVy+mD/pjzCYzp7VWg0up1IOTo5N6en2BSSFST0SIrtaQcSqIS6nXsFQkB0xnO9jtWivWaf2Qeg26qNlWTPvc1DSszIuy1nyZZ3FH+rp8KPiI6hClzAudzENCNG2VeZHFtaXMs7aUruRkrk6GKvP4tJJ5IUZyda39IvNCCOYLdHSv1wN7pq3Ma1HmBVbmUR+LVOaJhM9a9+SknpV5GLWazAu12RFkXlDJvEBlnq97O8o8v2QOflpkXlzKvNDKPP8MMu+vvyPznleZd9j6pQ7KvN3nlnmHddqg3dNPNa9RSffOH/K86al//R0p91yl3G9/68TcqrOIud/+jpz7Nsm5h0I/VDmXMUiznlVcrib0Xj5waoFjHzDCgahnI2d7FpzfyP68F1nfM3rI2qD25cGKscG27XRBpl4tkyLChtsWzFllMXoEQ1cvX+eWhXkFhD3tHXwLYa9usDjV0HbjYOAldKcLFNU+0CO2IKMLvnCrotpbq/ZAgeoDRbWXIplxqPZehWpvFNW+zAxUe1Oi2nsXMe67otrzFjK2SHyoIveK4W04KKPEIqTUYiluvq0UJyQ/z0qkr0e/D2vBHwUaG13Pu7QjkZ7gRdarFtx61bg6C/ME7+RRe4Kn+PGonS+HeCxfneD5c07wIoUui9MrcwXcLLut578KyTsgl32LYUW/ESua/T7C/HqZV6/AfnbqjLXgFKlexZOK7q8okKG6SDaKZl825TyOo0wB6Jd0+PRRK5Phdjq8jb6j4ZukXBPnUD5lZ7NPNPWqSWGNEuHCHdN4hDjv5llW2TgNMm1xylrOc0aGYTIT4vU8e+SVDR56fTaovIYNbVZ48aTHsFtowmuKf5QvpTfl8eWWTwGumQKxu0Muz0J71gi4r6A2elohToZxX2JIoqBclpmXfR0sV2WhsoG+Ih5EZB2PuMy250dZINBnavULPPc3dUPFGv9HD85cgGUDmyL6JnvRHOxFZDUFHMEO9iLUXkR9jXBSniGHtR6E83oQ1UcLt1Vh2YOon7Vqo9Vw1z2MuBEXPtk3tgCZtQBtqL/4P/91buC2e7b4y6d8SPVjHmOBzw/cZs/kN5cmWQCTK74uimpgfE9B2jvAlNzSxWGwx2W149MVdTQf1S2sl40yTjTNlDxCJBKWIOwy5p+n8aBHiRdvw4uGiAdt8+NSxTAEStwbLcEf1emZkF7wXdIQB6NIvcQfXeuni4g2hmk3NOwijlUBx3CG1Eg/Sb5YZn/en3kMCJv+Fh8vnfv4N/l4yZzH2Wj6AF+MzH/xCb5Iq8N6PZDzxnM99PfG+72O8E0Hrvak8BLcfkGGN/WsHhgZW3khF+CR46KmyvCmPatvKgcTyVAkuV5iNWtn9TIHFGWTCrk9c/esDAKNeqE7qfco7zMGvk+ctVdQndR75Um9V57Ue+VJvVee1HvlSb1XntR75Um9N3hSTzRgtCSWXnStRZae1AfqVpg1cBjX4Q1mOxmgkleKfMQAX5hKzKSkMljrphbIq5mcYCf5PHsoy8A3accxzmfSj3Nku3OG/MH0Y3zemc8KB/kicZz3Uf5sE0h7Lg90vsMD5+aB0FKy8NKnDWgZa0wVqahdMEZhG7YWl4m0aENaBKs0leK6vY3lfx0ci6Gnw0gQ4IxthL/xRkKaAGg4FXix//oLy/DmGLmPBDimtgwRKuKgKl4aGCYPz6p41TKp4pWcSfFyWSK9TajrX2HJluw6o6vzbZvWGwvI+Cj3CI2joctl1RPKrd+8Hct2m7s4cpzeFjYy3Tp1QNOBgOmMdrmKKwVVGhs3XQ+n2q9nmPSwWlM0smnPKbrzg6aHjNGSsAm12PCONAZ7R1twPVos7d4uj8oWI0A2N2llY/+S3ZS/8hGEoMDHzt/WjYAiqqjaxmKoatt4s9RQ9NRa26Rlf+lt4t8fryoa01bLdt9qC11tSlMXQnd9Nevdem2X7lZZ8ZripgxL5LioBMjawaJHLZH4dmwR6BDc3KcxUPqqnCoPjBLyFj3xgYrwMqJjRwgXFAOrL9rUReRd1TR0QjQSiKMG/K5cJFcl6zHPXtDJGxvZdfBN+f0wdwPSdJGnQDbJTgUFow8gV1qqagyY9WQqalEGlcoe6xkrBld8RzH4jmLwHcXgO4rBPzPFwPhTKhIbsvs6aMpDNXVqAqKmxq3gfvrq0MZM6GsUL5+b50mVunV5OnpP1riyG6p8bFCeEpRvSZcxzBuQp4HI00YlT5cAvMDmhzxlgDXZdw/T67VHYKqw19FlqSnfW1IM83Y+G87SrIN+D9OqiEepKolpIRev8X4OJ2IvN2/OAi5/N631b9I4jT8ro7IEvkFBlgJrL8iGEf48kLePCN8OAQUwYABR6fENzl05mb9BxZKNyCW0otX12tOde/XEFe+6Y0tFQWSgslgdgD1afzeU9AwNgkuGUNWrYlZW92ksbIhKVjz+3eXAenrWUDam8iqnpUbW2DSeh/hMVLxCNsy+CWT7jSv2v/Dg/ptosIIQGOa0OEEmE/nI1Fsmv5kNcbbpmeQnvWVawpN3XyeIQwhtg5FrxrJWEW7r8jD6hnx50e4r1oI0cupnAI8OMHjJs3N7bymdf+I+WumOmuDIY3bkI3g4Un/oL/QwmPswYhjE7Dygv5+XLS0jSW3Pl1pfo8HPWcD6FaD3Cpd/OQ43hrKwp+FTbsh5DNMqTpvt2bId671Wqf117ZEUDpW7xXC/+OBvmjIU5i98dvDsWuZSY1PXqwcslDEpssmhIT8s/+cxTGAAT+RQvf2Sa7pRQc8pBFXH6Xl8VSEtyMKbi3f428eBqiHtKd45yk+nekswUFyLmvlFjRQNXNH5X13lvkrBtq3bKIuK9jNInHcDhGSAONpdVY3D4rt5RSEfkOpReWOg9LQpiyqZVEoTqq9YNadoc+6oFCFL4ylOSdsL1WP1qdo+odDZFrkNgt782A0CMAAbtQ1Co7ZBCOdsEKhl0+L8Bsbk0Mucr1PdrFoCWJshiMopOHuIKJgxg/EuG+pwZz+B3U/odj9ETWlBEHd108VjLiCQ9OKsa3dCEMIwwc7PdwYb51OpjQDlAtTeUgzHa/xp2L+GNPa+SVPx2uDNWawKb6gnYVF2PsMaWRHdZbHu5Xxj6wxR59xqErUoAsDN6zQ5LcnXaPLNa4PrNXXT2uBaax61z5flu0W4wpKAg1u6kFs6mIy68fpuSbZfn9EUiWMWP4MxU4GL7fAAu/Zc7vWgPndyPaU+N0aguG7nWtjO4YM0V23VyB6XZG9N8DQUZAe1YPhGssclvWJL9paSPa7IHp+B7LZOkH1eNTWyj1ZkT0uyxyXZRfCB5LEiRMYlyXVjGs7dmPYY3oLbwIbdzyl9dbHVeCD1jWlsN6bxAhtTLhUwDe2+oOTruNdVu7N9RtGu9xptKwKHb7FA3l216jsi7PKnxISfNgyx5fq8rurzqrLPE2WfM4YbRbc95TTGnaKQj2QuqhwPk85KiHK3OW25zag8dtPYc0fy7UHecWv+vxDalLHLK1mv22CKRLsWr8KSCfaWz5DTRboDTJZBgyyTIwaZMHlUMrl3lkGI5jC5PQ6nYGKEL2gSFEx0TSh8K5qwmJaiqTVXNJ1LOAEFKR+aK5yGMKqtAeHUmiecYsfRNeHUOqNwaunBAoVT84zCqVnV+TwJpy9COA1Z4RSeVTi13LhNSHJAOLWegXBqqXB68Rzh9D3zhdP3KPUpnIZK4TQ0IJyGamRvlWQfAolaJDuoBV2XZG+V9GpZsg8p2VsV2VtnILutE2SfV80zE05C8pYKp1ZJ8jMIp+85t3BqDQinlhVOrTMJJ+qxYcnXKpxaz0I4Rc9UOH0RwmnICqdwrnCKEpzMVsJpyAmn2lVaJ3N6ZiWnPGUjTv+46PbLMzVZb/rFQZpHFX+QlduJuOj03UGnr5pXzrsxaI7ezcU3bjU0VIqh8X7yT11dVIXDuZpfY2APpLJIdtCxtqmB+PEWmSlG+jdVE5VdRr9Kh7V0VGqrSdGoPW/W0kNl8+XHcNlf3Gxzs+IIg33LsGJM69kFvWZkn17b3nqT1otmwh3meWqScb3uFq/TvSNM9xsI3RAoQHu5a7wyS6v92FkP+5bwsG/OWd9wol+73egHdhn9wjT+NumZVn7qNlPFpwoUYkstQvYYmoQ0J4nIhVG42PtP1ibEq9mEMD+MQjw1CgHCa3CR92ZspA3NQgIwNs4Kq0a5RsxpnHyh59XbhnNS98VrBlq4iC+m9ov7FiTD/VmHB1X56FoAOw0SxB5J8HP7LEFkBgcbvWz0FuQ/C0H2zWne3sHm/Zlvmze8qOZp4xZHmMV+eQgH7dLtvUZbcPfZCXT+WQgEgmSyTrzy/p232AqNVgiSzSjJzj8Xye6e0/CZwYZ/yTW8+4wa/kxIt9gWdNiHNyMoROtskwzrg/L4s+fpaHYuR+NIEiYvu3Q4HkKF+B5XE837MZrPyldvwZb+e72f66FM8L3mzS83t/GqZb33S/ibvNx7p9FQHT+73nuH0Vxvebl5F5MKNZpq8iZMkpi0x/dEKnyGRl9ZIz34vH4vq31vtP49N6YPyndH8d2PRrwvep6+u8p993wNHX3+3O9mOBgEUFP6EZocgwlgZwdJNjgapWhuIM7OUOgDEhT2zn6imbJm+us+b4hwvE043qexk9PR7dj6mpaTpFXTVAW0LKJhp/cH9FkHHzYKjx/aPC78OFBhmNSPOVNZsYD5fmtWPPqnaldjG0NNxtuc3q9u8JclGgG4OEgFAus/BtgvvqwWOMpm5SWa/lJraVra6KmjLN9dHsb+qtpRV8X9UpHwBy70oDRfoGdrwwnPpd03aopK8aHq/JIqVLlk21/H3K+9VRv/tu0PAeG/doTGaCrqsHq7ybvWb62v4S7kyZANytbPfRs14+pugybM1gabJ57Y72iwH9+a/4kmPZ63sphn3qq7tPSWAQ6DUz/Tz1qIU8vLvrY6SXcQq5ie1KJKtLIOAzrzxhSXk4H70dxMj206nopeeUUPjmLyK1LLupD27FkDO4AGwTOvwc2wmjTaOuCx3M2GgIDtXQnT5YyAuTQNU2PEPJhvjqhG44Ga1VmH2TXYM/QQg8K70oZu6TXpQ2mp0tdI3iH94YLtsPUMeJnDwNDNso+0aLad0t7Yi18bQlYKX8V4FrYoLoi0cO7CQiPcLuNOlL9j/I6r351JFgrgM1z/bKifDScJbaHn4199meOv4uTLqjsQTjL/5rQYU1tKkdaNSaKRBhs2er20Cj3l2AlMdHVYOkU3sqG+C/UXZ92Kr7Z0jYZ5aKgVZbwAOzW2hFPKRwGAsBwftZWPOkrpROOzbBE+TTSsONkGaKDuR7SZMMlgYlilX6HkBndGGuA1zNpCCil+hca8Eua6pkvsstj6GIRq5SEDy1jsZCfc8fBQFBb4EU5XknK0wh8QUqfAJcAD+XHLznzkB+XZyMZLf6GHmDHYY9CHGmAS9FYe2ej9KyoGUzgSoKEn+wOrRfnoxqleKh9LM/9+qUurGblHGiPlXsV+aIgPIMHiruyKcceMoW9R1wr/ao1zqYG6yukhHCDFdU4EiZsU4ZkmRWid7XG9xUkBAXvw+4o7XkgG+tj3lbxUs2YcRo+HHVeQU0rOCJWDBrnDL7kjUFPbiM7vGGzhjrZyR9uNqnJHuy9sYXS4dB7yzJpTvVkJFbBKKW7CzQx2w1kYZO0rEBdReS6k7a4kOgAXy4IrFZ5VPraVs3R4wF5zd2B078LY6iQd0SMa6rRgXUoUW6DwFCQiVFLEtL3FLSIgGvye0UjskUZaD18t340Acxtch2uJjeaVXUZkCV+toymZrtOgW1lwy/WM7Uib9I3m7bcQHv/Huo2E1TLce8QA77lml5/Mblunsp1Lmemv92wXhFayxycpwTg2Un0TFzKXXAnSqrl1ZOuQadwEkqGrQ4rDIrphhTbuxt72/SWP7KqSM6vL5K+uri7sOIftx1Db95W23SHtbonSZ7+9ikbsJvlL3wRTCkYYilChD5K5nLGdYw12/ebtnLx0t0jXZEH/OSb0PhuTP1IhbuhFIN9Us6Dal3qlObNxuFaSj4GrUCaiiwZ92vFHiw5iMNhbe1tL+cF4K8NnVdldypQpv0wFZSosU1GZapSppruur6EueElThUHymdBvT0Vv0TNcDa5Yj31nXGzdehAo3k7rebrGdmIgodZ6r6PBWgC5Qh8qoOExOk9k4V0Ym/uq8Vz+3d5r+4wavJW3U77GDn/LdpphYe1EVKDgZigziCAQePlw1r0lH8KZWTMbYrBqPE1vwRN4NMU7EOOKAB1ePiJZ0uvuF1E//GoRuEO35F3ka2Rd+vqwPpaUDJJtKBuRbITY94FQ0cF5ccdh+7TDenMY/73eHH9ec+rf7nUBkMTwS4D0uUrmQPdajjOwOIKb6faEokNSoUZOpKG5f40qPq/Oo/txKmfBWSAFYlUDY6EjwKqksOxkbZV+rpPFvbnWrQ8KIWI0DNnCsYcBQ2OjZ7XK4fVwQ9xRp65aZNuQR1nJd3m4/8289LFANobTD9DbyytmHhBFBRfBjwd+9Jb2lMZja6r7SRvHjgCErRCDSJ1EVyygSaVfUJfBrK0sFEPDuArAKsI4w2pv1lZolSGctjs2spDrwkYpfuGIX6gyRELnnT5i7YDUQqadua/D3846HLkQzyIdvQ6YqQsO6DAIFW5LX30/BMB19++0JTtSstsvawuVDUNma0i2HgKSwDsAR8jAWEmVmYbDskEtjLMZbBCQndpzGlT/OsHvZbh7hoaKRKDaOg7QUnCWf60qPB4VK8ajv5nMpJ+RCgPl2ODVubmfgQQMAVfAbEbFEHWmzE//p7pv6cCpN9MmMlkTvNW0XMftJmMVZk3ryJL86YuCoalwZ0gfXc/G3do49cNhCeC+V9ZlRDiKFEh1l69xtSaLiTeIhNSIbrIwpicNoZhGsuCe3rxIXMVJTFJaaaLNMLGKVaNTFIc0SxDCAIqi7NkAVzFOqaQBTTu8nWIu+vgR2ned/lmlwFhb5M+GSYWnx3Pv+/T1hMJSXqS5EP5ilDo+/Mm+n8jIRbgDQPoeYoB+b16PTcfApZ313rqFg3zKqvzdZWSD0TIiymX65xUaj+BaBd3PQ6JpsfccbUYbSfOQEX351Tx2Sk9ydZdn9WEeM7AzjEdkJV+XTuQxgxPz+udhH7Ym6FPsgp/ixhR0xQg9SrHeppbXXoOILJQSEQ26TiIYyev0LPmUz4X9lI/N0LK+WshNKOLYRF/lTYwTEcBF459ViMMXQ+1Yh6DNNOp7BfwpY+BJh7xrDtcgwiuDPeD1BoAnM3UZXihSOQKjurHDUG1QQOqQ1lNVBWxuT2QKYo6A//LQRnaLwIN5W0/5wiIDPHRvjBCIxIZP0Kix7PxbsmD6nt4QRgEGFHazsYhhwMNei+7bC45GS0djgoPR0sFoucFogYSt+mDEHIx4UYMxd6r12pjhbRFH8t/Wcfru4T5xNf4RohHqmJcfDgCxZcMJA+83lsa2ZTPeQ/EoY24C0bWhHDBKFU0YgLQHLMbJ3GFQxiUGZVxiUMYlBmVcYlDGJQZlXGJQlupSC9e4qyEtMaotkOAiDTjIEYZcUCBJjljnrIMk245ooWFqLzBMHR2mdn2Y2jpMbR2mDprkZe36MIVqTshh6pxrzsBohq0dgb3isrzD89aNT3/y/S95dU51617ZRm3e3luWmdX+HrNR+jzeQzjNI6KdLgGquYxKgKHtME67crYsaxMyPMO8I81W7szHhJGDt0rqFuHwZQhntXH65Je7OxltbfoeHHQ1/yP2n0Vc3ISX8vit9wiHTh/77fGt47KwTX/5z81/ABruMmki3/dwUx3JDnDj9P6jX/c2Tp/++OcxkaJN473zCeHa46Wq2lkBKFAmmuba6Nlob+PypoH8SXZ+NrazNyar5oVB2jsPUq9rZfGP6AS/1klfXCoWrfRqK3dVzjjhCyFA4QuE9vXeDRY3yEmFi5RnFhC+rGtoM9dseXgt/rkOsoox8G6ArMLjPFT8xJCIAE5sz2vjMILCJs93KytLSLYuj2yTcBsq/LMS/4yWoUAjGyRY5wM6Afy3i70L8u4O632iJfIWtbIuZ7IN79ndOi77P8bujBi7M9RNZQR1RrUhGV2rF40zdPj52fh1ugNu8SjvcnVMWOgbGuYT3wjKbwSL/gZPjt0AMEy5VNdFoNDWOCJ7lXRkBj1XMAqjYX0s7FjZkVt4bf/28Japd80k8zntBdr6Ua1VGuy4bPQczb3gjM3912Vzr9XmTvRtfcIsWDPkD0J+N/WGmArKtY5CstrPJwxDH8z5klXmyLih9relW05lDR7tdLEHr6JGLMe56PY85QKzvBa6oVVxig3dsNxtsq323XVRI+rFkD9rAWNsftSIcIGoEeECUSNaPJMd/HSkpwP1hstYcqu7/APZco7yeBUtorc8UdjY64DvS6P60YpcK88iV5Jvo+AbmFV0ZFolEqgNBaJLeO7WHL1dZjiMJMY+3VsBSox9Ol8h27CWwokS8fnCwLvxcujkIvVHe6OobHUu83QbQQtGL6FZyfJLaFNy3iUMl3DeJTS1Oe8SmtnIH9jYrLhElI02caBFR2AgOzKDU2cUoViYgni7CZCKhwnMNiyLW+KQipNwqgyM0GJIBYtUPAwY5NeD/mxSqE0KtUmhNinUJoXapFCbFAKUGO3sqo4UQjkKB3WksNSRwlJHCksdKSx1pLDUkcJSR0LFXXUquwiKRjsbdqEgVsuPFApTW4c/IjqsCpVEWw6j8MTinOMZfqT5cnl63msJnG6fjeqzG4mZrmNFMvRa9suhMmtXmTW2oglRwFuMF9HHRkkZN7Z8G52Bb5ctXkqV4jpbkv5o9c3013z7CXm+zu4KVCItVt4MPxN5M1yTN/63Ut6o9+ZFWdLXrapInEAeAnXYvSilz+rxeqyaCSt+LirFz/zpvbBM4i2Ae9ixCjjo0MlGrlIHISwSq3SRmMCxDG/iGrh2aWMMOhQcKjYYYuUaxlOPFL8eQTkqCPNGCWHeKCHMGyWEeaOEMG+UEOaNEsK8MQ/C/CJFMOf2RaEiWi7oh8oHBkBJGNsh2VoLgFKXC0FdLgxpcJD8eQz20sJG3IaQoZQYRDCPSgTzqEQwj0oE86hEMI9KBPOoRDAPndcYTlUTh2C+yrECo2JPUHnisEa4P+K+YsIN8ZyR22oxzTd4Ja55thTqcUuJTH8D85LguMnHNp54OLgOt2aI9fwqAjGZCf9ukzeuIbjq2CuhmEUOCR2b0ZDHO2fGQUd8VuxSNQaV3nYNIp87s3tPoUshFAK6p91rozN5qsx76L8N0HkC1/zJ2wML2R0qDk6sF16mBJI3JXy8KeHjTQkfb0r4eGOJj/uwVbgBGdaQqorYMlmsegNuPSAhvnjfF16Ks80vyF9cH9xMARoSIz0o7vvCfcuFFUMgQTPrNXSaWeVYEcj6q17PmzrbxqBsY1C2MSjbGJRtDMo2Sg3Ebs5sDKMAxtw4Dl+lJ8xaq1/W6pe1+mWtflmrix7tK5KKHlb6ih6Ehvd1qGw4ax4nA38H8PMVdPpKxrgupJZ7Mh9AXlkg/49EOpbsGfLjKbPzu71iQx8ufrhyLE57aaFek4y4jdtUswP77st3FGZ77o+vkYdqYyHfOmkU/y3kLPy0rtmyokjR10gdJ3APeJE3yXilL0z/kuZia70X8Q96XqzuE20o7edNrnCAZVLTI19WOI13queBREfvrPcuslcmLkqTPQ8MLvIutVaOogTxCWphfV6x2wfa0jrFsiYojIWz0fP8SC8dsKK1cH1BTHBrdZ/U1yO9UvartSRxzjxt51ZmI9HViyE/kHi8BZYxb4FlzFtgGYtoBDH4aV+RwbPkAxnNhZYNrlI0dda1zaOWSLyhjqUXojB5vK9hfCtO3wVGBweRgwPjycAQ2MtzA+PZgdHwAXqbTmvZcw3M4oakWSkYiY5O65mOjoVTav7fMzrXlqNz7aJHhzOLsM7pXb4dEZgj18h4gZIx08stIL6VZIzmkbG5IBnNmcnYdOj3ZyKjeW5kNIsg40UDZNxQknFDSUYDihmlmJJo2bMmUfxMSRT/X0eiLSWJtixAIlkiLww26LZMUlsuIaRlg3GdrteU7FZeQyrmRmfxqPTT5BZXjaiLhJIJiajRmcwUpdxeH3j2+cqB56iByxrqxbIWaEQQ33J/nPN6zQqG5/Fjcfmxjv1YsWESrgaFtzm5wJip4tgnQwtieMRXOD3RqLiOyiJm+slq49czHTOaadrPGfDhinH9fcSvF5pTsys0WPNli6554PeJgS/d6JudZsoapl0YeLm5bPynf/SHDq34zB/+JI4ngUJSsvlrcZt52Rfe9fMv+y/v+a3NNyKU+MD3/VojfanfV8ejpDfYnZNmbp/ndvjkgh1OPZsFRYsAtJVSQz2jIWliFtZg4zxazaQ3xR2/JHrfXz32n7Z2zRhMYJL3GBNofq5LanKU9tj2rBcUnZ4n9Zl6PdKKwXqKMUbdqGXx536KFnFBPQtMyeJt2ozMdkuY6pYk2R8E/s5gyrwl834nj4mgGhVPKgjw/v3vezrYKnpTuOGy0Ysvu+7rva9ditIfwFXiv8qb43dc1rxh2fd/z4d+/hVSrflAJk9mejAI+q431SUUFXP+3515eGceXPbaH8H/vnDpnYyAItP5ToDC6v9d9jOves2ff+6Nj3/mzss+9N61M7e9ZdmlM3deZn7qsceOX/ZDSE4Er/6j/A1vQHLtFxu7nrjxfUj+7DfSkZGR3710hlW6uh7+2QdvvumlX//BOy/72j2nXzZ8aAmyvi79pbH/73tWIbn81hPfOPLnP4rkL+/6D1/7yve8FclvFJ8Y//QdH5bkjIgx/jeTBzMwyoI5GGXqzZOfJNwHkDYMhF04c9cdM2CZmTtyoZBQYXwYQJMuqPDpBzNzFwwRf0dRHG59MGf4l+qnjMwdd4Ak5k5X5tIZ+Xo4AxyO5KGWVDY0RbdIaUVnOCm6MPgkiCov+M0VXa/we7IboUSiuiv/FFFvKUGBlR2yKF+q/HKC/AKYhBWMLWLfN/IVA+8RI8q9a+ajZCTZMKL6BP+YbEU2mt6Sj2dLaY3GmEAgwJbx/PytvBamoWuLfxDwKDsf9kMjQF+BsdsYUDyk37AMGQPCUJkKbIprhk35ZSrQVIHbXEM97Gac6b886TVFeizHM43sEGzvnSeN8yd7K+XheD87H3GUei/Agik5TaGWnPZY6ObeUh9mnSNUBbMRLGCIwNbhSecIDI1HeoC6RGjRbCT3hOLnWaHPlTVlECYtlXezzmvzJeOSR1KZJDoWHCs7TxfglUVgjcToUkbH1t4SVNAHUgWwILxsWbYka7DixkDFjXFggLhHw/xGYzx3b5ZVmYcH33gLl5FmakZY87p72aGsc4flyH+14a7eMP1nsqWuFT8FJhjKugN5si5uYHtpQjgwktKvSDlUJ6Wpk9IMktIQDbPsxNCNICWNqEDKoWdPSu5+Byo2IhEHSTmEwE/uzQApB954C5VpoJnI2EAzz0pKvyTl0L8DKbtz8ggph4SU9VuHbtbMluOz2XD58CfDnTJLWJVUkA3fVQuEju2uBQsZwZ8RKU36voDN8nEzt1zqlImMQ7ksSd8tCw8jctJKCBN+DD+btNWoz2cg2uIGIRtne2AFhXDJtdzZ+Zz2wgtZmtwa+82dzTlSbOkCUmwppZgsscO1pUwWsuH6WqdR7qTupWrliF5SyNj1XNSo3XCiGKZyvS5fUphN+TKcdTDalwiokcxsIyz8CKCTU8egcXn/OiRvpRguW6eESstgxB33mtkwdW1E7nSFcqHCHXmzFji90l7yofE7ZMdeDuE0zubGoRKnGI8UHLsNZhcAFoaC7+HDCVsF8GB/J87jP5k37+K5ZfOumbx92frdq/7Hu/7T5Z+5Udbn8qPl4x98Ldd7GZy7Sm66E5wgEndI6QwyDKPX5IVhuF+bKkhrfTvb6tCGYYjNTaRFwxlgjWoZasWENoGljVfRJr4jj6tmxjXaLCFtmhVtYpncM0oJNXMV2izJYIRirW2XgDap9S5vgjDJXZJfCHwXXdWt8PayEeASDUuhTxLnq5l17qw+M695A60KxmcyW2vnztqbLBi/g99hg6ycGtnC0VKv+EY2hHplzKTwogeqOW+gpBrp4VBiJ0WtH/YLz6I/+Zn6k0tL46qlWVw1b3upxHgezPbjhdtJbyYZHEcWjJzd741wasK8ByfHya/6vsytnYNCoLmAEGiqENCRrwmBeFBBaagaEnNWx1vHFbJtUCJATMnMxWwysN01iuwkafgk1Bh5gIw16bqBJ8v6ohqq0w/OVMTAPZnteUMtgbMW6KOBt5wZsDqXRGqGRwNcSLCmcEByoOm3hTAlUJdVZsMrZBHxd7pfIrYCKKJjveCy7+f/PnFp7VKajpz9T96V9JZLmSHk7PSGbM7PDuYcsjlhhxOl00bWsED+9B2UnXwqlcHg2QJ8OrwyxCgDJMJTx2TS1qXo2jKRs/kI7XLTl+vyMbdEhjedeW9wbKSxBVIIpC6X5wC3lkWnL//EfSn4KwZ7ZlSi74dwaQkzUCF69ZKHJwlgxXFjilRYpmLZJo5spriXXxZIZAROaBiBoYJhO7FYpJMK9DUCoK8QbEIj/gB982lzfCEvBzpghjsuYdQO31oYL8mWcAnOugMv07O9HN1xhmoD2KfBqjwE54SqRIzgvMdcbj0LXKN4KjK3tEFpDDI8Ca0rG4Q+eRMqTXphDz48w6I4QEupOCMiZzgCt4TAiP6ZvlgG4sVZ2DVKZex6LfmA9aIHVTDWjizR2gQ+zdUtg1MnyFplA+FXKFQ7w9sQ6ltIm2vpvNWg5COEb7AVGxw0+ixqqqKQwSnZK9PJ3ws1suIcnkNniqdfLG/9ZD6vLpi9hHwIk4nqgGJ26s7Mu+ydXx5b/u+y983OpF8r93DyJrm7pXF1EZ32AvUq6fQJvZjmQrvjb+N1WKfwbxZqY+rwe5drYI0YD2QCSi7rsYGMfZVq9qGX9nBehp98DscLNLL4lbvhOgQRsPe/aajXnqcNieTtA3dE6S/7uV+cuoNXggy6mgk/7v9vjIgtnIEgLD4AWVYJR3T66gcS2hbyYN36+/Cgx0Zw8WxUCt7M0FWMgCCeRnoxFoaZkV4YZVCasmdfVDxxDF9l8sh/YfI2Se4+Uj6d0eTufVam4xn68KBfPHFHVOzTLkbF3XdG6dGwOPTrEZ6n00Fx4E6p80G+NsUj+vrEByM8x+vbZiL8BL5/B/6a+NGH3Qze7as9lx99nN1sGZPeSP1r/C3zC+aWMNOz3g7p90IZBmrQAfGFCo9Kc/4MEMH77tI7WqwOmXD6E5/31YeUAxLqgPgYkEAjYcwfEB6tVAMyJ/ROfUAGQu8QsFKacrIaECQfOcrkCUke+KPy6awmH3UDgmfogwzI3XchXuLDd0Xp58Jit5BaHqRP+8UjdyGmyO67+fyB/xzhAZ/LEMjPilDyg0Mg707Uh+BEfQikYgzBvIJzh2CBDIM1yEQp4AiYFDNvA25SOkGSFne/Ldo4C83jHQiaSt+a4iP3m5d43lpvnaQ/ZNOrJP1Bm56Q9PtsGjgK77JpIDC/3aah8X/jgKahLv29TaN+GeMNxUFpxq+Qug/YSZ2+I2L6EOc83kgK+ZA8LMnPMPusy/6PIdOD2Q9r9od/QQj/diZ3S/KlkBkX41DX9MrNE2Zpceuj79rzs5tCnEp6xUyQFmOFJ5RKku+tjk3lzV6TFrnNrf5C8Hvf86BMHz+9UMokDaHPQSkHYfXjY7wnkkd/90d88xePeUnkFV9ek6zwGBCJ6ppX3H5/kL7H4MB73FP49ljUlJ+mEGE06PSv/ST5q9hvTZmdxQH2tBfIfNpjOKEgwdb4b8Z5qelzpT3pydCnvw3vzikNP/3mnKG0+KpHGfY6mQHWBVBlVbGMex6NUoNJ4lBKcdM7jSNaMznkGy/g0f5tJqe7u6EXVPhG7vHd4zgpGLZcCCMtYrvSEwyWO+WA1lxV8yrR4gEVGBSEG2i6tWd7yUBVxYSI6PQzRiF/0GRhhnRrermIPYZeMs602uDpWGa0qI9bl9fon+vhMrfew59OOgFxXazqp79mgC0bpi+VMviHW2v8e5tB+5DaZxTF0FOsXVHFFRXWWKxKZsnoZy3JvYCcrdWSNxlivrUZlg9ZQ1TnmyJZZIvw5qzZRyeAYESQB0nnLeJiVhAXAGtqFk1GGr4wiGUD1P4J2qO3tnWN4n6eiLZfbr0BiqaGxm0BUKlZRIqiFWzNWrbsT7qszAPo0RYh8hqiCf0Pn3dToi0p38AEoDju9dPLe17VR2P7GA30MWAfQ/QREW2y8Cac7aKPAe6r/wUmxkvHFOlOI/C4TcMW65fqASxB90nF1MJkjQc+2eAnm0pWWOWVZG0oWeMaWZuDZI0VA4tkjRdL1oaStVEja3MuWRuDZI2z5jyyjj7/ZKVlOG5PQVbvCrUemUQwKaqW+rmXjiV2XgqX+yJJYCa07oziZzixFzrumfV8nvCXjUit7/VNc+osZc3F3g/0Gi4gooHs/wE8XM39Ild7D0Ynnar69KuIH4GCeXsHYgEyf57s4BbawwQHfEdMR8H4Gm4TJMca1dnVY2+0cIEf4sLfrkbzPNHnE2jYPmn0cgN/nIFP64ezBj6tH86aO3BMAl/rVharK75RuH0R3exQie4iHUruMSU1Q1BEASsUawOplQXjHxgoPysT2lHZgGySXd2yffxON2tnlqEkzqRxTEeHZFGahulwCF8Zo0oURfkElaMJ/eIFPNZTcui3oQKsQcdhkJokt/nPoaHhhrO206+3Ew3Uyi8qiExtSV/jLB+zrcZZHAe6BQcwasNIXK7jaFtfdb/qd9lrU/ba2F7P52P91uhIW8bzIyFvLr9VtLCU0N0kw0higoChifcRZER2CNT2vHlNRbCoopXl1TXqxi/EulyJtpp4DEE5C0QdxgQsZwKAwt0DTAQKjbjPcKkiUnDYhDvWIAHZpfnbOVWeBa07vKGAQVkpEj7s6/yNiK6P+QurSYfd4kkDbbBIrThxM9u3Hbd1oL2wVd3q1gx0RMMHaG6tYdNZyomQ9srqjStQEx5qxLnwN5NkT2TCKbXXC+2O9/RHAllifpqyneqoIUmthR7JPbo9FA00crgQjx6A9pcH+BXoe6iC6U8DeLHBYYzUloKQQmprqXt3f4N6PRurQsL4z0IYmNCyom6UG6BsoAQ2xdTPbC+a2/E94L2LxDrhbcdCp3ETO5lGxEl/uqvRC4tHy04xuo+0AyN4hN+8XMP4Kp6RXlPAeNM2yGioICtsRRlFBT1k8sHZBQ8A/LFSCbZkmND4RMBwYsN4HkDrEzZLChhXqb5T2nj1zwb8Ukcxdnd9hM899RHHq/QrAV3SE21/4LIMtljtu5jZZntAh4uD16h92T7nrxDgnF6xGgBGjKC7TjezyxTIAC4PimOg1pkYsMIFh1w50vIUFTaDxk01mHA5OPSSp6McT3mziYxV0CMzVKOZKHmDCDC7Q4Bdzm6juv5tEAUagjUL1HTHyG48fWmO36oWQCSJqkHleK8ZVjNjVTlYh+i9W5WpiLe5Twg7ScMQHSmvWvXT/+m7uR86yaYvHg3c2q1ms5j74TX2iM9lcbMR8B+SL9S59jLvbF+qJHpFxeT8MxRJkg8a2deVhrbYENIuF7yFm3bOKv6tDbcnu4HauAY6roGOaxnyldFAjTWZ1XE1ZYusHaGKGEIcVqOZ8AqIw+glbc+1J3mTQexQN6a0ATU2AFeSh7OwgaFF59Uqcq7WGGAv8S0MiscIsTHXnMpKdGPtN2GscMer0E+ZGU+3JMmnEhPbw7ymiraLvESrJxoGLdMlhQ8Fnrr2VVgrqxK7IcIx3GmP53BZtPEbn/qb3//au37l/SmCUUcbf/4Pbv/0+/7u//nr/wj/u6ggIkyTe9ss0rgyTXRSVrpZNNFHTKMXvAlwrRHXDYVybWb+eC8sZilS5Pmst5X2+OFLvHVrvX+pqVVrRT9jamKtd7GmMtjWMjUKP0Sm0rXeck3FcABiylvrRXShzgnSuyO9D4pzD0YK04gJhE+DAvRxCHHIG/YlTxbkMgdlREXuNq6yVohhXw24PUZek4mUXjhWBbn19RQzI4jtZbm3xos1vSUP1ngd3tmsK55EM4I3FZduh9/Z1vEsBFa7wnIQ1xbTIBZK4SygtbWPgx+PF4axNBW5PQUd4bARCyxA0I9jn8DR94VjnCXsYwbMNh56S4XbOE3RBMnoOqjdi6+yIkRqwQkEc+AIflKr095IXm0dOiSZHpzahraVnZG+XSO8bhuEuEgyidBiwD3X2gW0IG23Zsla/SLOWvotWEyrEPNa+mdE/5yvf3r65yX65/v0zyX8g7bxdAxNfIl/5Vr/Bk1dt9a/MbGhbRGBx69H4HFjxm2Mp38StR2RVzes8U8z1jZg3IusuA33/Kdl13X9mGb4N2v8ExB1/g739kTt7b9d4x8jgGn59ljt7Y+v8WfxtlG+na29fc0a/yCFaPn2YO3tT6zxZ/C2Xb6dqb39yTX+HrztlG/31N6+lliZXjFUvp2uvb1xDSP37PH7ZX+96u1PMXZP8d7q7Yna239HkObi9urtsdrbf78GFsPF+6q3GybLl6/DWXFQ7K1erqpK/jS07aD4QPUyq172KbmLfdXLtHo5qeCFHyxf8g0GeUamQvoqmc6nYUd4DfedftG+ShcaywR+MbyD/jCpnlOFer+7Q1cJHmcbNc6nAaFllcxPL0QoaM+Gxj7oC+dJdel6B70pwqJJgWx9CK23D6GNfj8wrakSGMudFxpVOkTC2zM40TyFKQkSYS4PVXbh4oSqtK4MXGMCK3x1/w5RIGk/GAyrhO0assME1rBAc1zhezJ/ax4jVNgGBXtLqRFk8ropxHxZ3lKtxN/W9bGtI6y+b4F0roL+7SmeIOxzQnjjNxE6WQrSXCfWYFUGpQIF38sN3XN4pZgUWTqR45aInngaTbtcyBoM3451kkIWS5oaNlR+LquqcOUWWAyDYiO9ewhJSQAO52gREQuRFw2EhSdMVPo6hfWJNcgCAzTp8pgAoCpUnSFkBtRtEapSe0hu/4jS4vuNqdBCngXlyObcbZ0kINMxk7cAVIkwXzH+HAp2YuP1kuCEuZ50bqZXDL7GlXw7a/6YKoXImDVt1rX4URVRVJIYFbaut8cfLeYJ0n8vK7A2Bwpv+vYoj6q5sVU3xjo3vHlzo5EipJrnjDN3lI5UnnNcMT0bpt1P17h5oYe0AWk1zJkx6hUffhsB+2hvMcPmyLxIAplF7/P98C3RlAOGipW3ZVxmgc+6ZVz4sFtSVNSO4wbbULjTYYmTFQfbfply2yzruEj0TtOKnKbV4ZaREyhONypwhZ1O/FDWEvXKfcizQ+dx6GBn4GFsfPzB0PGNDp1QRMZh4LVFRtOhY8bMZeWwVEV6unlHhcH1Lmo78iTLXKeFT38+LN71fpM2kpZX7Nkfpa8ZS17kFfv2u8tVeVY8+Q0//VuDh/YiSR4i/7TkXz2WCFfuLvPLs+Idq9NtY3hms09r9tP3uOqfusdll2fF3Vq9PLT55SHyn7iH1Uv+U2V+eVZ87O891H+qzC8Pk0ciMywjXd6UIGSbzJpVvCxRtxMOcMgBDooD8J3NovTndI3c5FzZaNDQh8eyMN4s9jp0dfAu8l6sgpdwdBmGd6UeQAhjvhjuDv3Eyu6F6tEIBYBD/fr/xhAd18Ocr/5vL92UKxfB6ZKcFaQl2J3Cevil1PeVuxW6cBlejOdtnD8iOuEWRgClbbS0pseoqak2wxt3iGS6yRwGsNeLARk3m3dtSdFYtyjK2EoYFwCmLYDtUyKzCzCyMl9jWgYCmJdH99wEZ6l05ya7I85EkqYvwx56yNqPTSIM/dU20uPjwVV6SO5lQ5tx3j9ZTG3WM4kngmv0FoLxJYv/eb9JN43ZVva6bHWEU7RO1p1llCJpMG4L7ELsc3GjsPEt0TY6N9f1hFb1FLSxvjT76rnp65rs1xdqIofTtz/jxxwCJ/q3htcLqjNGcOLB3ZSOdHFB3w72RJ1lhKRYqz2CMa4V+np27bkA6sZ4ry3ieBbLGZ+ndJgRVaZc/zEbjpWz55FyNsizYlpnzyPlbDims2e2nD1Hy/zyrLjv/3D2HC3zz2r+g2X9h8v88qx45B9Z/+Ey/0HNP3OPm/wHyvzyrPj1Lqo/UGaXZ8m4V+w9GNkASp3J9DXwKDmoZi/XibRhBbDkuAeTdzhBbmfccbCUIpI6/aEgvabYLamnmNpnP4OSyIDDN/mDDz750doHV8sHT3y0/ODt7oN73Aclt/2gpJxYkdRfTZv02uKUpGaYut19UEoiAy0HPsoPHvvonB4evF8/eBBX0e6Lt7kvHiu/eKz8opQoTt6Jjh2W1G13IXVEUgeYelhSDzF14n4YFyB1SlKnmHpSUtN3I7XrI1FxO1N7JHWQqX2SOs7Ufkk9ydQDktr3G0jNSmqWqaOSOsbUcUmdYOpRSZ1m6vRH3HefktQ0h+A2af0epm4HlZiakdRBpg5IapapQ5I6xtRDkjqhA+moKVRB50FN+QNqztw/Z/imP6zUnJE8uxw1px01JbvjwftLhvlwVOxvy6DtlsR/RmKvJB75nCepuyX1Z59F6qCk3tWVxGFJfPVLeHREUp9E/oclcfcSSZyQxFtXgROQ6Xsl8aQk/gGJXQeiYjde7ZHEgVmU3yep9zyO1H5J7XmZJB6QxG9PSGL2gP3cUUm8+wckcVwSR34PuR+V1C8eReq0pL74/ZJ4ShJ/PS6J26Rb+1NwoCTexsp3OepNg/k/rMz/YWX+++bw4rF7lXpHjay+H7LUe/JDjvvvK7n/vlKM3CtcNINRekRSB5k6KamjTD0hqVNMTUuJ2+/gaErqEFN7JfUwU3dL6kmmDkrqNuVtSe1l6oik9jP1MMoydUJSR5g6JanjTEmLtafSYjSMdvD3sqdH7p3DJzP7tadDA0pO8rvS8Sdcx0+7jktp23FJOYEless/dIS+ByQxjaE6JIk/wZOHJPFFJI5J4veReEQSv4A8JyVxAk+ekMQ7Ma7TUuMnXgH2k8T/+zBGbK+kfukx8p+kPjcC9pPER4/g0WFJvX0lanC9lWaiNeit/KGBSfEQxbGmD34Rotyma8/v/e983tEDRdnYPuG7Hx3+AKDyRV7L/o35Mn1rqLYr/HGr/fFF45upAIEd3pJ577eGfyd+6LVY1Q4CIc+FrZ+eSnJZcn+0Uqh1axIogMQJAzzX8Do9jdZNxsWiBXeNqp9wKNM9SuC2MP6P6SbRbV7cC57gZ+H1tc2Lr5sX325eXJEeAeZRFSDOdfMSUgNOlnv2BJlubzhPTt8RJoeMaUzx7i3MWoSozQJi+vYI/6vBmPV0FFtS+K9aOCCh6wcMTEN5EOdPCqmP3x3hXPUzvmyiIwuXAOskSY5lNg1LJWwUi6lN4zgVdvt5G9zE7w8Fvs/QJr1YAaF6rSwG9jx8yeI+oahFeUje4Nw1e6a0uVP9puPsONhEe01UtsPU2oGLqbIdvo2gO49IOLZ+rz1KV2NL4MJLIX+q8GlJWWix9LTPyOdEJx0rGHJV2mVt9ya34XAd2XtBIEq2aH0BLDSImWJ3uH09KlFVS9H31e63YwAYkiQMLsF2BskvNk3XtmkEfQeYMrT+rEWjpF6LkUIw24HuQkqSdk3V1rUPgfON0YFniGb5M2LPvC0XxPqZ9AIovzFInILEqeWCpfAPmaTRdQKDrZihpbOu9ov5G/Dp899YTAvF4JAWMWIx0sOVhQpxgtUWeqjw30QM8qHiVnr1tLMO7objXhtHIcNSvNPHQ/y3dVw08gfD3pKsi+uYdraExpDSnE4x1QPcDdz1aBqNr24ez5dNShuGs2Wwvu0NI+ikVDYpOdpw8UqyJf0ejSh8ekB07N1rTL2Vpi0dOsrRb7IX6zGR1AewViMTIGfUOJ8hGWGoIcQf8hsezN2hq3c6apFhbZO7bHaW9PM2SBXTnwHwPZN5h8c/PeJGDWsQcmmekBoP6VaUZApSjCp4zdIV+oNBllr82ZLz4xrnA7G75Py0nIG2tSAeecmyimLXqlxolDhxPkc9GyE8B9j/nWFuOINjz+emHQyGwyyDS14fLqI+9xgMjd3RKIcuT1N3HwmDckTqY9KAXQthc/06W8eJom7Yix/5Lg2mfY1OZD+gLE6TRsS+YDcIN16rqOHmR+Tmh5d4rlGF2kFZABxpwGZcXo1YKTGc6CVOxCJfjkzHTsUhTsXYTsVYP8UTt9hecMbofnyGqbhh3lQcclNRiJ/qdGzpp4YvAEe3wDPDGIThcjrKZhCzrTeCeZe3JnttzAUtteQCe/Pq5XT5HaEFvrB+S7ZlAYL/dbC3axchYPaw/f6VQLbMnFBTPbJui8FBAuw921l3KwJAa7FueuEYDtq68kWCgEJqwVcOXeeEJCfDZULmH/wRenCBEEYfUSAbsrIGi1qilCYbt2ps3KqxcQvRjx0bDw+wMcBoOe28hnGEDpS6lpkzNTgoRTfWAiJLkRGN5UIElLKLjmVWUzJrp86pvhtux7Ayxk2Exgzr64NMu81k1l4KsTTE2mWUUN8kDK6ARkfUaKwNkf1S3rJrQwsRyDwG9KGtn6naFirfO1aPgwH+ixz/hY7/lNVr7A2nziElejrI3lSQftkqSNdbpwPvAk/RujoaxQnRKUu/CL3WVvLSsl1SW2mjx/q5Jo5b2AR9ZJLVetTib7pcgxngMtbjbaS3ZZxnoRrXB+skHY1h19Dhok9ns/HkpfUaeMPuwnqo402t3AabdbM6MfBLOO2cKk58lc3GIxvFBjdxeutVqyDnKXm9AK3iXAmTzJ7lG8e/9Ay/4QrM+waH5pfs0PzAIAWp+3h0EJ82WwdJGFZfGVKjAsNMs/OIKG20oa3mEbEY7KCe9T7tXVUjCpiy6iHVm/q3X8g+DZSode9sH3AUOccHvtIob/hr10SNgav+sLzqD+tX/eHcq/6gdrwquuohBq0O05+T9GG/v9lhiGNeAv+LsaBidzyW2eOxqxVf6SX+Spx38tLnAnugzh8rCSCSruLlKi92miT/xtux59ilnguA0PzdvWZChsZLJf2pvc77oFl8bK/zPmjizI7YnCECfSegndnO+YTjT1M07fEnmioPoozaNq971GuaCPEnMQUbk+WRZ/E3B6Ro+jKiPXJ1jRG0tnm1jWUiUooxd7OI9sCmiLcAxdRuWk9igJq2Npz/et7Gkyf/262f/JM/+dXvfWVVJ85RCxidi5i0dRr1veehaWPCf0C17TWSkCJLrqApvRrTpO/0y6i5ODNeCvGg0nwZrqh/60WyZfoNowPVkLnzdz4c3CHGGAghJhSen611jlMX6p8MlX1XeTK9jOeWWr0+iS2SUAjdHvPXm1W7ExBoi2ILEWgE1Pag5kV0rTPF/5hL5V97v6Oy9Uw2c6gcWyqrD0HW121PUDSLqfSXTe6lfxzAaiYpcdAUz6vsWNXZwS56OjFsqJLqaJY8pJWF9oW9xKvN4lJQDcxichLVGqMn+TqPtzEgtH9zcfAJv89ivKuoLbkIRCJbnQ1u6Q5gFl4rb+aXl1GNpMhw4urBCrZVtm+VWINVSBaoPAm14YwG5+qB1jIg82oC5UUeS/u2mD/4+cLbzI3asHXgwjUcnExy+T5vQ/d9KMJ/Vi21V+O4sZ5nAjWxkAnU9z/vJlBcQPbYBeTgCCzrTn3cuYBJ4vg9gUsefNp3yZOPI1kqAsXpj0d6+8ALnE7xpKviyU9E7npX8qzRgEL4Gp62S30BL9OvB8ULt4YbCEkKh8piWgq/MP0/QfHExyMNZscGSF7V0J9EovSitE+gJCKL7vbVAU5+SkXvpVurfNbqHMX0A1HxlXcZHN8/MViQ7XlPWNY39/XdB23/Zg6WJELSkgjJXbeVhMPPR+6O0hvSf1sccCX3VyX3VyWRvLsqiZ+P2pIPuJIHq5IHq5KHDyqli0P1fE9xoPhMuLQcSfm5/0Na7UMu+2xV7WxVLZInq4HHzxlb8qgreaQqeaQqieRT02VX+MaWfNiVPFaVPFaVRPLQU0wePxilP+Kq4HNbxaOuihNVFSeqKpDc89by4/g5a0ueciVPViVPViWRfPLWsiR+HrMln3AlT1clT1clkdxVlcTPI7bkU67kk1XJJ6uSSJ7aVZZkJlty18dsyemPlSWRtCVvk+RHjnsvN/r05FOD83L3xyJerBa322oc6+MzKHDCfmaf+8ze6jN7q8/MSD0fEd1jNlprX+z5x8Ev7XdfOrjAl1DgpP3SYfelQ9WXDlVfQvKhagLg5yk7AR5yJWerkrNVSSQPvaMsiZ9P2JJHXckjVckjVUkkd++uOFV+PmVLPuxKHqtKHqtKIvnEL5Ul8XPXb2jJR1zJ41XJ41VJJI/+SlkSPw/Yko+6kieqkieqkkieeF/F2vLzAVvylCt5sip5siqJ5MO/WrG2/DxsSz7hSp6uSp6uSiJ5ZG/F2hgkW/IpV/LJquSTVUkkD7+/Ym1025bc5RaJ6Wqdma7WGSRPfKAsiZ8P25K7XcnbqpK3VSWR3LWvLImfj9iSt7uSe6qSe6qSSO7/9bIkfj5qS+5zJfdWJfdWJWeQvXp6+N2Be3rq3WV9eLPb1nfA1be/qm9/Vd9BST5QPX3oPYF7+sR7quVB/rvd1nfY1Xeoqu9QVd+sLGj/O9Anv1xNr4/jRtROElfBkaqCI1UFx7QCPDl6ezVX5L+7Hce7Co5XFRyvKkDy6AcrjgdpHMe7kieqkieqkkg+9J8rjgcRtGSyz8kg2qoiuGpSNN90uaL52l2dpFRNop2Sns7AaI32MroxdIeahQ/rf6AdQO2SHfH2LNqxnnZZfPC0t93adUXF/3r66aeDbXSEiAm4Ufiw7IWFYbFzu0bTnOQff9M4/KxF40tPGSjPHYR8DummUvr6x2qLsZ3vi6cJ22itxKq39kHEOJHYtcO1NP2QsZq4s56wFmNJixsEXIB9wK98JriRReQ/XJnIpvOSYMZnUPhgv7/R7Fwrf9SmZFRtSoBOsK6fh9a+pAy65yu8q694wr4GmuGvVP8AX91DnArRxGHzx4cxUeTUM66+BbeabLkZn7sF38i9S/q/DHZc/7rccV1r92DXlE8us09+qHyyzj4ZL59YixPFjf9awwzhjOBEYE+1ikcCeHLJlmll3lhDy8lGBcbQTN9qem2ER1Rmg4WcvCVTWB5Jwg1z3yvz4SA0axcXA5BfRvWikcjb1KNReaKflX+P89+Hg35vKYzM5W9aGc97xUPSNl+tpazhT8OelGZpb0nm553ecHUjJjJA8jc0f8MaCmn+JdkwDoh7Q/XcB9Bzzd0cyI2QrUDx2h/001+FIg0hkvKcr9C1PvfTn+CxwdTZaQN23h9cMZ9Eg9l6Lc2Yd+FQVeZr2HwNl0/eNsu3Tfu2WX6shfgx5uZ+H0b71up3f3D2Qmf/oNTk95O8VXyVPhgtxHB/OW4pVbLEGgbQ18h/dv/Hl7nf9dIbaS+Hk1p10QrPwCiLfDxIM2yDsjZ5iVw04T/MQ6VjAYAgs6Z2Pn1fmFkXO/UMpd/fx03P1z4YhwpouMcs+9BMXzOWNfBPJ109hpKPBDVcGI0+uxAuDKYWj32Tp5pmBFNtJnYHyBGt/7IGIhHwWr/Zx4nXgabw36Ne8e7PK3Ol14MfyHR7wH236al6sSfs5x3hu2795TRf4nGb4Wcf9a6RbeWPAIUuY8hWfg/HKgeauMvmR9K7TI7bBERBAxWaWRddPMDjtyY9grqOEnbMY05jydlWADDN1Xa52hoAXjN1QIangr569K/UUz2e7ju5EotcyUc0muuBJhDfslZfxq1JSq4aaeLyo/CuUPu6A4wBfvGmHg0JhrVy+fdJ/vuESI0V2HMDLbO6wveKR+dJD71/z1Zky3rnifRIe0vr+Y+fKf952dLecsnf7C3R/DHzH52XP9b8yzPIJtD8SF2CAGtlQodylUqQRO/1jwT5UNayxoRHzj1h4/JtbN/GNRkwNE8GsMqzFDr7B60MGBIZAGyxIeWHIV509SDMhyoZkDh+IMaWIiNAAlyAgVKo+FCGuUOu6ougHXbDOOE/wel7OshS2GVqu2vT9wIeFlfTN9Hpm9Snb/n5GDOXczi10/epxU3fttbartdaMnlXX3brL8t5gonOiT+cQPB9xS60B41baA+Ysy60tz77hfZir77QrpSFFofftcX2AH249vPfe4wuth8ycxbbveaZLba7zTNZbIH7ctbF9imvn37gOS+2Oxe51u78Jiy1O5/Plfb/lmXWrbFknou8ewz+FSW8XGN3pu9faIm9bxFL7GossaurJfaAWeQSe9DoEns1oJ9KdyjrDi1Zb1rj30z/nmDa+j1P4IG8oPczz1F3qfczWz65Rn4myeN2xZ4NzrRiH/O5Yh/1z7hi0/fvuFHePWEGV2y+PGYWu2If9c+1YhPdbN6K/WyW66PmrMv1reVyfdSfu1xnc5bro/7c5fooJc8R/vuHRpfrPzBzlutD5pkt1wfMM1uuZ8w5l+t9piaDzrhc7zO15Xqfed6Xa1b5vC3Xz3WtbmUdt1AfURnwh5QBf2CqhXqfqQmB2kJ93yIW6tVjKgncQn3UfNMX6tmgtlB/IjbR4KSXOXUoUIe1wzAowAnQMoIcKGGAq5Yb8IMuTy261SwwbVrYPTf1/gf0O6yAoVlL76kjeTQMMGTeWxUHRVf8YBhuKFdNxQerFgyPETRw56SYlZ01bukN1ftOF23rfUIFwx7srCeyaKM61alMQC/2huk42RT9oVlu1NO/IYbYqtqjXuC4CK6hebMIJ3GdyxMO/yoLapFZlDd3qal9aQGRIWvkpuyNsVxrylU5ztzbKUV40FMhYQIcJwHbC7gAsPQiKAnijQzQhoupdOuqcGruQmvfnX39pT7qX4MbTTUGEak3uY2kCRmUEQ5CiAR1KkjO8AGRJzCxDHn/29RQnr7itViSZCH+hLxeJQw97iZb0hQdriCL++mXcPtanvNJNkLo4s7+M6E96xrovLHfJ5HmvJhD43Yd/qFd9oEYLnMInvtnJ1ceT9IkTqTGGagBFAESNczaOLVr0LRZ5OiXjGqAHZxxMUdTedm66iKSxiQQ3yCgCZib/m3gbKczAz8moQrP/Oyc4sFP+sN03+R1s79DUTgmZAIrw6Y1DFH6hZmFMEQTgkfyGlwNgdQsaJ7kSE6G0m0gYYQ1oXEyVKFxKrRCIy0XvWP8VxSFn6A8mOViS6mhXsdW4JV7Y9qKidR40BBe5VSogiOuBMeDRBBGZQ+x7hMhpAfRcIovvV/NZT6JWj7/ftrIBAeNShnm/jT/Bbikqe24F9K9Q2myUSfbh4ya7hW/GFwdDj7x3yiLjqw0amjQ8xUPy600JQGNVTuYCfEwL5YeEvL84spiy5rjwThQP6G2xQoiS+3I3biJWvS7YQmGxs/quA1+thMmiFTp+j5NNAoYHWR++vc+EHH8N/at/Zw1GqskGJYIatg6Cl5xMjwDq50KldVmF7eANVWgN+trVLPitNOhctofI/ZS6foKM8Pre7RmuaHSeEsAoGjSOUsTDcharphipP58ZfX8BfXnE9Xz3/fqL4551ZsT9PmsIwzdoFAbr3NxTIWcJ7w3KMLQ6wcAhl6fJMmfNxRga4+pTZzbjE6c3eZMq20sXNhyqGNnmDfcQptqtd1tdNI0B1ZbxGmFqrdLVL27z77aBmolNKy4EcNgj4HVdr03BHl1sTfEV89ktTWy2ppyt57+S5B2Ve2J9KNVW2xjDR9Bk0i76ErP4CMAVTtTTKnSQLaS8mcV4cC7yc+86LZ10YV5dd7+Zqy49eUWYZSCcrkNsNy2EQs3SE/5Z1xuA7fWxnattXNYKWGnstqe6zgSfkjHESGa7FqbNaBQoxrZjb49yBdaWs++sKY/CHDZ1WMlYIflPg9guekrFxIWu41blxYjK1oqK1p1WdGqZMUeux3+C7sq7fHrk8u3k8uvrUp72bqZwVVpz9lXpWp2vVtXpd3+vFXp3eWqdDvr3uVjlg2uSr9QX5WmdVUizHHxDv77955blbLFrEq3uzXoK55dlconz3JJevc5lqTbn8clSTrLxaiNxejrOIrIPFmL2gNrkZm/FoH2wl7+mdjLV/ba87ysRXt85a/hyutyvXfQT44Eym8zgfOaa0q6jw916mDW0oVd4KKVHEMacOY4/1vZJ+xsI70nLO9S1eUKGiEnUx7SuSMa8NBT3qaHHiv0rDNITDNk2a5GFLhwk2roMdmivPOsdX6DFCKdm0B0Vnu7jsPUZdt6fnly+t0MmalHvKPokJ++lSfZo9rqlb1m3Wkv4tEnffcYVZ77BG00FtnjIS+6Q3pbqOOMgxNINdXB8ujWE4U7TUVe9tU5AcuF7gI9ZrWpWGmVsX+EUXSHuwHh6d7pq8/fdG3InvD6JYXxPUba7tSHjHiAZyIE9v8LEyKkV2FkjdAHCBGSEKJ7pO8gcG9hBggRloQILSFCR4hACRE8a0IQO5nE+KthUbnU/l252gAy1YblsSf43GDHPJupX5XH1oWF0hlzro1XbZ1zfOrmnGI2PdP/k8b+rjc5dIlnVoQrohWN5ooVK9ry34qh4VT+Xbp8hf7PM34QrFhhVsQrVrSSFZ0V3RXJihUjS5adR9gdjE+zuIjIdiLZ7ws7o/o8HXh+b9hZgUlQw4jGCZhzghPyjRgv98qF0bPrpceDskU85jLq1bfg6UEQu3NeUmtH4ad3wFCfDjymhJsvXriNSKnhdvo30ddQ7SiKkIKwsxy1HHlMQ8OPSnrWpuFHcMimcWx48DEXPn6gsxRomWvTMtR2slbbiVptx2u1HVtMbUvP2cMVV8zpXjyne0sWQ6Rk2zlqGRmoJViglr/157Zk5Zw60vktMVqHZ5HJsO3WtniuHuCmaj2eq2f4nD16+dymhHOaMqRVuHAx8M8iHluHWrP1kv9huiZar2puqjo5N1WpQgVpQJgLhLvpmjLhrlvA8Q2FnE1fP2aFktZIDTSsrcJqjt3p2vYYjdxQzZ143tyZMxs8nS0ryvepfb+C7yc3VZ9k3y3EWmblbwyJlX7KVwOwWNUlC3tddPCHdmixog5D89CnMkxX6PhIvwCWk3Q66MPpx/ziovTCvDHA07LPkd5ZnqamffBxPfPCrNj/eDUrZh4/86xY5mpon5MBXjGXAbw5DNBCFccfr6bpsceraXqk1qDZxxcxTeOBBpkFGtSY26DROQ1qJtlCIPuxhzdnEa6j3yzhGsGib9mApN8f0qG46mloe4qbnJDo3VDvTw3JNn5ZojGpXkSXpzkcWFfQMOuKhiUU6gYIqJ1+RYh7QWlyUE7A6IwTEJqRzAc7BVfLFCxetJmB9oBU93pb6eVVczJjNWG7HZNF+SJ4NDfVucdL3lZhHGhbjVN1cqMLPPcK7syQC7zBAh/MjRDVwKvGwhGilqlqSpIGQmNFUK65gf6CUQXa3sE3tBmNZ9GMJlWQBW9LdVlvVA25N5yj+njfsoaMDjTkvvkN2e6deUIs+2ZMiOTfKCdktuc10dGoiY5GTXQ0aqJjrizMcDN0EFOHnsHJHqtLpjVdsrMIXfLWf2K6ZMdJko8M6pLl8/u/tbpkP/0YKK2KZKdaUO581orkxt/4s9+59/dOfe69/3CGNSN231zG3B//zXs/f//n3vvouXIvPWcLF6cInquTi1MEO5UieOezVQQHW/LsFcGz9mhximDnHIrgK3muuSglUFbCZDanN+IU5ioOMCoP9cJs51kmVcM3DKiGrzyratj5tqmGh5831XDvYz5P9sDX75HNj3cGni9nJRXFmcf0wBbLxT6twV+oVORKtc/JFItSDjf+xp6v3fv5P/qT9/73c03NeOCDZoEP/hNR/lyHKs2vlMsHrObXqTS/O59vza9Tan6vfKaaH2ddqfpdMEf1e4Ot9eyqX0dVv/S5qH63PifV78Dzpfrd+hxVv/ufL9Xv1ueo+n1kfkP+w7dM9cN0GIAQ/HCYbCi5glQYEBLxoJqHZqHVoul9rNL0vmhMEzUc05vN9Edw6pmFejFwELayVBCXCSl+ebV88415G5eZfnobAeh41g3uX+lwdqJaTFSo2i0FMnIvJvMErxTByt4AlPdFNM4MrY6ol/uAi2/LapXRngShHPDD6xcHo0nYcW0at+FUPq73PMeMMupdkYmnymN+TpmNL1ob7MWM3hv0C7Oj2PvzGl43/aRPK0avOO1Lu0/5QoQWLtcsYAQDR22YdFaO4dpgnZ7jr9IixQuJiLGXJh2r+ukb9U45hMsVbSOvXyAf4gm8MSEJcU/EOAaP+npThCgGenEspfI2sVDi4oVX096yUW9ZXBl7hjrgsY7cKZ+oGfqx9C5TNinTEhNz8+Ds4C6TAP0I1pq8umtkNDo+RWvNBm85q+s7PGdkKJjIIGIeWaJb78+TXr0/Db34OuVrvzYRt3ra9C30FqJjvzyPbTgj2IA26jagjcEPt2nZ4JEVwXwEg6BNoGO+dtZFWD54Wnjo32n5t5ke1MguuTN4G9yeNK3hmLKjUSvBm/HPTY7HfGfS1qjfOpWtO8eV54wa4sAJ8EYvSZ4OHZOe9mtMehIkOumTSb92uGLSBpl0Fkx6GEyK5ajhWIHTFp589D3MNKOwXKx16Qg71rwkWLVAhlVkyaYdwmsRTMpyJLj1J8isUiZv9SIukJYjo3ozmlo9WLGprHjY73Mt5jcqVrwEXDv4Epdf4MGm8iDNsCMdhMPkwYgiI66xgmiD0A6gAvXzRHmwU+vAEa/egUhZ8LCvHVEWlFe9Jm1RlQWbYEHFIEK1Fe9Hg99tYUBfAQFJDmwjY5vGnM6OUvgvUVsncqCIkAYYEAyUOzeKybzFvMqAfFpjQJouX4Z/NlQMaO3GozqPRXXz+jParnPi1RlwiVtNAFm68WRz+lPJXxg1LJ2uc+STnM5YDcCTf/pZr7BxKT5rrAl4qNAiMB3H7eQow2PIcpFFvDTFuLTUKMbSa77daWRtXDLMaoDXq9rfSH9LJ11tDanrMINriKUZMZpG6wvDtK8Lg/Rv0JQH/YMpD6we8ogLwx8O9q9RrYhf97DehUUX/MD+hQPLIW5AtX/znWVgkNnUJbOhahZVhQj9o5UUVUH2jzAskfYvLOOKa//0apAaRr1/e0zZv8WMn/lnPn7mn+r4/ZpfnuwxWBkU25UKyRRqYMlsftDQwKOpBRVntWFbuUCMepP+HRW/Qf2XkU38BfRfWIowHg/sQ8pPeZ77UPlw5QhCTER8mP5ieTXOn7/HoDIReoxN+2ZWuJJmAx1rOUAG6BAQtNMx/LUSYg7FXzOWMF5ZpqYcf2K1VdjzzdNWN0w+N2X11uegrGalshrCXFg1Vaipqwa11Pt0sOnVPqClLjhdF9ZSj6HBR80z0VLhvKPa55PmbFrq3HwLaakPmblaqpR6dloqHGwa7mNn0FIH8pxFSz1qFtZSj5pno6UetXuJeVqqWbSWKh9+tlrqx56Tlnrfc9VSpweVhKUDSsLsrn/5lk/VNNdjdTl8xKjt+MKa6wz6vM+cW3OdMU4xPWIW1FznZpivud5u5mqucKR6ZprrPqPK6RGzgOY68PIsmus+s7Dmus88C811n9GOzNNczaI1V/nus9NcP/acNNf7nqvmqhv7kim/bNWc016N/V5H9Mpza6lCuOdfyzn0nLQcuzCctgvDl0wZ0bns3TpE3Ty3inrhN0HDOfScNBzbN8aUNYscOfPPeeTMP82R+6aqpo9/y1XTh86imlpbTquamoVU09WDqul/ifRAerZuxX7IWrEf9uugAg8BKrYM41gDFbDjx+NrBQm3tCWNGkAf8YvTf+cX73jMt+5Zfu2slEzsigwaTrsbCjvQxJcqccDnuzCXIOB+6Wjhz3O0SC/NcKPnlyfWvj3I9hNY4j9gKmtnVKoXmDzx8YDMTHM2adIDZm4l6qlSOhtzuTt7HplF/tlzYIW8dBEdolvFwl0CjrGxztSH/ZxB16nypfUF0N0BNWn9k9JP4AHTd34AgbW31ymKKLqnTdcekznjPF/JkpnJ9NIztKbnREekLg+QhZ+ABT+tkUN7l1Sj9bzbXD3EQmCa1WMy0+HFjDMxTvT/GvlmyiDC53TdvfhJy81PgfkeMX125jT7dor/npTu/MMAqx87E6v//+y9DZQdV3UmWufUz63bdW93SWrZbbUyrltozbRjCfcLHruRBaiE9WPLYLLwDF7JrAeTySR+3XLGsmWGWXEsDThECQIc4kwEOIkCJvYkduIkTuIkJulghxhiQLyY4Hl4QAkkmOAQBTuDEwy8/X371Km63bcl+Y+fGcvLXXVPVZ2fffbZZ+999o8pTuTD41BrlE8LFga4cxJyNc5nHDTGjYWH/p8Em4PTHLI9SQA80SDbA+bEPjGFdch2IofUsDhJLYpsJx9iEa44SIp4DtmetIjO31PKkLf9P2tkS2Z0wk/HcE+bp0M8oxfM2EcZXBi5PTllzjmt3vw4f/lXLFHwSY+CerS/Kfi88WdRx4w7jPq84RhpM7ApOH27AnY9z0qL+YXqF83FjHodUqJfrybuLr+8orZMX5TfxRyjkKCQvDRMIRjGyPUaDPUUW22Uv354Lkch85OwCzCKx/K53hxwjq93x7pzHW8T50ccOj9aQytUBZhv/6Fl6Lz4nKDzPYrO+XxDLBWdOw6dE4fOjxIEjzTofM93EDrfU6Pzo6eMzh0MN1F0vkfR+WGi80PGh+doiCldao416PzoMnT+ZIPOR2t0/uQQOnccOvdKJdRL0bmn6JwS62JF53uAzr8jYmEw1CnwFYq5rWkbhbmPtjD3gRpznaL+ecx9HnOfY8z93WjOPheY+85YbUiPtjH3foe5D0C6uMUMEqIu2KC3Ur3JsAAouk/aPDSEwXc/Jxh813IMdij7AMd+/xJG9TsEZT2j+oBD2XRFlE2JsglRtWZUGcLA+igNNaZ2amb1gWUI+rEGQe+vEfRjLQR9aoh5FzTpIpg7qf++EajZmp5RqPlACzXvq1Hz6POo+TxqPjuo+QfRBeZ51HweNb8NUfOe56nm86j57Yma73ea7mcbNf/OqvK1aFkDQzMdNprppNqvWudaQZ04FXG+KnWW8VbjtIzbwFhodhElA6bjmvq6Z+s7p2HTwF/haIV2okH0Ek3wF4yI4VWrqFUle4KKaLSRDGvGVw6KkQwpxGG8fPWQNpymwOshmcBUYgo27h3E7Mh/T0p2MMoMlNxIeRZqpvawSDRwUqK6bpP9mdN1H2hTgidcOKQnzbOi637TSrru4jtH1/0k0fwJQw+C71hd95PmpLpu9Xc4BWX3l5XcCGBqd6NnTdndAvZI/aBZouyuDcqOemX3ygGIjg7pWD7Dv5+Wlr52auc6z2hDWzxVZXcruI5i2+J30P62WGPboZPrWIhtS7Tdixrk9TMM8vpp44MXLtF2Q8nypCpZBFwOB+st71PNlvdgveV96hlruxdPqu0+OkLbPRwpaRk2H2rthkfr3bAOePR7Tme4Anl20Ap9yx/j348uw+e7nhN8vvNUdYbLqOed30H4fGeLep4qPreVhncqPn+M+PzRes6WKQ2PNvjc0NQan/+swef7anz+s2esNLyzre5eHMHInZwQe9Rd9Ac1z6Pu86j7zUHdWt/9bKPu20/MFNficSMRf0VqeNu3VCIezZ9+p0nENZp2VkRT5U+XicQbg6+YpSIxRI7lXOq3TMv9FBDyvucR8nmEfM51288j5PMI+U1HyHuep5DPI+S3E0KeSI/9TBDy21GP/aZnS4/92DdHj33PaD32uSP02IieUQWDINwPaO4QrA5izWcbVNG++TJgSt/9e8uwmnp9EUoHrhkwcM78AKiUZdOtME0BLeb/MHIK5ewygwBnIZOy7Iy2VvsHnLMdfatm7rGGkkl2SYGM5WJ5xUzExD0GzWcjNkOH5bOdA6DPCj3eGJysx6bucVZ39P02+78Nq0EM+3l4GI3uq1QOCRCXDvqaFJ2mr0b7apq+ymBcX19NmoIpu4w5lhms2MpE5VeVAqUFNDaN2FXoz+7p0uZnr9NcDIzFfRkWoiZTlq4Qh2x2g1XnkUKTH+x34bn2I1cxw1NPYn1vZHDqyflK8IFpnfLfNohuTkcEBImeYnzmnDG9oU+XdwehhknfUNJ3YaYIGY8boV/oJUK67twlequyYKCRpIsQQIqqkESsMu0G5QmWnXRid9+1GqrvByI+l2H9JhJTWI1LHeLtHcRSAExGtnNaOl3tRzAgq3gbZD8kWIDdQEa6nUPlYcbF0wz1brVLgUNkF3wyDlzmmInY4ZabPak9yBjdK1IShx4NLPTuLwxaa9AEnJz86xarf0MR+PW6Xp5tDjZm/2D0fLhwe+Om4NxB6KYHLfeNVjdbYlibg3M1UBfyImnLszIljn5xIkKdCAIeU1RGrQkBMIC6fkKEnIyHVmgeyezsgIhVnTHPwONFuDmYykKeKkwyJPjU/Cv6xDxHhiaJ4gqAP7bSQUyCLATdM0Avz1W+YDarJ8Iwe7eQnD+J9C7A3fZgBTgBhgjJHejohsH3r1G4seq+UmO4Zz9+YkRfpPq/xvTT54cR70SYfvr/jpi+KVgJ080oTDenhOk/Hq6E6V9+xpgu87dmJKqv+TZH9Q95VP+QR/XlgHpKqP4vhIv++Th/a1gdPMLLoV+I858Iq4eP4JJFwbYgW1NPkGzl8nc+fzBaXvamMFvnOKOzwpTnj8axRlMBu53fEOb/Kvtza83+8Ho8nMKfjbtr7mNKOp1t24+0rYKeU3vLGFMmcNsBn8MdezU/xsaS7rzY3eBMOCo76cLtgyRzExzKXAWGyyPdq0xxj+yzvNQBN1b3Y5IF4MYGHazeznU4qn41kSb5N/2AFRDR7Kv6muYLdW3vW9Sd792u3ZtiXDn3NMX+zE6DCghkbpXtVXPxYXPVD/XVyfrV9TjI4vNJvUw56MjX8u2U9G2Q4nyLx1gBUmAE2TtDk+73mRIIm/07le/uDVJNhNFVr0lgwg5wGVg5s+y4XddKuYCOAEUoegmAZcXnLznpefZKh8ed5Sf3Sw7dO3q0Co/pSb1MKWZNCWFkagb3exLsLX5vzNTDcUpdA5u8d8gEUWp4NkSOBrd70cC6BHg4cQepnWak8Y06eqAEo8ZhoKP6b7XtjS6VBpKY1tkiLGdQJn0x/58qr9WUFES0TjKR/bFxMeMJemJ74I4pN2ZKgThBvUsZFlK5eswXaVVPszi1OxE2zTdNTmR+Ot20y4fM84SAozv7SqxOrVKKU9jk5OsJ7AmvP8kIFJJOoMv50kX1KIzi4BI4amtGIeicXvNLnUQo3WazHf5Msz83JnHIHW8IXCar6BJ9e0qp9/oyuRT8+Ai+S/YDlxUHrFfMoMvM34ZOQLKMFqQfDRbFCGMI3JE7wSe4Eu6SNeSwCHFH0mldI1iZFCNCJCsEqbL7SkqEU0Rb2WXZbJHMZyoB0HkVmJptbDY9SN2c92o/Ew9TKg6cFIxXsrdZD4HIQyC5pA5E21MY5GV8EY0yuDYZM5pLiENlnpsikaFG7QUTuQUTYdBLhhq7oXrQc7C6yupX3XjCGio63cuhQtLSc7Qv1qy1bvgziNMY6kRpvqXKOBksA/sg0BskBJ5bU0nWw27yk6GQLdlQPvyU0GMZs9JGD+PR49nEjevrVDNLsCJ8OlhhFCugoPmvK2LF1lPAim8RSlzvhqIb4QnwAPQHiJARUidChIeNIsJnnfN/UacLQpDowglWs1J1sHOBmwx2N6TSCrHzMKvQlDKDeLSFtVeWg8rXl2G0v7rvx2NFzP0I2CwFAoiIEBZ2uC98SCWc9jRJWVDHTo7AAMpngnl9N6sbVeMC2MhWhH2ExHaWBDWsnfELxB5cYPDozfCfZ6DHyKUfypKg+vV7g+w2xHFQ6T7UeCfQUqlMMakY30FEpqhILpouE0ZS6BQJhHxV9gkwNQ6TBmkVNCgjaT4jvGTwu6dLOvlDRdH6Khr+CssjqrVc9SCNbujUB9jsrJoxrTrz1Rv2loaKVXKKZ4X8k+Y/Hb5YmJj3TIWr95vrLKzB7owWyp4MuAf160Zw9+8vzxB2DLqPQV793MRgTWHeVZr3D84gsKsDYKT47F3yDLLMz09UhyewtveW+bS8nm8frMV2dca2A/rviW8Eb2rdfy/DuhQy+LyCEoRL5kf35v9Fuipf59fI0999WfXVb2DxF8KdTlfv/3hQvesGIWiIMGV+YLoK+VahysHqwGJwjXzulCy7pgdd9LUnABisgoaUeZB7yIXyDxHY9COluTBw/35AetMreoBnIugAjkVavbocr/4ykO1cNYruN+QwvDkYq2ABLki5a5otFUn1XQxftLGoa76zes/ANK9lA3Rodr46AulurApeOT1f9gcdkWA6YCPdV8er/1A0ffsh8qy/CiAHmYb67UCr0cFSvfuX+N5//MhHqve0x9Nn4Ahp4RLkbhS60BEOs6+RnfrIPQ/JuPouduy7XjlNThsJowWJ04vAcN8xWLctGJwRwgLyjG2gZhNvKpJ/LY2ve/N15RmY15u++HB4oHQ31//YS5nrWquQRZgVZ9xaJtuZx0cKU2bgg6yWFp0yuYjqXSnvaHa/LHPwpwwNEIpgUHDBQ2wONdNpJoJf1f0RbCATxXj1N8GOwWoZRhfyzwKz9HVlLF0ohYv0FZqZPaCcUbGTRff1g0nhxbv7qv3XDE6rkEE0VfCDgoJmni7vcMWcVpy+t5jcA9BVDE6SXNSvQ/d0VL5NNF9hgtlI/AC68zqAPka6HdHnZfCrp6WGCeZSRnyuDtiEYkKE+4Rjo1QacBbQc6lbvmbS3q70oBqTFpklr1uNSS+o56U6siudG9tTdi4llAgnwmXn9IJcPx/sQFL3nXsX0P2i7yqsugsCzCqqbrHAkF3TyB/fqQ7cH8xLA90rS/azOnrmgqA4mu5Kz7t7FuRh5xLmsUWjKEfyt26VUqgGuqGLq4vVRedHyomigy+2SwsCPZEmIFHKOxOq23eYuvXlTGrIydmJaFLF2KV95IyPwE7jVUGNC41/N3PfHXtZvVTqmydeJiOc3DHd/ARszOtLKZPbyYumB7LtFGsFtGtQ9SaEy59610A4h3dJvcWYdLvLOE+goFNHCvPv+wgV1XHziS2D3byUEHBZ7VN2tRwDl65ozvJMY0yBf6i//cbPyLe7OU1PZ2rHHA4Cd3YL1mAhJVKQvkJgHNVrt15LMlDMvhoNixw9xvwIgvOC+1llimwaau6LpehHL95bjk1jrxcZoLq+kPt4Htu1fFaO9YPqPzNMXLdPogPdQzkuqC/dlkUnyDtejV3FXiflGPotJYIW0u/uVduxXMaw0BIE2KqxTyTjuHrt3uqDAbitYDBW4ACkK+taBlAxge/F04xumMnyyEj2+JKARBbPSu9BqdOVwX0NfFf1dfyVSciuLldPC88gn6+WhTCPLo7brexBuVb7IBWPK7t2zcV9EmrSnWlyP8Uqksgzry2Ta2TXvqNYlf+TKZOFyuhKSBhCqZrFhrxKXqjsLnfuYhdkDcSaktgsVJuqs3UP0DcnQCabZi1gMI5tMPdlxu9tOaIhRUNb4ywOH7DpHYhk03Pal3pAPfobVOnVSCBcda8ejJEYpUVf+IzuIAURBiUfk7FoLMOiu5O27vjyFX2zZGBaDuTV87MxrJ0engl/jdnFK2MyeulaCkSVll6B2V/NTf6v7xBeP78GSCCkzYAkXcI2fCdK18IykDYts5Gqi5CCIPLSklwXkD1UG5R1EqLoYoxZttkQvbVYCRnpKxqXN3GR9dNdDqO+2wn6RQfd6rNbCk0/UGySmsv41EDFuZeuJro0gI+aadeDBF/0wQ4mXAbZLo5MCgZZve90L1WYvVKhIFOfVavnK8FnYsQEsSm/Btq1jJMhb8iI5rEt5v8lc1gUNxxSTA4prjmkNbIa1u0TFK+6e+epDgyZ/qUSqUEA7Ajq7NbBlIx1yv98z2DKjZzbImkqwAWCWkz90pF3qY6VtHTqlwZcSspgyWdL15OH84RcJrib5pW9ekC2a6/MDRmuji6rMSmcmB9aWZ16ZZHc6STovl5Sd/nOet+o/gOYqV8hRyD/3oA4hsfvtUguX/SvphKm6PzuL7VGaUguDGaix5NzpA7GPt0PHH/S4tX+fZ9RuV64OUDoPzsP5eYwVwYypUSqAETGBH7CAooAsouIganqQ4gHphJHRbBAEC+LV6YhS8oSJr/M2U+LzNOD0NMDaPaK2D0QertQBQ5bZJWehGkGh3onU9t3s0g+y/6tMZR9ttSCaEB509xamG3FwVs1yQ5tFvKp0jr5zXr5DcookTp8Zo1tPM6dzv6X1fi2hUrCTnEQnacqrUnIWKgFbgZGBXlBYR7HT1JqGwhMBp06sZbKkiEDr1VQQoo0OSkylfYmaqRJmX2mHGdsNDX5BUOfKIOJZ5FGh8OxfZnuln053IczClAagcn0gmbgDsgkmqpXRVI47/T+srNrtF1ZwLGTb0vE0euCBXO9SlyvEt+r7VzaMY4nahF9WLALVK6fnef5lp5dBHyuSZnd4UABcbjCVm139IN1kCxlFAvQkIb1MVNX5e68yDbggP1uhjstA5JeVLJqXG0ZygCdysb0V/7PUeYeAPr5S9fxeJ0/85dkE8Dd277O+J9QDvTbv7PTtXsCrc6+eabxFRm3MtnlPq+JYIBIkxGVvoaV0nZioepce1G0H6yXyWfQMGrg9yLNV7f8E867BO9iWaCZ8lm0R8hd1wImGe9cm70/EmRrysoYpbKIzEXMEm4gPmgGaxXqozLEG5pDXA9GGMwz3AvpXhgSpLU3biiMmat6LeDJTjeZnX3QpIQgHgvY1Cf2VqFyePWHgqpIq+4AIuA5YId+hUO/mBUk3On2wlDzaYFa65ASDqmDIJEGtC2XobHZQtUNVSI0F4IzdBRY+aBBl6q2IuEHl3IddPblMzjyQALODjC/HniHKLJk0CoCFJ3WoCmatgd96dCHT2PQrvZA7WnCnawvYirsiLghCFR/ohDiu9BmgUJiTKr9KTqqEaJJE06NcEQmG2f+fwnObA2yCaq/qE1nDi1+F2VQAz3+FZPd2CTiiTao3nQZws5eKQhbzeYzwC4ZyeweGYFLRRhC/zKDWM+8KxD8mXdTSGbIuxyrmXc8cKLWLK0e/1+GCsIG0VUnh44d/UeTTfkFdtDsAfwOuhX2fSdfYQfNlbrEDtZLDHWwBjT90OMrrLFPICxya0lFrGrJmop0TSV+TckruqiielFFaE/+Bwt10EC2H0Y2dATx7omGDNnv0IEf6hJLqsOtpXVQseyg8ZAQwNxo278Oh+1fR06ytGIdWsrEPNVf3fsTE1hbfylXahb5UPq2r7W+4ur4X97bLC98o8tL+izri6nFUkK6jGsglBHBkLbA0B0FBghawgR1HRggsCEt2OHWQnuaIIhGLbSYvYqJIVhoB1dYaB0dnVtpka60+BRWWuTwtl5qdz1mstd6jE5g6lU02Tzlbk4Dvsvd7PmIkY07LiveFRpT3bplxbtcN0mry0oQ+X2nsJQT7D3VYuDXMroytJbZEd6xI097fd/25RXW9/BGllybfWRseCOLULpk0clqKyMsO+OXXeK2skRXHThnwa6YWxlEmGcZwIyj64zxpBdxbYuY7KvXq+4OZ/ot8VnvgKtvqy/b5d97lf/2cl/f63wbV/h2r/J9eYOvD2H0XYUHja/xRuOrPGx8nUeMr/Q242u90/hq725un2heON589khT2bGmiYeaho823bnf+E4uuiQism7Cmki0iVrkiFoCfiFxlpSF4xfOxJEhUoDG14IlwhoWemaqRccv0B6EH4CgxTKnDb/ABVJjl5Lw5wizhvkOYpaZp4DYYNalz00HnscsYla9C6u1tNsrDGKBg2GQS+jALj8d2HlHsPOOYOcdwc47gp13BDvvHNh1v4ncfoMo4EC+eT1Z7WhkcHOK203SMHYH/uFbyNg9+fcrM3YPfanN2B0PyNgdD06ZsTseOMZOvlHGDnWwBjR909+twNitGtpzpJZRrJ4Un4zVk1eWsXrSAwbDT+TvclYPXUNw+RGsnnxYbx1HbcPq4YvSMJWIg42A6php/zpq278Ww5OyehiaY/V+5kO3rAZZfIdcldXDw2Ws3odueUfXs3r4Rlk96XPD6gH2jtWT2zIiGNIWGLqjwLACq3fUXjr09tMAwQqsHnoVE2fA6rlPRrJ6GNDTYvX0Q118x79osn/jcXxuzzJW72kzeO86hSU9xyU955f03NIl/cy4uuN/u8Li/tvu8HqK0ZXlywmGIW0mbm54PaG6uT3VHFbTXGsxjWbpnvZ2OzffMHJ+Oc751XibGcnAPcPNdU4zsWhx4F/d5T9/la/yct/M63zTV/iKrvJlrT2ztZO29tfWrtvai5sN+ram8M7m1bubChabau9vGjva7L8MiIu0c54vi4coUOz0OHOOAAXV+97xoQ0gQLfIFeSGz4zSH9pYkjUDefL0B58o/ZlrkR+itkMZIT5zoD1zw6TnWUWYYcJl1AhLBB1z6bPZ1v8p2OKIdbyE15JZxB4ulyFe6xlyWLEj8zRhAuIwdYhS+fiUOKxYaXlN5I9+AbnHayIfLZfnHcm+4uQUO6JInnuKHS2VyNv094ZHTkmqjq7NDsfLpOoI0o8nyHGLIIdKkNmbFkHW1SWrKRyF4W5t5PNMdM7TpFo0k0EUtQKZsss3gpXE4gbrU78mgvaamPFlhb+b9U91nQj0TU19jKc+xlMfGbmjPjghM04s/Abt6MAUhNe2iI/wCEv1yAeMkp8IgmEX2QNTzlNYAyg9RQClLQCFEO6GAHTpyrU8cwB1hhac0QUXkt2Gz+PCCKRzUHWJvzKmYAIQ3PLp6PIJfcKvEcsnbpikqBFQHvgbk91m28aWmodI0FGBr0gaV2OvoBNuvDk4U0A1qeabOCu9mvCU2YCFYkcPPq9Wa8wEp0tqlMk4mjgij/OzhdFUI8Ow1c6lfbOknTVcX3XSI20nkXaQQT7x7dAqVMU0aaeX0T1nSTuGPWZ1RbAqCYArG4M1eioHZZaACyVn+pJJlrhTrYks3xzw//c5s1SlIieB0wQNcE8Gp57CKdL+pyPhZFgTpIhVZ7jOT/iuRtrVvNXV9zbdDOtuRu1uRtrNsIjQTXrKxmp72YAZR6RJq5thwYRXIWh1Sj9u9CmSbka+m4R8sCpGJ0PfydB1Mhzq5BJYhs8NLEfgglVoBqtefCqwPFfjaDlQ4pCVVQSr/gX73Mu7etAb5B0/wOz9zYqKmxWVtEeX6OjiItkcTNPQ2rksudGlYK+Q6tCPbkoXel7wcHcSrBenIJHRJe0VlbRXVLudCWkncisqaUERBhxtKPKEPdJ2Ur+i2u0wv5fRFGEx8UAgMhYwr5dAJKbrukAk9tCNHXSlZNqX5CxZtsx+p0ENeO+TUHbawOvooJKisxke7mp52nEj6kJlCKsvP6K0Ti6akFJm1O7AXEdG1HEjSuqZdaEAVm2m4zvmN6nnN9kYZNp3GMOh78kQrtwXar9nF8oOpr2e+LTd91T7LjvQ5gC2JcW8Wsqkrvtj2Njk8Zjv/gyO+JHQs4NRbMCmx4lPpftpe+LT9sS32zlT2pl0E5+2wGRRc4tkdzDxk9rOlJ/4djsMO1Dvy31Lex7XTgiS3fEkO2whsqWY0JDsjpLsDn2V0E5C+ibthK6dTrUR0wHwsO/0dOgoAb8ggDXtRpkZXDgzHU/OO46cdzw57zhyLiVn+5KCJdXsEszD/3c12AeviOiES1fQ92TrNq1ziHI9RRnDKyxbTx77YhnhDJG+pyupV6+kzK+bQNdNG/d+86lsTULkTkZLU6WlgdLSaOS+FGmvI+5MXYIKfY7qPke+z5Hr8zBtXQJp+xxA2q4A6VhzKzqa9ZQg/W3Q6y1Pvdff4/cxeFpbrS9A/A+rNdm6pjquNOxsFCWDVS8Jsl/8FjMVwcoshY4wC9zO/FLaIWF064Ls7xtPopN3ew2V1ifrdq7dTrXbvZHdDuF7bgvVgktPIpLoKbgCnYn4L4vSiWBXGU/TOzC/AJo4tfkCIYS/ESL2xNMFlaSR23U4ZE/qQkfqnPWVUTC4oZsgW9DIB37Ko3kKtvWkp/DcnThpZ+DmC4PukZ2pYzR9y7Fj7mTY8R7bxgOrIZVW7uKZnMGTdXG9dnFSuzhFoXdpF9ug0J15BMaZdjuxtAMfuXgI40wb48xojKuxTdfKUjTxO2LodkRFnGb3c6hzfkB/3VWTQfZ3ph09Q2EWtmHmdn+ru7/FWKL27o+xwA2tPRbL+cQ3HEvkkL61+zNyQ8jqPLpOAV3PPBV0nVwZXT1QrAOKHVo7/4/3wkQgIqMrJlhlOfIUHqej14vVDnBOzInWSx0jP7uKIYOqPw8QxufViNDfwNQqTOW1zWrpbR0wIyJGQEvceu8IVGkWKMtuGDEIxq0CTavQ1KH9J23w3G9We+MBzSorXqpsns0/pZbDZS2HrZZDbdksb9mB9lPfbNBu+SaC9qCC9iBA65qf/GY1/3JY9tJwSSNWqJnwnF5m9TKjl0IvU96SGBdpqe5z+k0EGQ6qK16qbApDyJeMAP0aPp4+aK7M1jI83R9qM9D3vnZdsVTJO3dldp2LqxANgra2APQr/2m7Dvt+OogwPKhzqdMdirkC9/ZIlRMuEXUSIG7Yktcqk/8jqat0hLaTVDlfu7Rx3e/rxtGqNM+gOY6kLWla3YANMnVDkFyhVeta1U1fzbIf/6g3y37jYROurZ1+j9iFsgszf1DGQ1akTLkeh0kvDh2SAXKb3GnU3L/LIH8/POjAF4yJC1J4vOWvhpU7RNGCav90XoRf3bjzMmVsDCZxUEeQ1IXQA06lGmkldVFrei6hOeua0vCSOS3hz7KFBsScwQGkm+A3wVG6k78xRpTE/Uq8pZZ9oN9yvaI0mp/9PLuHilYNkDhj51CF1MSOyFXjZcwIsNjD7X3nOz05nw1SdA/28MzB7kJy8PvUfZ+679OTfq+RwjdgiNVkvmWgvaj++9eDfDe9Ko4GLionUd4yYsq2t2ARvREx7s63szKl//zdM0FwXgD2/7HvPisIzuc2HGxm/XPgZRGIpfrrIP8l3MqDQi9n6yXVyxqslkDjlxcu2GSY/zRhucbDkltv4OXxwMnjUvJyXzLnSs73JRvdDFwIr4+NwaWMLPHXgYZQdEsUNIWNoxN0icu/aNa5OZfLob9RfJXPfb0Xsl4BEzmB6om/NpXNjZuYBCh53JT0fSP2wkAMaZzdxMApUhfLJINcKJeEiUE0Jr+I8GO+msDR0cE3x/b6fK167mx9+9b3luu8C9HL4UK07k6puHZnlxnKbq3Mwh2CqXZ/9VAIUd3NamdD0HjNJErLeLlcLzNwPaH+S2lzopQ6qbYuuJfxeJeWXyEXNHfE4PySRVfp5YBpPXqDlh00+vGN7noz3hk7396E37c0wVwTIGeZuuawao4YreFuo2q5210Ni678GH4LO/kVlm8OHnHXv3fPn3DXA9b1xLqeuN9H3PU2lP/kL5tzguCC4FFU8pZfNozE8CX8uMe2+iif34XXzQXmTlfdg1a7e7dWh8RsvN5n7dbqF74a5P9syrQfVPd+zd/+KW8HVDyn1WMysHQ6/xItUjcHUm+Qf9VomNG0eqRz5e1MZbLtkc71121bvOEl158fHrXOj0lHcBxdeQQGcTX4kuphRHB8yPXlYTfUA2Frgp5Ax2UAn6vhEzr4qCk7KK0b8tFQ37jfXRfd9W53vRPu6QKvfymXD90vsNkA55/NwTkoBlkm5S77MN6oNsxTW5d/WABQdBTfOkV6OxCuU8Wbg1mtbFtd2VatbDdMfgQh8434bmOw2+votmJdptTSlWn+wnWyJXz3Orxyjn9lg6rxpNqL5PLoC2R6S2lql/zooupO9bkXCDErp8+nQdMJ2ulAlZ3m2/HQ1VcM1VRMq1mmqyMeUYfsUU03q452QOraKZeHBzPo23nUXn+GP8bOC15+kk75Hg1VVmg1BSvwPQpGVBCcrEet/gz1JhgJIvnyQrn88ed+/t0d/TJClScBrJudD7yEi681N7//Emw0baiaURVsC5rZK03+JNZQ56xwK1YO7RuWjux3vhT4of2e3hNQ5um1cNRo1Tvk8kePBqAnBmBItNE/eLRu7dRb+FDdwvnhYSuFf382awVsDkxeYC6W6+fP9sBZqdYEeY3k6f2ug/L5tv/3wx//rfvueOi3HuO3nSodWmFm9ASdZ33f4vy/MTStPDwPSbY7ZBoMgbntbS2m4ULZKj9RklMQOll9rHRMg0FPxsGxPfX2esPNvXVJcx/UNqBk+eOh5vpPr7l8uLlDS5q7pyTmIDTbXUPN9Z5ec5MnBuZPfyHw0HyLuz8VcK6MWlMNWnz0wx9/74OHPnXnPw2jxanha9yutDgx0P7HFwIPtY8Pj6IGW7Byg4qoZdAsQe5KIGP3GJy//UzoD+AOhlwD8pbder7FLofadrmNzjEOZATcdvYqbKBnCcHAdgAuo5jG76ly/Y/pnodfstinf6xYf+DW6ntgSoRMfRQNzEXTCMb9JG1vkVMs/7DV/H09lP+gKsnG3LEfNtiHgnm16enpCWa2UB0LrmTIvepXP/Era+F5j1NRBMxhNDLNS3cs2FNCuJZG5wfjFGP0SzwRoUB4UilhnG+BJCVkuQHs5AWYl6S8pt5yJfU2JClFvSkto4FWqmnw0trRV9449zx7Lt+wG89n5FG523A+o5LK3frz2cmtC/KpTFSPERhdKzTDT5XF7FV1+Yy95Dx7iX59IXAEb+CCNy7RNy4/z16udbwK05TqbPGNyzHa2vYlHfQUZGoJAzkoVtXbGDjJ3BkdIRYClltcjIP55bOeXHoY6xj8pO8JET2kUKkJZjI6lTmw+ro68Psb8OeqklZchdGYjs4EyeDRPohhVbRPFt0M7LnmB2NgAQr54Kq9ao8dMKAD7emgVJQh5c3UmPbUOF8T2dPRLnb4fcp/XgUJQyVs7eQk8I1sNjzwiIcdJ7wkbjSCchFTCfegGLkP1xAphqvbfzwGFCBzywL5NORx2XYexvWhj8mrh3D3uY9RZx0gdHi3ejCgbFyrAh7hQw1kI2LQZa68RJXAeJN/QJhYMqNXnS+iRbvi+3B3mRCdn7Hlmurgh5mutAt0EAmD1zfIW/l59qCpjv1CS3aSH1BTDE7Tfl8oF8+DdJUH6cuN41y6nrp0HXXBI4GUkJBRz8ifdJV7BLXsKn/SVd4RZIl8bt3A+MhKqJMCQncVvbvAva3D/xXj4E+D8dCIKIdj/HFBaUJzVy/MKjNYBdcjqQRhAqgxuaQ3/N6FGesYBHxbSQ0iJCCQsWYpwKs4XDldezRYBQKh30eDqbqQIXXD4Y6xDgOFgozqkmLVjn7E1kVALk53ccrkx65iagdCyhAat5tBCId1hOtB/o9Qz0Tj6rjxUktcHTbzVSCIlFfrilgKg5+3er3DXd+vV/BCsRPpuK5FaoudKMfr3ThIoN7uPHuFFLU3nz0CiZ/sub0nqP5rz209gW49OE55JJgngsQbg2v8WekVelZ6mGvpfjPcwFuXNPBw5jiQoPpk1m6gf9IGbqHZ4XATc9JEmw3YIpX9Rua4ANklhpoY1wbY0ByMV26yaOgPjG/pTqNSSHyWveJ8JGmLUXqVyLBG4/pdo5cr8N3L/Wdz2kF5AGMeymZXICgI3j/ZqO5vwPY3X1DW+Coc9ggTe7VcP60cQHjFySpSBUSgL+n+j3GEVwiDb7VzV8rlrvsCLtI9ch/reO68T9lvNBGs2M8Hm37K5y+Vy1+dw95ugaPXZhEPpLPnsKI57QT9hGBu3gSPd2GouVaYILle9esLpkKe1DMtnHCFDAWc/yhmeXLoQyyyIM74hqzJ7bKwImqtdeHu7AsleNufBvmrR5rzGJjzZEvthUCMx1pq8fpADBtfVNBi1KDStikPKE6ebxkwiwWSUpiq+wrko6nsvurwf7VCcIO4+vI5GfZOq7FPDv+BoelA/kOCkr+J9Cs/IDcPvd8pzKBp56v534A3GU7nA2bzLcafuMkkfbHB3GNDmHuswdxHTgVzWwv2bUsW7E9N+9V0w/TS1XTgkf/Z53zX2MkZzz8sJPiAHYlG8uFeufzyy4iFwPSu9u0XXubwXOrprFDnjSes885ldd7W1Hm/WaHOm0bXufhXyoUvyP37/6peIDHkZAfJ/yQbSNDamoCcgnHcR6xR9HRL9kcRRxC7ToqMKRmR0e85NnS5aoC8OwbMiuNQe8AQpO7HDpzNjOrqo+CbsI/1g+EOLul6M6QTkxIQCM2t8GzUFgN5Z5U+zZA+zYA8vUU3puAl+gQk47gln5Tf6OizTpTJzykDF8c6ys/CtrYp6IGFUee4+ighKoyzjvyq9T04bnVVCEIdt65CBA1kY/L3mJ3Pf4pCxBUlkjOXSrJ2Rs7ifg5/tuRngbzEm4ILNwczLEZAHt1gtyhfKc2+CDHA+NVM/q/UNOxUoOeGP4SXN5vBulGgLNa9WGC4zkes+kHwtaPAqGCuuvkr26AMvj1ByUE0sAQ3JJ/+RsndZY/uLg6MPyKXO0qFIpYfuKZv+RL0S891cHnP6y4/hYX3TOv6tlh2ZAqxsbQwJvhmLb6TQ/A7bek9V+AcvQD/4MwVFuDvnvlttwBVjmsvwuW9r7vdWjjJ8rpkUNL/gWVC6TKAxUFd/XgYUkBMVJbk4J0pxcD2Wg98IUaqEVLxLn5GbmXeZDTznVuPIrbTZWCfevJdpdOxR58dwruzF5gDRg1cr3D1RXWGvZor9r2D+Bq4TtCyP6lhWReiG4eEb6BdmYveBCWc9ur7teFdUMaIyKyd8muOnZjTV/6ddu1VQ7JwMiQLC2D34c+FThyW2z1ExTpy9wzGO2O3QiimmTUm53bTIoZaMAi0k4UuuCni/lSbqm2q6R1XA3wClarNzLtVEtXLUNp73HIdylJ40jLPkAu0p8N83Hra8sVmJR7TlYglJnKHTFnNARZRI5pY6hPx1hukC3K5DlH86w4cJL/5loZzP8AVb8C5H7dk91H6hFW7ZtRynr2OJE0ARw+8TLt4zLpKlQocIxVIayJw3CoViDj+nWq4jsxOMewAaipwrqMCM83IN/qBv8AT1amaqDYz4Y5XHf3JD8HuPj5bikqhlFMjKeWS6dHpc5TST1HwrE5R9L/VFHlCXc8RRpls73eWLz3QAsvO70G0qci5daaELc7amSQxVO89BXi0E9mR4Aju3E9BgrhiuUaZquAqjpJrmika9rlfb+Av6l1lS0EyNYjGMrwHHVirvz8z361E9lehDL35D53IC1D/sIf0v3MT+v2+5FWu5Oea6ThU75GYolf2g2aKTijJ/vxZXpL9ubOGJdmnqFupkf2K/KsRkJ27ziNQsX3wwz/7xZse/f9+88sww8Dkp5sFOZVuTbIZxYFJHvMbzzqocXLNTziejKjyImUjgmeFI0P9/2j94lWmsL0MlZU4EcfypF2xvRf55mZ0MmquytGI14CDQQMzmB/BzHp179sc3GId51Kv7j0exbFMlq35FfjA5YSgPTXv/dlTnpqgmZpg2dQEQ1Pz7HF43/rpuW2F6bnruZyeF8rljS8lv7ZR+TVA9usvIb82o+BIC7+RpzWXXk+QbDjH7PIZkul8Ltjw6m6FUc1PK4yEnb7Pnkg8GQa9U1k9+KKlKqsHXuRVVpMraKyOjtZYtSjfW5ZQvr9d60wTg+qza9uUDzjnbOTeteiguUQcejHMxUa1d3DDUg77hg1ev+G4cLksq/JguDl4cEVFnoBi20c+8PF3v/kjn/jdRx0gUq3erFDZJ0ZX9thpS2H7xdM8bB38gxVA/NBJQbz0XOO/n+HPNW45Y/hcw+PpMsgeHNlM0TsrLF5qH7bc0aX4Zk7Ae03J/HVQB++aLi1U10Hb7jtwXnMY1VX1piUd0sFDIZ9oaGpVe9MM0gsaFCzQR68EvyrT3fywcYc7bLew+XmwDP9McEEQ1OOZsbcgirYsg183ZbAI1w4zjWKGWTHT+Uu56rDfceUp1IOZoHNecAFtxy1zlzIauSq7ZcB/2uz499TabVlftHPEbXDBecG9RvfOe3AVHvFPR+Cq3V8tYrBjIjNNvkAP+RPafc4ulPmGoBhDB3p6iYoxsGSuT2O6OYwxwQdPySEt0eoxxJF5oOfhM/XpHCwRtml4GV4FdmPo3nX8Gdzhiu/Wa/B+9/t+9/sjOIR4ojn444H7cRTe0NhastXHXcUHbJH7tE0vA5lkRT9tdTSHkL9pEuQwF7JJapjTqhh0UKo9hGpVQ9Aii8iPonTx8Aq7Se49oXLnCUVI3YZmXW/esaiWpGM4H7/dOv5UVRiZZmnIZMZLswgGvUjpfflKtUnHJS0yd8ovd8KjClKAF+WPAH+ifBtPcVwBvttVBtN8hPFM57uQjaIH4TbFJUCDp5fh4sBqg6drS9a1W5izrGIinZVcg2yrhz+5NugKcI7jG4R7Wd3glDY45Rp8QavBFyxrsDYxWdrgFP6sbzU4Ndzg+laDG7TBDa7Bc1oNnnPKI9yAPzOtBjcMNzjTanBWG5x1DV7QavCCUx7hLP6c22pwdrjBc1sNbtEGt7gGd7Ya3HnKI9wiFW2FMUSrzS3tNvVpq9n7A20XVzb8ajaMZl/tm92leZ+XjTN0TewaHtYlrn6Hy2eFr4OtOO/eANNw3l0Fw3HeXQEanqLtQ7L9HTJ6f7Pc32z8yHax4nxbhutl0sEMhiSD1dATUc8GC5S+9AvyY18Jcb/oO5ImBZHS3L4SQPrfwc81nC5DeIn0izD/C+PCoDEIP0PcqWM/z3EjNVaKSo29tJ2JV4zKmqbvMhYYl3aFL0dFhAPO7RorcsSbGTM4rmYGIPWItBo4T9NF7mTq71yj3+VQZJlNwXQ5sUgnmJAxMl7JzEsOMaxHDNtGDPjCMOVwjRUssExZginDo2LCoUTIoB1YfQYOF2ch65E0OyMSujQKQJYdAgxOQoGL4kDqANvoEB3U3dFOD9bSiRTdmR5M1MqzolNqzkK8agvLlzu4nZA+TVw0XZ4h1a91qWVRaWe6OCP/nrLTZ5b1id19okWHmhsZzsAR8I6WE7odRotkHBMMgFMf6t5i1UMQsaD69PwJEC8LCEDvTGo9Mw5UtpArgETQNkL0Tx2yETWoU2AONs0VXlrN1E4kCRVJrCKJ1am39dRbhyShIgl6YhVJRr2ZqTdT5KJ6hSXtrsJGu4HVyMLC7ERycrgFa9gqOJ1EUrRaKnYBt/pFJHhOazHNtpFy4zNU4uJxII8B5tU0Sas2ItAZ487Q6w4H/H4X63hK1PEkASFWNA8J+pzPZkQUZv8IkLU8pDLInfkXHVUI1Tm6c49uU4pusl7oGM21CKRR/CoUwwLBKsU94fqnkWyn1oK1MMwUhi9HuJ2QNoFha9n7BsOi6WKtYFjUp5dYjWFRjWGuFy38ijx+maX4ZU6IX+ZE+KWhYJqZNktm2nK6AFy7E0QBmK/RDUtMGG9PSmZrcswcGBm0Svh7gxEpb4gIVzfq8xv5/Cb/XAmzPD+iz4/w+S0Gc8cXbpcXbjfa1J2GwQd5f7chV8j7RcPwg8JJfeCT58gr1m2X8OIIdcOteezS6lYJJrvEbuUM2lKkK7KaSqz6ICSRzkJ+VameViKdbPvg3378V2/9tf/xe58JvrePIAvMhZcuiEDR0ZSO9ASF1tLuYOy0vaVw13e45rQPcOMG0zVd0Zg2dJsnS275WlBl+fdsH0yilsnNwX+3SiDYwaYSYGBptJL6BMNVpKWH64oCR0ybR3+4qurxCTu6OfgVyw5PinRzTSm/f1V/270CcvDBDFUzph5IiIC5OTgQKv990F3vDMnq3wMPobsdC32Puz7grg/i24eFb7aOHcflc+7ho+76uFWG+Elcbw4beQKt3CitVLeFw2LE4VAZ+ltcV+7GSw+4KMP32fnG1KQY2xi8ZmV2h5vYGBiNMShPtxVjm4LXgG8J8OHna44FF9KyugbbZphsuwbuvVpgPJeNRzWrpL0S5KZr7hgCGg8iux/tfcqpT0R+okOYfHaU2+IYjE4/ZYsoKykmy4KvHvvSj79JJMJAK2e/iWRMH4ZjxfkmcJJpQie0PfSY9VNDWgXtKAp92ngxI2ikzl1M7dZYfHmoGc1WVqQi54rI9MILmDaO/RZqLJ36lG1EXCl+0C4RcRMn4l7OO4i43z8k4oa1iFtPhwZToKqIKPAw8DahTfcxvQ2+/7zgs7iVoX3euihaUHzXUbTA9wmsyPeV0U4C/G6ZhZQJYnHIkH/aDujWxm0KRsS0r4eLr9wJgyh//zyYzy9Ty+3LZVGuZwQJ2snjXKGHcwjerYcihncbYe3Luy2bg8sJcI4FVUC/1voQ4ahgIE4D7PqR1iSMPUoL/NlQP9KqsQRQPIs/59bP0Jg8e1ifscMXgsTy4SUwckMxN29agF+oUivqaQrP9YVFU7jBF+ZN4aQW2loSThpJWFObNbtSsGRXCpSNQHEd1NxFix0iPHS4OEYLdCQDhRkgs832ZuwDUimuR8My0gCU3Ct73GHPk8e64uWN+0NEPbXX6kpR08ro0r5lTE6EPUJCpspcy8A41uWZetLFB7XR/sJ/Esmt3ZfPIPlZicDAmiWXDfNwOSx82E2XPjjAJfDODBpsk50CfUZcQVQ5T5dJ2tI/gKvQm/vDlnk+1QP5J3EgdiCEb0GkoVVcGM7qK/+y+pkXVe87u7p3LA/UznorxA3riaNZcgAG4+tS04FrXiqdoqiZotAfgIU7wTSATeQM0fP+QrUfh9k2D8B2Adz8fQn5kkuAdePDB15d5PLRAy+aty858Oqqj746EcBXp3rysHyUv4/+AJhhZx4/nScrmdvDgP/PH/nZN7UN+Ids7Ecb8R9SU0E0AjhF6pL9dOvTOnZiO9kUpLKdLPc5ENw9jQ4zVZDfa7WyH0ZuYtWJdtXLtQtv5VnZzWfqjVKaO8c8bC4wMHvtbgo+Lbv1WK2z5sTIx9Xj51HFe9iqx8G7cX30PCp5b7Q6sHdqhD6ZkHoQ77Z+FDdadfHsgrUK4OcZwM+zC7Z3Tf4XkfZvRi+FdrPQbuLzKbXK7cIVSD1CMFT2zn2TS+HdM9ST34QOJa6Td81QU1538r+dWieLoU76MJBdFwYSvn9B/uaYBxBcTkoUQkdGMhcntyZjst8fDhFiixyKc7NBnCCtAC0z7T1TCEj3Ixc94ECr+Iam+Lhpih83vvhYq/hzTfHRVvGDTfFiq/i+pviWVvFtTfFNreLDTfENreKDTfG+pvQNrnBj8J98EIMfdCWv9SWXuQ/nmg+3+NpmmsKNvnCqKVzvCnWToOjisjiqkBq0RBcVXqzfJGztzWSqW0JqHG4L849blxZMft6sPzcG33B4YmgsASOFjcFjTdkjddnnm7KH67JPNWVH67KPNWX3aRmPu+TnPTb/BeG8y1RTUjCvb9+5ZjE1KNVAT0Tz+VuRzPaRUG82Bp8NfQTDh+hwGBErA0q3ATeCwIUP/qPm1bvqV29pvXpb/aogYav4hqbYHUZG7cPIqPoczDoIjd9neJhFy3jYEQYpCyApA4f8VYHsRbZau7AxCDwesJYAL9Y5bhYtdjXGd7zP+sbv8tXebeH5WFqtNkAMeJndDczOhHATmo0j1rAZG5i3Wx8V7UespG7yLgt1DZsU0cS6Jm+zrdygquzpaaxvh3yopM4EdMQyxreA5oi8WRMJeXDT0lrgoXBLvPT7Q/77Q8PfH2hB/Qbrp/OTxk/nA8aV/VlTtliX/VFTdldd9ltN2W112a1N2c112bubshvrsrc3ZTfUZW9qyt7giv6zL9njShZ8yetcyWt9yWVurHPNULd4AMw0hRtrpJuaB5lmhHtclQ6YNh0wS+iAUXWV8XTAFH2nuGBQn4DHIrpvsJGU2Tnl4Q02//lQfj5u+PMJk38NS3SGvBTOIlC6PhcRJgWCWFQEFjeg8sshaW+BkW9Mg/vG4b7Bi0REfD7gqYtlOBgNMAHbQlauMfEYISlrcYBhxpwENd/Hpd1jJA2BTK/xSe7VPsk9v5J7IGwIuFQvJg3znv+z9RkR+DIWR8+teqv1Y9X3uOqfsPLzIf0p5O8fbRNhqkf61iN9E5ihM7bpjNa0MfiK8WWPGld2b1N2t5ZVtxtWdSfB36MSqEf1D35KdYb7bg8WTNh3G7KDiFMYknFg5svKOBu6ftbb+VUKFAx0nxaGGBrSHfc0jHZUb++0+hpqJW5mFk26ybXVqnb5+qb8u9rlM035nwTtB0eD5gmOVq1j/tEbp9CLVGAKHOR2e8BtdSUv8yXnupIX+ZIZV5L5kqAVC70nJKojaATu9ljL7dYxoep+O1896p1uG7fZhih0HVFYkz9s1hVj+QfNOhdTi9zgESstVcGEunsZcHhw9wrU3StY7u51o605+wfvduJA/kOylf4a1u0PyI13+Kq+TonmHx4Nqi/cYSDT9NtBwbLXwFvdVPt3uiBPEFR6KlOGlPJUJFQtP6ImBUHzdMATDlopMtYaeIfNEJtM9gmk99ZE3dT1FrAmDqm2RhIJKIc0CnHsDATl4zK5iEQucRHW2BheGuhLOtOyazBHFawddiPvxH5iInzxYbScFom8bpicqNPktgnJyAdMTIygZZVRvbiBrEl5Nq2z1SRVeumSr3hnkNWdd3ZzYPVO+PVQ7yKqmHAXb4aVBu6EG0/0rrOZxjGpNppqXuhUxlFvfal8Ik3Pq29g4rMtFVaw4qit7n0wyP91kP3lBjuxn+HbFiMGl9J40Ol5DOwtUkBedGrPbo3xYzfoBZEmis3Barn0EVCqU2h4CPk9N19m0GF0GL67DLHxMPD3HONrqSKcO8s8fYhzH0WhtsovEj1Go/0HnSi/FjQlmqQdb/FQbSNN+Gn5GzKRduJyZ+OLRDOw05R20eytDhiIvrKBVY+9oPrCPQZA0GmLMt+D/a2eILVAsmO6jNFMVG1ZGA+tCWUhIN39p4Md/XAdaFq8o4/Dn5jHl3jJxIgHFg7G5Tdfk25UOJOsbDYY1y+gnPhqgHzxMXJ0dYHGoAvR7n6IyBZz5UQ1Nk8HBCSm3n8N4nAjU4m8c93eQQ/qgQLh1opo3mFWirFfXfZR2G8X2lGF4dJC5lyIihxbYl70FIG7yLLSU23EkuYiQq5YBXivqt+fKLr0tsQ2ylFEgH+3Om72FuNXbw66bp0I3Hj2N4PwWr9t8vMFYGm+pfqJe4P8raY6IGyWAc0pgQ/9IQQBOS8Wxsdt5P8FkYlY2S5k1ENCquzSfloVTBTV2c3koukrKlmpRbyv+im7d7pvex0hkfLCkq86+oVZ/oXpJcvaSKrZug3aWe7ux/6L7f3YwYBGd93q7QKDaBgGHJx6osTVC3ZoiJRdyE0jlcdDEDxg/KcKFKMuKjE0UbMn/FSAX2nDKK1moZ4YUY8zepldoK+L7Bd1dvqoeuCdv/U3gQwO3hXV2J55eYnxLRNXjy63sF6ypa9l7KK+YeIdQW/Ceo4Z09VA/6vCOppWT1woj57dLw3HDUHgUt/ENfi1YKdUtnnnXhxdj4Hopzzkx59YjwsiZnwE8UupSkOMhVwD208K1sXoTWuMDNE8uzNiiAQYNepQgQBje+SRvMfhxicYbrRkuDFIkqD3GNmKtHrnxwNg+PC8R/W3mzEkGdheAGBoSFVwcR+0Zv+JR/OZgMev1WekB38caE/O2N2XJUGiaJeTRaNkcXiepNufCdS34LVNRevcDIJKpYBwXzsZq5uOliBMi1RmNSpLqulLQiYEAu375YbeRtVPf1SBEVUPfUTvPJiO8nfZAg/ggts24Op94YUyGt1C0mYLKcIy8ggV6A6BUQqFxWwLQePEC01YitwRUVsGX8/4U0bw0CM4Nx5FcBoaVPTwYY9SoniRDCF5pEjOOQmJ5GGN5BSCumSTWkgeeiTvUqUPtHDxyQuBOSIOLEHycGUkD5cg+WhcCVdA8nQJkuu+QPEfs+i+3YwhOSQfHpIieahIvvJoFMnDEUgeDUKH5KcwVydEcllrbitepZ1sIfmqFpKvR0ouHMDQ2awowiVIHnokDz2Sp0uRvKb8RPGaf+xFblN0r+mPOzdxg/xg4VvQdxTiVkm/4P24bEOy/0T7qq+/yezFSYU8uBCt/u4nXS80mu/QzpMMcViKwwlivLJLCc4/NUpl07mPtzrX6imbesvU0M/f5k+eEHU2Bbm0hnBZjwU7p7czLL7RXHE1I49Q+Mm8xrNgvr5wAeJYpzr0EUZFUJZ08aXnO4bz/mC+HAeXCWUwWcobTR2P+XPBPIIPjSlfypkaqw6quBJWR+9n+puwuud+0i2G1B9DQKOwZnv/XZGosUCuEhoSAoCtNZoZJ9GTWZwfcjFGTOgCYU/kD+gZY82vFLdfSHBWScVkTGl56LEw7PnbkfDM5B+hOZII3/ULCyXje6TVfjoaMiaWAJhBgROocxM97mPf8CBgnj2wc7HrLcK4trsba3Mhxf36yULJPAyxtpP46iz4O4rtp/CmS7PIKcSLTNSV6IvGRWrWKmHkHGkIfkCunCjdsQyBJFwvQNkbdPXovFdN5jOCQzceNaSitfSZbDPn87Q8dlsQw1TB1LCM61YzNyXBMMxNddsvx9JwXBUOpuuR0yzWIei+iyH08HJPK2OpH2uGVnG4BuEo18uUXgq9zOhlVi84RmZMXuvCplBOY1+YmUpDGz/0VgvhylQPv1XzSol0msp6xUHn5uASfWP5g1fIg48GMPI+ECEEk0Fg049G1Y0RM2WZbQduEOT+gHoDPBhp2JijmgMdX+CM50CkcVwejhy+kOXlXG9fMtNFkv86PBR56BNcDAMJ3BQ48MnvMNTdR43ufki16OOiRzKjWn/io5G76gOtXnAEJGiitRjhUUAuiO/nOLLTXESqBTCqADDLFACU/Jn7AmH+aPCFIDbvsNCmQKcSwmIK4jCCDW7BrDHPFWjLogtiLg/WD1aDBDmBVKjdlDvKDTM1mjhi9HqjKVbfCmsnZoYs12wLXk10XHMrxFZaKiJWdYz8o3KrHzoj3RvdbQrzfAb/q8YvJojWFKu32Tdvw5H4xJsO3lpN7IWwLZ+GClVXa5PVdKgqjYce3mZc9lm5RzDhA+7+sNH8s3J7o2EuWyQFz2+2en6/Wj0MV2sSWtqXafx5+iV+0jYVvqpp5/Kmvq1NK7sYXlBqzmjXInCdAVxrC9MZu+GEUA2HYMquMJkKYGtrKISEbdjANmwAEtawhfqp/hwwNqNhHLEKGmT62pmRdESVNazmhmFVmhpacwBWptMypaEvNAN44REg95M2BUNHIOpfWE2jphY83PZCNdrRTMOMzh2AnjDdcEgHfjpEsHsC4tlytcYhXH2+9TPIaPh3hFSrLyr+13vuOCZiC3Wzqhe1moihUy1GTCnDqM3VA+RS2iqmb5g6Ge4g0uMeW5nXF1aTJUnnL5rWPDvWmbASeZnafoB0dB1mIdfs9E7rgPThGDZVhrW2zeVYlb35IjX2ngdL2P4Kd1S68Y5KN95R6cY7Kt14R6Ub76h04x2Vbkbj9GP2ZABhbSSTYCcKNHuRWqGSlxdAZb9oHQBGjVyz5KihjIIopiULolS0wJGMBEcdlpGmq8z0MAIcLsdtuLfqXKQGzrBrqWHjIzta2oBFepeq2hAJws5T1xEunFzvJmlhRKzTtAtytx4MsUFqQ8N4X23YxAqbZDlsJmglk4LCv1Z+/oMxyX5nLM3B73TKYoOUMmfDyFXqmFBL+8DzjJ1rS6b4ZbCI3CUYRsapBEmXmRuUqYUPONOhUPZKuo3lyCws39eWQ8g32NkHKa1pEOOhYEYx8QBMkmB3JFfLd9YV9TGrnkVywKx03qcrifSEXUaCAwgdt7MQ+nLfrt4fXq++XRpIkabVGjgC0Tu5c90fMkobVPaDLobv7bZjN18QtukyEOaqWMnn1bLNOtNtJhxdIw1tnYc3GcxmNgV32O16nHAczt1JnS4CeQPaPpnnypBvfyLw+SLe90QwnDDCaCxQqWF2Pn8b4/ZeoCpZ2LBpMIZudSDN3wyfiW7+azQdAnPYbZ3LJ3oyn+JUHow6Yuo/EjJKLkLcItpqWt0lc9KrzKAjojOQGLy04jSAM65mlWpdGfSVYQTXuQEoCUY4fxF7KfNwDpT6M/bc0qqNSbQwyFpKRmEldlD9JWMUHMpkrjGMTGWUDJBCcfUG2XWZyWoAZf+mYMsgLyJySBGM9mhVkfgQ9okLYT8OehAyTme5aoc0lu3YC0VYsWqhCq+FqOS6kSNU52QZXY2ZErKLx4KD6lBSRBf1OyKS4Zxxe79TrOKCR1btfWU0L7tHeRrGwbu13wssXVucdnnf9DrOoyDHn1G1hr3E1Zqcaq0JLJ3WIIhv/h6LbTn/V0XYt1CZ0uhf2gqXvuIWBNqBAr6Y6NNSKa3SffldppSfMgETjI4q3Om4MH+rdYnmsOSBBSi48LsMbPM2BX9kytD5q6D4bsDTTuefQTrlc/nm6xAbeFOwMPTeD/rXVmNLWd0LNUIwXD4y9o/p4zuMiNOhtR341/LU7ftD2veHw4fkcTHB4DDF6vPA4kC3hTwdGipxOGUudDea/8Z6zWlAwVJdoOLaKDSG1UYn2l8zTzVJLJS2MXBxqGFAQif94aTM8jiWujBUVUwCyIO+roKd/DyC9bEjimCBUjWzDhfKMVBg6ot6jqqGSoHHQIExNfL/7mn4ojoKPCYUeMy9G8udp8A9mShMr2k1xmxyYR1UGZTXLKPAYQ3RHmtzA4o17ZwLEY0T/VBQEiAadOAxgPMJGap0fHI3ToV02mvSTEjItxnh70gxGOmjplwLhuyYKU+7jGz8WkYXN5uCR0zfVG97p8mpRQFLp6/eHV5Xni5rhG+fnl88/GhwelacVpz+fTpEVFyc7l7Viv0ng7VYa6drZQ6bTsM7Ga38OmqozQO6QH2xU40XI3iq7jkhwEYKJoisQd3p8gOQ7t/LPSscWGUOhjZBzrtVa2A97YtceL0ZHAB/xTDcQU7ZOgRVIYalAHkdcTumS0P28XE7poeOmlC1vcsFNSGH/4xp7XLO2B933OV0EQx5J7kUOZrsMaV5v+pOubmFtTe8YMHQ5nahNNpsbkFrcwvqzS3l5hZCSpHNLaRFAM8baRGgjoYEMgPgZN5PyUxvp+7XqJor5hhmcccxzKjF/ww90sEEzcI4JaR7dr5/HRp6kdrNh2pWYDkcYXvUnG1sBxy/ak9lOiJq+8LzqBdCmU2XPdDeXkFlFMwGYfy6UHaLLrvYnd6p2Yxex3Dy80V3Gr6j6DB48I5zjdwU0Bsg2NkP68Nux4VTLxI5LzizXaPb0KQ6/x6q6TX2FS7BdxVU656rGjQoe87FfhzC4CfUiN0u3kVIC3mcytNAfkMTSokOWhc6W5JlKS8xShyWuhAcygTUvnnIhRjQ3oeNpidpdHLFRl/mGz2X/vpDIb+jGft4qBqI42HZ2anT1yuJLrCTdFHWIIdxrw/qaE9PhiUP4urdHp+pubdx+zPEr2p/xaR4F8lE6dYfbCefEkBJ3qFFVBk0e3Uf+g/ejXOv7hfj3yccQOwyjJENWKElU+33LYVDLUWn3FKUaSrTHoyvcPCOSqNpGYMBpqFRRitWRbB7D0vvkr66CuBO48QJ/lb3I3GongII0sBel1Ll5yJ1NxQcfVSkuA0MyOer+xbhxRBO3BArThyInxJOHIqfx4mT4cRD8RKcOM6wHY/HHieejFfAicK+ONzFuIi0zTAIbI+cbmFtVs4ZXq8zDNhk6r4Tgdsa8gSv+b7Eu2ckO6FIGYhUow40hRDunfQ7VeabHEakFNu5wU7TJsRsDm6zMFl8cXgEfXa5HlZK+F2Z7NHQRPtH7qOhTxen4S5V4gu5KVqXIFBF1KFNEXkumk3RtDZFo5siBGdsisyHK5tiwFzMr9S9JHKbojb5K3a7Wm/oYY7BeGtfcTtdhQvjiQnlXxBmbj8XbhxOn5996P3v/uQDD/3+PwXfq+66/mn1tm4Vuv2F+dJsYXCgx7rjRax0tSt/pTr7M/bBCNfBMNMfjofYpr6Erhmm/A2ntdfCzSAKgvp0OtgVDex+EbC7oYHdT3YJrtPl9o16C03sP6e8xQtfTtvwPHMFeDqDbuqRXKI4me2HM5O6HM0dnnrvH6koiB1DZFyKmrg6kKsAHtd4EHMs+MZJ/jJHS5ijk0j+OIRGv41jjoxnjkzNHKEVhPTfFHzMKmvSpYNkokqb2kFSKoLfaNrkyzaaq9DUqYk09Zg0pAe7USsePhR4ER3nwHVuHYqOj0AI5JtkSbHlIsnPKxLnK2lYo9OVQM0n7NOim3kIeOCZ4S0ZEWXgRxiReZstnOe7C0ZhvJ2oDpwiIhUNOxTiv2o95OHsjIZCYKrxUUgcotYqOLSlKp1ZIj8r8yqdbXoU4MsUXSPXaZHh1dO1VT2nZA78uoEwMXt+WGgdBR0mZvHnXKqKWAYeVLt3th9XoeOKlK2N4TlLn8t6QOmixqj9lFt6iV5CH80ibEezCJcOpy7Ad80EpFx6Gmr1YV3rMmy0aeCSnSzC+lFdRl6pYRvq5S5jrJf7nPcUbobqPIW1AJAMnU4AT4sEOoFdNHyYckEiFuF9QS8MtA6T+UESulVEsc2eFeaXsXG+vROblFEG2Kh/lYFPVg5pjcfhjSJvFIzMMIxmM0XvKbdeFdOXJOQKq/ceMi4pSli9+5Bx6zXUrCiJrtSNWDFLMZae6jkibb1QhA/YEhvll5zjN/sePLO+p8N9f9uSvh90/YUdxxuH+z5+0r6j2wbddhpozpTzTHAKSRL6WXUU0l01cv6rpRlWsHSq3jxyPMEv4h6D048cWcxObwU1YxyKOh+88fngOzOqexA8gnaig+MYeBQe+RJ8taecjNzReE5qn9HTRHLIk5HdndrO/vD6kbt5bK8vjItUe/zl/8HfB8EP7QUsfgNpZIWBGSvsIIHqUncJFYl5tqv0P/8147YE+PUHPi5HQNEfes1IMLkYe3XZmR5YmoVKWWfauaLSTJuLnm+9xvEyspWAm55VOVuYx223YHrfrNObV+qqc+Pf6XaCbMIH/063E4DngLtHGI8nHg3cThlUxx8dksc30LhP5fHevJPHT/fyeE+3HHULFKl2ELmedeoVwMvpzAQgtVS2GPNA9Dc0gDpWt/GB0LXhmPue+kFZ9Utqlj+P6tgmQAtKr9v3JSr+Rzz5o6sdqhUpnrEZyw4PZdbTY7mani+7+WVsBR7oATxmyiD/fnyPL5MCr8tGVr+0BdHRrtMQJ4+E1RMUh3ZVZsf0PLlhGvNrsF+62Cdap5rR76p7doMGanc9Y8iBFfvUYW/4tr443JuOtoZanwiezVobv0T02g580JuICoedMjTEaEpUF0GPpch5LNFHEWH/NEA3QHlL6AL03R7S7uB26mdug9r6GF1yEFUd7CUWZaP/C6j/G8PZ9TFTZpfxhGqMarqgrf+DoT1emip7uEABOFZkl+vr+cXDjwZjEA/wFL3mTjJ2ebtm/8mghzd7Wpk7X8uoACxsdjiy4fXJfmf/1B3WrHm2sCM0xLZoiB2mIbamIWHLrhKKZKu0o1PTjg7dcMeoj2IcDYa7MppUMS/CV5fZNA+VhHYkRUbagbkBb8bNm2+RdnS4QnG648WRdNvb2+JIRTmqutnRCIgkP/t3QyLJBLJ7aIgIx0KnXiRJa5EEbsvYAabyP5ZZh12bGsNBqBsi/0sVvqFT+Eaq8A1PoPCNa4WvrADV4oa1wrd+pGas0eUthW94ebti/wlMuwUxtTKn8I10vrvVQZPP6OVs2nWJJPy4YYHuMXiHZizZn4ncvN9cx4PGonXQOKmX3A93CFVKbNVvNmUXs4UzO/eNUU6IbGw1uye/CwmgDb1IwZshz7Y70Utx1rZHg0QJAxGpe3qk7umRMkaRMka8pB4XB+MIwcAAGLhsLDs7o+sQ7IS6CAO3G8THRGfDvWXG1sY9Vr8HGmpoIuTpPmgffv8InC7UKDhzAS0qu3vZZ3i/6CBuS7rAz1rP4Mm3vGxqWRmajpY0rSqA8XcV42CU56ZjP9CMd//xIx+p3vtiAEVAyrh+Ou4tK427DajvRBDsWgkEMzrvOQOU4U3hsRYb0QaWBxHO6urNoA6TYZaEyRg6f4t4/hY5fyxYtBZ9HODVx0aJJg9FRlEG4ajMNSc5bsvr47bJoeO2v/iVT3x3fdw2u4fHbe4MKqqP2yLGs+mpyTKrKnpYJDT5qCMFgoZyyfBuBquGdwUWDu+mqFUnrcXy4R1Ti8L6YJZuV2TCpcGFavZKjb8bsoM4oPuEXGFBsw97MeTjiwS81a8gS+20WhO6V2NEztzjzue6XPA8Snf9s75/1vfP+v5Z3z/r+2cRiJPyeu3nObugMt1CaXytxtdqfK3G12p8rcbVauo4NTFOitlJo2eA7rjTMoajGp5w3nAGaAdUWvZ4eLnCGWC+whnghNsSct0SJk6wJayqt4SJIlc6P1FvCfWjwQQcp/L2ljBxebti/8lgFd5cpZW5LSFvzgDDqh3AjieAiR4OcUHOXslIpM7ZwLpJNhSf3GkgjaEAQdQT1YeBPoWtdTPDO84M7zgzKgFTzqVVHmdG469i2n1IgtCfH4YqGx39R8O48SobRXp+yJUTtc8PKSD94oRNvc1MAqN0tZlJVraZ6QyJq4m3mUnaNjPJMpsZlAy6/qBSOhDNV5/9QJDvFiC6A0wYLVNR1bP7oe3Mqs7rXXQ5ssEZ96j72CmEnZQ7F1dSinvz1Vh+OBz03QsDPnfqSZfOMVXFqTyh8R3jK4ZUdqpJfp9qjfxvQ2hl8y/IRYitzc9d59TD0s0jhv2HuwlNAlQMXKfhhiIYAvkzS2igO3VotA7DhXUYQ6z93GlA41oDinQDN7U0oD1I19OU8qDxuH/aqz0Xp9s82yQDlz4UuCj5b2Mw7DVex50yuRPZNs993OwSEN1kkCz8oKD5a+qQah4DqMr/HIx2ouqvg4Xq5v0XTQ/GlGEdRNsMDBusc4NBvPCSrP9NBgcdB82VxZgQSBd70jq7Dg2x2YedhyB4OUHz3YF1zqyqne4XE6/pWxffk4yuxiwllMKir2TatFZnqBF4fBRTqhkOh2rQDd+GlIH21MyTbPLNWKdXwCx5xh4Jab1+JHRxbqfQt7QYv0y1HEd0CpXhfV1l8ve4gpgnXMoEOwAYDduulh6ayINsJVhJ2JDqRqJAsgSSunOn1V/d+xMTiNn1l3IFd7GvZICFIqPJ3fG/vLfj9xN9Fd4LB029oUDAkl/gSYYaHdDqsI6gcBDWRwLOg2RnDlKtUocesAMaAmRa7bxiCOKQH3YmCIIpPJbmmU9/m7mu7CvqvMblGL+JiU0AhwEcUj3tTzBbMJeQ4TbYVW/RQjryC7DLFkowpU96YmVoL5QxRdURGtEm3pwn8eY8S7RN6thAqzWYq/kYb0vNeQDDi9h6B8NtGIxEGYxEGQyYv5A7jgaxnkkVDtDUr8vS1SHEhJqCHG4Rzqgn0inGCX8Zu3kLdYoNprgLybnoyhSbeoq7MsVd92pMGaSe4jFOHPbjVmOD2FkW0ajnoDPqOejArUY9kc+QrvU5qx76d6R1ULt6R0+8VQ93dOVzR+3oycpWPX23o4/rjt4/wY4+Ue/o/WJct+l+vaPXjwZ9nna2d/T+5e2K/SfY+4V4aGVuRx9vdnR3wOCOG3i+GOsZZKjLQbf0UCfVukkwcHyot3Ta9br10Tbw8dOhP7BBxxrAx23QRCsY+Nz1GET5IQOfZJmBT6IGPl82Jl7BjrchKkvseBuaEtVI3qIpbTNeh3ARAjXU5EfuGoSLG5pihkZY2/HWBGUpwi234408zLwhbzjakPcX0xZToq5nLkbyikyJWapDd0xJ2GZKwmVMiY/gbNQATgT0FJI4tkjXqIVWq1SqR8CIhE6m55aQ6wxK367jvjXE8xS2CBhl8vAicQOvVSW1P2fttRPz01j3xviEAYFcEAxqLzdAShFogFabawbGhT13WtXRhDGsnCqZhDGsCWMIwph4wph4wghvt5owkk6EapQPGh3XdoE0dERd8AVsiGLkrF/bRLGxdIxbRDEaQRQ7xNFOmygK5XY0m+74LRztjiSKkaPMJyCKcQ3PrtZX224qs6x8dYHYXDGsb0EUExDFmHSUp6WjiGK4MlHMHFHsKVHMTkAU+zVRzIqeUrqsJor1I9hI61NPFLPL2xX7T0A+hSxqZQ6ZeisRxVDFHMbNjNtEMa7lnJMSxfhERDEZIophmyiGnijGtJrR3SluiGKoRPEd1lpv9ZisoJs10M1WGsPWnVokzN2uF6mspbgNhxS326CEC39DliLutgXKsgkkbwzB86QM2uoq1WPh2j6CZvfHrdtUz7KPWGdemWhIPvx91NI4MRt0qdsBy24FBUMG0DE4li0SnJMk3kalDvWbFOnvvRiZJqrDd8pzBVWiLsg/Fdlof3QSmMSqszR6htWc85Jn+5xVF5T4LPuwdSQTchGePWxd3q5ZZ5/5qC1TnMs8ZmWxdlyuAvDZ2+vqFAqsTqFgHd/7CIKFzWrtjP5sqsc+/BufTZz/zWbVPLBlbDQCl/y+cJA5E9ah2GSe5hkXB9NQrHVj566QqS9bUmS3orL8XlIv9bBw7hVLoNxSXBe6brtu3Y7puu2eYN326nXb1WMHBHe9ePjRoAsL/LH2uu1e3q7Yf4ITii5OKPC6W7djqrGW8SxDhazGhZ/9jsQFxu4mSqCXb+sydCpQ4sYu3c7s82jxzNDiQ6E1ihaztHY6BU6q4zipGdyRkyr0QL8Y5qQ0kJD/KHTsl9w17FeHiVCcEaizYmBFfADil+iMdvz8ddz8dbzhTEcNZ+qptM1UdjCVUgum0jq62sFUdvxUdkZMpXVTaZuptA7idulUQjWnr2IqU51KYPDFw4+QYzmtp5IVF6l7VSv2n2DS06KrlbmzVTeVnaGp7Lip7OgO+CfhCPc+WwzpfOfgKutMd8LZp6EHDnh+MspNMGm7CRbOTfBMeAYPuwkuOicVFTDwrgoYSdtNMNk3r2eCTklfdz30XQ9910Pf9dB3PfRdD33XYXQ8LKZspXUVLta3ZH1L1rdkfUvWt2R9S9a3VKtkR4s6yb5TknQOT9jxp6h+jZ6B+rVfyfr2/pFqFK2eHZEzXoxr48UNS1JJzpzceDFy2scNtfbxHJ9DeoOeGAMF1G9R7bhTvWn2HgYTxN4DV65I954pPTOaYhjfh2mJxL2HtitTzr2jzlgduIzVmSaoUnObcpxIoKdc6yFS3U06DRe3InQGighmTl3fXdAG32WEVEHrqokpdtLbt4/dSVV/dV0djUyrfe8g3qfGy+icZW82gh7a95SGTDdTJXnE1H1P1SwwXa6oLVJtouvyKWG93MWzY5nArtKtqLaUKRlb54AtM3VoMdXMnnnZ2QXLqb3UGLFFtlDNXKmpvXYz6xSOQaD6Tul9UmoWHvl2kFN7mhX5PFSgqy53AfHHuFANorp04OLSoVFPp3EAzKbxAA6AGR0A65a1dyHar+yl0fXw6J+lW/+PbTtys/DTq4pV2449GL7xx+JtBx75n/3spfSOxmCkO0U4X81IE2eH+Yt5NoUPfx+EESLYYCx7SsmB2s6D482pZYLwQ3CSHVP3QVM7WD2b+kZHKqlvTPY1UnWiUnUyJFWHtaqxB7DrqvcupZ6ARZ6ARZ6ARZ6ARZ6ARZ6ARZ6ARY6AJSSW/owTwrnMslD4rp5yKtUOlcIbUPjmlNN4Cq9qaX0XmlBP4aFwJOL4bhvfbeO7bXy3je+28d02vtvGd1ttl9tC/lYNBdGi8MZTeOMp/FM/dPOKAmhPUw7GKU/DlvK01hM0ytP4xMehJ1CernKM5WplLFedgLFcUzOWq4rVyi2uqhnL+hEOOfWpZyxXXd6u2H8yWIM312hljrFc3egJ4sqnw6ZLZKIukcmwS6RRl8iYygGr4YHAj22tPSKZ+u1ZZlXAqAzYChQ96lip59SZri+oGA78w6nrXW8JR+hdl/T6GbBVcyO0tnNeafu+d3xoA5iqW+S6XGn7jg/dstrzVHhVeaq5ts52bs8ynuppc1JzSxS+c6rvRVz7Nif1rPJPc6eoKT49HK9tsU6ZgzLPgIOyzg8kIvtkKpz+lnnND0RquR8X8SJjO05TaQw7+1htfGUNf96W3cUBwqK2c1RadWOlhX3czsXFpA34KzxPY2MPEVzTVMbT+lA26NhZ9jdji9zYZnHXuMlGcJNdYk4eOU9ZmPb4CNyRi8Ad3r7tkc71g0nreKiDidCCaC882BhrJoQPGWs7lBQMxMdj2EMJx4D0Xwf1Vks16pUrRxX6TKq8GiVZxSisERNuSjkN6yqT3xNr+OkC6mEwXxaiyBzPE62mTAzzCyjNny1SpBrB8RL0Cwb6jBi7wHGF+YsYoF/+wGUlP6dsIHJWwZns8VS9TlRo1cs/dNkBXuZB1PZPxGTcaDUk8yFbdnboKz21oE812KbzSww1ZdFhaE8ieCV24ZUIeGh+1Z4G3mI8iZ101uMzhtu2YBFl0rczdiVfdu9ZF2rC6MmdCzURw3QMMMb1e1UBy00MgSUAzEEHvoMEvFXMcU8z95gq2UzhL9DewciIFkMRumVh/vSK6UHPjd+68Yca9QMUH0qYOZo72bNbtonveTFpgJTl7bJcy6baZVNaVrTLCmVejcZLrsMowLzPVuFemFICwLDhByhWVXb3YHW4tTH4W4Mzbwy7SEnd1rSN8ZbZ/K1hlFBZzC5Fy6oqvKjsb1/2Jc3+Qpz3Ljf7i0eY/cUjzP7CZWZ/a5zZn3CuhGS36AokizXvKtYUY9ON3R9AiiEtGeXTGuE3fXAcVD5yUPl39qCmRg5q6tka1OpvxZiKkWMqBEGla+N1EPMEIXoFbTuaFbgDUaujiVLUb2iUkJUvsxs9VTnLcU+Us+ZOaNbh7EYpZ01gTXE383JW7Nmb2LM3sWdvYs/exJ69iT17E7ekq7n5lnQVkWCqyO24t1AZPTNsQWpqRk9FK30VotVc++BzjueesRd4Yi/mxF7Mib2YE3sxJ/ZiTuwFqrl5ClTelGROD01bjN4zE6O8EUqXoxgpRq1ggzIBeE08RTFq0olRa1WMmjyBGHVaLUZNFmtVNpqsxaj6EdLZ6lMvRk1e3q7YfzI4DW+eppU5MWrtKdqgCLivJIfqTFCMm3icttpaoIooUM3tWVmgetpi1BzTqQNljTdfscPmK0e/cOpi1DtXDTHo0Qbn47tBL6fCoEeeQY/aDHq0jEFHCaOKFnTYoVVHpzpQOKsOF2wAYcWyVu5hmPGRRXchnDtk0e0iAtY6xV4tKISORU/c+QZZ9ARKL+HHOw2LXhdBnaq5YvkQcHYseuJH1yUCaO7ApBkd0xAmPpvqLL1tpIws+tiIBIBjMlAEfhfW3Mjt1YXZjghPxd6q9/qrpQtgrKWOMZHKHwEXOTbDLMdMXJYpSSrGZNXYcvWtZfgK9aCWedKj7xDCNQjFYE3F+SFDRzETOsI1/9blHaB9robk9AaFlokFjll47FxKU8+YSYCL1SA+C3dch+iZR5nfLNZwfTD2VyvDCwZwRYqj6xE8084P+tLuhOwuMEnvgRHS5LzzoPOJRmb9fTCUPFODljAvNIE6szIWVF728zm3VXQ1zA+j52U71XKCvCP4ZgbFa3xCBwjcFu5F+izpw6rWFpk1bLbbIlcNAQFnNvYVDP2zasjVQ3bnDArV5buzGbE7mxG7MxNuLWk6dHxwz7lKi4TAn8WqdxWrYJ7cm267iExhJ89AeTPNI+lQAnluEiQ3M7rB9nZE13lgwK6199Qh1TsVSO1e9hkh1XtmkOqtAKlMwSI0YXZ6ifeQ42GUCHJpxMXqrIjvuA7oKtg6Qaamy6NlSITTXiJ0LEy6jIWJlIWJlIWJahYmAoT7noXpe9cXBIqbbRlgRaoqjpapilEV0px7+yvHwqSehUk945J6xiX1jEvqGZfUbQXRsOsLbbZmnYaqM+z6Qg2VYeSzzm5oqJzrC/I/Jd71JWlcXyCZzqrBlmcsUs9OpJ6dSD07kXp2Im27Qgzpf2eVXZldwq48PV2vsKnO304ZRd3gomFdL+YNtlXU9fbBss6X+SgmJVqZSVnjmJRJZVLWnIqud3XNeaxepusVDNWnnklxauHVjklZ3dL1roauF687JmWyYVJaidWtiwAealq52Lm+dBompeNdX5JG65vQIWG2tggbwaQ8RdZkVlmTWeCNZv9LHGvCzJhgTR76kmqyWkZk0TIjskhZk5vsyY/Qvb42HxktN2ofgx8w7hz8GzBYDYcPwo8vPQg/YFRrG7VPwqPlJ+FOB5sv0cHmqoPNl+hgT6BRjU7tRPrxmXD1sEZ1tPHQsJ5VL+ufgWIVx9IHTBNeAR7S5WqN+DcU6agcc1ybD2DiYsII15YiBszY0gAwjmsz7XApZsiQaZv3yXjY1tFf7LQ+ROyoJvyLNzBWt6IrOEkY2+vUwBZHou04ivQgPBbUfFvo84yGLs/oWGU922Yd12b3VqZh2kLk5AAX5Jg32LC8l0nPi7FNweFQK7scDqkz9jJhmMieXqLx0HZBfRhfi2QLMlcI+sqfPO3syqYK/LtgwADVO4TeIMBoj5o8qBfAcU1WGsciRMR65JHcV/ZZ8byIOzUjFSLBMtu7quwoI9XysYVaMWrYg7XqY5sTk9ee0Md2rUudU+RKlLOakVo7wsc2GsEeRCPYg+iUfGzXUs3R03SnWDwubItjp1xhsfZdxVp4ql03xFTRHKKDNJ1UcwBcdcC8OQ2Y9xI1xka6lA2kZ8KZMmDe3LwDtcnP0VNrALeOmHcdsrWbOssnLZT3qTNO6KMihy4qsuuivY4uin3ZteFgq9FXNBuRvLkFf+aolqZza3gtpS8RgtZjl94UXFhmdaw8fbfUmZX3HceM+MZUOgtsYMPqJ7HMXHzjTqF3p1PxfFpx+mUEItoBm59t1xB+K9ZvNTjeqdf/fTpJde0aaGwXYNBXGPQBg85Slva5wtndyz57LnE2U6TsyxS2WVrKXGeHi2EGAYmQ9ji0RXGIbs22WFOr0unrKqyJVeJBsxxQAFIMxVKSGPIrjG94mbvfnl+oCL5VvQ3mHGYLgViOzyQby/AZX5+LDYVhUEmLeuppsAveDlhEsS6pQBeRBp/M3wS5WzsXyRKKRiyhnhoHRWpM8f+z9y7QdlxnmWA9TtV51HnUedyH7rlX2lWSrStLspXYsR07IB3HluVHbCe4g5thrcm0FA99b5gVJWk60EqkNCajCYEYSM+STVicc5UmbiCN6M5qaZoEBB2IA4GoMwS7J4E4JD2oG2g0LFa3oZnJ/N//712165xzr+5VHHAAe+lWnaq9d+39773/9/5/fLI0fQthV3K76Ht8u9mZMlxOqKbMQPfJQHdxX6YO9MB6A2U4olZ9kwi1OnVxNreyOJsmHeVfC0JFUM9pONU83zRa3ZWDc1mDkze4eTifPbQwZsmkrsbnUs7pIjuDN4aWSBFZF2kl+IQ1r0V7JZZlJT76clqJ97yUS7E8dSmKRhKSoFmK9alLsTqxFIP1l6I+1VRfdykGX99SDK66FJW3st5q1K82WpAB4Be8hAvSfHOjNclnQTgaFCNyOS1jMDm6T5weR5iFnYYZuqZeuq1Jho79tR9dUa1NTvp0/NPYyqQ3roZ/vqGT7kGdVJrK1WVvNj3ljybBXz1rV8pYuwCoOhC2JtgEaxeAtQuEtauOsXYyx1XDelXXZ+2qmvUKVHUd1i4AtqwWWbvJ9tdj7dZtX7N2pnVh7R4FDGz2Nhhn7b5Rq3cd1u4btHo1a1e+Ztauea+FOwR0QnxIgISLSuqaODI4GcSQZE+d+qoSjQofpuGTqvx8sfA8S2kgpFEf7nssQ3lHJDAiS6cv6ceOZB970FCyU+tGC+hc3bC8aAzLipXfK0iyoTFjLVP18CHQ0js2Z19eVG3s2A3sy5m1OC5ai8GgaDWTbxRHvlYzuVjUtsX4yrg3LkrDZlzKs4KImmnMZqxVqvGYBTgWlWo8plIdt+fW+Qsb2XO1Ibem05vfO92Qu6h1pMqJuzQ3cn4NB8BZlVUefDCJ4yRg/aQn+klP+6Iab9SaGFL59HEN0KuINypO3Oijqh4noXgre6NKKGTbLzkHhMsGRdrtNTFlZQdW+SwbQn985v92OcR9HNAiaNHKo4dxmadwl2O0jaKFG/zwQeq6The6C8wBVJmXf87XltTUowY8qoxGuIo7+N9RRSdEVRJq2LGrmG86cXk8puKsjqk4JzEVZydjKnLod2iO501IxVlJlEKlTUhF8wr2bHmbhVScfcxuOKuSzKPkvDSmQyrO6ZNpWYrKUPHUyYlW0cX+61v9B096J6o6pp74cdZXkm3T7cNU6kqF1uQurR4U666bnyPxBi9UWBH3VU9PuZwleV621eB5eZt5VrILJD+W4yTePucrFTlP4i17z/OZDCw1/61yeTGg0s9WwD9d4dygbvzqpGYlKWC0xULQSrogp6YvBSsJvn2ZrogPNgwQmcUbXKDrIhoqrSQNnJKm30t0vUi/m+gUXbfT9Um6thBwgK47MEJ/JUFktxfpCrn8HF3b6BZdE+SYoWuHrmfomuL7xPx18X267sT3od3D9+m6C993V4jM0Pfp93X4Pv2exffpej2+T9c5fJ+uu9F+uJLgVNAZuu7B9+mKMGjP0nUv+kfXfegfXfejfnkluRH16XoT2qfrAbRP11fg+3R9Jb5fWUluRv/oimRpZ+j6KnyPrrei/1TuNoyHrrej/3R9NcrT9Q7Up+udaI+++xq0T9dvwffo+q34Pl0Poj90PTT44q/gTFMyGLzwK85NdHPX4C8W9tD1kcE/7e+n62sHf8K/Xz/4bwt4f/fgC5/DyafkDYOvfI5r3DN4/2vw4NsG7+Xro4NP3Ynr3xtc5OsbB39cxScOD/4fHGlN7h18iX8fGXyFf983+OqvcR/uH/zur3HT3z74jDx5YPCr8uSxwQc/xU8eHJz5FHLHJK/z+TjjIuHrSJhYXpjPYmH6dzjPCpZ0B2F2qBZ0aXArR2m/606nBIdMCbNMu/H5QKq/oK+XdTMvcDPij7LP+cdGpe7v8d4iKnVwsFlwPPrxFpYZsJ+43SuB4E1uD5k08ZuWSIBISHy/xz8TIP0prZMA2+kybSfa6LSd5qWJ06GYsvUAz+ienTEDrGYDJL5SPcLxsNRrkW67bg3wGT2wc/p6QTdzrjDA73etEb4zG+Ep1x7iO/HnRDbEi3qIF/QQ/6jEQzyDIV4uyRAvl27z36QYLZnhLUjtYaga1uhQAd26XNKjO9W706nRd18v47r7ThpXwxrXiyWpeEqP67Qe16nCuD5gj+sJNxvY+wsDe8KVzNXZ0J7UQzuth/ZxGdplZBS8oId2oYRUtNhPz48N7UKomtbQLuihXTBDczBH7l2//bkf+sK/+emnP/EfdSizCuazaQ3xWYtZfzi/fQid3SdC6vIUIRUusCVbHfHQhrz9Q2PqiIrh7R/6hvP2D2ne/qGn1UOQy27pJw9pcnOpJDB4AdB+yJZDn8eb8h0Ol6C5eb/MzQXMzWk9N6dLyBgMnHdpbG4uhaplzc1pPTenx5fdG2TZ3YNl17Lm5AyHj/mML+B/1l8P/vZ0fTNOxW/7/eRhPRdDPRfnAN2H7bl4Rs/FUM/FF32ei9OYi+d9mYvnfSRnBh16dmwuLocqtuYCFTAXz/vaWTDOYqwUIvzDB+TbbmOs/mgWBLCpYp0dFU1d8fUX0Af/Fu+LLnEu+tkp9DW4w+EyHofsRp+fR4rQZ3Sfn/GRK+Q1fLiq0OVTZdW2uvyM7vIzU7r8gbEu/z0OOK3eaMWabltdvqi7d0F3+Xnq8rP62SVfunxRd/kvPe7yM+jyi550+UUPepg72ZGx0OUzZdWxuozy6PKL3lQ6eVjo5L2gkx297lHtSd2V0yRy7SW2lhaMoHF096FX+wgwiJXwpO7iZ6SLL3rUxWd1F5/14Jt5Bzs0FLp4rqy6NinXXXx2ehePSBfvQxe7VhfhZ8gk3UMXL2ddvOJJFy970kUuB5IsXXwWXTyju3jGg2cGmKrlYhefLaueTYx1F894kxP/g2MTfz8nP1LfbuU96lkTf053+xl0gTp+xX21f0F31by7qLv8R66QWHT5sqtJrAsXkts5XUWhyy+U1YxNYV1NYd2rd/kB6fJjVpdnrC6f0t160ZUuv0hdPq27bN49qbv8cenyZURru6C7fMGFrwtY2flil18sq1mbcuouX3D1QgiyhQDV1oOyEF6HSDqzNt1k3PyMxtEf9jdUiv2NwNbn/H6E5c6U09XT705QTldTTldTTpmaC5ia03pqTnP+iVvZ8acwNU9W1JxNOPXUnHaLTM2/u/wf3vdrf3zp5//cZmrmbALqatSpr0Pd0NC1+bZf8i2+7WN+xrd93Lf5to/5+HvBz/i2c67wbc/oEf5RRegRRni5ovcLKzpexcnX8xE2bvU+hgLz1EhFb0ipQL951IMLLPUKi667uWrOMFI3vouoA++HPd6bbvPfKeL2i2IpfhP+HEM3a/Iw3ieJZjxhvaGnI3H7nawu4twzy94QWdtxGO9MBSv18HEceGMnGbr15dan25LcVug2ULdQ9f18UNHUPrWF2jeb2lfKuvbl8uZrv9LUft7UvrSF2q8wtS+a2he2UPuAqf2MqT3cQu2bTO0nTe3TW6h9o6n9YqhrXwk3X3u/qf2Cqf38FmrvM7WfNbUvbqH2XlP7nKn9zBZq32BqnzG1n9xC7T2m9imuPU+i/eYrL2fT7Zrpdjdfe3c23ab26S3UnsuWual9aQu1r8+Wual9YQu1Z7Pt7Znt7W2+9nXZ9jbfvryFb8+Y2hfMt89t4du7TO2hqX1mC7V7pvZlU/uFLdTeaWpfMrWf3ULtbrbMfbPM/c3XTrNlbmq/uIVvd7LtbWpf3MK3k2x7m9rPbKF2O0NrpvaVLdRWGVoztZ/fQu04298ls79Lm6+9I9vfpvbpLdRuZfvb1L60hdrbs/1tal/YQu1mtr8Ds7+Dzddeyva3+fblLXy7ke1v8+1zW/j2Yra/Te0zW6hdz/a3qf3CFmr3s/1taj+7hdrguPZ7rFNeP5RSOQulVJZQSmV9iGYBR+2E/9+masjxV5PcgVcqMIWVosGP7h782M2D3x25g3+1LXacaPCx6/Hg9/IHz3GJL+UP/uQ6PHghezB+cuIRfXLi9XJy4pENTk68wZyceES9Xo5DPGJOTphXySORkrfZyYlHHrMbzqokb0DJN0hj+uTE6zMjVwyjcyGzoZ9lNiyLBFDmNF6I2QAjl/J1csMQvm0muWGYJfAIs3R5oU6XF0rujg1Cg19x4r2wTE0GmbniZFFmfuzTH+7gyAKOGU9Gmfn0h3+0mh1YQFE5r3DFscPM0C8JDW4+WDylcMWRYwq4elxmvdDgaGgzxxN+tOLVTprUW1lo8J5c4qnWQk/MyDh6SnILHwa9p6QDmYjh0MsNh3zY9KuenPXxxGgoJ7fwAqcDjL2QjwnAVliSUwESqo2Nmp5OOQXjnw4NzhnR8EEG4Mc4XRobHzkLIQ8//qUg2XpUcPg+J2U7OHiICHTsJ9mTM7FsJZ08izYRDTw20cB7hWjgeplwNHDq53rRwN1CNPBY1XhQfBrNtaOBm5WSRQNnPQSWpZcvS7g48LL0itHAPbMsJRq4FA0EgFZaJV6WnvWxhE/MGXcTXo68aKFOkGXpFqOBcwtuIRq4NxYNvMdzuIlo4OslPapr/NUQ/FXfAH81Df6qm7wHdYO/zCsEhZW3Gf7SgcN1w1mVpImSTWlM46/GJqOBA3hyPl1HA3f1JEw5n272dHb2K58O+QEvlLBwxpyBDRR45Q9dzkB/lWjgjAevc0xAYHTqo6r80bvUe59QlY+qqtw57eucaKdV6qNUjN+UP0rFdJnrnWjbtDJOu4sD4+678e6jypenhKPas7Q171KnP7KLFs9HssofVSUpgnBFTnueFoJDH3dWB289jtzxyolC+kMdL9Hz6H9EhNfTu1cHl8sP8/5s38ez5gzqb0mdwVd/vrTC2Y4ccf8wPwmvIxvQX8ibwS/sNY/+i3n0Q59BsegrJU6BqxNZ+uuc5yoxtAcOpmiwMDWZQpwlU5CExIidNJZMoQL8j4aSsiBd8dAoMdodO8tVCJJV0kGy+CxXyQTJCk2QrDCLTJ2d5Qrss1x2YFB9lqukg2SFOkhWaSxIVn6WK8tgb7LaC8L3iue4SpxNkBC+KgNRBwZA4iEiaF9ySPlZNE9fonmyM+RGCTFrGhFEgghqm4kjXTOx/msTcaTtBKhungA1azirMpkA1TUJUEG742VZFNi1OifmB//Y5YwfJiemr3Nivsd1vZMDj93b2MfH51Av9GdQJlgx84E/g3/61fc9+X205Qc1eRzTbSS3vQb7ec2noJWDsBUN3rc7CSTOCydFDeUlimXbNGz7HLMqiN7nuj664JsuePJ1f8rX5Tsl8x0v4aOtxLy/Tt7VWWG9ksp5VxR7324qV0k4x5PDUWwY0XHp3oBQwz8+TvQWaYKQpuyH/ur6MnDvvWp3vsd1T2J6uC8Lg/KUXixIN/ysG5zUijuxIImBOTY/kEVFSkkv2JN94D7AxaSE8l7tO0SJo+/9Rn/23ccH3r2FLxMQ8OXPeS7xB0htPPCoeBmuWfL1SgH0Fc5srT8O/ErQe1gqcZ5banaR+IAIxaoW6GscMwIeyNzFgYtQeBxlDIQqksnAu8SJ+DltfeQD5lgpecMSUE6XozKIqCf5+qwyzH3kZSooE4yVCcCo5GXi4zh4P1aG2UKUoc0WDdRxjs9fLCIsYwWPYrOIEHQLCOUlWNO9bE0bwJZQbDNrutCdl2iLbb473tW78+XQa5x0T1DbnukQQpgMwsTTjDT36D1ffW/Wo0q+7P3EGyhEeGb/6JJ0XAI9IFLhrcKH9fK+qYA6jApMWHQ+ZjnpbvLXYb1KJJkSB4+uoeX4V/0FKVpj3pYQDSEXiS3tyms++ShlfEkgXmXaL2IBj6PO5kIP6agfZup84njShLgCJ21aR7AcCV8BZg5P3belkX4Vjb3y1n/lT3/lcSpA9mMetN5Gwk8DglYjc26H5TIU+WlqhyBncH33HdSxxMToFVY0kgBlPRZQezjaQcCUYcc8bOQuxIaGv3OZWnbQMseOTENmIuhuL/KQiUsy51cvq9arhasoeydV6ylt1XxhcJRetn4akR1hen5nxETVQXd4xuflqA+mCTqZgcOhVjz0AvFMAHwfwEcWY/gyV6ku0Qoat5ONt8RPaQJC/Soce+Wt/8qf/srBBDh8vBgT4HGWcGQw0BIUJkBUSNM7hAFyfZkAngoA0zcTgOQjWIfC3DFQvOjtwmIUNryYKLHN/GkbjBmQCYraE5T/fuwjj2mHTtHNTTmDH9qtnL5s66/zm/PZN2P55g+u9833v2TfzNFaXb75vvW++YP5Nw8SqZ6Gu8Y+xhSyIrVDvu9jjrzo37tuWOi0zpfGooizz3FMhnP1NjZF/zJJQwv39UmcnH/H4D2nTl0qr+JIw/l3Qx8VoL+Dn3RXoEKjPkPoPMdiDytD7smKnJKnSTjgRCA+4EtACLPdDsBI4NW0jDvk/1BO/AEm0/pIDIv93KAsNYPRv9/l8CCah/BEoTXemZA9u00/ynK0Dr0IkC/F6oUvvSjpc04kF3LmhDwhVqTTLA4WuD+aqdWiLWgUd53a4HNjED9pgiF4fMGPvlD2SidaxGuJMrBGfxIO5FRJGrjUk56pihgUSVWVkjnTQDIzqLOeEjxaI+lA9uNf+PL9vK46qo7Za+BPDyujmTj6IMw7+aAFsUCjHwpXB1/+0++9D0eyZlDoZOLTMDqEAzzs+NUU4yYY07TXHmaton88aQExrCazfFiDlYe1VWCHWNUSNAF1ElBI0hU90v2lQ5yGgZDKXuL8keabOvoghxUD1UJ+BJwNIoG2pbU9DGMkb/B0LcI04dE06icc40fRTag41n1VtWQqZgf+fZyklkkFNEqe+O774pJf4rNUCP7EDVcLDZf69Cgyjyr8jVI/NW+aeeFK8Y03rU4V3UTBKrrpqDzN+khTkb9/8WzCEnlDdU0v3sxHlVW5UEaV0YJOPah8gLKegzKwQenboPSLoPRV3QZlcAyg9HEgBqAMrh2UaLhaaNjv06MCKIke91PzpgDKwhtvWp0quomCVXRzQ1DWM1AGj0ui33AclNQCEMUMggAThcsjGv+D0gkFe2kPLYxU5Wwe3jWSfD5M/XCklxa8nIeSYBGqBg0mUOacipnqdaLoDz2vRpyl2dzIPp5wYIYKYjIzM5Zt5WphKwdTtnKgWIDmyBiV7ISmp1zsOuK23ON8pJsdv1POkR2RmMVx96rEdPrvSJsrzPTQnccgaqnWEEp9/EDEJ1yHxm/r0sE1DLlKU1V5m/BhlZUtVHSwWnDo3kOW2xpd0po5fVkvmT5lPXLyhh3dsDO1YTAZkU4cLjif0W3U0wTVYWy714/jz/rRL/lecDLEDHhJaHBxUpaSkoVKBVQWct7UieDQk2YiQpkImYMBa5JyTOqlgWDSFzQmrd3d/4ff/toLc7/4qX8ARHv353/4Pa/89R/5N586SgQs+3XvMRStytmqAKiWSbVy7++nFVbdCyEuCRPB2dcIYquJDrWEIk7CiaklVned4zfoLVQbJgi1WFO1tSHSrUnAvsoRrTAKeUx9WkFYlueTJoAJW6GwfkAtjWyeokLDaJFmq3kWYQeHaUR3/HCEqSd8NqIPtwitNdZGSTS2b6B+5rTpkv9YlMghJ/HmaHcyq+Cmo+gzkBXziU1c4eaZriqiUmUCxElEy9TTMDiJxW9PBElFTU5haRWBA0OxyCJSy9hFfOIWikW2E4t0UuXT4zBn5j1Ad3ZFhxgBi6IuSIxJ2p4rUfQTDW+WqD0txuu08Q8oIWUtLQ52ASVsl9FysvMlPIpx5AyjXczW6LKoaJWOlLqLdZaDeoLz1bRoPXWdLNld6jpZsp5KscR24s92kbYTtZQv3qU0KSxeZhP6+ft+EaaAl6sW8/eLRYBGavkeTnjkFdevUmK4UmK4UiAhS9AyqeQBhmuCfwTb6x/ogwMbsM11SSlApH8PrSMUoV9EYHc8cDxdpLokHKgdVI3/0WLu99P+A30UqqeLViu0zOUflVnsJzvo9nr8u7+fLBG30vcOWY0TqBX/u59bqvT1tqS/R6RtKgNg7sA4t/MiXKQuLKILtMWWqPTSAzAeT1uY2cpw9MpI+hH1bRf+UfW+uu6BBjpMHV1NWaRcBMXfnm/LUC1yJIga7eGdTDI1Aq2MniICDm4j5d8B/QYZrYygtVflo32+Vo/2h4TzwJyEqnIMRLVOdbZzHcIFoyGfb2SmoS84G93ZobvjTXTHY+E64u4wPncL3XE30Z2o0B3iFAvdaRjZ2urO0qoE43akOzlrqXFhi7vDQQmWCt1Z2kR3WoXuNKmO3Z2mQaa6O9epPjO/e1Rfp0yQ/qS7sMIrq1Jzp9pV6Eeqf6/fj7Q6TBAIdwkEMevQKC0Pk3nvBFLCD9O5u+94/4Hf/+HvvecXj5Xy/Agqe/ytR3mxzau5s/ptfGgtKzeMaCE0FDW4TcV5lfz+F48dhyKE3p5Fr4aE76FW3K6gf0p3rKTXAeZ1tV3W4fUr6S6hHLJA0oQgILNynQAiadNO4QlIFuhuJ9911C79tktguZ6fRQQwuespDcRkhvao1IV7mNSdVctqNxOpGk1UeZjixBMBpnyW+qrK1qDK1qD6GgSLhwxY/v4h5lzKxBnO8gzNKDMzsxMzM6IVEoNX5JJdFXHJiH5PloQDeVt1uGRbLXDJBfo9WVL25Cx9mfpAEz2ilbaNpqdHX6Bv8ZMGTWVddaglapOf1C29DPRji7gsGnq7Gyt1t9qjzbV7hMz2hcwSP6HE+OVFn4PcvAG3GmQEqDLBJI1zq47FrQYZy6q5VQ7kQfeMNCrC8gNpYbnUmPcrK74OETqRb/QUVQ6dtRhxjaGqemTVAlsoDMTv+F7lZFU4wGCMAxT+z4wpwpgIv5lR1ZjD4lHREGRUNWH9igxFzk4YIToS6leD4VtOXYRMPEISoH0I0MR3vSV1zhtl4sG1NFbxmnLPkzzBfNI7qNJbBuF3nyf+qYMHxNxDGmLo0RI5T9skfpr2hc8cG0EyPwHSyG9bzGpjAVPvNO/WzLc+LaWualq4ACEoATjRwUK+T73zXN/L6s+siU7AkRdO3vAace9ogiTloZpB617q6LwnLB3Sgm2tYTWvDVXnbNpUbfxq0tBHqn12iJnVXKGWRCsSJsTIViVmDmHSiL4Faq/tiSvLlbMnjrFhYyyecuNThJHfwozYE7Csuyey9VDN1kM5Ww+1LAczp4vSLFYgLFYwRTyral5A8gXK0iiPMU6qxkZQ6kpakc7Aswwx4o4AC+D8Dctwml8S7olt9hJApSxJ/qIVAifCV9yZckbDQvGBz72UAEOrnKA8Wx2HeOucPwudObwA2IvNjf+ZNkfATa1hgl2b9nRcKmaQSFxfRehzj9mha2zEU5XVa25B18eekLolVYt/E8IYvceYtTeXbMGgPt6MSam8ORXd7/jRnrxUKj4Qy0iIvSwORlnJ93pRI2sjft6P/qDilcR7Y7iB90aIgClpWfq3vLEbh8rcOObFjWN+LJPzu1UpM1C8FgaK0jkqeNcp89/JKKnKqpbU4b6kXpVjShypRLJ0evPak8IVoy6sGBzuF1CPTwLWE5m7OY7Wk65E57/LeQP3u/pvX+0vg3g8wfF6T3mIabv83Yz3HWQe842GEflCOSFB9Y0SsoUfJHrthyZjKrcHSdmJL7uIScKvHaqYyrcgo1Xz8o9JZtYPe9Bicx+GnqAMJ2Xr1upx5f3DlKRPtltDeRI8oO/eGtEeNXp31HbMHSsF3NexBpmEZ48T1Ap1SUOJRR0eV0gZVi+zNaqigsMNP9ItwNesFE2r9DpYf+nLhK8jqR/m9T27vs/jprV3q/ekCMWZY+CTLqPLD+q87+LXsjPza+EUu/5efzkpDf78Cw4HqqGFjPhTZZ2xeiwyDkepEePkB3HegkMV3SetPemy6cEd1F4ncavucLriTiQLaNB6G+c6ipf5M4GgxreJT5Ij7nlw1ovE/TW+VbkrOIrnDH71z3TfeKftc7q2Y26QOeZ65mheiQ+qVcS7KdCOuez7d8blkcE31x+ccceGNun1UwzIU9UBeWoSkKdqBeTxtYuPrwPyRCYgj04V73De98IrnSr+jRw6z8lTxWcNZ1WSCJqbqoqoue+Q+HcxziI6Jsu4T4jFcqLbCI0950d/5vneidJJ992awWM2bgOt1yRDN6F0ZONlzsYZcTANn2IFZviJVHDPFQ559f3wt0vLgz/8yHu/5j/Moeffc+rSe2AKNdTplAoML37l4JCTC2Y/cwoGISR+xsseDM+OBM+XBz/387/8/3HbugwYa6ucKXbq1EXnPjCm5t3FNS789FhpTJUwp3jF2er7k+xnTbOftSns59Oe554ITr6UMJ+AdxLYHnvBJwBnjjJWPk6I7b//uw9/jZPChNh6f+rfhwSvGcdHePTXAwEL3l/8WllDT4OU0GD8GR8CPqt6kbSOMN9xrpS5zcHrloFkwUbbhTeCzaTG9t/70b7JxSzHFty9kvo4W9OX/OgXPCKx3gkLujljH64jrExXrZcN7xbmvFs4bhvTIoxjqWmh41lHTUvvV9OA56pqqVSHSdWoMtwj7E0vesT7+2ClCXahjvJZFsUrJriWCUmFltKqaOhro6RqGOfi0jQuuuEUhflTnlu1pT1HpL1FiwWubN0oYewRNYgsUdEeUYM9oq6HVxGbRCMT/Kpa8OMr65ErqsG2B9j4KitTCmjjgjY1wD5FY9aZ66KS+Ub2Bcc2K4y0LaE2BTQfd9kJzay9hH1JoXV2WeuMy4HEJTGwBPgVxY5SUcc3CLhnBeXzuH7av7ry2eH0TAVlItG5B1iwKcW/7vMq8uNP+yTc/Lrv1vIdUbeMHTzBsYjzCtnrMY6qdjhAgQYXTpqCUGpavxwY4ccR4ccxy4CYpSMaUdVFLo6KGygqbCCCRVgUjsKiVtnn5LrZ+wpRi8J7YM9q/r5K/BlgEIl9u8neq8WNKAnJcFBDVQg6RJgjghY2X8BSfT9lQsCsiMNm1CokJraaQCapga1gM/gqsjEaoYuQYiCSFyz26IGnhZMEOmoOj2U+S22wlEKCbvwbATQH8W5EP2AppWGYtkxF7gI71gSxslu7hSNxOAOGDxoJEcZ1xRILaaIGFm2GObOWKtSZ6CvmHJJe6J4sdF8WekkWOjdzKAlo+iBuX8WSssnFXLKLlLLFTNVL6+woq7pj+EgpEtCO0nsBm+BdxEJitPG7VqBfj74/8uZOlmwVkNhdJMsJLTkv97MQu0td7C5NsbuwY9gBaDMAhpbyk7YqJbG1bWqybaICupQ8H4FBmIGxxOQIsydmxJKq52u6XhwuADKnmvn7ZjpXVCgU9suM7Aeq1CTcmb1opM1ipVb+rpXO6k1UyzI64Iz4TPyutAP/f2IsVlRTzdLvbSuWebIFuteWRRsbukeccAt0j3DDSuIP3GSewF6j/3uHIVXBXlHTd2V9B+1QT9+FKtJ3ZbmjyZ4XvZfeehERpZMJRO/gQZa//OMJUkR7q8mC6qhtxIWsIFMKjCrY/nBEoX8eK8nqnJCMHWVAcUsFU+ciP/UfYouqJ5s5gB6J5qyhg6pKwjPbErpdLbKnhweFONwTFk1yV23rXjBeFK4QaBfECvnsfMR05CiTrurCzMoNB4WGvT4nD9SPdvA3vH5q3nTzwjuKb9xpdQJ0EwUDdNM1TntLajHzkDh0NtnBPLLqmF6wQ8qS2l4oo7ZTC7TVIwYa+/aEOSiXbFCWbFCWiqDkkLv5IJaOidMM3QGUS9cOyhIrCeyGS33mIyywLMFPx7wpgLLwxp1WJ0A3UTBANzcEZZiBcokdUraPlSFQLhEoS7B/1Zld2VFwSOmIOwrVUjvGHVJ04kbN9NVtkxRr2urU5hwcXVRM9O8DrtCsWLQI1Ld5/ITIyxnEmbOlGrTZuUZENYhegfvcxh1DRTgd37qQ1yRS5kKvm5kTOMh3AS8oN4r+V9czjLo25ZeY56cdGiRy0ijH6KAPY8x3JgeCRtmeFVzaLXhXuKlX9K+gzR5/1hfnwM0LGL/lR89YPHJROxxuUqgQdA+uWA5JRkBYdVB54Y0HLK5GcAWGp46sWmBcjZnSCs39T2Ku4RvJnjgkhGUPYnkQZw/m5cH8Twp/XBL+mJ1+wcsUfHCy761YePAnLS28XldaGV83Pr7T3G82oYT4XT/6mOf5J0onv0EqCC2seycyu0pBK/FTNH2ZamJCMRENfvmLZ54ovY5PiT6D6YtIiP4lkZ3h5H0RsjOjaBhB6c9aJkdfOTg8O1oD8eO3hefDNQiDcCotD+PPBjh5GkZbUyL8q5fHKoyfcsfXofXIrETrkVmL+tG1rMas6lbX46/4buWExjYgSa5gGw8XiHB0OSAo6BAa3us/Ao3BXv9NgO5e/61y+nkM0TjjiKaIZryJ4pmSykHxMazkTxT3C8X9YvHSRPFSoXipWDyYKB4UigfF4uFE8bBQPCwWL08ULxeKl4vFKxPFK4XilULxgSsL/wcir3WirDUUPbDsM6oHRntWJraHiS2rHia2gouiqexhYqu4HCJptIeJreHyJmITe5jYZrZ75kTMnS9a+Hoi5PYmtlKPnaPVLPPvBee+cmFVkFi7wejHR562C4Xv/ie9f3nvl7/vgweTcn5bL87m+Eym9TF3wkLhaqFwNS1Ozd1PP4X/Pn2QBJuoUC8q1IvS1jr9rOS31QmnR7uJWlot9rNRKNwoFG6klXX6WVPNQr1moV4zHfOtnBNDYA/S2ACWVmIeH2TvvQfShYbjnfROWEv9f2JVvAPvCyo8P0DuYqozH/+Gn/YavpoXzxPRFzC/lNjq1GPgimYEexGSmbV8kgYu6MNs9m4meycmLm4w78gxuyGq69l1w6ciqAkjYp7gG7PQECatomrH+kmHJLAyzi0dQypIT2sVt+nq4sELoVfN8F0FtiCMCbaGKlpIGzSRLaSTRBtpM0H0igotwjIJvTN2Kzh3PSvtmeD5A/cwywLlx+kyp3rax7fOdLGuXV0qfG2vCSFt5+wuPX6aj6AmSGfZADkdoVRqaodUl4gwelhOgnopyr4RUj02qFWOsjIygSN3BNfU1jE8aCUREIsLvpYdx9dUOEzhUBUfQ7vlYzjgUU7YmkOfebPV/zJVQg9Qkl129LW9NproP7ovn2lC/5h3P/sM1iy83aT/+tZ8ORvO02Y8Ze4+vNY7cGrCFOFBLalGGk7V4ngyOPGq0aDCR8LME7cHCtpT2/SBlV5mO2QeZBtf50UH1Yve7XrTKOk69NHejF8XfTRU4PdCr3rCpPttggoQaFlLKZ1qiXNZS6iAwe0twe3tIm4fV2BarGVsVIg5OguKVHGcIqbBOhjqahg/KoKlJRjKGcNQLjBUhzvJq2mAEwd1aGAc1QY+winmtgw+ZxhVB3DHFvXhWGNjlLTTXzHFsTrpp3aqK2fsdFd17oECTzUNclAx31V51xBTTKu4xj5HVcIIOKUU68/pYllVjRE81rJUgA5a+khhFW4feqEaP8dAtj1Ur7XivkGpMpWhbY/IA7SMsW1MW2XZJiTa87av0uhqUjPibRLR0h+wCoeDepSp3fIwBX5sHEO7Fd72laQs3Hv1zVY/Ea8f/Wzo7V45lu1vtAeEafUzaw+ED+5A0lF9az4x0e/KMUFX0/ot8BjrdwYP3t4aJET0k3JkPP60famrt7dT3N5dvraNitnyWvl1fzNy3GcCkki8QAxvnkgjuSw35lVXlOpw6Ktstl5Ztl7IUh1HldjoOEVVDvMEvB2C+6C4n253I0Z3lQ/xCeFzGYq06v3cN5YNapl6KLLULbAZhfqFiizHULi8Gt80bYursZzDJjsjxblainNFItE2CBb5omf+lsDs64fUz/ztgNToJQHWJjbsbwbRF3wvkqNongCSQRpZNo9AbB5lsXnkIK6zW2ytoJipCJCJ3zTmP/Z4rbMZOgNykFaL5r8FAM42/wXF986kW61YJti46Cf8xcwSkIJY2z6aADuIFNih6hGc9Qg5Wp9qQvMJalkocb+UqK+IG2HdFILzYdripFerfC7YkfxkDfirOWK9JoZIn1RMXUxyPN0FPx5zwW+KowRmPx6p2EIvETE1ROXZ/RxTXzZT3zChzVriANtgMUFwd5PzrUXR6+AL29zAF7ZgQCM+As6xnvaKHVw6X2KvxNOumMv+a9mrnAyyU4uAAxRn4LjyLRhssAXHeaswdw+w0mzZC8XqX4itCD2Q9zAntTfcEHxjEQxT3GDhBJt5GdTZbAIn68zID95QVfiuJcuKQ8iJBwIzL4ZpwfnQ1JE1pU83tlVzZHlJIx8rXE75XWN0rG+9yZmrvrhi+KwaK7NLgvRH2myq9ijNBQXVxqFh3War0GZ7rE02criIorFCskwgARhh8Qh4XwR6KCvadqSdHGgEuTxN32oZeBS+1Sh+qx7g4Bc7MkOJNrYyEKUKoeiOiPCcWc2BElf4eK6j6oVJaBlfC+ISJZJcDHBj4vJSBJqG1dlTdmcLoDlV6C6OxRBoHpBjhZDCm/BeYHdxVR+cfDtwcz6ANBR2STtUQyN7Pmlzj2LVPjuShNsrksFU+tUoLINTvAym96s51q8GLb+QF6TkGuV9TUwj0vJ4DxV8udALehPxkozEyLJuj64RUimjFYAnYt2vCfYhyuaMkNx/7VgkA/QTtEJWoui3qiSyVTLnohZQSFu1gEI6uNRJzjCYpJVhkl4BkzSnYBLaRcAkHfzpFtGJbdEuoJMe0ElrHJ04Bp04gk4cHbqgLd5dzXwR4+RGR3QccFyAllofIu+ophyHa2YH3pKyxQXwWf22PjRWGaVVS00EUYVP+Ytwr7q5nQJHjqCBwLXCrL+lMyHxANec3KggpzHHpVVmKnps6tbchMSnkJPqsslbgEtQmLjWSjrDO3xmyg5v4ch/F4qxVWtFgjvTwIE7TVuLgC0Bk+pYKzgWZohG8xQhkljDpcK/Q5DlEYIfsGZFCzlDFokqqmpB7hRDLSqs9Wph99UQ6gNYIZY4AIhzDPzgQ6IiSakqOKKpZhhH+BYEqKMn74WADttPUi2ii9Z5bRkhcZA2Z8fE/OBj9RhKVQ+tqYcW6KEFGMDUodW4JT71V8mHAw6lWhhgZWyAOKQkGC8bYpVYuQDkmTd2j1WaUzmScIwjqanQ5kIET8Vwo3mQ8ZSv9wWGT2+aNptbz8bQtqChz6HS8k0Dy68Xh1C0Ibw4umBsdAbC1WxplHlD8ELINgCEYoJjag3THhufWCyOLWEXcwOwnkSgUHX2M8QBT97IskWAGmNBjU1aKlH0Fy4JJP6JSWfJfRYjVN7smbggcwAydKDCx8SyXVUzIRCSyLJuRkndO8Sak9xdMo2O8kADcYok+EHUJ8aAlSHZ8xEwQtmWL4rGR33MSuSLUvEE/qGrkYUJDzCzo04JMfjTwKueLMlZq7QqjldVcbyqghTULKbS196ILJwIb1/RToi+0eG5osNzcydEX6QQ13KtqplYNwV5ZOwslj6m56pqwQPPs0fgwP8EWZoDwop1+Ao6cvKjrv37ahxJJorf60kYhrqwptnbCiSMCkdcZfaImKVMggmoFkdulsi4QnvKcqzOqliJv+jbxSrCXEU4AGz1NfXhtHqeEHX5fBLTfNGm5I3gQyWEii0cMgxyB2LVPAt/NsEmWBIRO+/p5N66tIg5DV0ez+i+outyTBiEBPaILuiswf4K4hSmXn7gcCoqao6hIkSTKKIiT4JvQ53O0KFRYWhgmOR4dzvrH/cuPsuh22p6WU/5vv1RBk2kmefix3XEN8nOmmnVCixdXbaKq7OaYxnBF4/lMvfl7Vu9djXf6rWv17d6bQPf6j/x3NrJzXjsW0dxLeg4Yz77NZ4Yy+V4LBCFAZwEb9hQseOuMkCZFUyrgDGcSyROlXc4D7RSBag53koGbhZn6ivG8Y53i3HmS5u5P3udYY79o+hpZSSqHg+qHg1vLe5peEcC71quObJ8+yxvQePMXi0oiATgD74k2oETohzYN9XreJrS6Tf86L6XQKJ4J9OQZ/8GCRQ5zxxqgQLCRPvqwgTCaAgHFU4IEzCUahNIOC5McCAt5qEQC6vAQ1W+IcLEO/9KZInKmCwRaYYxAkM9leGWABs56wlGWwVHN2BG15MltIiwnizxTiNKaJnjr0iUYBa5YjPd0QhTvEVRAmH/o78uUaJagIejBQZ7VE4238FVRjcuSsgKEQGrIFO/dKJEdDVR4vcRbTjYKB4FMFt+tECM3EmrgMoaUw4WNPIzbAUd+tgZNj4k05Igj4hG2+AYFYyjfN6xPtHIEmJUIBasxL9epVkr0fxx7K4ST2MkTrosmFg+9N08PmFOpwhFW9EJ4WhMa5a4VficSKxf8fL2bff3GdU5llb67CjTURW4tYji0GivYjiDu7q2oZ/MlKywGaKEJqscTsVnraPdsA8f+Yp5NMvf8PupeVPNC88W3wTT6oR99vWhHvZ5rKykBafQUV32nu/iceJL9EZvDDq9HDpeDh1vHDqFwwFd1TsK6HgICgPo9K4dOp4NHW7YK0Bnhr/h9dPu+HmEnsI76401e73sTYhuomDY57Fm0KFmNXR6ij3HW8Qfee9IgxVJIUQ7aUVH7i7Ej9MxnyMxipnYIG0lIZgbf7fH/m6P/d0e22iP+bzHOizlYY/1JmObXnWPDUteVDxUt15cpXphW9WmbKva5rZVPd9RtXxHhbyjsshKoRwI81UoW0m4Dg6Wvkrzxcf3HA69MblK4olVUsHp1+z817RV0laxBj9OzNBNjHxdCKmuLbetfIk0C0skNEsk5CM3aLVZaLW4RDr8AZrutn5jrSe8s95knUN8MvOG+wh5hPtoLZEcteCzvFraKIHVUpfo/dOwsLYlVccjNFVNhKa/WyF/W1YIWy0ncchVV8hl3yudqGdSPeuGa6IbjrJlUqXpaGRLpV1YKvEUkT7Oz7GSaOoXz4v7xfXSFgVwzMZ4fyysA9YK8sMkDQ7lkOTq+ibkwsOIy0YEtoo4LnyqBodaJAZiXYuxBJ4s1rmnqjD9NkonOQeFKZXKiaHy0X5enmU8lvLYBchjfSrNTachGSxYvclo3IS61t/tGduLJduYlk3RSJlSOphkWvwWe3/W87j2BMK2amlVXzDMQ9axw4NsnRY61JIsHsrNZ7rJMx3zTPsnWCPqiYa/lB+bLuKC1oTOpmomuGp0Nlq5XynigkpxbrVXbZOzAlaKc+tnc8tRiFYTxEgTPNCgsjS3VaRQ5cQcHqtlqETNCrjCOsHKQ2xUgOO2G9HQ4nv4dwjnHRN/rZbHMw/h0o+XAVdgsfMeqwV6jmBRNAURLf9qg3EQPNqQEizT56ARKqgbkKM7SRBZJeH6Of5N8z0+GAR7fySx3B1xLctU3C19ApUW4NhMV8ROpfmCxviebvBMk3z7icRHNh2Oe3ZoBZ5ZU8Oe0eqDcv2AXJblouQyL5dYLrokPL0uuSbITWVQQTbQBjTj8b90t9wYNbBMC5dbusCONZXBLSvxP6EdUxl8HKHKD0vOC1hg3u8hkk0w2LcS3+7p7KO74J6N9Gb+vRI9jUjHP0rZE4UD8x9Pm2JDMScBX7sGRTiWIROTPb7zbxEqscSJM03+GxJ/HpiohvLKR3rNyipXs96VBvGUZ/MTz/Dp0tinxVwTqtbT8G/a7+wTTcqbf/M3B2e1AUQDy+Uwax6ksl3Kl3x5ShyOXsMwuQpEAjsgJQOnzGEOS5sHkM5QHLx8AFTJAFSZAqAalEy0ngAMe/ScjvNAynH19qXBvaUTkkTVgKoq8KlNhU+wPny0SFJdFz7B1wefYF34MHT8/c7tfetsug2oGIMeHFqVzLo07tdMG/fEEvkmBMGR9UAwD2JQ2e98lLMiI/j5OZeT6ZxD0PuflfsP437oyvsPc3Y3Jy1Jgqb6Yc56c2g1qdHIkBIJpiosvgtSwfmEqxMNcVAu7MX4Zrq9AEs0Nqsb3yTH3LFV4z34Iq3oO5xPclpih83LHEpvF+JoRog+2ZegeHAL5lSYuevmsvdnRB5xveKn4O9Q6ONuyoEqL4CkDLStjKg2JjmRuJDBfucvfZTaT99Ny2/TmZU/7kq9VHAG8dtsH2LrSvm+PrVU4gTK9/CScOscly1bB2kZ05Fy4mS+a78exIkY2e9ocFlO3ccJ89b9louISvpbfuFbpU1/q6QxAH2BUACkA7Ra7tMw/H6iP8sxCBjUWUmwO/c3+HSgCxdjzvBAnNvgsi9zFz+BWEIB8nUir3Es08rZuX+WpteVGa/SjL9Pf2WwuELlz5VW4v9BVseMLBZo42uDavwQp2zxaEn4ekl83DVr4pPuHc4iJ2lMxzoa6ZCkelFI4lQTfVEW2lD6Q3efdVcK3UEf0RvOVc1zgZo9HdR17DN/jQv7iUAW9qlgiwv7/cHfLexNLuwXS1/fwr4YfHMubI9Rd0kn2PMlQ7yfZ4gvZbFISvciqAlSOwtfSJJmyUjjNne7LJ+oEGVI6TvYMwTXFIlMfQ3NQKBYiR+Vkx0l6dIFrEEOK63wyiWSt28F+ZtvFy7OJdYOiYyPxHfL/qsIYYIUjALj262uq43vNlXolkysn4GVOlYCNF1pxzQCuNK3l8235+Xb0JBP+/biJr89zL+dlvKplHWGthbX+f5FTZUvuOv04JPu1C4YaYEwiNmdgXDHFutTmWB9oq2yPtpNpPJXz/rk3PEn3QJ7rKylatjjgHdCwHPD28VAq6cnrICvS5OzWJxD2XrvQx4jBn7AM8B+Vql/uHQig2tQFEc2C3D/6wD4N0wcYXATuVnuFzjMZQ0aAsSH3fh3zE6jn+fwExLbJQQLpvXYGLhv3zCneaxzmrclp3m8QU7zjslpToRCEpXHJqe5eZXETEbsnObxY3bDWZWkg5IdaUynqGpzqOPB7fEyzWy4xz8AMZ/vliHp853iNYa7ecj7fBeDJvBdhQU03LEsG2Jp3U6D/8s/hePY7SYdekgodJcj2TQ34+365XFv13ewo9LZqlc/GZzITtlJpMGqRBqsSaRBWf06MKfxe829lhqIGB8aTYfl+JodXtfH73xVMX7FVePzKvH76uzKNOWIFffaQ7hMwlzQfg9u5njASDR8Z4r59RP2UWkwJeMYpwHCBdr+sRVrzAGnu4XT5/391L+P9xErYyGwaBKIs1lJkymzY58PQiRrcdykbo8l+dDGNrZ99pIZKK2QoSiN7drVq7WS9tY42F9PzYzSmfwUPi+/MucBdkTF4cAcVlFd1RkmXeHv+D0NZqYQk8MRu5kjgn8b5dvsnKrb4ecRH+LjdAnNI/2krGJRD4esDcGFJg7sgK/i+3XGB8TLY0MAhlsXDXHAA9RO3FkqFPj1TBso9d6MKoBzYQLVfsDu3+3pQAhk1IH0PR98cciBNhWOD1lXk+fijjo2bJMOWbSFcg69QS10h1lHrhw8WsDUbTUz6UUUQFNZeZBRiAaNpAgMNWhCA5pwEjQzRdCEGWjCDDQzyNrTK4AmFNCE46DpFUATCmjCcdDoaqFeDQ3tK8sj76078t7YyMfBaaJgqcq9cJaVNTWDraKxpcfMBahmS1woOK+49uUnAhHKif/zY97JVp6fv37v5HG98wZ+ymNFixknt+axXGxqPd/ln4JJ01/fpBmOnZr2MghGuVHTM0bNaHNRx7VRE87GkW3U5ADD04yaXmbUZP/l6YbNI2zY9GzDpscBVRPXGDa91EUiNtuw6Y4ZNjlep8t2x+qGhs2KTEtVDJtNY9hssn+Ea1sxuVW34AMhhk23n5o3lhW0U3wTTKtTQR9RsLKhYfPx3LDJ5zg4b7qIgcX0WrYbiG0EqTEnEUXRWskrnYjE3FUfO21fNHexPTOtZusE5xfqsk6qqi7rpCXGzO1XSTrVlnWC1drihLzMvXocvbpqjF4cL7cDDnqVY4v42qDp6jVSx2ERXiOOrJEoXyOYfr1GHFkjnOCJ2JoOr5Ea736QYbo1Bigl2Xs5valk722gWEN1tMmD10hNYs8gSyzyXosHjY4QWEV2ZG61W2jV6SPRqJW/GVujn4b6TbWYktl6k3UuYN8cecN9DCRZMwZaM2skygPAhjqlcIgSQKlt+ACZxAfahKbXCCg+MbLN8TUiJtFWFJ3KM5vaobcdCb2NuMU+Y12ZcOXlk32cF4NnhclmA/RYKAXHihfPfr4SSsFDXGyJhDoqey0kwTImWYkD0QV3umiCK3mC1phhrY2HhmhMjbGUZcgaN9wG7GLP3nFyGG59pEfjC4tpysPiYi9shNiKAs90x/dODrCBQpIt3sWZpoDxkFEXwaWrSD/FdlKYteM7kaqWtjrdlD0EweReR+JtTqQMJ9urDEQQMfYt0dkZgB5oGLTNm1CjrGQ+W1kSpgFYid5PAyLc34ijySHnLsfQRsx5rjxw34bEvJtpgXZvWeyo+DYc4lTnCNrrcHtjCZd1omy/9NL1ODIgqgxOvp0IcSJGZ04ZL+SFwx9I3iTmEQh+cE2DGIgzbe0s3EaAc3TxblXmA1QkZUAr2TAJRBFsAL1j2q4ieE+I6T3i0xXH5dwD85g8MlGdIeUFFiNgIXxXsSlOoHOYPSlCCRyBo2Km+mGeZ13Zm1JZ6nj2Jwt1pn2Q+HVJuWzzw5E1cpoKjR5admymIE+RwqwKoqv+n35087QIxihQiGBsBfr/nB99sOVVJBmZ4rwOU43y1ULWsZrOOhbjjrOOscmTsxnYWceozRdIrivtyk7PcBl9PGg/TgIq7yKSNnn9QWm1GXi+6ztQCnPUZeX19zjOXV/5z5/+sec+84Wf/3PnDSSblgYHIPFDUi/d9WEsxPcifdlt3muot39QW3acWx2S+QdfqlHd2xwS+gfPyS2iQnxWbomxGHxKbnlF3OHsooZJ4v8FEU35UIabd2Pwu0uDMH5lP/FZADSPaSCOM/jj3/uRnwnhFMC/vvqff+ArIea9ut855Ssf0m4V651ILahWJCcoPTHUlcQtARdnv0jR6AlbM0qDXSvxzXRZXqE/lxzLoEGz+2i8h6aztN/5zjucW3J7Bp87fFQ4/VJmzyjZ9owxI13lsBTYhz/Lhxss4VbEgqHNciG+c4s2XmRF09AyJ4BTe7gB/2K2JNBEVSZMCAiZJnd1NiHUVeOxhvaHySWGjdr3jKVis+2/kdtH61Q/yxtYF7jHAvcZevhJRyBeF4jHV4P44roQfziD+N1GzVu0HRl493hWivC2LEYM88Uc5lI8Fe1wqE04zI+E9zVK9WAqXEINF+JecrhwNYYNm3rCzFS08Vcwu9omhUgIm/8K7WfaAD9LROBeztvFb/IZyd9F8nFuv2SbSkTO5zWRQXyfQDzgFJcXHcEJNE93fQw44bTgBCo5+LMbGSccoNs/upG3/DLdflVugSm+eGOGKX77xgxTfObGDFN88kYbU9yiShpNRKLCL4FYQZoRq02QW228zGrj3cuMoYcclJz0lCRA7ZQATHP4DsIVgloIhfy3X/nnZ+HVordrFYL4FdGyOoq1sdqHHHkwVLDHf57PTKEoFNxU8imf0ZH3hJcy83jKSyucXRGyYeVww9fLlw8Ohg/Au5O/kZahhU3q3kkTtBXzLjnFXJOGsf6Y6OGZDbqXg+dEPLa6KkNL/KjsOf3rO6B0hIsqVQdboaDRPvEoL6FQlhC1W2cLoPUbjNw9jZLoxdys9vJqRHyWCx99sQl4r2sIPeb3e/wDcEG7y32Xqj/aTxqRwIT4V0G6MkNePkPVbIaq93I4BRKJRGOCfEDMoTckYyXDRzWgdNYYxRGNN61B+JkFJq/kAhYsv+EzXkQBQbBr0LrME5n/5M/5RATnRbmsalmCwZokGKR3Cpn7OIltdSuxFRZiRFWgPytR9C+sdM2Z9sFKYiuHW+R0rrD4xMNvUq9Dvdo4j20eiZ/VzmBIwgFyH8kpYLB8tfi3Aq04+VHPDa+aUKuk8wzh8ghJQPUknEyvFY6p351p6bV0LqGFdVMRfXkzqYiq1KOxPEOTqYiC8bRcgUlFFLKkJXm5IITw2XXi1KnR+F00fT9TdbtQEETZBM5aqbo8SdXVkVRdXUnV1cQFKYgCQAhmAyJy2jtaZntOZjuW2e6JgFbWloSaEdFCEdFCw8kTB29Ctc1KIL8N/ew5KEknf98hsEreoQUCZzd/0R1zuOZgG4VkRjrCH8G6WUxK1BzP/NUqhvJoaZkP4b0ldm9PjB60/l7HDvoAT4mtHI5wdKyzQ54VWm80M57MRMIB3miG2nkmPjDpUGTU7u+nMyqSpMwhFDPM5JukzAMkRoxwjLkDNNlVbWg/oVqM70wrIOnjNRTeVCfeIJGKcEgzqg1HZQT7LsF5G/JSGRx3FfJSyAEQ8NIXffYK5zWTN+ICzPm/IAKVwX6buwoGdC/Xpl8Okx1CQjqgYYlHR2LHCo1FUkHUkArC0+fTdXwDtvU4lkVCBzWgFU/Sa/bSHXsZb/Ryfr2XCN2ISMWggL4RY2sw1hLFcPJOrVebT2Rpa62uPUd12qyvgSIp3guJFTr7FT5d0TLwjJH1JsSUENB3q7DhClwd5MHTAIPYKGa1dx9PdExIRWxVJvxxNGTYNrMuEZsjcJr6tgSpvWSU1o7xdhUhVzfsrHBwFdFax3nYh7qa0bKnDucGj5uJ9YXBDL62m9560eS6nFocZiwWRMPoJ3JtFeMZSTksuiBC4MAYhKvHUKEzhmwXChpMO3tcVqR61exxeSgPkEJPSOF7pgYVEUxaEUxaFUwa8HGSks4CUUzfJmOqbzKgJWPJQvY1Zzzc6YanT8boyzh1icbsuUoSjwl5bdCChYtxHSRWwvd1xzMFxu/aINfRslfMdfQB92WTZeanvIksM/mjLMtM/ijLMiOPrinLjKm61SwzLxeYfWQSZh+ZhNlHJmH2kWuH2UeuEWa+40a/6nuVk5XNnA2MxkIBWacDnbHTgc2rGEh0uC85GeiKEQ2tZEY0koPekjrnc1MgibuNNeWeT/nc38B9B1V6yyD87vNro6StXAk+a4xtRJDOE7/WeJq4NZ+DzNIk5q5GTdvrqC76WAXlh2hg84idQ8JN1Mya9aClQpgbQp4KmPNS7zzX97L6vTWdl1heOHnDa6o1RBNN1RiqHlr3UkcLqFUdcbS1hggga0PVPmtNqp7NyrgNo2IO8P0WprH68p/GFgZI09ienMbO1GnsqtbTSW/aNDasGZ0yjbE1azBbxWuFeb3qNM6sN40xzdAQTTRUPFQzQ7G9FaYRnhXNNbr0aCI7Z2nMoy3O5+f+blu+XLdl/KR794u/fHThi//8wUNrW5nT3/km2aMxIgtO36PddeY0vvoenTanzcIe7dCe2dqcrrtHm2ZOiT1bZ4+2MaeyQ7tnU1pRa8zLxbxVh1uZVyttx+c3lbbjt/2o5WSue981OLgSfaDnNU/uP5Gtijz4ZnunM3gyWE2Dom03UxxMssSsC2qLDJ5H0PwuYmgO2lmD63n4Pcl7xYEUkREGWYPziPoLsGZV0nTIVq10bphcp+Yyr641lSp6tUDQ7pHs0l9lZzMcmR+kLLJW5fB7yo0s6Hox1ePG56wHvaGilofq+lE6NxqSkLgwRKzarCej9LoRgmeIc5EO1odmk+txDHwVDvzaF+5UINcXSnK9qK9DfT2lry/4cn1R/76ir5f09Xl9PaevF/T1SX09Y+qZdvT1eX29pK8X9XWorxf09Zy+PqmvZ3zs88GTfjxAaGsVrUqY8vpgYZV+JAiovsR3MTQ4DN7YeIV8C2uNJa2Pb3bCtxYAnB7UuZH+D9rnKRZ5cvfN/N+/Prh295Evfx8SLh0cJttVene/8cL+J4cXDq4hY1sWwZSD4sFJ6FJpZUXSUC3QgurJyeRLCOOvH8/Q48W8lXSHFHmylBeBKXu7esXdN34t+X//6z/6fSo0RyL2wkjtGQ3XaLHklZd0Zav9PVx5SfVH6s6Ruslq5E6qvGRV5uj9yCY8M1KvHqnbrKKvHq6ppWGWMGpNbdP3/+ng2jDZIRHEWJk68O/tE2lYpIb61D/1qpG62WroVUNCjzNqjrqVJq9QC8lNajG5TS0lN6tusqTmkzlssgx6VzLozeXQuzIGvaVJ6J2bgN4rrU4sEPTmRuoGQG/OqryoK1vt38CVFwG914zUAauR11DlxXWgd8dI3W4VvYOgt7gB9JYYWDeM1K0jdYtV71YB1gL1Ik1eSUA7QIC6nQB2CwFrgYC1CM/XvNlZq9m0r2bpQ2rHmv3h3faHd+s1P3+Il25y9/FvqT139q3/kb48Q7/k5Yv0a947oRLq4Tb6BDU4shrcb39yf56VEG4ridpdeCA/Tn3PIbVf7S7yB2ejtEvM5/yxPl9njtI1691RhAPKvFDvO4T4kdmPpIdIBj2rS4ndpeTuHT/wh6+/sP3z9ELlAxymKqPkw7RbdCbp2s4reUbIJHcyTnr5WNRZgs5O1k0i+dmCqp1PtkGplZee1QGxrdy+88QQ3D2//+5H/3uyjVDOtrNpN37OBe4h1D2vuvFT9GN2CA07Ue7BK5TTF3fs3I/Pcv+1nXzfRiOYVb0ifLGpdqreUzpV3BMHERNlQe3Uw3jjxSEtnjznG15ZD44VCx8aRvnt0EzUqccPDRG9KW8mm8NT33MRr/Svc28/RNO87e5X/8Qb1g5/6UcOrtFYk3naE1L28KFh8RXChyGrnC+SfqbsRXYDGMtmMuoXike15IjDTWxu5vkG2GJQQmCUiO2U+pA+K5Nr+pS/3WBWx13Nga8P9qNHMzTXZ5OZSO1Vy2p5mHmhg4jcmJP+4dA46+46dDaZpeHQSj+qdql9bz4u0aId/HgcBmbsgXu0/UC8oK9T3zpMdmlLlcQtOa/y1bt2FPFKt6mdo3SvPHzhFBblUaC9vXf/z4/Tf9f/L3hyDE+UlfqRQ77P2luUmJTZkZo9+9TdF7Zj2/zwQbgPSl7DXcRwEEtDpBW+Nm3VEN8sUcIiDkmkDirmPGIJm+mKL7g7OPAgH7pU/r0J4nrtI8S1S21LdppoLXM0+wvEM/dpte9ItqnlZK+6MVlWM8mN6luIaXG0bqaRJf8IiNUTNa/FIB4Dg/jxlhed3HNiSrZu5Fc85W2FQayYqHgFBvFYWi4yiLVxBpEdsSuwx+gDUUxK0h60/pW0PWS/qLQzJHrXsRjEtmpDrhqyW2kfTIxrGMQoMx9wW5UMGWKlceMd60F3SBSlM1TbR2mHGMQOOEbN8nBPRumSiCieBAlnBhHNEj8TgUGMMgbxiqsZNH09p69P6utb5fKIXC7rpy/o60V9fVZfh/r6jL6e0tfT+vomuXyXXI7I5ZBcDsgllsuyXFTxSAfOAmtOsAZOsLzKKGOJ7yy5GWl0FqYydPM2jr6tANP0dosn3GWxfTGsMZLnFtY8zQDWhYUJBhfdFeHLaWfohFnB4NAqOAx+ioMesxYfsU1KnHJXsiKITDyv9licAXzDeyOVgoPpWZXnJESeqZhyxTmwJLeMiBrnDdwyxvrMoCIhYdUdqVcWGZ1XEvcyZzMRizYTsU0i7Li808H71Yn6zBNqTEfqxpHaZzV0I9iZWHWoW7uI/+slu9UssTRzhBHaxN/1k44YdjTgXsgA18kB94KzUoDc3CTkhhOQu8HqRA8n9kaELgkAHavyrFRWed2dXHcWwCMmdrnIxKaz6wDv5lGBUb95CDK+PvDmGFY7iTEfES+V17tJYNWjXuwi9q9D6HCO+OXZZD/BqgdUGUka5F0qtlpXNu8zoxR9j7g2+/s7CqxnzgGCyi5YHGCsFiwOsE88zgJ1dJE+QQ3aHOB19ievK3KAC2rHOhzgdWrHBAdICFD1iTXAOYg2rgUOsJ1xhOMcYDcifHfbMOl7h4gV7Fp9W7D7tmCxgnttVnCvxQq2i6xg2/YrRj49sAg5IonprfUL5zCIGDKL0gCL4msWJc7w71VZlJgP0nIwOmZR/JxFaYBFkaP4WYNZHfZH0iyKdtctw9FANYhFiSPi3rePiOAQPnyIE8aKdudWYtKToYotTHf9OoxLHj0tUrcrpiBNOYrBfmSusah0SODqJW2i3rRSkkWVJLeq65NExUTJdxGFcTU1r1rU/JQn1Py52G2ezDIk2i6/ThaHC8Q7c/kNOZw/zvrTHbv8ShgoZYyGlr+vHE8Ns7qITsNZAiX+fcjVb2e/i8HtK3jDeRTRgrgZv1bX45r09lbvEfzY499OxErqPeuwqzGHJHgNVcT1QRw2/zYY/dmn2OmztyA7ih3RVfBshdVALgYHp6ovOcehgBx82VkdLNzXv8NxtGubmV2Pitzp7sPxjTuc28RPmngb+r1vJYUvBU1Jeb8T8QEzDkmgCag3+G0H0co5RIIvIRLgLQBTGfewCiTOHUsR/QEen1FaUzV+GfWTmmKVXUnRvVi3q0i6XhVVi8e6TVVlh+wIB2dcXGrwEqkeIRa3vg9qTigrEZEEegP4h9aQGi5+q/yAb141fiW2kbigS+2HODYH/OEb8F92oODh5IIn2eMQ3hAlYctW4x9DSvMgczUOxNVYBXrBzOOOZxwq+eYKnFwRaqMEb3cqcW+JfV65/kN8ijbAGW1JHrjszRPs2DuGG8afHmYb67S+cqtXEkYwwHH/H0OaZoARk2GtAmQ511AHvDVIGdZSpAbo8gTQpiU2U7kPk2AQZeMcnMQgy8V+38d9LWNknnae4e1h9wzzpB0pUVMijJRWB/XvTquix/mdn/78T7s4G/153HDDSgqUBu47+MgU9em+vioNqMDnnYf7aYk9Xrniw+wPX39LvJxw8pH6WxQ7vUz2qqxXn6xF9nR+i6SDruM8FY9L9692uOGxgruOpVDCpZS1V9LtlaS9krRXMgfeYM6tcGvUtg/MI40iXIlIMPTpww3ef9SwztBIy1TWjqMjrMAzVYKa+FH8CieKD1mN61aVzlkNaLA/iqAbcWriVqasSfatBIa5LQvpsk8Hefm27MkR/eS12ZPbrYAdj+HPo6uD+cO8cC0sp1HcfIbiYkFV8TQU189QHK/xZcFv8W0SHUMiWmDBe3rBI6oI0NteG73h7I6vo46gxrVgt8rgk6y+ruxzPuuNTQO6pGTi6SPLHOkFLtB75aImIyZRc19kYaeyn5pLg4vMqlPbf+DJgH250MrTa4rdhbCm4HzEoc0+6eHvs158l5y2l0fILsKjlpd8oi8+wtHTBssrEkTl0dQBfnKwtfFpfPjmzX3X+MaUzFflgXzU7/MrGJnwTaU/5h+Gu/3gFoDPx0ZyEeptLi1dxLGdfc5B+WZgEJubbSNNS+GNxdikjj8xfdrLHrhsYMN48QrGGvq0rI0SMMfpC8SFxM9TR+GNThPRktXPR28kYsqjWeQlWrZAW6lO34W9LXxEvvdcPeludiqfWzBxih7TIVe0O3OYRUUKdT1JPGyrCd4ENcG/aHvRyd3jdiRxrmqIc1Xz2gxKDXNisKA0eNPmlAZVURpYVqWOWJXa2qrUhT6qO6406AzBA7LSoJJblVzLquRzIxaX548rDWCjLygN2rlVyWelwQwEkqJVyRelQZZM7W+OVQlnKMd1CZVMl4DAAK6lT8hvO/SmzICvG3vTLRwcR+xN2aHxVxVAn95q6RbYhjNdPRHbtg4W2Spa3VBmf0taUWxvCkXdEKqu5D+CvcnRj7fR474lvF4vRWBvMkV289HH1BJHF6HZhWaAJN+uVbmnK0v7jugcIHX01O6ROjAigTRv5MCYskKhcqyuV9umqQpUzxZb54tic7lobyqTeBOTZJrCqFMQ1W8QOXoxeaVaoq51SSjpJ/tIQFkmQWURsjQfqzfQuzINelfGoLc4Cb1zE9DbaXWiL9C7eVxbo9s/Z0FvJ0OvC+i9YqQSq5FXjIE+saA3qTxQ3Q2gt0j1Eigd9o4KWqW9Aqx+cjMBaycBKSHA7Seg7SFgdQlY/aigbSjYm5Zgb5rfUNvASoQlNQ8z0jdIiZDkSgPWtNsqjU5BpTEP3MkWJ1w7Ryf1DbPr6BtmI0KVrxoiEIt3MgPChvqGXba+YZelb+gU9Q0dW99ApPPBcW0DklF1italGVsDIYYmP1dizhYNTZ2z6TwbmmJgk1k1z4amGWPmGDM0tZjixpahKS4ammZUXJwBsd/GRUOTKgbxmcutTlJ8ppgabi63LiVziFmwfWQGiVnfddYuMTTTxvantt3ZbEbZ/tQ2ierZ/pTAt55VIQ2OVQ5f9bmC3UkOcTdXso+NG6Y4exanvYnUrYqpI1ShHE57zPJRuTfJApJDN4LUL0sJbYJkXt1CBNSxvE83sHB8J3HT0T/Dwej0RDEmvWZdJGBHUp9u6igL61KeYF3Kk5G4ctblO4l1UTbrUh1nXTiHI8JeiGORILImLAqPwX65138E1vu9/hHEDBscgp4LY97r344kiHv9A8httNdfJmDQRSVsKJknPAU7CdwmwGU0vikNEiTjg52b0ZzErEX1bZeelnW/3bY6WPc29zZve6tY99us+wWLS2zAZa85HA7FeW9hqLYNiZ8Dy9ejZ6O0OcKr+aFqjNIG3TfA/i2Y+y6VN/fbhwg9JfetoZo393O0w8z97FB1R6ka8Xz3hKefW7WzQzam+jN289uF/HabZUjPb+dw1MdCgjQt22F75N01TyhlOv8kGQQ1btxvT8EwvdFiwixKS6OoMYfA3Nx2y8bDGf9cY+MJZdkT1swtOK5+3GGeYLHAUbUI8GoWPEHLIutNIetNGCmIPC8UyTNrW6sPcTbnihxyVk3xkY9WVCPPexCJkcl8fxaJBceZBxfB8DIDS9N6nWZpM3O7jg9HXpWiX9eNCuzNdUN2S24yVzELr6SCqWnPsMAStG2WAJzZLE3YomoQ39QkpmMB5+qSBcYsBrwvZOBt5OAdToB3yfroEoG3MVJz4+BtCHgbGMa+EW2YvMo+Am9jEryNDLzNInhhijIdmKMSzXH4sjXJtUDcGAdx00D0+hGxCHlXrheINhiic9OY2g0gukS9gS9Vk3jcBlvaaacm2yLVWYcjTLtgyYh0Flrt2632ibnej52fqKLT0IzFX7UyQg7+qkPcHhJ8tcEVxgVuz+YK0yJzR1X663B7O1R/qsmowyxca6rJaH2nIXWjYgQFSQI5Ma3uzdgjnxG7hstWDk2mdbr5cm66KNtk+jFoGP4w9mqTGgYThOgaFQsFwvzYteoU2qJTiLVOoQOXI9sRIYYyoM1+wVfVKcTjOoV2AaeSHEiEZGmUtkfMnI3rFHpCIyZ0Ckt/63UKsaVemNQp3DxNp3BLkZy9yiJn7Nm4bSpNbNnyLAcf3UCn0DUBJIs6hXl6bLuhXjepU7gemLsg0PaRCRFi7pglvjupU0jg+kS45HoWdXcURd2CVMz+ny2SDOdJJCYKahXdPy4V2+IrDWFCp7BADe1QyTSChmXbT15B1Csh0XgHUa29hHN3Q0QmFqS7jk7Bgt6VMej1J6F3bgJ6acGHtSO+GmMA6EzqFFKGXgfQm6KR6YxrZDT0pmhkOhtAr0/11lXAtAhAryRg5QoYODS0cSIiWSCZdh3kS0zSDHQF8wXCtN3+8HaiMlBozFJNKmdTmV12S7uKVGZbxmaPU5ldavuETiHOad4M7Y9tFs1rZzw3aN4scKeaJUKEa5sk0LhAkOIsiuw4QZpBzvJbhkgQ550sOPXavsLpNkunsNPWKezcpA9Dc0yn0GJ36/OMY8IJ/1YdcXxcpzBT1Cm0z6azrFNoAZvMqFnWKbAn6xSdggQYbFk6hVZRp9BTrWk6hdaYTqG3sU6ht6FOIYYDg+XEu3NMpxBbOoXY7mw2o6xTiI26YapOYUXN2TqCVymmdpvREXTZTapNO4YWNTHIN8NzY3M6gkehI/jzpnfdiUp+yvfGjPk4oFUDTpH52CvMx94J5mOvuhHgOzDOfDya3gCtwF6OVLj3SD+9aZz5uAnMx43qJrV3NWM9kMAdWoE6Lo/AeQBaAbiyiFZgHg9ul+MqBwgDu9AKVHFRSGoIrUCTmRasSvAJgcSvvuLK9ZK+ntPXJ/X1rXJ5RC6X9dMX9PWivj6rr0N9fUZfT+nraX19k1y+Sy5H5HJILgfkEstlWS6qGGybYHLDaupnWoG6Rbcj676yjsQfWvdl675q3Tes++YUTQP4PGKphqoGrUANdy2oCNJ4hGXdoGejtDbCq+pQBaM0GCGMd5mKmfuQNQdyL5oDua8MOVs930dDVTb39aEKYVyide2LVsCHVmDvVK1AMFVBYDnjW/m36kVVQAz/qKmsToXWYxYbddnWrQzTPRa3ZAmMtBZvVHvZu/MVvGEsyf8GQm8s+e/D2i2rfSqUqM4keN+gn0b01Bb72lICugFTpE9FKkROc5oJJUIZQiGR59CqXBadJFW8QYT6G8BR4mzKrhEhvLyBXVSxPG6mQbjvCD6jBRYgJbpetslr3SavklETzkIYstYCVAhFk5i/fVRQaGwf8mHWJvEqLegbCPs3iNiXSbavIQ6Q5HTMAPfCNMBBpLYh15yE3HACcnNWJxoCud2jMQDo9tVKBrw5Bl4I4F03IoJbUGcUoD5jAW9n0Sazk4AXbgC8JtWbgQC/Y1TQTuwQWEHn0aKelAnNN4mTDAnN1xDaHM70r0AvK5lwj9arNivQUtU1JLMt8EZd+/td4o1iZMikmlRutL6hosAbxaq7Dm+0oLoTvFFAjOXyMNuZxCIhKGdssUj1TCfPagHO9QqZHdc6cr4WWKQgra7DIlWRpHAeepGqNZLYHklssUcWlwabl6tuAmU+oPYzZWZf4f2gtvsjtUcxVtqLn3s5Kn1yA00KoTgiWC0iQBFRrAqok6gCbtCkeL+Q4r1wQRM9wN7omZdHgI0PjYfX+NB4cI0PjYfW+NC1Btb40Dd3KJL/5E6EIskfZaFI8kdZKBJ5dE2hSEzVrcLsOd8NT071iy1J+lpnFzvyvNqfh1Pckwi0SNf3e+P5hTydX8gbS3fqcsD1VE6Tu4UEPx5HZ88T/LgiMZc5gLGd6tSu5uncQsGU3ELBlNxCwdTcQh5yCxU+rcMhPg3Pvf3OGa8fJcKdOQ3DZTmDXRyaajC/wonWHEQlcwYHVjjdWh4QGAdkkcrrDqcnwRuzZGslybXm7HNuylzQdnFAVU6x63GTHE6A7W68fuM9mDtnv9O7g7qlY5Kzn5WHCK8eN8ipezScOB+SfTj+lLuZw/Ff8r+O1D8Pcuqf/1L1aifyvBot+Ee2VQsWxA4udZjndNCFlipBFao3aK+wQUtTNmiJT9arDv50JQCDU4yXN5Y0oicBGFqWlJHOUk/TOegxYpYzYpIzSuNyRgnbpEuQiVc5PHrqrghX4aoO38Fprb0i1FQOg7f1OTqU9k1g/RFcy5HMgNrkiml9lEZFKbKioqP3SPhBInn4fjXj0p1TeH2sb/3MK/eHIF/ICFQePcX5znFFAgD6SFnSmXNa88pRKhpC+/kAp/rumsGIg39AY4gbnO5jbnDy7SBGDCR/cFInMcbJO+c8nzpANMEqSP/ZEZIToNd0V1Nt7WuJ4bdMAvYR8CwPv5UPv1EcfqAaeviNbPhBPl56bQ8/mBx+iB5oICCXgQChUgQCsoQzEEoYsw/FnwYC5L0SeyQwHbaOXoBGhHff8f4Dv//D33vPtx7N73/x2HHucGhlqiEusVp8QHJPlNdQUd7ScY7j2hw9RT3PKwAb9ziJwsCFKCpynM4nA402TQC9QX429Plqk+BMToLzjZoE2itEbIgz3NJspBZAbUCzMDQG3fI4dBtD4vHy6sFY9TKJjk+pwKoBf1MEEFS9FTkoU3fHHoDvdGRRSKxBndJCx09sCUWa4ej0Aw6hWYqip8ayCDmSRWjxZZFF6OzVcgfpuEiecAyeZHfZSsagsxvkCbLIz/+1qdgs/8GPPuF53onSdA6uCEdnChyngJBPkHjZWXmm97RQrZw34VM0J7R0P3EXCMmVr9F/zvffpU5/hKD/y1888zUEUs2SVXE6jot/6oP0qSB+xoPEsZbtiCsHh3gwPJv/xrrjhp4oISJrQGxamhenJWolXULZ/F38WQKiyJhZ3h2E1r9XcHW1AHIcWXn5sL/PTbK/z02yv89Nsr/PXTv7+9w1sr+3gePZvoXw00w3o+h/8zz3RDCVcU6FTXams8mOZpMdyYPnrMcbS3ilAoMqK2Aj3tjRvLE3hTf2pvDG3lTeGBENip92Jnhji9H81dArn4xOFNBgWdBgxcrvaNZibZOxRXkjc2awQoBQZzJAqMfsskTY4kwt9/XT4D6dU9Bm7AJJDoOjI+gt6w3CVSFJ9/fTCKslWNUKuVCyY4UZA5iCLFd0lCsrXFZP2dG0bN3+ENqrYmwtBNltjQXbog5FcoxITi2UhZD7GUZPOwgmLtR7jV9nb7rZm8YaH/Xvia61jp4g1x7n4yOSXGefLRNBr4OoW13VNdG69Ml9AhFnaeHMBZGoJnSQYWIDLe6oAe8IOGI459MOkXy4ncTwBR2tpfWcGt/Dxpe2fqXqP3kWeqhIeGhfiAiCE4hLjCwAwd0gSgPB23q8nowSdg0TgqxHQ6ivjTDoijYGSUlbeTsr427xcEfQcrVh5iQWggeAfs3AKNhkIFEBjKVOD4fpZsc0Gxk9ji9D86yh8UZSswaVpzr3WpQnJpTgtfdfo+wFP80jJH2h1u0D9zAhp1+peOUTFcm91srIQTwl3l2nsBnh/t8ym7Elm7HLkcVZ2NogHDqLZQMM2LfzpJou4rAZotrJUda0Tt1MvVU+yOmqBslgtC0eaIiXWoOeG6eEkA8VnqRutTkWF2efR14rDwccQw5m7vISifM0aFU2LmQLwGJYj6ZefwSu32ZuvT7U+BJwBNP4AIGnmgRGPoJaAGsD93BAqmDJB2fpK4TjzqbBMK3knKhlB1WVfMkw3UC3VGUysWddYI1o5g6GzmfWHE4bvzDVelGWxHN17jMrKVRjxbZ0WF6RAJCnAeTmAApHaW6aVaEFoDYDyOL+Q9UmAAVWarcHCJ9U2avIRQK9NueOEPEJh9XOp7WzYCcUXXCUlGQdPnalmg815CjW+aQCl1dVWcs/M9G9Qq9ojpRutbJmvaHJG/F3uEP6vF/zCE9ZwukrOuLhQhMHU1NanT5X1bG5gjCtquOpSMXOGum9Abl2RbOZnh4Xycg57CGTR5seosNDTDHEqDBEh4eYljeWmLjHtowEj0I9ZxoGqsIH7jmIPwGqLt5nSM8I2tiU2Ip1PmzajV4uWucfH2clf3yckfzxcTbyx6+Vifzxa2MhP+17tZNhkf/hgOtZTlmOu163eKBoXJiZKs5UMiCyu15gPOoHnM1v4L0OcZq8BxosWenMGo4l9jBuBKbAuXMhoogOkdY0N1ORjMFp/Hhauwc8EHGNaVmnAi1rMtt5PC0f5ixzyHokLEeo3/UeP8yh+ZGCFF6Tadg/eo/95Gha7rOKoUv0F4aj+FjakDLZk6Npk8sgGwPOqyArcZ9f0XNOusPPyvKMa7vR4KvO4EMnVa2PxYvTmogcxWE0rRSUk+KSk4tLYjq0aRXN8OW6VzvRsvWXOLY1RY2ZKy6XNiGX9kxcUNFezuDPEm8OQyC3LXuX3HRO0XXoIlazmjvShyye+2K6uZoy6zEf6YVbI4FmNVkA8b6fSlErH3KJFi+Af7LoQpacrtv0Hdfzoc9wMp0dfbTHGRWeYhJDMC+8Y+3RSGyu+tUsv5pRszo1aE/fMV/95rRFmAvpRFvwy+M3xKqVMV9lmDI1NxRLXkCOkBuruVXiWKj/n3GTRTUnw2mtN4zFsWGwVg8n46YMQ951RPO3pWF09TC6Y8OoYxj14jBMLy2dweLAO9zPybP1hqcpneX3Ta2kWFJ9rGXmeWhUaZeT0r4jndd0o6fkrvZ4yhlfqqpGA4UUJUvH4Xy1zvmznIMULJKG1WzTB7Aw6HkNinkBRVC3nlaJ2GSvhtyIxU1A47ptLx9uIYb5LG/tGdWFSxb1cU5noe0puas8znijknfwknSwPq2Di3kH53QH5wodlKeVETVpXq3Xwee5g42zbxYVexm9ONbnE0UEsKP9rOOZqjRUVX5IsudRuTqyjNKARgFcQ/zKMUl4BCIwndvKb8Nskc7mi3TB1qCZRRrqOdSjLJTRey6cNmmuNWk0shhsAoLS9u3pMw1yqhRCoDNaLxzrwbGB4M0peAzoaR0g2Y6uDH8w4lNsJ75g2tZrTRtVoMELkjL+Tm/L1pSRosPj1YqIp7XRcLBj9XCC8eHYTRfrl7P6WCqVx7l+hcOoWPVpx/dBW5A+OQT+aolmfgGXBWwCMAx1EMrRkGXA7v1CfPpTdHV/XvcaJ5oZpelK4qouKM0MLhWiO11QmvmM0uzYBKWZy+gL05x5/NlRoDQLvAu3qQVGFwiNum1LlKavuquEmruCmheY0syqxSKKnrL654soes6sfjQ8FX3z8QXzqmOv/jQwCIDtXjRhXZ6wQFB0L1+/eqY0iu5rSqO2rYI4MpHZrrbJSLrrjWD72AiEWsxOHYG80/SjOII+v5pXfT2COX2nRzCrRzDbp+r9fAR1jCAjMu56RGY7E5HWlDc8Q2mf38dqAcgbCQKY2NCIQH4YeW/TBIZ4ECEwNDRExlqYRlYqGdbuG6w9I/Wo99ssrG2eVhk31WRr8cHOflZyChLfoZYyKgg/KULmsVAbNALnWzWriY6jt3CNcb2TrZCqNm2VH29kuIdpO3+Ucfw8NWLWFuLQ6zXVAIqSkU/Sq3I28u1m5B1BI9nKk5Gbp8hWQSKwICXEuXfsNTox8jKmSMhX6yz3EpXB9H8VRKlxdBoJCqZSo3wJ0yR5jsvIenESWRN5mZi88uYnr2xaLe7R0NqjYY5Uw+L4eYfMF3uVbSxaZmVWwY6SylV2Znd6A3qGx1/opdldBxazU54HspW7kwPNuBGmPmVDfcpjAzXtXktlWhdLIC9LtAcrQGhMbLoENrosYisI6QG5FtIzq0nP0hTSE+eu3Zeh941GNa9+oiHqQgkAJDnvZ9ibhUQepHelz3mgR7MZPVqcoEd9Q4/6hh7NFFw2OLOiWsSfvqFHS+hF2itSIG8dCuSBAs2p3mqyTVHFryLKc0/LPOvh73mzSmZNUnVJPDdj4+9O8V3Xwt/6Vc9G7TRbPc08sPHg8dRlDoqk7H5GwBh/14C/awZ/z62Hv+cFf6ulvf4Vl/C0x/h5lpW+gp/ber20DdOjuWoNPzaa9ya56vmcq5aV1zaD0/xmR1uEJ1kfU3ISS3HLOB/LWIoR76zoF+Yyxu3/Z+/dQmXJrgSxzDgnMyMzIt/PyMjHjjiv+6q66ipJrX7Ruh6pVV0zjf1hmP85pw6eOgYz7vmwoaDUP2aM200PDKbFCHzOvYzdHz12D8bT+vEwMIIRQ9lz8TCgwWqQQR8yxnZj9NFgwXivx35F7MjMe25JpW5diVuZJ3buHWutvfdaa6+9Hjk4BkzZ4+Ab6MLpB1KCGEju5IXQeS0QCeo3HggzWFxdCJm9g/8ssfyfCbhWUoMM/jbGicl1jq4aoLjE6M/KZxc+sbAsuUzVby7JlgLnE7Tb6cfm0APmEtVRHoEakAtcgDThWzF+Pb488oqUtr2VSI6MpNZk8UimS/v1FpkadW4rWFIjUdMFZ5W2OqugEBrrY2AbUJm5UKkN3oYZjZSensBHQmYicHmRmsId7NA6qYeSZy6JZwY2z/w91zA0AP43FgNgj334CKVONQD2OHklw9BY5QMn69CkbBiaPwh+/wjsIqiGTeHM8n7KyiAzy0UFs1yIAfDJAfFHOcDvHknOUsknB4pPTpDhwUZ22SGzyn6peWhxS9M6KzDMsbavFBnmUFtVSir7glT2hZjeZEgEedpIxZRQGlShkv5soOLq7osq3p9WGohwzrSBaMEGoqVWjScoH0gPHml9YszGl3zlmF/mWpH3ml+0It/Xe3hk7WH1FM0vQ3OoLptf5so+1CWNfSIsj7SO4hZ545r0cx4rb1+SDZgWvHveKBkgzLGy6YLXZk2tBYYsAzOy3Y6+Vfn+r0OECmrVYESWv5ZAQ1w1GLVuvVaezqFWngkyIdt+oZccT4YDsKGyfFTs6a5Gw0RXzD9XqT0V1gBTXrBTZqFjrawUWSirE/vMPdaOGlSg12D0Ol70IBnvwI9e4yD07AGq0AMduq106AJ6RgIwh+GaEq48iEEioA4tubQrDxa2PIhqX/mfP4H/rb5s69PfB/+56N+0gzYJi4CKkbM+PSJ9ekD69JD06bEWGGlJYMyVwJgrgTHSpb6HWqlOMRpVCYwpQJH3DtSnRe9GiizZ53uB1Ox7xFcnLl9tlBf5uMQ4R/bRalDFV3GqTWuPT8jMsSBFjW3Gq7MZT/LVHo+A8ygXqiUigiq+Snyzy7r0CHklGDrgCoy4Uay5UfMqW6m7EaFYap+Xl3Jfbl3nS/TUhCRMoo1qWFOuUr7hSpQJEXWyEf8ttwVbIsIP8AMZHZ6EobdU89iuAb6yHbAB3X0D6Aj2f5xKwwo7WB/dteb3qQo2uOPwRoutp23g1n1Nu47DSzuw4aePj34YiA5w60sqEtMTS6khMo5XhCPCeUnVZBJ9qI8l7vgQNFT4NDi3Uc0EnOmzhe1t7RBcjWTzECSbNpJwVW8h2XSQbBokm4ikdXu4lFIV0tgv8PawV8Xvm771P/Eaqcma3zJcsDg5YGneyeR53sAOlN7hLCxTewatAfbsHssIbnaPJMcCOB0cm+XHRPE9lI53t5h8fc58b+HRg3+hHnxs+R3JkycmEP4ORAWBXpvS338A7o9grkyjfzgI+h8NtOa8AE6XiAUwwhl8hBCQDoxwqRlhXijCWTe6c03pznWRaIMCGhlwZ+aO7rxCABdihQCmYHxFAFcI4EYCvCGACdR8XcEl12Jxk20l4ZA7rtjusN1rcFi6RoXEVj29xghaBDPX4LDUBoekQumc2DK8B9Ktp5jjmvTntUhvIKOGxuDbARQFq8Jg8ulgQCbvpTZ5J/ytjMHUNnl3AYNuCYMNZFGXoP+9IBNg/MO0E+DjgFnzwdXBh4owqNRtqhZQcdpcVOoHoDJhVCYFVPqASl85Jq2rJJUg67zv8himKj/B9qG//Qf1nKz/I3Sxx13IbkmpWKE9aQzVidhAw8cEZeZXpwPaKxBW1hNB+XSgjd18LFeHcj4dqKf6hB+wChek+peew0IuMn2WaUqm2gCXSsdYE5khJY3Rk4V2c4A5MYLKA8JJ4YAQ2RBDTSAcduKAB08lwV4GAMjwxaW6PDa/yjt3aDEiDhJg2ZNqGEQJho5+exveBzb9NrzyNuArjj3WfUsqxbYZnKwyM7HVjrJyJfAyjstz1jl8zjpqVJcdRZodYSTSB9i5DZ44NjuKAdelC5XaeOC+2Yl8VqYTg8/Cg0/79dagGvU++LQJn4UPH7YydUR8l0VoVbITSthzaPMmhWjNg2jntRH1yJGOJUeaokOIyi8uoh1CtOZDtEOI9iBgEeyKbcWsJXtm3WILH1vlitWX1OjcAR/MgA9mIv2acy++JgUDihE4lxO/fwSHqT8Ng1BdTkytw9TQOUz16TA10jrEonSYmqrD1FQdpob6MNXX1xR4Yz51rW/dQw9TXbhXJkPbRHT33CtrIUsXDHAqcU9LLJwGpea+JZ9Maxdbu6wEhpBwlRd0KNokbdt0mOryCB57W+VhaoIiJubDFNyrKcY9si4peixdWOEEL6UEz0LqSKWAxObrr3Kb5YXD+vA1XnyS6xmdn9BCk4XBR8ZG9NVj7ylVE7Zl/Gp6rFj3FPGQDaunHdC0e5oqaMaC3SV5cvwC7ERHotat6+EDlIQ8uojjY9/48jmYS54FX3Og1BSF1qr3a/oD6AQKHo4UOChL0Dgm4ihr09UwA9x+cXftkyLNnaQakWvMoHgsIbNOR63FEppwCVTs6aOwHEMkeHvckp8WrvYAe1ZwjVdwzV7Bcq7w+nOm7kT1gaaJhhw40Ez5QDPzHGi+4h5obvlA87LuHmjwgFOjoyp52qoDDvColyKYfDzTHsAxZeeMgT+14CMEn2vgT50K/tT33A70yevXeFJ3NH/SJ5weQizJjBDDwS+SkMXwt4S4C58SYkhOO3ifII6Lzj7DCm42hFJYfRERF+uh5T0qumKaTKvZqV5UkVpUFPuSx7YhqM3L6hQkpc3UVMM2xr1V7tmkZXUqG52O/HxLZl/TLyTbL/s4JzpOClL1LYkfwlfJD9mdWa4WPXhM+1LE3LnN33ydY+68hYq2D2+zh+KR2N5CnW/iqUM6wQxF40Yy0IYm6CdA0LhA0Eoq7qLTDlLchwoSkQeAwYMSBlLAWQlFTy24lbjr4dkyJAcj055pvEIXL5ipiG0eEaOWGdRMc5ObZWvdbu3yTHX1THVtBCNGMAIEu4xgBh5GGdRJLyI4uMlwN30vwFzEg0JuQ3x3lFlsNbOxtPKKb8o8lieyay9ONZsbwAAWXrEhsabZ6qkmS3Zs2R3188RaA13j8tghfox0Gth0CplOIdBpwHTSg+8hstNZETmJxAaInMldkcDWcmhdqWI89rTgZskH2P6Wv12ekrvY/ra//Zv1fIrtUBmWVJi5VmHkzOQhqzBkTTuTKNK39TWlRgide7aNbKdvObZvxNmV+p3yA8wvxAYfXsgf05MT/PGZWMPMBrhb+E7uEcpzTFKeZEteOlN16m4RMHBIpuldxtbTszux1k23OIiV9l4OKHpwJ5enYvlcPKFbuY3IJQxLSD0v3/4Q375CrZ8M4fLd5P3Q4ouZprrJWTnDr6SyjN4P6nebO3msb+prmxWcI1Ko8sov5t/lAmpwnBMNvkMG4C1CkTrjp0yKrrbjyB9I3IUBCDqIc+etKRiMcjzAnwPy8kifPhdvv+A7RhKLjWPIzdqofKXeuAm9sjQJKe0x7ySkYN04g3f/MMhX8PbHqLrBajgxs88Ohg8Q8zXN/tpcyKvZn/GL2a90HVtPL+7EiW66xUEMLmue/e/Wxfq5eItsGhuR3AGWAiiQIQUSp1dSsgMSH7KInpSJnkRgVD+B2RYJ4OtXRG0mab6ea345NfyyX9AsFVM8533ma9sQbYpdWTSeg5rsb9rQbKqODWxtsOBM4UTPLE+uZ7Kuw8KupSouSlLAHv0+/TfWHOQ+ARJVIJ3vIAhLkMiPdV5NEBYhkRehxEIIZUCNZYCDUF5JkMP6JxZBzqxVbbE3e90E9dqRnsPwfnOwVCCX+q91/1R2WlN/+cXtv7bWX1iiqT16oQl3f6fUUU3jUk2xp21d5l60bhRBIi9CKwehlUJo5SKUVhJE6P4r2UlQf/nF7X9mrb8y1mk1Qc6IIFEF0ukOgpxZBLmwhJX5elL2e+pQofjiWCdKqBcbVoSY04lBP2Gsis9XtKWwy31oqce9T+cVKGTnwAMTKfwzAa5EUMD7TKQwDyspl5wiOZpCXUOhegXBkx2TcUF0qvtnOaleABdErfqexZtAunbCOSku3qRy8Z44NDtRNDtx+19EUjM7h8PcqRCgxD4UazjhzcHKMJfCMwUF94FYwmmJ0nIrsydn5eYooZDMElsp/hM4YkEaC/bRnpNZYkhmib48ZEP2JG0GfVmP/qgVxB+HboRxhyKMWxRhHFKEcaTtCwPHvtD22BfaZFAwOZMibQ617QtoV4A0DY330rxfYSzow9m2xofaboClYKtv54bllRWRFdCZIrl0hmbp6DY+4AzN4uDTesRn9KE+t2MM8nXekDMLXxvgFqtO60MwpA9vs5m6netXnUvoXDEv3a7FpFhlCzlr7aMvKxxMkDQttInEY6S1PbgzmuGdESIwUsQAUpC216TcIeYoN4ytp2NMejIhoz98DeyT+9BR44aYOwxNtAtIdTJ/waGNnqFG7KvnDEhP2VsiSMHYNhBt9JZoODqdVa50ak8uXW+03IsERmv6epiqUdWyiLiOgNrfI4jAoesN+QU6N3TnKR7jXajUkpvCnETqQoP38gwcye5gsdgJAThdgty7nBSuHYl2FP1mzc4KVVdZoeq6RDMMC5Wci1WS+xF9fwD/eTL4XJRBShhjnHzJxsk/Nt4Vn8RBz/JLtr0rpuRdMS56V2SHe1dMtY8ZeldkRe8KDFlfIUAzuJZ67zBvijn4Isy1L4JkGfNqX4T5Ib4I0+rwjemr+iKMq8PvtC/CjH0R/ijA6m2zw3wRNgVfBLrGmxdRsdqUg7tC5RBfhDmjMi+gwhc9+3wRqiMJcao4knBY4oZzuMeW3HBkfA1UTK2+WjW+BswJY5+vgfZE5vtIExGKVznqaSj4XiDge4HADr0p+hpAQgz0MhhZl/vKg3RgBgNdqEcwwqpGt7RZ5Q3/pnDDP7BhxesPGFY4gMFTSapvBXnHivJzf5e37lCMvvr7W/rNXXxXV1hvYU4u0kz+NhNb5OTBAaGEHV8ooXMNPlZ31qVJax0+aS01qoqxXXLEzkwFpYINkph6B9w/UuWKb+6sF1V31i26srN9KFplH4qpKxVUtojXW4tueLBCq6XRgqv4lrqKb7lotXZcxbfoKj4WHcWkzB08Sy7KZQQbHy7l862Yf83ROp3L9z/9TH31XrKv3tcLvnrf0b56nBvrVd31PvkL76734/pfWHe9b/+cuev9uL7bXe+TPe563z3UXe/lz4a73uV+d72v/0Td9f4Ou+tdedz12ncguiyXwVdz12vrt3c4gki7Bw5IoEppatLLJALDXwN2Wgg0LwCn/3Sfb1/70/Htax8+we19vn2YW1yJ21f07WtHPvVhj29f5yfr27cLn33qA8btsm+fq0V4Q2X3+Pa1fxK+fW3Ht6+tFIq214mxtsOJUfv2dQ7x7Wsf6tv3edfXRm5JPM7eFnxtwLWLfWvqH0b/9VjqJGOvTjKp0EnOD4i8TXS8rdFIzh2NJEUIpRRGCOF8u0CvnxQhFBJCUYzE3VRoJBvQSDKlkaQoFBcic+V5+2CNpE2qp0+e4+Ry05qF4FoLwXWlPF+rxQFCsH2LJXQRtQ3J8w0ceddw0GUMvgk61fonjIGrLzcsfbmMwcxgMAAMBiUMBOpU6J2ZW0BLcY5IFdSrUCOTu8jYPkkKn9DgYzczSqFByUQTvxpWIdYFAZbtYOVRMfJK5QPXXX5Gyoe//Zv1nJSbsdgAOeTWnUEmHCvOeMXZchJB36Lr/ERNs8r3onMIXedbyBCZou9mA3w31THS48HZKlNcMiKVL2xC74NkM1Y+MPVU/lCcSMJBl5NU/wizdnXoEAQ6AtzAN8GXU74iCI6OVWObvCvpB8jp4T6+JYaxAUIM/WAINOTmBUfPlnH0PAhMPR9R1jQQN1/cXZNao7L8pdpjZEAwkuLXMmJH2U4K4oWJOFf+YGKLUjCUn5ZkaTmaUQussSnGc0tgxqRiIV/McFJfBqjibTF/htK52HRRQ22rOoL7rKBtKdCUAaNrgL1jS0bMGiclBVVZBvFQf583tgo6ZpdK6xn10rzRChrcppDu+1ycovFk5mhzsT8roF7XZ4aTZPbtYKJ9bWmiea6ycjaLrOGb2fohM6sG3MN+asx+ajb7aUR7DmtrHzpNRicmdNYedJpldOKD0InVgFWmIlCBuirUveui04wwSx+4Txci3kOfEm4JgEXhptJovMQlQi+PABNosefUwXYPe7AHqEIYTiGMcKuIcBzJ9SoVtlNQ2EC6D+CkO1A6HSeXAhVOqinsQd3Guj0gckwo/ClpdRvbg/rUf0kBXIq1uOMPo+dpMPtoqLW4M1DThDgDLW4NH2G2gY8Y6rKzFvfY0eJOPFrciRA6YcpGX1A8drS4c4RoJc4RolysRP4+QGRpbWcVWtuZWEHS9xWpB+doRzopOrZGezzs9cE2YyMLTCHN9koIve+l4gw+MsWGCBsW5YYmGbrKQ24Um1i7I/JztC3ZA24s44k93hbbtyLjtbWlV6s0ZStOU7ZKpWK11ccSfqnbuak7Yw2oa+zcwsh5q7OGjGw3qe6cVnZOGXrOXYHlwadwdJELH9b3TClLZ6QCnon8Rs7gOWqvF7CxC+69EVDhxHbvdRK6eyf4ojDBvrldPRO7p9Aze04f3yw5ZGppMpUnyJCJJki8Bo0jmKg5EHfuEtejT16gJpl4WnAv5Q+wfSHOMSflUpyhX64kY756doy65infzghB38acmZE2cwpZjUTKOQNES0kmmBJSgtbUT66yUytvgHoKlzXyH4k8+FpL9S/LaQSeoUsexOVDIoGEdCGY2iMEdcvcWC31IetrxH8e4q3/w7Kh7oEBdcugbi1zgHraBd97MSRQh8TdrX1XTsJzDobEHAOCFmSiA1ADC9SeBnXEoAKQ0xKQEkRyBPZA6KZBe0COwOp3kFCzB+4XNbyC7xVgjjDhsAtf3YKvr+FrW/BNPj34+pgMuv8BxxX1D4BPAxdr4LRejjd1aXmGLw6b4RgL+cUfcI7NeO8MLwE2Xoa4ire8Qn4Dr16Q8ulvg77OWH4Nn8M7fhulJu+pJq4n2ZUTkfAOyBvqOeeYgxnsQZVl0bT/vqSUcjWkoPx3qdr57yvV3ntWfwbac177kzx8noNOFj5nf5S+/Jo3lAP9c+4Rw9eB/M8V5bj7Qe0/zPJIPBaPUPXOK8PbfBaJC2WPK/EEYIonoFsJo5xtLFvqYezCHsXlrqHFXVsqMUeL4tgMd0WzR1YCRGjDXMtRwuM917QPjFSiZWv79/KgIuPLEk8baOZwQbzw9Uo9j8EWDS1hGfYOjuRpaBF5ywASUWRTGT5qAvDWLni6T1p+CsCtXeA2yuC8dmHbWGcqG7Q9ErPGEtOeUwf+HPtnIuf+gr+V+2+o5e7WQtLtHVq9iytK91aUuEdXi1z3Wcqapvfp3OLY+ZAu61v7t7Va5yf28dLsm8xNLizsPFVrt5Pa9WriC88btCZOytpXx9G+Oir3TqewxdW49+ksef4jOJc9kipPCNrXFJQwUHRjUHQnUItiImGTPzlRxvmVCoUlGz1EqK/Y5/QRHeTO6CB3IrXeytw+Xy/k9vm+8T77t8NgaPkLLDGLGeTNBn+BJZzq5vARZyt9qjs7yF8g1f4Cc50x+Mw5120RwKXYIoBrMEEggFsEMAHbrJPbR1Qc8oRYgml+SYe8Leb2WRZN88bksVTrbeUar9MdV+3z8lX7xtbr5bzzPHtMwHNb/+b7aVa8BZ1qhFhD6Ze1xuDHkNV+uTed/ethsGYM1hqDdSUG6ypnAY1BAs4CWwy7BCU7OcxZIDeo1A1V1Z5xnQU27Gu3KTsL7EFlw6hsCqiw5wY7C4jd9nifvR2nKj8le7u//Qf1fI3tk5KzgFQOMbfPVJ6ZGP8F81lVZEApzlud26fvcxZYG2eBBVNp4VxJLip9nObVhWLOJDMyzgJT0FYnlNsH+vJAaoA8ussGBKnczQk6CySVhtzTgiFXQRjpBIM2zBLcW/Jc3oKzAHndsS17ptOw8y/BHVu86vtb1puH+K6hsN/CCF+lUFQTf523TCbSW7KhI98yDh0dOtJ2rKV+hN7hlLwHX+RJ5xcDkj8MpJrcAcP1rU3wy5SKtel3tEyqPWv8lh6/eBkAeSYamGO6hbUvr/d4NHg9ANbmYjyzr6DnxgOgsAqjw1ehHpUKF6g7qpZ2AIL8E51r9gBoUefE9gBYuVCllgdAFPnuqk4NPksPPq3X21VqVBefWOMDqlRMF/0t8Ka18Wmp9N4efNhzEDNSxegiWOHRENnc1uvRMFeWxddFtLZr4soukgbRiBCt+RCNCNE+qEn9gkcD54O1zd6QKl1u0jvg7KBM5Sdiwx4NG1KZREW2olvov8P3/9eN7//nd/j+fx7+86XB56JvRUFEeY9QtxpSQYYh6FZj+IBSdMNdBRnmHov53HLpH7kFGWy/h9t6PnQ9GypLAokh36p/s54lYui9Sm/49k1SKMsw5HzBU71CZ3I4eYooNuCqGrudVIko+dzpM7I0d+6iSj+pDN4DK3dw8wOof4rF3oZO6Sc479t1o16lMxZ1aYP634G7l87eWj4JeeA/g4JQVKdnZeUqgJoQQ7aUTZgbKD/27jWaTVQBG3NX3PEVsEmU3GdP5UIBG/W0eyeH3FmxBm+IydjYV3J1qGmdR5pMPbzMlqoTKyYAWruUjFwCRha9AYfWD+x5tC16CVn01O8iqkM9KpnwGCoJq5UAPL7lh112jUeLJaL5CkV2Qt+CRuQn5du+bygHtYGnDSxRvLIUweBCUaWd1x5cbDcZe95CmMum8ktGbAhplKkalhdAizYMvmF5wMKv8cK3C6YpMCb37A+wKsBU6v2WVXalqcrlNIvlcgChZcHVfsrffP2WxvbAF6JDEhAc5cn7to0JzmEjB2Loxm5yfZ15JOZR9PtdyblNTNaIOPeIstWNKCZr5HLuzQEea1MdnmlK6Ww8tSJGnOl/AWF/RQ+1pIKPJ2IEh8iRXStiVDxEmkuvkcu8yz5PlYnAx95E4O4sh3qWy4nAnUCaLkyMPk0mdJpMwNluxLUiVsrpblSFyupnA5UeoNJzUaksJtqvrBVBp8WQqnyIjVVMdGb5cKm0aqqWkNSIF04tUVMrorezVOdADD31XtTTDih61VWE7FoRWm5YyQBNASFTK4Jy8sSXJiNgi6IEd2YEXJfCpAjAmGcPHHstqDnJPJZyfC5CkwFQ1b2TAwbHJKH0QE1wFVsXvMCaen7ki448L9LXFl9WPucxeW+AO1qokv11KTM6vB5zrNCvms9F44Bkfz7la20W/dLrlwL6l1WWtDzP8tHSWwiCZIfqAErPgqvGLdxqP2YAd8voqCo83ETKThxRwZ+JbSdu3fn9rKw9PapAr6FWuxc9EFAjP3qNg9CzB6hCD9P1KdlXQK+hi412wbLblYPJv0bqyMIuOj1OctizXHTY8TqxXXT+/ijoWxJpjQkIoXIYRAmvQSLN4COWGrz8AZRdB65qR3jtkU0L7UiNYimhNEvdr6R/86//lW/N/8k//xtgUTHF7ruB/Otf/97vvPMv/u4//tqV/CtHl76vvIv/+1e/Lt+eo8vdxxmNY3rWnJ411/FobTkerTHRIRAAiqPvOcdYVuWXIDSw0ukEjDIwGng+17R5FSsQVXo+60IpieUSqw+67Pk8tdtmJnLDhCsv+RisnPQWWn0pxvjOtPpS8t2eWJW1J+DMlAL8n9QxIGtV8H3Bt6e27wvkNBhYPruidyQxq6nYeJ86HFcj3sIGgMvTWk2UFj53u6lGi14rx2wA9FpV0mtlRZuaoe8xQgQudG3Yn22hqF0ZLjb0W3i/Wc9XHA62RT+YMZ/5JLXyOXtsbJhzLPiaIDaGXRbT/Z1iekr9JOQbpzbrRuXNgH90CRkTJ5qZi6eDosD4KBXDARTCoEjPUCmn1eoNueYHbjOsWdjGsnsoMhplJ+apq8brsqRLTkcIZk2+MAvpwszshpIncwMI/N163iNXcC4NDoN0rlJTdA9VC0BhB/wTdL/+KULOMHOIW0fVg+2Aa+tzEd3uiy1r2aJRBTo7/rgzs91eY62oUZ2wTTy1LSpOXxM30DlxoVq45kqS+D6WRMLS68fbKHCneenYzG8BW6Pn5eRzrerjLvS5PMGX5r4uRLHyiwhViDktk55eM3ULSIf42+JbZhb3m+sjukvzhkXzol+3prmC5B5d73CyXTHVs8RUU5U8bpLnl1neLk7uq3vOSnFH0K+GCAm22faB+faV//JcOS43gCNDUgcoaTMAGzUf1zNPOdx/MHaC3pdUiX1JytGSlKOlrsSOylGslaOTV6rJPlMZnKHKp6McxY5yFDvK0UlBOYrFiaUcxY5yFPuUozXfla+1crR8L6W/X+q/PcrSdreylMKw2QTSSNzkibI2WsoSWYWXRWXJc5u+8N03+3O7eEqrr7i0+kqXVl/ZpdXrXFq9bgv/Uug9Ww9S1AAFhDne5CuoNLxUFYZTdA5Iqq/Wk08HnYnNanId8OFBZ2JHNLhX6ytCZwtRb3UAXap9uQp1q1dhkBcwSPwZaqy2maoY/goTkjAGSWFCXPeG7e4b9YE/gu0HKoJtWBnhpvStlPWtLecDruWJo291lLtAjpEdjkHdMouEr6pvdbDaVkR8NVLSv1LfOrH0rdDRt2AQLGOfOPcBTRMaxQWOcaci3F0Dd9sOfHcT7mj54yQ5aYqys5pZgSW420DgP6tTcP4HlPoX5f9lilhL6FnbWlDd3iL0bda2Up0mt29C3ozOlVdC33Khb8M/VUagWVY+CjpXillzW1iWh9xU29esd8G1QvxcdG5fIab/dVSw9uHLp11UwRZaBVNcpFiCuaCCLVyo5loFC52Yfk8Y2ILumos9mzzBtiY0t02rU7efYonyebHbzLLBcK893LLGvMbB0x76Pv1xdbfAUxArpoZ7QkQsrlr3EaihdkCJclZCsCIJGIUS1axEYVVLgENEahwi4qKmxnU7WzxlBw+QPJwVsx4YIiCDQAgyia/W2XjF2lpC2lqfbVh9SEPgqmlbW027Cuof1YEHshKW120FCpQhUbdUobr8y6hC9cg1FAWWoSjACDV6y7+cO2FqJ3g3I05AF1zBRyjhPgFdcKt1wagiYM2vC270fTtGrW1JF4wcXTBydMHI0QUfky6objHl2x9bumDk6IJRtaHsxML/RONv637nu3W/M+gu5/kcovZeotp3otS+M1Y2Tgpaxp6Tqd4lWysMTalJG82FthRiVmxoYsOi3IAcZuUZcq3Y7codca3Yz8odcG3xHns8wcFugtnGxvLmdS981ux9fGteep/OGjLlR7zV/tWbis6pdlzEC3uOlGMH4oYVKXdOauO5yEBtPEMF/pHc1LvVxkfu1EEAQ85BFrnNylaF5jU3E9cyrXsQyxmx3EasifdJVlzaeZX++KgyLg1Xbn7BcWlnHJd2jvqhRC3Pnbi0to6V6bB+eKb1w7muZSvFZtOQiTSVFYeUrJ24NPW0jdcJnWsOBcI61uvKuDTxWDy09EM7Om0rVWWKTnvAIVUb8cAxINLmTTE6bVfs0or6STAeWIqhetoXsfw/R1LFFEmlfum99jtDQ1zLiq4CUEn3FhzztykE0qUYnVYEUoJIviIcV6m3SclX5IJ8RdTvBlDsxUTUDQhm4VYAc+EjHTvjQL8Nu++PLPgmu+DLGL5sD3yZqoIF/1T0XJfgy6rgg/VCMVP9D9TMq3vUsQphYP+bGCcMIrU6GALXuaTIL6CCJMlVnqZ5i8tUjzAGbHQlwZA6AD1rofte9PyOQ7YaHPEVI1FlZ3oMGEAu7Uv6o6e8bMZq3eRNNRvkBnKZ4pPMfnJ1n9vNR0rBLu2zBrtK2yFWa+uwcNgWtEdxWVVLs6qymm1YFarZ2xIgG0vTVsbOcJ//0bgcCsOTn5XDpr4h204qQqow5GsrWf3C18sTVIWG0a0vquobcKiWI3kamMplAIk2kIC9BN9ah3ytXPB0n7T8lObaAY4neozDhJ4FUHdBc6e26Ugh12dJT60Dvyvbm45sd/trxmMh6fZuOb1d5V33VpS4R1eLXC7aPY023Mb31G18z13Rmqb36SxP2w/hLPBQhTbxcYGDmXI6J7jqygTq7tyBGhOInE8ND+nUcG6fGtxyovUPo/8ByonGleVE+1ROdHDvcqJ97aW1o5xo/adQTjSsKCfaLzUPnAL0bl21w8qJDj71cqL1qnKi3Z0lQ1+3SGifI9cHTg7nvl2kc/A6RUKL4x9WJNT//s+sSGi4t0hoAU0I8C729FEYioR2OTKjm1q42gO8SpHQwadUJPSzzbJ/y1n2v/NaWfa/+Rc3y/63f86y7H9zT5b9Pzw0y/7tZ51l/2p/lv3v/ESz7L98k2X/TZb9n7Es+4WqLrflqi7vV0aR/UcmiuwHtR1hZFfwn/9g8LmfEdH1xz+vouuP3oiuv7yi602BmDei6+dadFkpYpTo+rYrb+YUajCndO1z8qab61CDV5A3C52wXYcYFOQNebmMwV/k61BzeSxW7x8mb8Y3kjuNbS8vyVer5M244OGvZMrCZtKTai+vyUEe/pa8Ma6T1fJmBfImpdwv2rn/cHmTED8e8wouoOK0uajUD0BlzKiMC6i8trwhd69VhbxZkv8RyhvGb8ryZspeDW2TVPuHO+TNqihvpl7/KN8en1b6R6GpCyWNpBF6wnNWlLHulQ9I1NCCFsjqxcGsXoE10AzfBnRMWVEkw88C2ZSa1Cj9F1fduhWDxb9GcfOqMLSstxfEDTpl1O4vZ7QX1YR8oBXrmxXlzNTrDrZ7slpqVLXqE5YzvDf2y5nEhWrxynJm4nL0WVHO3GsNqlFdtFoarb1yJnGhWuySMxw9XSVnlixnlh45Y5ntvxNA/uj/KQxaymw/scz2XTLbD8hs3yezfU+LlrljtofcPhNltp+QYBmKrrbYo+2+p7OOTZRgmaGVInazRleb7WMw28/QbDUVsdds3yhXu++V7PLd3eHHfW/4cczZRHs8nzENoy6d6nzpVIeIl77tztawiktUmu2nyGth3w7ZdD8XQ22676HpXi6Pkb7WlO+tMQQdMND3xEjf1cl1p9rCa7xXhlZ18Zc3+XK5xVEv6rcNFQVzyZfPH+C46s4gLiAeUk6MAW/b8A59SmlKTf6Jgv9ncXKaIlSXlx1NOHZEFU2LlOg5OsMiUa3nIqJTRI+N1U1ttlYBzeGV9ijtHB7DY62Zolm9qzck0NLToE4hhX4KIwxbLT/nRTY+bJFZN5sWZdTQ9+kMKbWAjQwLBvw2MxXIUT9hA/7QMeAPZc8o+u4sGH88+gjZx8BiHyGxjxaxjyaxj7Y4km84Jj6DbGRauv0bKDYyULd/oS6m3cTjmjaPDBQbiWnNiRhPt8eSuseUniHA+tqBVFGPgKmMialMLKZyJGrgj8UOdjHylkbRH2vrq93eUGul7SvCDIXb21KDVlXLrIYtyW+nk1Wy3enDz7dUktvpQiXWF2pgqux4nUdyluFrlOrut+VxX6XzFoTTyW12Ik7FFiq1My87IhX5SBzfSE0nRmsSqDLHhfhXBD6ww1q3NnET83VRLl/OxD1GuI81DRey4RgQKjYkFnFVGxNxIZ87fRTRLeKqJkWfY5c+DaZPI9Xdb8vjtrmL6rwEi9EH2Fl+cTsn4Lu8hbL1ZyK5zc5c4lbWTH/gacHFm/ew/VzuNFNlSBIxP4awm7mu6y1x46rdeXKd9xWdSUCs5Q6ito1cE79BgQSSuGnwZd5jI/BGFSPJ35cU3bwsFltvcLHxhiLzMraeyvFEX9Ijkd/6qf7RLQ5nFsRSDi1iTIJ0IZbPxYMXSnQhdEKNk60IMskFOhKyU9FhyKyhGMCeWlkpQSRsCNFPpQwTPI3xyiMDKM5fcCir/bs8v4P1K8z7E+f9Sfn9Cb0/5yW4EgteD5lI9FvWYiMpv4RDDUTJI80XaJhQ28XQvMbUreklH1tP5UgCNvhGfpMbvGYWsAPoAmweF2Khqc3980SNgNQGPE8Qz0L3Ip5LgiKxoUJsy3CgMx+8mXF3f5Ff3GUP7/XmC/3Oh/iWh/ZbZI/+V+WQQlxw/aNE5HZdojaYbGDnXqV6+6jNc401i6akqhVqFtmMzXxNfTwuYPHvjA0bDvelp2FBbK7YjwmcIjsrP18Qpyv2ahcYAjO7DjO7jr0XSkMXOy/BSEGdl8XOi/J+tOerTY57HnSXVXRgdl/302FZQQfm+HUvHZaGMYLl5QNERX5xUVn66ZDozkL2EUQH+Op0Tiw6CPN1Zb5m9ioJ6rWjA7bxiqe2AFKmQcohWTmBBF8dkDKzoIrUysp8ZUW5fYLSfpBTkjHLWgEnk8wiB+LBXMi9fWfjmNgr4EAcBU+bVqPV8qtVCmrT2VospRVRxlEQjs7bjG5HOAosfQNi+1QsQTXaihXI8gCU6EAd0I9JpWY9+wTWwx2oU8digJr1hDTrsTiyXWP+u1kw/GjkppZJKLXMglLLzCm1jLlfvDi0POdCH8XxdvHCsfbmKEdXIkdJvwFOXUx2Vm3wXd3IOeLCTjlq0yshXG06rgjd23nX2MKbLU+BSCyB5g0Lln0Wbh+7DtriVQthzqyCb+BW90r1Jk3nGG13EDw/hMypQ195b6S91KZPdXlvi3ooyGxtOj768p7qeKd7iNuoIm6rmriNCuK2XpO4DT9xQ+fGhmNwmuQmac0MZmoGS9kI8heMXOJ6dGbKET71xUJbNT3HFGjvqdmZ6WS67Fx/LTfM0rr3ztsmQzLX7IQCeWQdz3VUywhtJSFZx0MzbaTXLTh0Ya5CHMLYetrCFOrkeYyp1FUsQ+ioRyEYW3LUpaFAjJiSdsej5BM1DiQmFsQDTiRkkmExZKXUnHbdRy7PZ0FYj8gyWYAJnuaoS/cAivELNjbZv8v7ZEsy7/dbkaz3swm6zwswAqubSfAy1rEcVn7U2JfZx6J5yjRPLWuwetrW1RPbUD1xrm/7PTE5XTDLa2qnnHGIR8AT8wlmvTk5uL5mZENVJ9N/EQ542qNU6ZcU0m7/Am65w3u92VQRDfEtof0W4FegS7fE5Ip06Uj0yzU+L8S5R1/2VyTp+bjYqqJYZA/UdF8DT97KGyydQXqV1PO8QbxsdVh5YSuZi+FIeuj7dG5EvnS4Vq1TUUGHsIoOzNCFnw5hBR2YpwsvHUqcucac2UEl9NOhdBFvJTCy2bo39X3fd/N6qnTJvVu1z1P7CoVODUhNs6CK1GqWeUefPAlW/lquxJb6yK0kQ8BkuFIO9gsVVFv2CjgQRzVtlWQvR1NZZDeLpbQiyjhGhKPw4ahSXkbg6t4FwTwEBj1Ul+5YT0cqivAhlAn6HD7OJXuK0BI9sFIxnjs3W6Qv/+nAyTZk++PNKsrZ54f7483cgvZ50R/vJaQFXuF1Mh5B0D+CnHA3EDNNGvQhLhOLG3mAWGgXvU+gHPy2ymVicYiL3sxbDt6uOaNSEix1qoYqRU3lyvbk+dEabIqJ6zUGP4ZURou90TWvh8HhToZT2zPPTe1j6+DKP15oHXyv04coOBk6GbgKVXMmTuZxp2rOHlQmjMqkgArn+Nnn9CEqc/zgVOUnlTl+cDHmG87xU3QKScGz7rv1bGycEFVaC1W0PjROiC/rVkWWggq2MVVzCgWsuewFlzMXzLsC5l2BXcX6sOSKl5Qaec46mR5S0hhrx9CGDjC9T1CpJJ2UlCS3/HmMw05StwZ6DAT7O4HlE+n+Km/fgVMGMxG3xlAZBlGCoa3f3sH3dchrH943UC6J+EqJ8WWKbhXqgiiHROxLfXfYvkovD0/HE5c9LmZia99cqQLd5QluHz7BbTWqy7sizbswD5JyJImgs+FdMcmqrc+zT4okJx1Px644rfBZePDpvN6CVaPeB599DpgNSpCdgYrRqSpI07YZmbcgzVSV8XtdRD1Cp20JHakSKVeZtotoe4dLZpsQ7UEp5V6hIA17ZoKDTLZVdrk+l+/rY26dPBPp15xMz47jzH8V1IOPT2rgRXF06o0iyI5BfXhSiyiS4Aivvr8YhPANogmOagA8Pq7h7fjgc/Jlz34UfIiKx/GT2r8NdBBCMfwABY+Q2saPAvjvnweys+xUF0dgUjh6qxblwT+ViNqj0If8ycMjHEx+48GwvswRwHEEcPw7MLp6AP3ekwohNkHmmnTwngQb8XoP8JK/GlzIJ88GH57Wot+Jg47lljoAQozFgEJ+B6B2DeEjti791weYKcfabWio3VPXnpoMA86oP4XCF0Uz5aJCyVqIwY3UDQd2TYYBZfb3yfWB4q2TikoFlQHAQ28A8MxJW95QnmAeXWVoJ4ByA4AXpKssxPQmG3BNhhRipwGlQRUq6c8GKq6v7aJKV6GAh25lTYYZtvdIuZRq21JL+IlloxuxGjLiGgeSMa3QDBeWajJ4TUI6KKJPPkZ29SPraQhRxENTI2dHTYauioGwoq07KhG+VZOBIG+zZYXDrtFRtFapCMwKioACT6kD8ih2Z8HMeYso8fE3P8YIYYz1Bjh7L24/8Al+v/wwq2xmVlnizfUPp16ivwOjIax8lHgjotUCHGlJs2Ihs0pt6lsDTG1VW8qZsVXopq2O95iIZGgfbhqF43fDt4kGFeg1GL2OF72OfDTwo9c4CD17gCr0UHNTXl8F9OScc8o4ZioD+GtAmeMSdQCHyukQxB1bJ2/2KV3YJ+9TN3ZBaqsYuwCLlU67z4IPo3+0DPofTz9ScqJLTmJdkBNN+Ail/O6CnOhoOTF25ETfIyf65Bxm/MI6OmxOy4kBQhSBEJIQYeULhMiSE8MKOTEU0Y3UISJmqngelGdGl7laubFn5utcr5ZIrZYOqS3F+1KsgmRzWnP5Dw2DcsOM8hLUSne9d3KwpjtYW3kENN2x+PkMWR0NFXMSzJjvA0L+NoXFRbwcvtbBKSHmhQTvi+1r8A53VnfO5c4K1lsEKgag7tN5Bkbw/Bay4YmUnNNmlnPakMTjULRuMrmGSBeRYh68/luFK7UU1R/7Si21J9g7q73irAIRIvYUj5ypHZQbnBk0Pdv8A57GQem5PV3Yr6XSO+g7HIdyEVMuAreNtjVnjQPIbnUukD2FuRNAb+HS2yOpyR9t7WnB/ZSPsP1CDFGGj0Vfy3BJ2Tzi3GW0Ejd6TWbX6B7ECzF/cJedB7hD5VZvoAdWQ0rIuSMh58USWxuRwSTRXNDqlwNBJ3Gun2RAMXgwwEurhZg/FxfqSiViFYMcpLaa/KtrTBXWUl4hd1gzsoGOSwDYzAFsVgRsK1ZmkdAUJzz5c/1kpWZjIWYOSFqlWGqviDOAZ6ndJaZ32YThyQ+BZynOFDzsHiGmDM9EPzkjeOSpmn23tqzkWPAFH4kzid0AFIx8YpUbGHhSyszKm41mbFaYsVl5xmbkYDaBV68xaUsLy0zhQ/VeOS7lksFh3UFtgsAalifDpfuOCEa+u4aR5TjB0bF6paBcMfTapv00n75QnRpSXQVSTIRU2l/kCf2+e7yMGzz/7ux74XEWQ6ReWS9gR6spEevCeoInED9UyJGTmBw5pfVmUjtG2RTURUIhgftNf94bm3l6XeMmPpewkeGuuJ5btqbEYhDCgzQfLLTdIett2bnOTK+G5zFQgxmh43bGnFVtbPlsQlQsg0UcEm6KSlC1OXEaEtN+u+7TKD8lkJqufF/q6VD8XAJU1wAdIoprzNZrFltXULfu2f+OFYHBfd/eumdXIJKhSIUUtDoaKbjUe7lS47H6GY1nAjxveWd8RiqWcK+0hL2LkZzRvCtyphTDovfZEte2p8Fdm751Vn6dWmwzpTm6DbTiPM/tZeeZPeMQOgERQOcQkAWFiTcAuZOx0JNR7q8nw4L6Hm83qN2n8wTqB8xJ8UxA8czFFLRRti1CKjo8OlAqbvjoK5UpxRUEOlQgIk6x16dz1ZDOVX15Boyi/9Y1rY3ItGaXOx1SudN7mNYGu0xrM7ygmUMsF/j6ixHkFznUtDYC0xqXO52hWWpUbVobHWiPGuy0R5nWPqfN5VQOkN3MTtBYZzcpeZLo8wi7TGtzKHc6wzvYlcqaMqpCZeWisguPHUjcF4MDLWqrSosaThXURXMsaqnXolY0NXSu876xZym3kLEKVr/WrlctChBka1vkq509NxVQp059chVgN7UroE6ra2fPlLWtp27XmgaClyV7X8tXg3XJECwdCOhpE+wyQx12X4IgFG2ubtFRt20I1HfZBPjBnjSBoc/0NN9vWVP1N8PYR8RQDKosaxyKONUeJX32KOnbpiN7gD1r1UqHatYqUqZxZxsOQ98eGtl+JGOrZnfd18Cby+k0NBjXPc95043Km66pESmXZDCI6HHv07mpq5Cip2KkqpAWDXBNNNHG5SqkjgFuWXvW1GHd3w/y2rPGh3CN89fS6G4oZciAwrtXVnzmiOIzJ05W1nFF2ewpJb4gObIiOTKlNKwTt3Y2VWHQ0EDNLwnPEOAZAjyH+JA/O5JcXgxvqEjY94IMIqGR905d3tsqb4sxSYKBiXQc2Z5vk1LzwPJwM61qStVy7us4Y7zWCPhaI4ApHRjf4w44HXcUE65XMWFispEY/knWhUQNFG5K3jCyM1k86B4lJqBu9DrDs/VAF23n1/NJu8b8uc85gqmaM/8GXL2u8CaB36NdlJuid5knNDA5n4TYkS9zsNDR8BgMMt2qW4e5ieEZ8UUP2/Zj7TEam0ZlnO6zcVpymJau/iKWj49+iH4KEd4/gJrZk5DXDXj4lwKvYYPnd1TW4DUs8EINXkjg6UY1z32eZwYvRO9yBi8E8OAkr31bEyhtIKeTrmqDZ0cfvo/3NuzLRUuTlp38ItmFZKEwd+Qou8DbWrkcMLSr+OMB/5h8aSG5h9dvNvTtCLqjM3hDUoppYaGPbJpMSs0DxUpjtfZ4y8T6xm8X8QZO+g81eOKkyoD+SWX/xLiPT4E3TvGiKryztht6PFXuti5LDlwxLUlBrjSMxGqxdhNYNdwpOcJA58AlVi8pkSfPFjdmzymdqMZ7rnVJMZNqz7X1njMSQm43vNpOzF7jAtfofE9Ms4ZLuvqiT89wpC+GvqFyw5jLPt3oKYrdVvXY22bLdQtbLjH7TYHY8IC4d9sN3SWGIIYEornpLPtCt9W2a5lt1+VtJ9lmwFuvn+Z9jG5ES3+9tPkgGQ8stfq+Hdity+E8P3X2H5YjzfqUY2dDOjIe4LzKmyefIlPSJoq1J5WeMnJzRRWbdQrollqlmqJDLbiqKTuwFJnyhq8QfFb/vp2bnHUZVlv0DqUyoR1QGt7zedZM5W6OomOprkT/Zxh0Pj7W14PgXCOZRQN0lBA+IIdEA3QUUxWq5+goseesG1PaCHNHGOk8NMGzBuSGeNb4rTTvVGgiHSl4kVfUgo+fYWKUZ8c3edfE0A/wWeNGH+lgKy+f6bjCHNZiUwnoJZaRaZnuQzG4zOvy3crM179E7g5zAwsNRmpiB2qFXbiEk4rKJlhPo0wq6pJvaa4w4FdQBRU+gOgHfTb0aZ1B0la1yaVC0DT1MwAIr0HVQKYBkkzBQpAb7a+CxVm0yUe2rcRYG/KyR6YHyDOJJm8jueOOys2h2pCQYx3oHmvhWk+hJhzoux3JcDNl4x4xBmpCVNkUjW3LxbZeoH7LpT4eIoaXhGzdRRZQFVjlHvyAg6iIMzw2eNer8MbeR+WfaNxBeuALnpG/MROglUIZ+kDuKvnv/VR00Ou28QwyNXW0JIPpV1pgYJEk0CQh1zn5J1rtmDKwd9jmhWQBb9OWXpFqPfKjK+KBWZ0hC9I8Rse8Z1i/F/Bi5tvWzDcQkdFo6i6+yHzbmvmWf9p0mC8kL8li8svrQToMyXxj2Lrs6odFILqiwb58DeI4HeI4sVRZSskWX3KyxT8wyRY/2+S+Lzm57x+8VnLfT/7iJvf9ez9nyX0/2ZPc97uHJvd9+Vkn973cn9z3D36iyX1vTbLFn0py36s3yX3fJPfdk9z3tyqzzlse3+AIXp12/kcB/Bfdvv9NHMSWbBpiHjUxBNk0ho8wm8BHDLUnWTZtD7gWMkLJ5ALeOpIpwWSukq+iBX8o9cLStVC9QjjBKTkfgVEvVca8hGvYp1UJHHUNe44XGDqWbD7rjt02m0mM7ZLpXA49hwLFK9s8O2Tz7BBu5VZ2eE7DklAjklB1kLFLAP0H9WyjZO2yCoPNp4PByDbg5MBqpxUYjGx22AUMunutkSSYep6WxCrq3gdLwB/WIQoTr4YkRvmQFU1O+auT/6qbnqTgV92ke5Zm8Z6Fc6SqkshctFM99VUMVL8sF+2Ue26EFp0BlOtkITCTa07Ho+norLzBxUWTQhH3QnHRjYFzznDOHTjpKXCEooVlYsULF4qLhkDQP6sDlD0q4s4DXKYKZS7izs+v9HOqKiklDtwpAWnSbARuPmuUO6NXulDSyX6lTmNfkqhlWJ6c8PDJCdWo7gpuWCu4Ya5I0KwwcjQNKJ5qQzU17tVgFsKLpNaenbf0D8BrotjAU7qsoMXQ87xJW3VZRjTUiJZD4y1E1bj36dyMVNXvGC4fYuXXzRaZIZ+JuByXFO1iyB4HaxJUdfsi6bMULS/fiBYSLZ+8ES1/mUTLy89GtHz3jWh5I1p+hkTL/zMNxlY6uw3IjpXYgGhJ4COUI29AtKy1aHlwgGhZ6ZIlS+3H9sARLVvcghuxxVj+E7ERJ++DH8IWgwUgc+BC/f19SPBaE1kxjjSvED05JIo4hfQQwKu3zLpPq0xueuWsXbPayl4ghdonS2shcJNTjj1v6FLfIfgtksktJJPbUpddN/khmGfnJHVycXKTnYkTjQGUORFnP5sYuOlGNAYLSDm40BhATctiysFPHYMFZzFe68IsqwoMFnZhlgFgMChiAArMQmQ3GS7S7wXZhcgInU0VGhefDhoZT0SmJyKrnIjMoDEENIZ7nQ0vKHmepwWnKX+I7RN/u05FMvW3f1LPM2yfiS0aSOciZ6dFrpXAWfdEynMTsUzeapncN+5/obb9ZUoms/1XWYTZNKWeQg4G+Y8kDIaBpfqXHm/AB5TyDF0pQzEH2+HsBcvgDg200AMoMyWxrBomSqntTz8SuhCaTG02zItUqXBblX6Ec9Mpe3db/Q7vVLe6nsNgBwwPCzC0rbfHrPRuVfqRiY5Vgn+XcLOXaD+KBXlo0JvZx2C44816J/BmVFvROEMsjPtmnf5es2+V2rWgBMVKu4phJs2ubUSUA7oF8JOPxLgi1qXhzXE60ps2UwpRIk5tYc/gjcorLj58xcVqVJc1tTSSgIIu49xykRwBZdYuVIqKIzmnceRjQicGnzMPPs3X20Fq1Pvg0yR8znz4NGGNWvh0vVlsjAn7ocFSeLBslbFsH45lW41ahWU5P5vBskVYCh+WshfcF8diBIl2MJa9Qbsy3CNPNn6ird3MgKqhS7huqubf7sPPuySANveeXDXufTp3I5VXrg+MqQ/ZK0GpGEA6y4EESrZtVCK6M/g4k9tCfpwq75YhqLx3t3RV5+ajy98ovG8U3jcK7xuF943C+0bh3a3wLn9iCu+CrrE1POrvQ9TelipdWVR4/XmA3ii8bxTeNwrvG4WXFN5/Bj6TPa/P5LgiAbM43Gdy7CZgFkWfyR+yz+R3Xstn8gev7zM5rs5VPH6tXMV7fCa//en7TI7ttqnjMzl+VZ/J6aftM/mDPT6Tf3aoz+QPD/GZZK8zk7GZL1gnlX5qk+rgZEEugpyLmD0nP1DuijyQ8aLUnpPfeXXPSQWhqRZtwxyklufkS+05ydF/E6tOdZDez3OyVKcalAu7VPXuyqw7XSXHFWl4S3PVOnyuWmrUw10lp5+yq+TYm3S39XpLUI16uKvk9DNxlSzkEvy+N5fg/9F33FSmIEpmYkqSZkpuKlOQNPNXclOZuW4q87KbygIhQjEmIUokjZL3C7kElxWiZgmJWnWC1gUee6fVHiq6EvG8lPliVnbxsJvLXh7QqnxA5jzbQysQ161ePbQdPVxXlSXJnKVIbkiW/+5RthKJNzi7UQ7q/2xRcX1WlrszZPh8VnDOOP99nzxzVL5T9rPRCRaloKmrLO6YCCKVcM68OWnnzFVa4Hxxiac/g1Kk0WQ/DQoQk2oVb/dLGLiFwbCdK/DdCDiZa1A9ymVKMTc4Dv0aY7miazqktlD9lX/Lz4FYwCHQCiymLTCEKj9N1yuCBCVn2dV+BDS36mkHvDFGldEEYC8CAwzIBsqSNuzWRV+yr6Y8OWx6wTGsI/pRLIaQZo1+eBzR3/JXffeNGg5MHb4pJDtr6+mlVVYBpz4nfdkA2X4uGphvrQY0+oMjK386sYehk83Osx+aFZDuggTjdaGcCiY2MTTqSRqtmD70gy7Rp6fog3/Lie1VvBXVulWBPs3D6NN06EPvb2r6cHhELYXqtsqXKDnAlygqq6tz9NqxD1mKh0S8dEMvdspfyO45sQrXaMSwIELnA3Yc6rguMfYoLhtqO2yomHdX9Y/AsSjal/xkTuG4HhxDtT39M6iCiMs4hofjaI/i4hhqHFnVqLGq4eAYWm5DKDw4HNiNEe5yapOudahkt6GlfaisDp34l1boxLd3hU58G0MnvgOhE39/FPQtxQFrai6opuaUamrOqKZmAj8IwTDXdasF7VEhFvqUOlP3NFDD9Svp3/zrf+Vb83/yz/8GeALqyb+UbLr7lX/9e7/zzr/4u//4a1fyrxw581fexf/9q1+Xb88x48PHGY1jetacnjU3nBGvlMBBUsBBETQUIGcg9nrTOndIUrZDToR8ApZJGO0G7qr0vQMmnF+7Ur9dTpLNlnd1wFyoag1WfOGcldK5xam5iXItJboayUIllSodMGfa5NGGu5+2dfczYRdbuHeYQInSlO+uBCW2cbIBt6mgucWc2vIYObCSlYrekcSsFrG66zuuxNWIt7AB4PK0VhOlhc/dbqrRoteK6bUq3NP46LWywsPM0PcYIQJLUhucBNtCUbuy9NDQf72h3YFHYHf+w7rU5MkdWFIL0pKh2rRhfWYh6FvMp/itdgfu+zL4a3fgKfWTkG8s5UQ9BR1C/iO+FpObrfrloRWFruiGI76mC4Y563tL1vLU8sXU9/pqZgJB5GLCdS5FQxe4FAbwpX1w4yOtetpBqwEz9JAY+syxmlprFFQ9vEDKsTQmGx5CHESqoIi4RIA8gRGFHfBP8Jrkpwg5w8zh/J0PVNUCLLT5/G5fnaJW2Tt5Chmn/nZB1OKeeI21okZ1SoDlLeXA7Kl2OHGP24kL1cI9bsOBWuLiYUkkZf2e2QXuhBM7sZUFfguam8svB4M6Y6IdsUElSfClua8LUaz8IkIVbIJl0tNrpnZhEVDfpp63zCzuR8sUXuLSvGHRvJjDRNNcQXKPrnc42a6Y6lliSircap577up2cXJf3XNWijuCfnUkdTWoXJRlku21QN6x4jUnHasN+lcbc0I0sYBiIObsoZ15PLT/wdgpoLgEnWcOmX6OKRMbKEdLUI4WWjmKtXJ0coByNHeVowUpR7GjHMWOchQ7ytFJQTmKxYmlHMWOchT7lKM1GnuXoOKxcrR8L6W/X+q/PcrSdreylMKw2QSMuje53A0lZSnleKR11cXC0tzpempt+5MxzMrJGFb2fbBcvvNKJw0j/EtuJgkpSylqgGCplkrTSkwgOGmi0flBXarIyyp0kk8HnYnNanA3zivQmdjFhdyajitCZyvETVYH0KXal0tVBDGpV2GQFzBI/CklrDY2pL7ShCSMQVKYENdzaVulT+WVpRxxhvJqfSt19K2U9S2sMgoY54mjb3Uk3BvHoyTV+lbP51FyoL7luyneoW+dWPpW6OhbHbZdLSB/5o257mnqJQOH5jYB7oT6IuBtu4qimyJDCyAnLUFTlHN7miVYArwNFP6zunXNA33kAFepcoZhbWuBqVVL0LdZ20oLjjwFnSuvhL7lQt+Gf+r43ixrHwWdK8VoshbUjeQ8UO1r0ruaqMDF+/Wu9qejgrUPXz7togq20CrYvMLRoKCCLVyo5o6jwc76rws3yEuzPZ7fcoXtb6iNsfTQAeJKE69BiJYv99rDLWvMaxw87aHv07/Bjk9tcrgIvQa9ho+r1n0EaqgNUKKclcGnSAJGoUQ1K7NP1RIo5ym2UFPjup0tlrKDBUgezopZDwwRUI0yRFsX3YhxIB1rawnniOdAuj7crrlq2tZW034YBM1ipryQMuW1nEx5ba2cdRzlDOejpJ41KE1eq1xP61mAmfKC3wKn4eCvduuoG8mv76WihvftLcxii74GOscaLKkmpbQEhoHfsDSsyqEPObo451jvOm9i0jhwQ+vhLYY8W32AH91LdVkBga9dzEQpf4T5yOBHVgLWZkp1bgM0MGPiLyZ4AJI0EC2+eGwRWUmRw/MUVuZ0FbydDi1VScDEvZOA/ew6tHxWScC+/XOWBOyn69DyaSYB2+HQ4kkFFqSv49DiTwUW+FKBFRxa3N99aqnAPkWHlje5v/7y5f76/9yUKjOQEhMoQXFMtUVAiMxAiEwrfFVSj7BOyUNl5DpGvnK2ruoU/PLMv4SUKjM3pcpQzKq8PIZqnxTExcRWcEdeUcI3y9aJearvHCZuSpU6a1soSlZ7/FRQGNYx1zdn7AKRR+KkjslliwYAT5aHqS+HiouOavOgs2R0lhqdZUV+lbEVcVrwVVm/bn6VGmpsIE5IX1uqjCtSnEx1vtiFrsPuy7ViJEpVrpURJ+4YO7lWRsV0HgGn88AduSPXyrCUa8W+GMsjo8U7abwCPNsHO3KtsM+NLf+tpzrXSsC5VhDOw9N4QdpbRBMzC0ecdgUQpvQqlO6WW650CyZkqUeceSWQSgDYrCi1+PB+aVcke/Gw3UZ5nsLD5ylUozr5hjDR+MROuxJw2pUg1fviVp1WHagmr5x2hRW18gAFMTOxFb+R28mihU80NWkH18uIhhpRzpwScOYUF9EiZ3iVzqgYY74VFjcz+Jjp9MY63wrdHYjl15zKzCx80kikUaRN37A1ov+7GYQfRVoU9agOTA9EUR8+oA5Mz60DM3dE0dAjioYkhfpuHZi5I4omuDN7cIwUPXl6mVbInanoge4/QWY9gyJ6u3T/RrneOHul95DsPbcqQt9tGzj1trGpi01dnfy+6ya/77Hu30tly8Aw6w4w647S/adVzHrGVV+Kun1PTFC3h5TWQyyBa4CRS0YBofT7ieZyHZ9+j7RTnK4r+ozSwFKw1FOfgmUhVtTxoQqP5EZw1gYTYEwFWj5I91+1zhRH6ru7TdXeeT041aju7LWs2SsqgqZzy4rKKBUMIkWQtx3vxQ6rfh1MfyS1qh7vvh7tvintPsm8h1H079XrH0n0+bIsr9sXXXBpJerWlZXcG9aVVT3SG/eWPKbA9vPfhHIDx1TMaVIu5tSjYk5Dq5gT3tKFFdsZjj8TtZ0ntJ27tJ17ujzgmGRa6NzShc4tXejc0s3plo6av//r8u1zvqXrBm7PmtOzVsC4CxK+izyjK3lGUMEzbN9sunbrglFGKqszdf3WrTJ/zAployzXY6f4Rm9n9cFeqfpgsXoGC8U6C8Xd1QeD3QxE6mB4TQNOgurIPbY8iwesxQ343VCb76tOAb7F7gJ8M8U9mEea6iKN2HraBu3AFBHxFOBbqAJ8MalvY8t+K3dlTdWluaYieVy6oWcqWtENA0S0hRU3DM090qBbMJuPCjXymrEPzybWFaiukadJ4NbIM8SwB9izJqz8dE6NPHaa5DKi7DQZsewHITJhp8kpMZ6AGI/cNN0o+tYw6H401II+oTSeCcVHJBQfkbhpPPN7pvHMHUGfclwE3Q/OwfxWPHOuKvbxCoIK1iqYIMXYgqR4Y94pXzHPSntT5dvr7Awq6LhBBVUJ8uAwEKqgghC2rvGU7cBS6FhX53zXvIJzZ8K3/ubMaaGBHj6252DHqWu3074588UXwuXSTE6ghwwtT1Ci5TBc99CmVZkh9DDCwLij+1K1Bau8AyJ2AGrwwCVu5Sm44pr7d484a0IoVrCWOImnHYtRzDEaXUPpW+v8nsf6BN+9zre/gdw0Ym5qrsIHvkykm0MzkUoFC68x22Bbrk5CKpkFXtdDcRvtCBeLLmuHbtEwpRdC5ITUwCJlZFBmiLsi28b4CGTV9LsYsiZIsLqQzSDV3ZBDQaHLhgYhxRAIs1yJE9QqQiAytZhbKvSnQBwO+dlDnAYVFWwCHCHGGkhGKjWpUGKScTAE/QDdFNSPjiN2W2ip7A2l9+MOyArBEK1CMMRe+FpOWARB0oKwCAjJUGERW0yxCi4p5RSrrT2iLjNMYV0QWFNL1EUmoLe4COWjtT9k4DAU7QHc3d53dntfXbP2CxlKSaaZO5EKTJ2sq2U0weyL3MrTBieMka6CaOjCu0ZlZS1RAEoTlsacsI9iyxO2U95eOn9riTothzruJbSmjoJgfs/+FDW6Zys3dZphdifPuyaNsRyyq8buummH4dqHsgZw0Vq+zmZdpSf6lGYAeXiHNZeOFe4hSHNZ2Zfb/9cw6H080JfbXVBN2qJLl9td0FxC+Iih7CNrLiNHc+l5NJce3WWbWnAdbTzXmssQL6Oaz44OSjkumnDMGOIdpWTE3mPG1Hydma9zvaL7akV3SNSYG3N1Xy5X5xxOnBBWWGyYYsOi3DCjqOvykCEtyTmom/aI/HyKzxel5zNKmmjGi5TzDa6QMbAG/DaB25nrvCnXCnxtphDqxGtFv/Q+nTVkWLdNLsQOd1aOBOXO7FggO8/AcLG5hUxTYnqbbaVyNruFSsh7Upf3UWmQ2qhcPRSHMBI9feCSUwZrBdWHGGGYSVTom7hGj7Qmu9DReWwpm+lbqppJ+SD0M02IXDVbHi2I5TUmGw/5JeM7WEmCVm0DrvpFQwq0qSPOp8WVNhMClg6tkJiMwHfYScz1EwEkR3MP3qCuxfS5SOgGlX8iCS7usoVayeDS4cj5aXmNW2+eWO9c4KsWwrykKZYSyYFCcmGNCqPJwY6pAyCcT15wt4bpdicbt2LyIp/qthYf2FJYzsdw9ZcaOgwcOiysH5eAq6tGSQEYaweprVdMrMFnOOZM2FTNRSb/n1+mAhLlyI6cnL2ld0l+l02AypAgDed55szzrPhyOZriBGO9kWgnT2Sj2VozlE5cyXYtZgDTFdWvbRFZuLyVfBCyMQ77ek/jFRzPfF34mB8u9ciubMqsDK6jieuU2+6QAUbAFcq9Gp7HEn1sCUst2QJH8jTMaYGUASTmIpvK8IWsHwDTcsDTfRrlpwBcywWOue8Chyk/nxNXNqDt4Y015o01izc68MfMmGPNmOOK/syCQLvQSN6jt6LEvV6syXUPtA1N79N5HimbTJP1HLLhu9JlA7ztDqROIJrvOxZiDrnoyTNIqd7KwYks9nqY7U9lodwCEhQhSzEUy/dtD7O0QvdJwS1gWnQLmFaZWIdu8odS5ofmDuuEZYVY2GGSOZRYWFR4mFlHk6KHWcqRDWIJt0wJam8riL44zMPMis92bgZnnpRJhZIrdsqkPagMGZVhARXXwyx99fQV5BKwZJeA4i3UwnIJYPz43kkfOTpsYyj6A4RkaQhNLEtFJggnMt93z2wF2rv1xJU/QBOCmbQ/AC5dsBmCooK3C/rmnd8C9dfv0EyzRnP3utLNq5iUISykY4AweefUChdMmIPhkgvYquY8vN8bFWFC/UaTbKHwRsvnVXkKbDyeAuGee7mlyTg0Ld+ce4+4h89gQ43q5hDo6hwCkIOA/c5a5Hdmcgi0SD10oJr5QiD31J3xOATg5fxrLMxiUaW5doCY2ds44G3soNUgtGo+tCDFSaiv/mtOJXXtdxay+R+y9uUbseDLxwWJltT2Oxs492nHH0Y/aAeRdSkwJke0MciaIXyE2Qg+bEe09QGXAhN9UzjSjmjroi+z5BcDCcNBR+vBjZR9K04vMCAxM65y00pdN61n4iZXlzmOp9aw1DyyNrdpnbG/1kwHQaiEFw24gR7gDXRDDFLFFVVKloZ1g1d5qCT3XvRNlay2zwdLCTpQ58b4NpXjlla+O7t22auX16PyZrpT2M8r45ZGxqBTLu27QZ7aJ7ajislf51LZkTNzZFnPY+M1Jkf/bVRG4Dd0yE3s2NbrXEC7oDHUfWBX2dau89lvwI0zBMfjUTiGf1epiZnCw9FQdqYDdk371iAAl3R8GelyUObpkIOXQ87G28XPET9tcNn3LlZ738Jpj19+qV+OYVr16pdja+nl3IdffkUjUySDfjn+1USQNG+fpdkGvBiXyNs3VY4WYdmRuLwMwMGI17h7GUrM78AVYo3i7pTQ2inF1DBmp4TkAFYEZKJDyduwmTg6ZgwfY1hDdPXZwHwxEJg7eN/xeNpVwfCNRv1Go36jUX8aGnXnJ6fftv0atdHhO5+WDt+u0uHfaNRvNOp9GvW/Xz+yU5N+nVOT/nGQ88anv/8c/qbUpUcSmiP53GnnzBMqlelbQfbRQsurd0EgPRTvgrx6AB9hdgEfcfZIy6tfc7Typx6t/Kl4qMvCXMB/HsF/fs2RVm8hBk/FW4jBE/FEPJUy6l34W2LwRfiUGDwWj8UX30sR4nfx8y3E4Fz+fV5Mffr5CgH3efHkJvtF8YQEnBzgj4LsXfGLroCzCwhYuer1GnxXbe5HNNtPcLYfiicqL7tseGL7sjzkhhgbBuWGEcD2wB7tgkeTgz1wB7vg8gT4fFB6juUEeKi3semReJuX8UP+VhasF9SCztwPxNvwvifc+Ynu/KSy8xNdCAE6D+7XeYTlMm4hmwekh19KWT66lQcvFvCfJwH/efH0Rk7ZUz2DP65nT8S7hRnUc/WkMFelKbEoX6SwRcmnjM9Tjc/TSnyeKmLAhl+AkbeIweOb7Kl3jcXiscbre0H2WDx18bLqJfQ0io+Ly9G39HpVS69rLz3POutVrLOuRR3sd5/Fpge/z3rpgu+MXCEjcCiwNEFN5i/eZE8s2okvatr+KMjeFk9c2vZ8x5i3C7R97KNtKFsf+2jbs2j72EPbUDY+9tC2Z9EW+32RyfNFTZ4vVpLni1qY8eCPufNj3flxZefHamJAHK3g/qArelb8l6btOaSweQsPCL9s0VCce7PZGIL+sktQAx9DpbKmPig0K9BIITWte1bdY0busb3qQlg4oeUs+fkqhfuXUaE+9bQg48m/iO1n/vYfBfmvYPuJv/2PgvxXsX3tb/9ekH8J23PxeZXhGcgmlwSd+D/HV0QPBX2bXudvo4iV807Wjl9g96eHgr4NMDfNQExRxe6LyZX6vfzxF/juqc8u0g8FPRlek989ieFzPBqcs3th6SglvqQmWB5u1bnpAQEop+Bz1pFJPZ1A9jXVxKW6hpcE6ES8BUmf8w64GOac43goIe8EH0nFTYIhzqXyod8d4OGkLwaU8O0B4S1H/wWVn01DLL6EDoZL/aP+nXyh+uVtZN7HmBAJysmGTMTLL6vTUQnhhk2GAsIlf/UmIE3+6qd0GOKekC/kDgMMSVV6B9yTxTuVp5BfLVVAsACCiEQXDngg3/ytII/g3WvyCUBiYs4f0sdMxqI2Yc+JVsWvKOyt17Tp8GO/pu2A2gZNfkiaP7z860c55rM+eXEnGlfHMO45XqKcqxc29Au/ZMjtTjO91j+vpffLg1Z2jo7vHXixnPTLbhCxA+sKEe3QeztFREvv7ex4b8d5b8d6rzxVIsIQeSNPPjzjX+CQ+PFdBvfBzctj4+TyjuPkYqwYv2qcWXHjdeT7v+BYKYb6Ce60MZgeYKqvui0FeN6WoNu+Ek0Yl9xd4PeJXHF58wX1AieZJuTyNlhnc0jq2CAI2oY4TTog2TRpwgMNAVL9LV13bYG0LxgLGNEvGkTDAqJhGdEQHryFJdfC5+LsxRWlrj+PxK+JX8Kz9XnV2doiw8brU+IhPvPTd2xnCVYJZNsvQtu5pw0c4h6Jd2wXDtPr3PP4LtuIc/EIH55rpaMJg7BIfcf2xHvgAYsUDtlUhuqC/UHmstUBSvc5Lz8lkB4wSBfKs/cBQ3TBEJEDEAP0BXjrOXd5xHKc8fGku1TD3iqo37lnf0LtC4DE/d7+zj27ApEURXiuUHN5p6KjototUvIL3O8LLBGUmC4735oNMIt8gStyEwX12hFMxLs4/Q4qLY1KeWSNStZRs3ifzqzpvWt7GF6oTCM8buE57u5HbpeHOg3II7ePVtAjr7Fsa74KTZRfMbv4CeuYxeEEv8fXtiWUil0ZesFYeZq2tCNUR5ecbU1OMKy1Vbr8tktOe/T79N9GvuzpXzIEeVqBdHsHQVjzeerHul1NkAYR5KkXocPWV7uSIIf1t0sVZuarFSAwsNeN2kxPOAjBfWXkzEGk5iByXzlQIN+zf99afyVm7oxeaOrTxip2VNM4UFPsaetbZBra60YR5OlrIDR8TYJk1vorYz2sJkhGBHlagfRwB0Ey8Kttgt6GFwaY8hVYWgNdgFCjhrAgqfdWpNCY+c7L9YodNuMDSug9aoEZoO7fYTPnFCaV9LdTOJlM5Kelr9sDuKftoT5tQ96Q4Qd80zok2fO2cexdijnZ8zZgz0vEGIx8CxGBbawLAXZdZRpfgffCSipl9Q+zX5JafxPMO2whfwIfT+SEyI+nUgLIj3elBiA/fhEOvBTpEYoZ2pUC8ZivZn+J7OefJ/v500g8jaL/bBL0rYLor5Zf+uynkF/6rJRf+uynk186OyS/9Abi0V4pv3Tn4PzSneqEzJ3KhMwmjyanWKhzigUnIXMHLAMdK52xk18aaihgUY4N5Jfe7Mwv3Tk4v/SB6Gw4O/OG0VFZjsvomLSypZhfri2Sidzklz61gBa51zhnLtdO96SablSnmm4cPjcJI5MU0rdy8hJGJquyyZ3uSTW92ZNqOi+kms5Kqaa5ZLlOkd0txdf2fdkKcpNqesXEWTmpplec1akL/0jD76pyDatqz6cJZp+yk0yb5NJbvpaei20xPfMPbUNVkywYpVDgKfWTAGytUGD1VKc7sVxo1C898cANTi7d1CkXOYeu0FCKiiTSHR+UpwZKwVAKB0qxA0qxE8rvIpSURDr4Ms4H5BKBbNIBBJZAfNHzu0tI/8oI5001g5gUVr28yR4C0BX8pkLsKUUbelFNdV+eYYzcmam+V9ZdPwyQZpNInIkTNElMqpysmj4tPd+dwLpdXpTNwxdl05/Aum0lIC6eKszObu9IYN0GQ1XkuyfY7ElgHd4vgXX4egmsy5kyDJ7hAQmsd/VHw2+bEliHrveDz9p0uieBdbMqgXWjOoF1syKBdaMygXXDYu6VdUnMuG7n0Ml+HapDWFiiywlodyeqklYPVMXezgTWHUwCDtLEJLA+IT0ws130vlIPbD+K77AfhWRKVX4UnG3a9pv4Hy+C8ccrHSg8AB2xJQagTIbwAVmwB24WbDf5UexRIWMrRtjkwHZzmfUQ4i4kSpMQjyDNlIQYE6f9OdjwewgxJvVniAfvFfwkhhV+EkPRvZFnvi4pDD30puuKgas4WLrF2jKT6iXaVUu0TXoBxVdx5KZciRuIsLKvRVvccIoNg3LDmlitNVqTR5ODhe5gTXp+is8HpedrugChYGKOvqKYqwQ2KX5bwB4i7Ut+Ae2rwd1v8X0Y9xWzY1HMnVVkarmzgvUWgbJi3V6t8zoSG/H4NnssnojTW3kiekusb7O3lOI0JC1wKDo3tifLqejoyfxeIHdG7E6mdwY7hRns+mYLprG7b7a6nqkBEnb3TE3Xjo571fnBwbtM4q4mcbeSxF2bxI9us0fiFGh7WqJtdGP7Ylg3A2sRaTL/CFLZF0LxE/M1NTHLBTJ3fGROwXHNR+bEInPHQ2YIV+x4yJxYZO6YcHoV/p3oqF8fpVTYrh68o/zrdOdOZecOd04isglsxBocf9YlMo/gINPDg8xMjLynl6ScbEtRkdlNx0cnZh6dMin2LLYOI9KxF5tE5G3A4G0Xg8rMae96WnDB5GNs/wV/+/eCfILt7/jbvx3kI2z/nBiWMrNJqshpphNOX08SfcuuqYhdnzMEJHfoO00CBvTzt1A/Tx1dmtevGJnymhmsUyox3qTB7rCTWMlTqXpyCxlBV6KHMf0LkT4Xn1NZ0TtOKoJUr8Atw0d/CYh4f8A3tE8QsjMHsrMiZKnYSsjOADKhFy92Eg/E1lrOZ/BgIc4cmNSiyHO9GE6uKUUcFY14CGHxTxmgxwjQuQPQeRGgXJxIgM4BoId6HWEn8VScWCvrHIyHGdc/pHiTVOT4+VQCeq4Apdn6Ps3WKYJw4YBwobJyurN1UZiti/JsXQAIJ/jKrezVQ4eMhbh4Lt5hB4kTCdMi+AicU/7khagZh4wJO2Qg/V3qO64YE+2KYU1GZF5AsC54HhNCln0R1nppioVek2N1dHQWYlBaiO6CBqIsAMGvH+UrWJi/8OLuivIiwHQteIY3+MYlZU5b8vsoq5W1upbO2BBEgvms3PW2jJCZrMRSv4yQ43Px2/iqhJBLimkRraWDzM1dOokDQILVARA7efhNnot3/RUCbAHlvSpbltaUvbB5vziJAlhQQd4Rnbql0HaH4s3JbGB6NTyP77Kt4tFqU8JqVtJLcQ75bElsvwwW0QlydZSgavJlNuZ+sd+u+zTKTwmkkEHieblQXMtdGAqgflm9WToSZ0mnogXUCLAkjoI6umd/Qq1vp2t4tbdH9+wKRFIUUZrG0tE03I5mq1wo+QRhgLpfv7JfX28xs2Af6gU7Ngu2W7gdUYvpIS9mXxvrEsWuPOkPeXo9TaxpqI57lI0aKxs2BZ3R79M/8d9qnpmvJ5pME0OmuIIUJzvIdEZkiv20OKkm0xmRKfaiuXLQXCk0Vy6aJ5VkOqz/mUWmB/a6oVvNUKdVvc/gDxRw9+yfWeuvxLec0QtNeKvZLnVUE/ZATaanLbMIklu6jc+LYmLIFL8GmuI1yXRurb8yLUQ1mc6JTHEFKcQOMp2D0nEh9UG57x4CLziTykMGescDyfvFOSas2nN+cYxzmuco4VpsyAlLp5NiN0rQFJ7ntL/q5QOP0IRNJAKCCCu/FHiIGtftbBRk2UHk1Fl+cTvnkdTaU7JcbMFy8Vg8BXPGWjyEQ+ApOJ6fSi1rCSdDjpJ6BJEUj5TRj/PexPARU1zuAA4PYPt7W74uuYOzWCA67zuZiYdk+4PAjErb39eDUoxUwDZBj+3vf0mDyUdTfZGcg3FvJXKw/S3hI5RyNgfb31rb/h4fcH280rXYUp3E4LFj+xMIsZwXhHgjZ2gjIc7hbwnxCXxKiLeguTPEedH2d1ph+zsVJzdS2p7QcVvghW4uLqoibHQlxbV2yleGhpUdZLMsNadWnI1pPcHWtThhy/CKv5Uzl6fUQqE2I4gZGqnz9ylZEE7hMvdEXeYKDBaSuvxPC5UNo7LRqGwqUdkYVIaAyrCESnJjs91Y5acWVJ5O5IWQC99t9cZFsIRdR6zdLMwrOyajUJkvVZ56S7dPannqLe3L4kSsdSm7VQUhEl3KDsZNYNz7dA7hOnl8m41FDJEecYmYW7AsCbQsPRTbPUErDwtko3nl2SxQh9rUfL4KFTaMyKaAyAQwmLgYeOw/D9HyM/O04ArJH2H71N/+43r+BNvn/vZv1vO3sH0hTtGy9Fg80JYlSRW4dUfLTcYRJ1LeccRJDrkz1hDVij8448v1lTjjNNbcrHxI855so2/htY4/gPt3oe/fR77797fMmT/jScis+3f1dHAnh1RN3moBQkVfLF5wnAz/PG/fYRiI0D7qQw1IOfriSSGztAKgzRdqTQskvv4T6KMu3zynN3c5GAe82rp338gb/JQ7fkDmoDOOFOgrixU+j8D1jKEFUYFxOwmXai5FjItHCtoGpWlf0rAY8K6gpSddlRldoAUvgjzSU4K3J0IzV2zCmPjm6qGZq3Oeq3Nnrs45QF8OqZqq5uq7OFczstfpn8NcmRjJpCJg4lEhYEK9uK0LahhQuEA9hitMVabPc97L4Z19IdCEgSliAjqMge656nZc6Bab1zesF3e5grx5H86tyoLZUPPhzX/Z8SbujjTebxmOdlE4gSmWH6mdF/u2VAuU3EJPZvwRsbyMq00MMNfzQH7bpta+swdwGWNTM0a4Fm6qa2FMAGMYYxT5PJieGLxOKvBqMF4dL14gdU78eDUOwsse4D542T7HoTc6temLSX9kEEdWurWPJoy6bMtRDnnaINCXAVVgYiT7ml2BVuz28w21T8pvIQxkU/klKRvI4B1Lfkeq4tuX/IrU+CDV9RvOyhpAW9MRHMrY7aRJbieajgqM7T37A6wKsLVyrlJU8HRMtVtUVzPKNXPmthZ2vn5nJhZKsnnw/+hAFnpYGN07f5VWSx9xDn22GrfxNbCi4nSy1LiN5zkrMPWyAhM5dIwUWpG7nvW49+kstZ8HcKp7ICV+G9T7IfgIDqHqNih1Y/AEGatDYQ4fuXIWuYCPC0ymAanh0BMb1KhAHpToUPiADoWntkPIsVTUov/8KGgdVNa8oQ917eKhznusK5Q1byi/jmdHWNb8qLqseadc1rylM6dLSvDhmhgCqJM63bpUpziBet6/ziOsbd5kxSKAyPkP8KOHvm58ehe9K1XpvMll0OvQ5ZIqnneh0rn5rZ2xJkphHbe57nmzXPe8w1lNOk7dcyC+t+65lTrw+8Gzow+jf9QPhh/39dwQ8UUMc9OEj1BOUexm5Z86c9P3zEyfvGuaeno62n3bLhz4/SAPD83KH97IWZmgq8VAhHS+KHhcWNcrK721B6VU/HKWVb5rlQ16pTJLFxvwiqtZ6tlSuZpX4JtlOurnKWl4pp+bHH+hTfVQ/n3xQR7KzSq/iFBf0d7dmsHdZMYLbR0qd1Y3N3wlnN9mYDhKwfC3L4HhAI8jmVw8nLzwGeo3SDc6ivTYitUW9G15nY8wXX7I+QLJD2StfUM21/n4q7+Befg6cs6cS6H8VGXjztPrfPjbGIauUFxpFBfX0B/8GSQHvkqxcuRE38sKVIXnjhY7L0687KgSfrNDinJZ4Vzb6qn8oRhLWsLbxqn+ESaGXkoKT/Ci9kTMn4uMyrwowC5TE2ECd5qOcrwtr0UCaesFaXsQSFsC6URsARi41IXzBFgYl1epk6Id3kqaM3UAmuWzF6pbAzPTc0fZnEvFP9cYNlSbxHAL6fXlV0PMHkPec4jZY7m0FKP0DvuPUv0jJGaKgOiX1O2X7JjIT+ndW/XuW67pO8S49A0ybClOr+jzFP+Wx3Mu6yt/gWxb/uKSPk/x7wX+UjPsYSo1aTGFIhOSYbuHCJtB+cqGWLwqpMtIbw78mHaSLxF+qmqKlPLdYyJ8T8OKyFl+HzEScJMrva6lb3Obvrtk+bKm7+pZvqvuvmsPY6sxY6tZjM0BaMhcdai56rCif0sV4LOgvsfbDWr36byKlIU9JC2qDx99xaFzqC4H5nyprYSsU/WdPJh9eYaMov++6+TBHFIezCHlwRxSHsyhJw/mHhv5/iyYFF6gopSg7HxStIFXCnCIbxpBNsyVyoZJkU1Tqt3msyVMC9kwK1JI1qpTSO7MhhmCcwGlkAw9KSTdbJgjsnNCXTmJRnIjdWaKB9oos/GwCo1NAY2pnV21gMZUhQ6+MhpTRmNaQKMLaHRdNF6p3DwF+Sw4EyYF+Qw4vbHEKJ+ydrBko9mMy+m1uXS7CfKJjeEq1IarhSmiV6pfZz3lUuoqJLJDLu3L6iAfqAQYigFYsjgBJvjuWTmL80gFW+VNE4/ENrauz8Zm1ftzsh5rUBMO/SifwNQvvSa3VJncqMq8GsAuLX9pPbcLyyNiM0r9iMwWjlAUA4AYEcmOId6prQ4kcNig5DXtKz53fGDVp69hzbqtWHtq1jX2FLJcmGSSK/voa9WkLExy6/BJbqlRR3b+Y3ncNTUom7ATargTmm4tOs6VsioHY0BkRwj21xZEGId7dvDQPwBl3ywHwXxDLY1hBTmmOwv0Dcvo6np3u4rDOUPfp79clxwAwtc9UBJb8rwVfKzoDhns5hQV0pUCa8oCa+1J3Py/9YPux71dZ8yoeMYclqpZFwVW1zpjRvqMOXQE1gAt9a1Dz5gtOGMO8PqvJ0/8vjOmpVlPfCpcr3jctK/zddE3OSst1l91bTeluRUbJvYRlEeLjJ7lDKaqQSkNp/B8Yp1K1UmX9JeROvPmY0jtep23UqiROBItt9QbKG+l6jojrfyUOzdMPSrsPLhf5wlXFAPfqxlltJxABPy+Q20PxdYGqiezyBqKrlPqrcVnV7cgGyWRb7Foa7D3tIJ0e43XRA1VxOsOpQ0ttlCumaUIpfSYOJx+Ulwg5Ho7oVuKpipUhlM00k+2hPtIDPBqaC4mz8XmxaUCr26BZ87MawBvVQQPAEsQMH8lOQ3YSqxVeTMLsKkL2JoqqI2A8zkgaXhmpuYS1bfzwLM4BB558N4Pz4TgmYiVqnjGrt30uRZbLghgwzsTK/7VStUkZ4cekXp9eSt2v688nsUIkCihpwqZOcuFFUXNQn/tNH/ZtInaVBa/maotbhm1+ARdBisqHPlKTXdmF5f6NMpPCaSmy7Smynxqqtfx4b1VcuCtYBE1ZhE1i0UoqMN79ifU+gcwqIq3h/fsCkQyFKlgx1ZHu3gmO+VCrXrup1x5y/0i7cA718fQFstx8v5yWesCtgqWVAtEi4V71xHuVJDeLUYTfBj9r60g/KgLx9OA6s0c5wGKdBGAxO/CRwgZRUDij7TET0pH1KmS+FN1REXp3sVraV2VJkHTspL4Czxt9N1DaVAh8QM4lI5F/0ZOwQJPo3O5AlDsT6pOc3O1r0eu887QPs113baedZrjpj5feqpyIn22XJR9cHp63ppYUtFK6TCuEntzFHuxnAAQeQkESbHIG2FxdLt8KRyS6N3t67xPYUFtPhAt9Nmt4zsQzdWBqMt1NXtcppO0XvU0BGVeNXlPQAvlIBLTUW1ENzJjYy2WeiRD2bzGUi4RH5EgP4EE+DLljmPlCHBJAUXtKzo6Dbmlxc9b18TwoeyMj9V7K1Vbkz+xlYahvgon2vEicH7TUwn1S8TidTHQyRf6nHehn1pka6oBVTr+sc6lP66Ihe9RC+nzM9jkUpbCx0RVcrZrN0+5dvOMNnlga/D/RSsYfdz4SC6oUO/oY9rDYdanrTzA1D6wlQO9qScntWd/VpeTeAobGrb38ZefxbgE5CZvwEUObfGQtniDNjYuwwGI5J7EO3j2dfm//+RrchlCGee7/7J58+x//3//09+EWj4TWrBQcjeP4dJPxL+Z5qPfxGu5hrvpuV6J/PH235XtR3AlLAk6+JW8Dudf8Hi8yVpyw9RFWz7/EALj7eIDuA9voUgNfuEFEn75xS+Bg4sk6DOMPH4vhTQMsENbZG+Rb/nobwG3fnb0tyT7a2FOi/D9VJ43aE6afyL5bfPZ8W9m4T3enify/U4UIVSt/mt50LWeziU54M6zAbc6Ivzq8ZepdIkU22pJ3cq/5I77j833gfV9Qd8lh2w8O/5Qki6Col+RmH4NDWNdZ0Dz0zr8FByJ847o0k8DtMUsX9hO27vBIxIs/n/2vjy+qSp7/GXrlhbKvjn6Gq0tS6EbpZRATNuUFrrZtIAChrR5bUPTpGRpy6IwCojCQEFHWZyxLCoKKuOKTpnijoqI2wiKiqgj49Iy6rgB8jvn3vteXpaW4u/3x/f3+/wKL++eu5577rnnnLu+7VsQFSVD0Q/HB8HD/XDf0fVHD4PyCAjV+Q9yWbEGAdAIUqP8/Zev+vra/esNO3bi+ttgMn5fyI/qgT8SIsmwWjeAHzo9oOsNpF0Pp3IUuPyliE/CD5CdUSy8CkSX9leFMnK5InA5PSJgOT2KLqf770eI6cP8b0Tgh9SjpTG1kn31RkvWzOkwKgYywLpFBg5M6fKnLjY/Z13qqfWLTdNq1MskQmlkB8zYua/YnVokDvuAB1vS1jJqaMNMJXxVqNKCIFLehMtsgNHeVRpiehxS4RSzdyG5KwI/6wGCZ19kg055FeIfacxcqIvKUrZFojCJQN0ZadyvxBaOAp+2yIXoH7kwvhIXK4zrICQahdqKCOO4hfHZdPdBsnJlBG4nQG+dCqURYAeK1KcD9BsS1EiJRboIwlni1rUzeTtwUR6lE9Jp4WgV9yzOl7APE0VQ9lIblTNDkmF8XgWxQAmSZLIwBdiaoX7DQ/ywaHVQ0RztAFvxKzIp3LoIuiglvPGGcWdCPBGRRBgqeVUWVJhXIe8p+UDihSObSDB9nwkm/5SASDsj3ZLxfyn9BvREv1xukgrpB2/uz0hH0EftkZR6SCJjO1Axw0/TiIU8Fz8Bj1FwpJPHj8YdLClcbA53TyT6gBVH6AmdQ03lg3IctzaSKFhC8Ujww3uuSFTgaZB+sQXyZem4ADMsDhVPsvKyBBVFdgVDdhVDdo2aIkmQXaOmyK4IRZY0OsGWECeHW8fQRSNSidtTgCYcw3ePH992iq9kaamSlT+ooDB4n1HpsJ1J1pE6Na0deKBMIPTmI5Cp2CYhVQp3ToWxoPhIncZtovmvjKTpdGrCgCBagR+Ny404RNAUjYKc1FoVXbkn+WroRBnjO5Bvo8nwSs1T16BrUUSBDXZ9nALjqslEOv70WJbCuFwqSxVQlrrPZamRr9RZWII6Hk+ak1w1o6Aa6lEJtKtFJkAsNaG2FJNcJgiYqlCNcMVxZPZfBdbRaRVrwfiVSmRosMPJclF/dLZHtNNbTGU5af/HsMdKDWWPFZpLZI91mv/PHn1kj5/Vl84eKMKwZYwHgQ3mosg3HtWAS0kEjFqnIpJaRfhBp4rDgTinpdInijKJYjpIITTUVUTUxuKQlZmORNvUiULqZw19n9GgNZLDndEYY+OT8XOPORyq430nD96myuLQvlDn0Hs5s5SYyLhlnSKFg1hrcHQRncOtxffGdYrRHDI3AhB4WwQOg0j1xyH1QMBG+AVsBDHKIPyMBuobP34k8O2YkRShkxq003GHX3v7ZNVpLDEyhzvJ3mtZ/rfi+8ApLpkDtEihBynA3dK3kk+GlnyUlDxZdYyVhTCri9J46iMutNYffMSJte5LmUdDyzzEmuEga4aDQc3wzHefvxrSDIcYYohL7vOfH/jwn4dP7HpRpH4UQa4v+BwMxIeIm2jKhfHZQTaIoiDAGuXQrhWtkQhqgmhIp1MDP/aT2wYhJkg/MDrABIFOSDkzQjRB+gWbIBgrjAmiDmOCqMOYIIoQE6QfM0H6bYUhIjVBtDgUxybYh83fz2+RTFbtZ4yAIcZ4bBZqeeSuxUH1zfAsn6TchWb82yMJ76Hz9ZHIEqTFOGwxFbNQWEMEC2bSEPsCG4IQPFSqoyHZHmxIthNFgWpDbkge5i6xBeWfTSKNGXOpjRnzP6ox20MaczdrTAwxrpgygeOmKHYTag6eongIHT/nkM7cHtmnNmvvU5shLptZH29jfbxN7OMq5A/CJmgsb/iRQ6QI52z8kUobJc0OczBeWKsgSBMJhEjfjo6f1iouRQS1hYqgFUiquMmqNYxACBv/qw9T1rf6SylqRWhRZ9S0qJ/VtCiExY6Fsit3vaxjIQ2Ne6aS3oTO+6bKO1a/vukXdah+QRwGgGZhOCBs/O01Lkx9f3ztksT7ydDCjqqZSmGFIWzkZRVuwwqvlFX44W9JmRxeAHYfc7Mqx/dNyYRicRCx6D9ZdYhhcfCiZH9opET2XSMvnewHA3EIElyRxnPcwiDhdbtCJr0uuzThFRUyGI6WhFdcr8IrThRe0VR4RfU4GP4/LrzCDIa1uL5DNBHpJgGaiLUchhifP8WFkV7PnuIuRXztU/dJ5cAY+IxitOqkIvd05IpJqt1q4/7VGhBNRsUitLEDgEOrNMbD8BxdpYm/HIOMihyOmJ6jIaFu4AP8wFx+zQPGExA+wrgSwt+lsY3nyEzUKHhw2orxiXGwsfM7jsS+AtE0g9eZCxcuRBaRL3FxxpgSim8Od4eashH7rraxv5s0a3wynvWABiFz4O4sZRsSVkGHXFjPdWotmfWk46yxPLcQeZxjKkTNxLeaiu3Naiq2kVhtYLVHIR1Hq9aoJxGcOZY92ggsJRnZbY0L01ib4i6lrTYHttU4qK8Ua41/YPmzOP+AxWpyOISxPvdjiaueo0yzCwEYPO7B9x+fowZ0H/H4WRUiWk6zMs+oaJmn5WV+PDK0yA9GXkqJp0NLPMZKPMlKRDjAOFsfYpzpJWF2WB8qzC6Gw7FQHA4xHI4yHBDG7klqCBk/gO+PRog1BdVA3NzOvtX6UGiJ+1mJB1mJCIuKhNT6Lpkikde6n7/WqFJeDCDA0D6hsz8Und0MnX0Mnd3B6LQFo/NrjoTDdzmhWu1iOOwOxWEzw6Gd4bA5mBHWBTPC2qmkFRCHWwKMidi+dcNQHNYwHNoYDmuC6fDnYDp8SIeMHGqqf37k1/VHPgrQ9UP6hNGaUIx+VjIhwDBCuPfusfE5Tuofa5/jLr2D/KwMFQsMizNKJhaCsdgQjMW2gaRgdN45UI5D/74JilAcjjEcTjIcEMYMURLnvnrirT33P3L8mR+oFCaj5j19653HQos6xIo6yoo6pLwYK577Jyfx4g//5C6dGQ+FYrGfYXGQYbFfXuE3Pn515097jz3+xaVXeH9oUbtZUftYUbtZUQ9izp+MJGMXovGimVB8f+SlKLzdoSVuZiW2sxIRNp4aEUa3fjDiknRraFFrWFFtrCiEAzr1xuBOvfk5OlyLB3fbc/5OvSawOw3oW6cOxehnBevUDCOEAzDaFIzR9oFkLIkIbRko4bMxoGcN7FvvVoT2bobOGQXr3QpZ62+eGtr6bVMvpUlOh5Z4jJV4kpV4THGxGZn1n3LSlMytn3KXPidzLBSLQwyLowwLhEPU/r/e5vx6/98U6LPiDy1zPyvzICtzv+Ji8vxvp/zyfM+p3yHP94disZthsY9hsVtxMQG3b51CEnC76eTwpQm43aFYbGZYtDMsNisuZgQdGSkZQYdGSt3g4MhLN4I2h6KzhqHTxtBZo7iY8v84R9L9x/320Fs5v0Pzh6LTymQEw6Y1CJktwcg8Rjsqfl7pIWoNobTYMVXCa2uAjTSib9KCC8Grnr6aKFr1QWhtC0brtxzCN3jg66ccCa1uP7m+DCDXqL6JlFC05tDXAorWnCC07g5G61ZKDPxc1wo/iX4OMKeH9U2whOJSSF/lFJfCi6mbr/WStvnMb9p/qL90XXMoFJds+rqG4pJ9MS7620iJix4cKTXXdn9n2zLy0rkoOwSrZPpKpVglB2H112Cs2t6icm8ouG9nbsTr5rf8yvnXowGy8fI+YZYcgtlw+uIpZsNlJtf7b7/1wsuHT+z76dJNruEhxUTRVzwtJipI/P4pWPye/p5WToM88n1AReP6hEGUHAPQmPEdCvihU0Vtkf6pojsj2VSRcV/kwqtw1TgeNKw2U6FYbtQkKOhGqyiyTC1tRcTlWp2CbkY8STYjjtTyCq12S6Sy/7IIuvt5uGz381As9DJ6JJdskhzcy87n4eLmrOEBh3PxSC4gpOQH+3dEDtYp5Uho6X5o3LSNmyGVRaN0g3vY/TyMH8wr2aIy2amcECV+Sy8hGvAXb8grhuTRuFcT18jEPZRRCTHgiZslh9K9ukPo6UPlMj5S3Pz1D5tsv4nfexq5YAs3q27nI3dqEyL5IezEYgTfD9LHhE8fE5Q+go/Zzsfs1OrIF/u0eHMNLlvH7MCLvnCXZeQOvPYxlo/AD4VCKWzP0GCyu2ywFqfVnk6Ixz1twbWIASw04bHQBGGBVwvxGqiFRqpFJKSOCJ86Iig1HjnkIyA1Xn2h2ZHQnx8qOwecMBByig6fU3RQTgP56O18NOSE34oasCMBvyuvaSd3c8W2k6+VUeT6Q5ZR4bOMCsqyP27cjoIso/h+/ACk7iAkbay4W28E3QIIGcbz0TtIBbbr4sLnHReUdzz5phuv2bqjnY+jewC1eHdbP3KiMEFLtgIm4D06EXzUDrzUKhoPv4ILN/kOL0wYwsdA5SKhugOhdv2Rdem1OEPo3kEl3Ts4WL538B2FUrUc0MUeqFNgz4MuNlYVn6DGFw/5gWdqggK6mIpMzvr7Om5p1qkCtx6r5R8fJVHU4odDX4Fa+qHpNoyuCYmuCYiuCYhuJMgFYqCAvho1E/NSgby6MQFPMGj39ldGLIuh8mYQkTdYMS2tpHjuAiupwRcPhFJiJfsT6UP2W9AvsUbRXdvxCXEB0ihevKZblEiDqESKJ2cugVID+QF+YTRANzCARtLRBP/i7DW4RzXgs61BZNBFBtItKiByVEDkKF1EKNX6+/HpL1EslmxklY6PKBMGAMXwLsDYAvxORizeB0lceJZVyWvxi5d8rJZIlgEF5ARBvwJyWwiQgCenP6AV1PyA+A0KXTyEk9MnZN+6CmmqYNfAAGsOkp0kwDscMA8dXlA1sIHKVzy3YFQ2IK3BgYtCi3SDMS3H1gLIlkgNryUySjy7uwN7N2N6vEdC15+KNi3e5FMSx8mT6PpLiXhwRvmd8X7ncFmuapSUKprdIHoiZuDTZIc2oqIlQoqpjH5Ucg5cKBOSqGwDUIXfmJ34/SHx68YgKqLvlUsxskkaz09gd8eN+1AxlShqmOgeRBBCkrBG8J94wbboF39EBW1BdiQNIKcFoERsF9zkP5aojEgreJMeouAjpdTIWArc+ITtE8+6nmI68b1pEdn3rFKR+wuwprgnilezs+eRWC66d+g07VgFNR+3kByqQCAWFG6U+1JScOQTwlB95ULgEe108daJRaY4lYgAtxCtGyk7TswukmTH0ewiMTvce0Yqpu5jxRhqukg/wnIcI4Nq1afovVRJGVAlMS+pcqH1UWtlzSa2pU4dWEU1raI6TBUVC8XjWFCOgpVDm0GB5eBBeNAytJYKrOUlpAhbUXVgRWXZRQVmh7vvGGdGhHLmpTagBs0fsVGi/I2CV4RIFQxuxj4k6ktjBtQxckdoNUmNVL3WKC5MX5PQ3E4xiyXdBkogmMaF6Wu9p+ilLgoRgYC+xgVkxwVmR9qPmNcggel9AoQ9ohjp8ISZ9kuFInL57z+4oQlzcEPTt4MbGunghkZ+cEM8XRQlni6KFh0R8mNGRw07ZOc08IwMMEv4cxogcjRarQHHTv0uYewkHSLN5xULtdrXNcro5Wo8cBYpO3AWTQ+caemBs4gwB87iruTIx/N6OG8WKRIvUiRetHR/RAQ9b8YFnjfjAkdXaD2EniyDfP3ocwt1bPBVOEoXWxRHyFZC7r/Bb/miGkJtFRe/WkkPVMbCMAwoKoVCmy+Enyj0iW3QQW0Xkqs8FsZP0UVBKtykyEfFJ9F9AooG1Kf4sT1Zwpj4Eyp5tBjU1f38SOoi1NAGT+NFjTAGgkaKoPsfeKwauy85fgf7gh/liP472YfRybE5RYOWnKTDnosb5Whswlo6JYuPfuCOYmk12N009CYoBelreNgeBveYUxzfDxjMqCAsHkmsMnJZJuA4AHHsbwQiN/CxxuUebBctyopIIidYmXhOdge7yhOMKoLCgJ26+MmEveMxkCO4gCcUFSVDZyGpCQgB0DJUCGiJEODE3APyZjkTc4VQA83xWMILvAZfQHLaDWKM8fTA1l8UCpXY65FJ/decRvThXJZGuuZE7M+RsoNYEewglkZqqvg2ReiZqkjWVyPDnKl6R6VSL1MvV9wkQ9F/E4u2DyjGSJ1IRDFWhqJWGijGSEjqNAd0cWQnzQXcDrNIFw2d7uAFVRkZEAxPya88m/CLYQcTP03ZMEx8gGdxGtwgoEfKzU3N9p3As3jfEWb3mwp7G0a+ZiF25e9UReSaI7RE429VwlC1HeSz33bUbNnOgJMGsKLuRTkB8RKicPhtfPxfHQQtCSmU6ZgHWrbt+ZHzBmdcff/GjnbyAT4a598Q50AuCpGmWzrxPt52vGJH0w7pxPh6NBtQM6Bqbd9J8tq+fbuUQbtWp9kKYXG5nHkUlamhjRrLGjU2TKN+G6HULOsn6Rotik8Y5aD4jJPkJiSWXRI3OKClB4Vp6UF0HBUnSkqtX1JqRUkpP5kL2AzCmTqencWfOUqnLUPJgydh42FQS892wWgecG4gG520hH0GsAa57hpy7hzkYgIH0XE3HHIQXkQPOapnkKu6xG6J4oJXFJMPT6jpbbsxMNRSwvg+nkgpRjY1DvJEPozEi8P7j4I42CDgiBDPfsZTWTDEiOzDUuMHsFFg9McM8OiuEodK+E37/sDcmHFMQMbqUXgIQPSKImWoR+nEkKH+yFGBIcpwaWIQTYwYM4rUFb9/qKWHx/tJZRJjAIMT1FpCJRW5xshPJY2fSio5lVSBVMLhhoxKmlpdv1EQB4+Wg0PTFyr1o1TqL1IJPzUeQzKOCchYNQovRZbXGPTrKJ0Y0l9OpYAQZbg0MYgmRowZReoqUSlWopKmllIJghNUeFB3IJGh0aiYG56WmzpsgD0QKzsQRpXY4bQaelkAXgdGzL1BWi2YHbKjqBw7iko3Hm5W5p6OXP6A9o5IZTyeXWVdMoLafRHU7hO7ZDR0ycGyyRl6qj7oPqzwdy5LJiA5NR/t75vRwafm48Wrsshtv9hBI4jFElE0SheNHZQcVY8lHRR1fQJeLBLRgJKHjyYdNM7fQSPwg5p8dIKCdVBkNLxbHUhPOqjfiID+AgiXEjODdVBoAdJBYwM7aJS/aYfxQwWdFjkfXHgf9lDR/oylrDcwgPU0lPW0lPUGiaxH5kNJxpqAjNX0i5TMazgpAzqbGDLIH3l4YIgyXBoNookRNYimws964sUuWCaZycdg2kE52kEj/VQa4qeSSk4lVSCVsC/KqDSEcT64kPOH9IVKMZRKWpFKZD6bZKwJyFiFF6jGyGs8BDubGKKVUykgRBkujQbRxIgaRFNGpUiJSkNqKZWGoJDCyzv60cEKPwI5tQGqpVpI+ynehwC+eBqOerAey/pvPyRCP3qOn48WO+5gcpMNuUy1Ta3Q4txphGT6RMrmTjU40oind9bwsmFGLB1mRAUOM6LpMCMa71+gfTOC9s1o0jeNeMGdxt8tNbqYgG5pHIm3g/jD43SawHAudHDin900qrBgsqecjRX6mdiEZQSRjti0MXgBPh8FrQ0s2Q/nLqPV19AJNVmkGTQSDCaicDARS+KhbMFRV398RekAm2KyQx0rTQxmqBwJUzeAWYtLSGimKwpIpEgaCYz2OCM9oK8h0xbshgsd3oYSQSx3BbktBS8HoHMU5LoHHZmoj/L7o7megDdGKfEWBTTlgSXYZQ3EGKVZyzKWZ4sWe39qsRN26IeLf1HUWo/WTu3r0PVTadkv/jOwdRfioEj7iUoRJR/hq+mYXvrEQbQk6TU9DPIjwwj3SDq0j5A+cNCPDMNlrBRkfREicIgXGSFqFpLZKxj3wpgUuvvMsEuCwEKRxATTxeI2cvFqFJz81jTgJAH9yAYZviriP1aRFVQFnh+lYgrbFTkOb5fSRdHhgBbRi8KWj2ZLbexmxIiF4u0bulh6TVLAjMNJOuMQA60X5cbIscgA4SOxiRw2okPJBrJMOg5Bh3Ix4nyH/M4PNjMVkh2KDi2pmYpyiJqnEzuRWm0cJ7YgUFebRjKhrY3HW8kxVvyJFWMRarGWBpppG0XGovpdQVddQFAC6ZYHLPmQBZ8ATjPGkA8/yKIoQ5hRMrXjVyi02uMapXZZFF0eGiCbSRlIZ1IG0ZmUwVTMDZFJvnjq5Rd5wwKYFO/hHyAy6QDKpEPphVz+K6SHULHE8fF+To0P4lSoUnygUIsP5ORh7JJ2qFQ8PqRishkWBb3rJ57xM/nqBRkK4S1SuMCNOkinYmaiil2WFLFd57/B1oa9gd59qsP1R7QStuPiNPiSldgdUlTZ94TOGKQ1LfLFzKd36mL9H62Sh3I0tN92uvhDFThZV9foIqhs1OjAZlddI94qpmTrJEqGbsx2nTYAXSVDF7/CgrM/gK52J17DStAlS79o8Gp24AXQO/D2qH7kKmScrEQNx+7NJGoRRulaQkGOtCSSmth44tq4/KYzwEnRE06KsDgpAnEaxuYr/OiAZPIjCg0TOs5lYwwYxtER7lAtP1SrncGFu/1FpxjH1Ri5Uno7BtmopBit5PB8C0c6Z5Yyqr+Wuufgz7z4VO0WpSI6zLTsZdQWIOwfdekTsWwuBLS8YhGbgyWLuMjmMSgRYxmBqVGqI+schNTR8jtgyVw1fpoYFCEKYNzWEhqBCT8mCpkMZLafVi2WIZUQcDN/O9GJ0jdkAiZyb1MqNbJBi4Ze2quhH4YhGo3ot/jevt1z8cuGpC/38GqJbMrAWQ2yestWByLomqOaXQ2nZt/IjcX9B3KOVLMP9fTjY7fjCi5wZNxOYisSjoxpT4jBj+uQtUo+RmY9suVHJepOJZ2r1GpfVamUyxQ3qeVTeZd2xVKf7lTCWaeAebJI+TxZlDRPJtWUTRpFwyAil7sOzO4H+KiLzJQtgxjiTJl/YivK+McVKz7DccJI/zyVf95sO6SWIreTK8RzOXPAzJgk/GQqVae5l3yTSoN5+OfL2reTSa/Ambjtwck0dMKOj/DPp5GNJphf+852cRpOe4nXSH2jUKiXhxuxJ6jBsufJhXW4AXgLNF78MRxNvB4VX6BTMbsN1/jVWajjwcVFZuEBj1wiY1QpHO7BIbooit7Pg/uohi8EO+sHsjDGGQcvjD9I1P5wFFZJdOMaXr6DZqgCJ5Ev40l4bJaSJy6ufxZ3JRo/ORwYW+NQXGMaNCDIvrUUModOFDsafPxCcusVaMiDEHGUVnvgQ/VjUPsVUdojTym6Ow9wS2/kEj3JiZ5xiZ7RfKKHb3J57F67y5nDL/XYbUIO+I3jrY0un9NL3bVu1xLBaZR8buScPofjRi41LT0jc2LWpOzJ1uoam1BbV29f2OBodLqaFrk9Xl9zS+viJZzH66pp4F1Ox2Le42tqcrm9fLVv8YQah8sjgINb6LGYWmvqrc46wZILsGmRz+5dzNmdtXYnOqrtdXavxzK+xtpkrQGP5NG8firPfEVPrtHaei28Suir0e4kEH2VuzweezWU7/J5U1y1KY1Co8sNofQF5Rd6vU3X+gQACoRqt88KjhlWJ3lX250E9DkWc67qhUKNl28QwNta0+AVPF7e6fJK1fK02L019XyNz+0WnDWBNTML3rxw/tNl/o1Wd53dKYElgeAin8sr9JTHtQGB1VZPjzFz5WF5Noex2uq0uZyCLddavZiTIJ6AEJ7rFqwN1hbrYk5w2ixWtxtclfU+t8eGDp9A3rMFm5O6zFavz40O0r4eweGweF0kwOfEV4mLvArcdgJhHm6rze6sywdnYuOERNuERPSztyLiVU54l1hrbAXwHm932oRWbFRo5SLRTR2exY3VLgfzBPwX8wUOVwtPPYzNgttaJ/D5dje0HzC61cGXuJqFRsHpZVHyXI2NLhswEp8HlHIKDuZvBuatt3q89hq+QnBYvfZmgTd7gXh13noWBZgK8bFRFyAELqNN9Gfocvmt3DxfYmpmK/3lElPTW7mUsTzPp85JBVfqnLGpc8Cdkto6NrWVBy+7s8bV2OQQvAJfVVmQks17vG6g0xTeAfjw1Yu90FFTEXNnjWB1QAhpMt7cYnVA1TmLxSm0ei1NbnujwENl3bXoCw1aYgUmhejFAIpuHgGgN1Te7bWUCi1cqauZmwXUcrl5o9vurW8UkAb59mYgiS1faOZcTd4iZ2k1Osuqm7mZ9poGzCgFOrfDMaFasLp5G+Duhq4I3ASIeesF3uECLnTzwOi+atcSH0XH784DnoFM/F4U5iWPAh9wl+Cx4Bu5ENjNbWr1EhbBN7Ao76rl7c4mn5fzOVnHhPIdrhqrQ+BroToeL7C41W1jscrdQgGwZgnEqwMmKQMvo6/O5/FyNcAI0LtroANAG7DOD6KwkUfBZAeaL4G6OOwQFdvamJdfiO6yJgGYEmoO4oErsPoc3kqXAxgQeK0SvSqxQcyC2y54+AIXcCQ0J1eMPzJmKyDwIjephb0OSeipBxQp2Y01NQJmibwMzGUOH1IEWPYQRL2NBUDZVl4CMAGDzF5gBL7Z6vAJPJCLt4ldZzyfSqho9Hld4/hpFCiGZh3H6ykgZUcdhKW4YuACq7tCqCOUqRGaRC/oVnVAKQ9kzfvDGOeZF4EMFvgKlwsoKdNBHOiJfGB6BplBysjAfMihnrk9Xqg2cQWJQdHb7oRK2rGCoE946lfsqvPkieWUuW2CO08qRwbWCV5LjcsmNLnsDLIJNfZGq8NCfcwOe1M5cZXYbdRxE6otp6xREYAe7BXE/Kw19YINMmgR3BagpoXqH4vQ2gRSDSJZm5pQDkuwiL/T11gtuKfwEAC0g5yTxiaN45NS4AcISWtnrQX68lJSyL7RCloLEthr7RDiFkD1QmPwDDnQP77G3mNCscDJNf6oIO58nrCSlit39BRC+5YF2JOAAZ2Gs3o8AgglrKjbjh6hYqkE4mNHhpZHU4byuxnkXbG9UQSxR1EQA3jqRE/mNEPlyt0um6/GW87sIQBr7YRzgCMYIIuG0klg3lB4nlsABcKwA74DtL0c0cvUiYqXulACLIE2KKutRVCef4Xg95HcVCpTsAaYxW2t8VYubhKo8SEgOwHvEP1MKcmV1YiNZgGxb4V+4ARF4PTWMhC0NOcDOCvT4mchql9yeFKEy8FDZ8GSoLmrxqampk7mkwsrR/ONPtQ+Ai94wPYCJvG6+Hk+EgxtMs+LYjwj1wHmUZ7b1eJBsMgGjWoH+ZsheVU1oaE53dqULnkxFw3hIYivbHHx1LOy3i0IPMmV+Uh58jSM+oJo9/o8QGlqnJkpWGn1NDAnJazoD4aHwNxmp7UJBKzXA7QEYhD2p33VwxXaHdC1QHoDO3qQqqDkykFOQ33BbKCdyRNCxaR5viSJWLUu1MlUD2by9UIr7ZGeoO6LuosFBIsrZJwQX9CLDegN5CuEtmq0Axk8QBynDUiDXCjpMMATJandiwoAAmhJtbWgpZxe0uJWEMfukBIqQa2jN7bq7HpIbnY5bHb0oXQ32pqtzhrU0SSUl4KD8kHNCMY2kZ4hgczX67Igy3k4Y43LI/ZysATrXE4X9HMUM8a8nkIwoKwJe21I9mJ39nCl1aTeQrPdSj3y/c4ir9AIfEDsSA/TNqiQGzw4qCBdEPUCArSrilAF6ALo0AQMKhkNC6CNBzSK1ZYLFpuHq6UWDPD5hHxXizOlDhgdOT6lenEK4fwWQkew5wRCdbPQRHQ22GvEC2ArhXnqgU3r8wqWahca2GhVcCIKQFJk8dBGDetbIdS43DZkyXIQ6S4bKX6OmfbTjBLBW8/8KuweoQCMTMmP9llSH3/nJewhxoAkgPEETIWYBwbm4pgDXi4SCL0gl8D5Vq/Vw0HvgN8JNgAm1FMmMlBjf2qiB4axOYm2HJ6qCDQhaq12h2DDMSra4G6u0YIpxzdavCgvE6ZSk8bizcmhipVftoyX4pCw8SwA4uIgt8nbWyZkOBQmD+ovywI6CVhDEM7MyD7lzuKGZn8pmVB5FCYTFiDLBIxkOVhqhR8jPGDxC25wNrm5ZtL3qEadVWAlgNyw5JnfLJcD7AERYlLOIoofcSTtocwMHgUCKG/ozEB7kqXbBXmVeWrsDgfxwFEZcFaJCw0EX6M8qMoB3Q8tdJmfsdoDCIBfOciGgJBytDBB2tWFCYNC7DCI4Y0T8uXeoSaNJGBDbRp/UKGXKgkO6ugRLEBBcGPzMGepi6cOEs7c0CehK+JowCTCIFiou8rZ4IQuxlOISUEY5gKQa3UAh0FlavlyNB1J54ExBgz7sMfmg54Aa8Vny8OBIIcgT2CeeqBGdtoX+YSMCjvCFOAzeAoCEmaBIlRgd3hpgkJrYyN1FTkhEpiczEcEeQaLBhFVJeEVDGhdWrdgS5NrtHvIELAJSGwnowR/mKg8Cc/7vW2+xiYwF70CyBLOn87uIfaSGNBit8EQPsgTxnFFzMnMp2ofKklOaGzyLuYZAEo1SZrtaXQRoS04eWhtaSoNjSE01BF1F6o3iQxlMojqb+oTTicGeOZhCzvC+JPxKfWHboQvMP9cYE5wYKI5LdS0wAG9QBygQbzUlS/UUAc0ImhTsJ4ot7gW2s3MDcNiJ07OyLxMzUKwF4z0XKiSglIFpSAgC+IxOU98WKjMR8yOD0gREJkAYvuHDE9wGIqmhH+cRSC7y2PBqbGcnBqHgOVg7rJ8LmIA5/PJeRU9G8D5xAB2hxmemFqbZJYG72vixk+gOI+vb0JgoQcG1uhEWjbZnVjFSlcTJ7p5BHLhQdYm3dEhCE10oJuPLmhT0ohWj6/BDuqXoy7UxLKJmqomZHAiW8GZWJSTWJKTaOYTmzgnYoPzGRaviytvcoGsd4nzb6VWp4vLa3ShwCpy1rrkVbFBn5XyRP3PzMIyn5dYAszKYb5FzgBPs8/JzYAHK+0Fy0CwlVu9QG0nR41ZnlizvOjJOFSCy5wppQIMCES4KAhmmUjJ693QcEhM0cfkrPM5auU+5cA8NXKPEpcNOQpkmb2hwdogSAEMYQkmBIDxhy0nR2jFKQwgD9phzCWKBUkKiDZpOOVJ2Bdny8gEin/qJWzcRmurvREUIp2quZSUbBLrd6QU4+K0z+9Crw8Jw2MXlDBogl3Sw2H6oNlX7SEDZwyu8tqB2Ul5tHuUC04YRsg85CgBozY2Mpc4dyj1gYAJAVcjUVeBvnQoIQsLmfjickAJodQBxemh6NO3U6ijU86SFuPovFa5BAeRwB9Algv8IMo9P0RMHz+I6hxtr7pye50AMAV4BpVgsaCEsawZLrtTGl/kCw60DxbThQp5nZkPrjOEBlKCMH9AIjSGWAALqRbwF2dNcokr/NDQ3FMIBtCpedSP+Opx0izcPBmZDZOS5JaVTJFUQGqrqQB+cnPxp4C31/J1QBBkIfjBeWDJrvG6GgCqAxHmS7eQUix1ApK1wVMM71y7jbxhOJlrdaML6MJcRuA5zglPtcsFaqun6lf2FIIBZNQGQ9l6a0sJBQuBvmSq3cmJITwCzJ+4Z1idfdWNRj65uKBn3WgkuhFYH8q2euqLnMHT7kVOmZ7Kd3IN/DQeOY+a+zSshMoSNm1NnNAzsTLFVhuYPbkur9fVyFGAZ1AJ+qBJDEPqRmhbH5jaYOKjMLHarE2kd1kddS4iKWAk29THmDN8Dq7Z5SCNwlaf2OQBLnjCCIpj4ysyFwyZoqVJvWGc6zddYJDhXyoL6s0kNmiUaqvNUutzEtllqQHFQ9ZK6LoPrvl4ZqMfDM/sDpEF8gRw2wQvDIfZsmKx0CwEF8D6KQ3Kc7ndQTHIUKQaPMnMPGAMdrCnxm0HA9KZk4NwpQsUoTio4l1kQpPHBrBNcAuNYHISHhCFOdS9iUcTHpXMBFwM4t0CCj2rhDiMdvhSXEMEL2K+Osig0cGxGTI/6HBIACO1CHrdPkECaq0Ojx8S6S7CSXNxlnwpnSW3+jO0tlrosI00HgzscIG51EUHedhNJTdISr+/zM2WhMwgPKxIQEIB9K0QCB7kRZaluDzvLCtpUzqbJuSCdwPHAJ5CxS4yVEKeg4E1cTahECeucskFmZQ50QyiAzPqQo2Busxrpf7Mw0g9mnyeeguuZ9P1pwqPnZqSDT63Hddp/bOLZHDgtoJsqXUsRnNdHC3ge7rb2ixAAzsF0QeVdbFQVyfYiI+Uklj6nD8+hYlqp9GpR0kt5FJDcspAc99T5DQD+eqZMUm8wKTkK9FqIQFBrEvMYw47D5mOsTiFFouDrNxinmzBMndxMfWSdC0ZGPY4yVgfIhHBNqm2A8c7ZTKRahAkqscB8o5NJ6Lo61FF1fcoveu5entdPVeIPziDAzIYeACsb1oZHuyKRlzHxbEM/JJWhF+oH28Gc6XFXlNPbWzwIR716GP01cE4X9J8RYzP6ewCn8LjqhRUhq80phTbq8e73HWEvk5rtQPnOtnMRADNEZZGXNi7w65WFocNwA4SPoT4sqVK0U1WKkWAvNlENxuUk1Vaqw8UgBWNPxBBjbifwyGtU/FkL4E9fEIWF1L5swhNiJ1EHFNwdKGbzMv2YbsBX0FjEuneQhmJSjvmBmvNXiMCJJbc7UvLCgAz0hkoTpYk3ZiEqkscF9NAn5NwCS4NhgsOHkxTX39HIQN5ccTEja+lU9vSgIZNdTNVKEKQRhxT9bzAlrvY6KgT5TuoSa/LhWsvXF5tnX/dmKv01OKeoL4aJHl8ckEvBkkeMUhqucTxqcXwC0/r+Fp+2lR+8fhaLjkZAb2etwkOr3U0P22a6Jo6lYcgSDWmlgPjHQbM/qEzM83N6MS1OnezwNHRC6p+Jl2IMIUOMhuEX9iFJZAEAglEJcbhrKdDoBO2nDh7CqNugU5b1eKSNdnLw9bqRW6uE0SPcGOrEvmgLGwMsH1svK8JyYX2T2ACSVJSkC624n6BWQSmWweouxLRDmowsHhSsLJQAt3XgltZQmKJrFzDtoCQ4QzRM9YmXJPAhyw5BZs00LWEkKUN9CN40iXXMtC+aHYIHIXRJhF9iDFGVl2Jg5gPdF4Qp3Oh0bz5NcwVpvnyyRQ2NEfe4hqHwNOI4m4QXAEORjfEj23RwiKv9VltbrSFBNk0Jjavla0m0mExsJcknXAqVKJloC9aI6DcQGGwLuNAUc6XGGmwfGE5ZOeaPExaXC8x+mFcSJfDcjc1gQJ8IPVMS7BPviU4R8kHkCRvSRxAfAmUbyGh/jN8TmyoSugYNlxJC9tURU7cCQT/BZfPw/vjkpV1Vy2KbGQ8UZqTrUOkJjyNhtt4mshKGQmr9tkdZLoXOwwinzKTRjQ3ulxessmqlkyINIiRsM4p+TQStLaZIEpfABYLVhtx0/lVt7eYAcSsIm7ZcgXxKHPy4kIAXX/hcGGS7KISbIhvMKOVWsGPWpS4hcLe5BDYyo0EShQ3Ousc4ShO/WXLKkC6Jv90CoJgsRA5RrgPELYCD9eDoKa+xLBJQZnH51EPOgeFRYk+1DiUedhcPmBeTj6ENDbDYAdZmliMGNkMsqSBiVwyfYd0tbhqLW4kACcN8MEX0aS+Rh7XpBoFNmYLCJMkcIBvTiBYCYK7grhKRdVgk7gIA3kayvjLSkMYyOLhZKcVlS3QOpAPMQTaBeeUCfJ2alzIY+QT2vQWIzyLczOtvlqwfXijONwNCi8xmY09BprtuFkx2He2AI2L9mWQP077sHbDSRkYquJOKrHPlhB3mD5LQvlmDxOvJB62NptvJm46y+xfdsLFbi6oM+eRubY6AbrKhHy76GRmOutDohIXQTIjQ52zyE4kjEJ2BtbytEvx/l6QwyeT4VkKCO5mMjwbPUFyIv2pY3aNgzqMzXXUgVvFqEPwO6AwXkpJdr2w5CJ1SRfnxaxoHSnUOl5Aq2XxeIFrtDQ5fB4KNwfBjZZGXOUcL9KNbgaQNq6RDaRM2qEnmdRgC6jyIKL1eRyuCKiZAG1xArgF1D4aYpRSxBATrYqAtA4QKyyl3dljShbEUpZKm2dEDAO6FlV6ZPcY9ouQRNU4kETZnOG29RTqdvHpTimUGPEC2USDihhMTNwjSartYYaXh9LFKq1KSYmLLzkFHTP4C6NW5UXy7z2SlGUACj1GL+xTLHGWrlwGopKTw6gZGSzuuWJg8K4deZ7inhS5QcF8qppgTCwwAC0neUxUeuVynmCdYxZjBhZGbLogpGdagtEO9KEWS3AcyYdsMmTuAjvIIQmw+t1iDxBBxtZiFtTaYBCxN0R8+2B5slT1dmBqMUPo1E4/hObHTDlafoiZJvIwCfKrUxC/4pS2G3cfcZLBSQYnxIssfoPB6gZzZjFqfBhs4MIZdLfgSH5YVA3YRKjicWujf9kRBnXEOBFXeh1kehc3EfUcx0cmdkkcNgVHJoVzZR5k7lfuAXIOTA3ig8Q3wTsXhoEp9S4HoQIChcxdYqVOePPEEbhjic7ETsUx3dWEVNRZS5brpyZ6rpa2NF0t2G34suHk1dRE29V0Cxe6amAs62pEF+1vUxMdDtvVOGNBXV4XeV9q0TDucXqn4kR0T1iki0ikijikXgSFZpfdxs3z1dbW2sjeN5MDurpgo1sz2FhcmjMRLHSYC60kzUc5FvNuAUY+TohXabQUSRvu+Rarhx26qQFVUetzOJCtkKc4XHmFl4m+bHYoBxjLxpWDQQf1wnk2YwV0FVOrFxgKAmYLNv/+WqPNFmbdEH3xdAFXZOOMNi7xupTExpREG+46KvPU0HVf4rDhrzRdjyO0Gq4CHv+mfiyq3OoER74AUX3VnBmeAqG6r3Ma2XxyrrnnOY1sMqdRzc0G5GHc2IJ7j61cUzrPpi+QIl48O0UhHJH6oVwBIwDjhCyqBvtNZ35ARbeVKxGNCMipYbq1sdGKFir8emrqBQTwJx9/SqzwMxN/ZsNjhsfUKEs/DdIbHU31Vm7ufA4rboHs7V6PnrrBYp2Wk8O2iBIwmc18kFkZNnFv8Qqt3rmp87mlOpxV8Ohy5nKii58bXI0qc35e6XVcXn6xMddYml9WasrPNeYSj9wKk3GmcbbxOi7RyidW84k2PrFQ3C9xHVdeZi6aw1VWwA8OqwsQMFrKqiotZQWWCmPpdJPFXGmsqLQUleabQsNMpfkspKSotMQ4R3JThzFfDEBUYAicV1hUOr24bDbuzUSbaxaXXzSLM1fm55tmiX6FxXmzuLLcWTRJRVVu2fVV6M4rBlxLp0te0AVMcyoJ2vg2X1tRyZkqKiylZZUWc1V5eRnA4OZFd3FRqclYUWGaDhhXmiryTOWQuCi/vAxArqSqmKYuKjVXFRQU5RWZSistRrPZVImVzjXmW8pyZ5jyKhGTjNxiY97MvIqy2WYEi/IhblGesThD8qoqN4PvdGN5uuTldxUaK4wlRQCazZi3uSovz2QmIRmzC4sqTeay4vwiU4WZM+aVEW+zqRySVCLpoA7Eaw7LP6PEVFlYlk/8KorMpgJjcbHkl4vMYObE9ob+5HBUYF+uwJap4EqNlRWIQVXpzNKy2aUWqD+CkEVZHgEKKy3lhUZzGfEmVCs1FmMI+BBSmypnl1XMZD4FxWXwO7uouBjil5TnF1UgVvnGipnQdFX5eWWzTMSnqrTo2ipTRkURgwuNJSXUVVQKXpWmfOZDCp1lBAJbkAAllkKgDPhXlOVVcLOMJAmwLjIoKalshuQuKasAHpwu9zLNMgV7mQvLypCsQamCUhAwQPQSStqtjZ4kPpEQtJwzzSkHVpxVLp3smlPpd+eBG4srLyrFDCvLyrlceIBIXKUJfqBCJEKl0Vw1swialQOW5Yzw5JWUBXT2ojKSUSW0kSm/3FiJTRJyDLOynB0KmmEuK+VwY09jE9kwBAKW7tGEUQndCEiOjk0B+YwbjmC04uUXu3xu6s2kOE+OmoHZ0yhur/eQWR9pxYWUYqwog1/ag1iTQXetLALPkGYsqCrNIyHy6MAuJuqLLFEGYmN6edF0E8DFkDv0fJQknLHSWAp8W0r5PW+mudA4u4SChSCRiHwo5cxVJVx5CXoWG0G0VOSWVVaWlXAl+ODoML+E7HeFF+RZZbYgXEzfrLMTRLmqcmcxV5yHPYJIoLLSPJOxGEWreTbxMxUV+8UWl1cG4qWYTIGh3Y0OYm4TwZw/ywipc6FrEbistNREXUWSK6+sCvsYtCqIl96m76jFC3KzLK+wwlxEWWdmVUWRX7yQDlFhnF5WWlB8HfK82EPwPb3COMsEqUFPMB/AZ3qxafp0Uz7xKSkoYpQqopQqEilVxCgFqfJIygzsHtA8ZlAMhegxE5oF2iH3umITsDp4lZkLOYhQCLSFH4I0ZWJsP5BQs4uoR2VhRZUZu6MsF9INS6dXFRcwoBwkYx66i434I8p0ap0UcJXmAq6otICWUsCltqamokKXTrfxV18tAyAktTUttQD+QkwXDyhlVx1Oi1SNzc9OTR0/Ht65BQVhj8JAUB6LctG8ZBFpXjSjoGJkR9KNuaDhCvpoW6UV8MlVPdtWaX3NJxXyMRf1bKMVYE8pLsol6hb0fWUR9OLrTcxCKAcjAQOgkwQFFpX2EIacWzS9cDZwJmFRI1Gh+BCliLooPw+1kUkuUIpBllsqrys39aQsaKBf95uLy8pJZsCRJqYDKiqLGUC6AbohQmUFWDcE8Kc2Yi+RFwVCBxiU9AOim0EdzWR1mTnTCM5KYihJ+ZWU5dPYQCSsG3FD50EnYFoOMs3Ezc4rpg7jrOnUgXYKdZiYo4/cYOKTK3rhhr7mkwr5mMt65gaTKPTyRaGXLyMCVJo1n6miCNxAv+kVZVXlhA0KQOgRL9QKMh+0XU0gE6AVmfFInezEf1G+tHsP1z8AZDoPXOjhJuN3AMDy99LjmPIkpESZpWiC9Pn54l4XcPeVwPl88vReCJx/UTHeaww6YcGBcVpmzqM6ljjy8ResBpnNLDrLqLtPyOPaci/I54Eize1rXrl8ssmc13Nmfc0oFTKa1cvxzFy2YaPSyOWa4AfUP2eGB3oe/prgJx9/0lJs1sW4P0FIKatNyaPz2slAs9F0JYctP9BFLR5TkMaH90wjBQrw3dsiGkptiBI8aytt8hUjmNm7l7xqcTKtt7zECAXszebUWO4pMyVXvhiLuvrYekbo31W5PbeeMWDDHL13xNJsF1r0ZAvctB6DA0/99xwP1HEfMuk1FjkR3EsmkDjb0jsKvYZjBmlZF8mh9wjiUeVes+g9AmaRkX6RLGgEvexAVs/RkRP6QHoajc0L+Tf1BEfokU36Egm3WvUBld6j0RVVqL3P6b/ewgZwo7WVnPfH6SI6wwae0uQauKvGJo7PnDMNdz2T1dEUv1Ovn8p5693QjxM9U/A0hc8hjJ9VAoOh5ETP6CksLMlUVpA0hWxRz8rM4eaP03l81TjFo8vhluroRJIuZ64OV7N143Q4S6Wbz945Mouvr712Msjckp477WTOhiZun7PL5pPzjKU955fN5Y0nO136muEkwK+yF6kyqa86ATICY6BnpTCpb+uifIG9lU9Ln5Ce1dcaZIFcvK4XkvQ1o1TICAZ1PdcgiyO34aTwtWSNZdpUnnQ1di2Fhezk9ugLUMRV0ilEYGe6Ad+TlsqP5bNQL5bkT+xrzSbyyaXGnhFK62tGqZCRqfTanms2kaPTqVgneivIeAHwxScrk6NTpWSMFhLWx5pk8sn5eZk916SvGaVCRqayXkyPzOC1uAyuMqOvWGYglhk9Y9nXjFIzsFPN6RnLjIts1KG7ecbzVR6fFdcccNsYpO0lGbMmekhGF86CSZOO+8nxdhds2tomdlRbwPG3DIKwlIz0vpIwHUmY3jMJ+5pRKmRk7o2E6Wxbe1pwrdL6imoaoprWM6p9zSg1DQdehT2jmsalj0/jHIITu1ca56Q3T/B6diSIHfsdjzs8k0eDeEljVUvF62hAneINPWmp/1vCh5Suv9Q0QQWmQ5dPTmkosTtNwDOA52jwuKQc/ecuACgumw6/fWysVGisYlPPjZWKa09QweRw+NCdy6LZRnAaDZSewEMyshiUkjYxFZ2QAXHh/Hsavsvy6Dtw6w3ZbQaJU3kP3vQl7r/xb7oZPSZMKogWEi8ljUYFLACJVIoETxx9ZD4gTGlVL2o3lZuL55i98+WXL/KJ47MdIEPozmkKJSaimTSO7jkn2OWI0ax2d4DHlbW1JOdxvGexxys0kuNLnhZrEz1/A15WmxQJGQBlzDQ+lQND0NJAXHRzB7qa0siLFIttkcp56u21XuokCdFBFg6pE/dLJ6BDkl7grvd6m3ImTODGT+DoXNz0wqIZM4tLSsvKr60wV1bNmj3nuut7vjjSb9eNncDNJUekpaO148Nt30kDatPh33hunGSCjh0rOcdw9FQL8G3AWRS2QUhwLyY2MttQ4Km32lwto7lyAQpwOZM8PD0hRfcX5LmE2lp7jR13OyS7R3N2D+1SyWOaRnPJeDoJX3b4lc/WG0twrjo5sXYcn1gbGFRWkW+qkEJI97B7yBWYQjJpmdFhWT4MowdpJDKk9m9c5ZOd1f6BMsUhryzflJwIQOr4zPHAvUZfHc9n8+mp6RnA+DkZmTnpk0dffOchn1yZMZpLAGzHh7sPJWUaWTxJhih4UZPgGS/BDcJiS4MgNMHoyFrTIPcP9XMLtcFe5HQlG1lJvv54eA4neXTKNGgjgshFAvGulLDh9NaS5NHknikQZXhzHxVkHnJ0floy6TGjgfsb8ohZRi7j8DA1grtYmrxuXK6mCDMlg5RKRrkd4MvS0D6o533e2myb6EkFqtDqTbaT1e8wFKe4pkyrgUIxG3YnzEWiNVrsXtpY0l0tmFC8tiZlWg/t6k/MrnLrU2rRmyZPujEp4FikTKomLU3ixHMOUN0kXxKXND8JD+9xSTlJHFBsLipTUH/zscCkVH9ONa5GnMScEnKgIGnMhDCx6OocCZ+QhEt4SWOS2GmuJFn8Xg8OJ43va8SUJA57JqnT2CTkOwmEoKRxgbWep0sST8mI93mSdUmCLcfuBcV9VjkA6rhyn1vgm+1uL55lEo+Psq0yCf6as4lhXvLxH8rgrey4E0/urZH0GUViHF/t8+IW6cBAdkq5h1DaR/2B9JJT6E24M7NCIPeR1Qhkxg9lF16JCF1xHA98QI5kYQCm8yx2eq2tdI6G58SL8HjxEAMe6OD8G8oIOI6dm+Ml7Uu3O/HioRnUmKKqmDufKgWruJorbW0j3r0nCb4UMTSNdOYS+n1IIOkc4QKgHI8/oKXejrtZGQNw2Fik0YiLSHp6UjKF7June+F5zr/FiudkbMnN58n2KegjeMyZXF+FwiZH7i3e2kT9/ZM0PJeC5OWWxnCJnhhubgw3f1wMV5rtdLjqGwH9tCzU3hZrtd3SnGFJS7ekZtFdaWmp/vuQTH1JMFmyAEwcx5Uf47htN3Bc/XHqXgjuw/D0peSs4DupTDSPz1ke+HeZheOU8B6q4LhhCuqHYeg3nPoZj/1DoX1FcYz5jmAxSzNqG73pzZPS0tk1QqyKWEI95Or9gOa2AtyY8Uj4GaVAN/5Tkn8q8k/N/mnIvwjyL5L9iyL/osm/GPZPS/7Fkn9x7F8/8q8/+RfP/g0g/waSf4PYv8GccfdBhfaMIgZv0IfntIrj4pM4rn21grsmtz+34q7NHPfpfzXca1unIPo4kEpNT81IzUydmJqVOik1O3VyGozS0tLTMtIy0yamZaVNSstOmwyGRFp6enpGemb6xPSs9Enp2emTM1Iz0jLSMzIyMjMmZmRlTMrIzpicmZqZlpmemZGZmTkxMytzUmZ25uSJqRPTJqZPzJiYOXHixKyJkyZmT5yclZqVlpWelZGVmTUxKytrUlZ21uRJqZPSJqVPypiUOWnipKxJkyZlT5qcnZqdlp2enZGdmT0xOyt7UnZ29uTJgOJkKH4yZD0Zkk0GL86473mFdjupN8fqzrH64x/SgHz/YzXlAqQFaT6kB/4hTfCP0YX7XFupJBk0Fw4jGdz37mmSgbt0eDRmsCT+++sxg5d33fQnLOQ513err4T37fNbTTVQiO2Bx586GQcZ3Ka+8pXbr7gCuSRlLM8ZT76g0G6NWaO8LKr9vQ2/NndO27H800eebd5blcqfHbr2q4lH5s+4LffNlClC1UP7GrZ+Yho5VfXmyH+99vLWV4b91rSn7ETHP879reVC7D8bjN0bZ/1Df25528NXHP3TLVur0pLnXfvOk6/e//CGvYv+8vraritbdPd81WhuvWZj0eFHZh95av7igfqbJ806W5J1Z/zzZZsLs11f3dX2Ss7Nia+v8r7/w92dd7/x5ur2L/aOGbY5JrN7/WMTx5yty35siuHltz9599DKZ994Z2RS/kcv3fVq4t+P3Ntwx8r7qm+8yrH3wx8/sMTNqd2z8+r/vPDxHT+f+n7/igsP7X74ySfXzljm0FiqbzWnPpe54ELHq1VXP7tx3arSuw7cNLrpqpZfPtmw/4v99x745P47b/SuedPy4M9vbtu94Y6m/GcahvTv/PlM1O1PpaUJVYn73ti7fOnRl08ZtkRMGTvmxfh5n7+zyWPfctVVD/V7jbvluydvPf/1yAGbbFFfdBxeU+6KPtyxbpww4tScYU+/xb7dco+/7ar3vvR168Mro+/8uXWy4Y+PD4l8demRuw82zftq6ZH0mzbUr/j3nl3Zb79n0m0ddnVS2b1JZ198N21Hzbe7Hz60Llv4eN+Hwp6R66NeuWXrHxbl/vKH+S/O+XLU/ePsJZu++lPTSFuX4oMZLd1bt+xs3LGq4cYnlrZGf9cy/KPF2z+vfOL5l7bN3bR67uqp8+869JJ54qHH2+/+dd4TY/78maV9y4F7Cz5OXDf5w8znt903797NO91bX/7xyD/+XWnuPPH0KaPuu2Hfn1tzX+u8d7Yd4Q9/Yk5Y+v31QzfnpF5x94kn20/d9fhn88xvHd+tz39g1/Fl287G5+96oLi4+e8j77nmqe71e9aOWzn7/vjuK46OTtv47y92xW/7S+w9289ui/9y9A9Tqo/zyXtXvfnAkhtm5q9I+Wiv6prPEzo3XMi/YcI9deuN+9fd85dhGe8+OOqzJzZ9OOKvx1s+edbZedfXDV1ntk1R3vqo+C0K/dnZZ91n15194OxzZ0+c/fHsgHPjzhWcs55beu6uc3879/q5f53jzo86P/F8+fmG86vOt59/9vx757vPx/yW+Jvht+t/8/624bcHf3vxt09+++W3wRfGXyi6UHPhpgtbLjx+4ciF0xdU3OVcNmfmGrk13A7uAHeM+46LUyQpchXzFC2KTYq9ilcUnyrOKYYq05TFylrlH5XblE8pjyq/VkaoeNUUVZWqSbVWdZ/qoOoD1X9V/dVj1FRG49//VAGBSefVgsaS657JdMGJLfLQYUXRwuLGjHRTqdmbYbGkTybblFH7FS00wZ+UlmnJLDERBHHJoLuya6mWPCdwXCW4uSsoaYI/BCG28xlw/eGiONUUN05MTQ2DVE1vSEEgwekNhlMbvE/XcsaVRxTaR1QL6jjucij5Cnh4eBLg0cFzJTxXwZMIz9XwJMGTDM9oeMbAM1aGrWh0UB0OxZIyaWnXQP4d99FangP3OBTQ8IyHZwI8qZgPrVB6qsXigbEM3uvtdVtgfOqw1ghFfbBS0tNcPm+Tz2uhGwkt5B4aWvVSs0VGKPNECyEVxW0N4JP8LsVtdz3HpQEu6fBkwJOp6JN91EvJfUqewZKzdJYmt8vrAvtbajVLPcWVh3d7PWd84m2F9oN4RdBfdNBf5EX+oqKUvf7FqGR/apVKGxERoYny/3EKpUoTFQklqyMU4f449ssxWMl+lQGxlCGuwHAV/BNd4WDp7/8VA+v/1+N/mMGLqojZhCfOXrjw7m8XLoi24Y8AnwBYtBEHnLtw4XOARVtxHMDfACzajAUA/wCwaDtaAT4HsGhDLgVYfeHCBdGWvAvgWIBFm/JvAA8GWLQtXwf4MoBFG/NfAF8FsGhrcucvXBgHsGhzjgI4E2DR9pwIsB5g0QYtBzgfYNEWbQC4GGDRJl0FcCXAom3aDvA8gEUb9VmAbQCLtup7ADsAFm3WboC9AIu2awzUfRnAog2bCPBKgEVb1gDwOoBFm/Z6gO8EWLRtvQDfA7Bo424AeBfAoq37IMB7ARZt3hcBfgJg0fb9BOAOgEUb+BeAXwRYtIWR1ofhEW3i8eB+Fx7RNi4C9wl4RBu5BtyfwyPayjeB+xvMg9nMW7At4BFt58fBDU12QbShj4BbzewBNHNOAxxLIGpTo3UzGB7Rtr4cR97wiDZ2Nrivgke0tc3gHgePaHM3gjsTHtH2XoP2JTyiDb4DP5KGmpDZ4gfAXQyPaJODEuIq4RFt8+/QloJHtNHjFNTeE211tBgcAIs2ey7AXoBF230ewMsAFm34FoBXAiza8psAXgewaNPvBfhOrC+z7V8BGAceoo3/KcC7ABZt/XMA70Ucmc0/FAzJJwAWbf80gDsAFscAxQC/CLA4FqgF+DDA4pjgjwCjsSCODbYBfAJgcYzwFMCfI03ZWOEowN9gW7Ixw9cA/4BzGGzsEAENeg7biI0heIDVaGGxscQUgGMBFscUVQAPxnA2tmhSUTtWHGOsVVGLTRxr3Kei1pY45jioolaNOPb4AGA9wOIY5L8A5ys44+bPFNqf1QPI33YDff/NsHUL/j3D4OcY/Kqhivy9x+DjLPxTQwb5+8xw2xr8O23Y8xD+fWV44zD+fWPo7iJ/BtEC/r3liflT+N9SOR1/x7+vQ8rry5xXuvz6Czbf1eT2z3ftctNZrIniLFYf8kyT3W4u2p8vyvL8meWZJeZJbeIsepF8UVqa7A7sIJs2TbRp0V4c7oG8f0fiqOPQuz0Ul2LMY+alZ4J5bPbQUSDmYbdzzVyznVsDbtv7HHmrQQQEZMXw/gHCmu2Qwth+WqEtF6Offp8mwSA7R+HDJGs7Z/PSYtCvNC3Vv2Evo9nqYAOxci+JC9mu+LdC+6Ni2fv+NGoWZucgL8TVbrcF0z2LXvDQE8VJGdu9oSS/WDok1TEvJfdRbxhyXyQDTD/cR0mN6aN8lMT4boKHJSf41fug9l8rtDoxAla+ib0LMaGXZgKwcR9E3KREMjEfEjMIuWzxlvreOPGgL5QsF0uI1frZx8bEvjBkuUgGmD67mZIF0yc3U7Lg+054pOQMxzXNbJ6CxcH63sne9c2UMmcopYxHv1VoHyOUYT4kJsMvLV2+a7WoBtBLS5Odzg0ditIxO8HiZHMIhSexC1l6ZbzkllAKXywhUmhBC631nJYwFL5IBpi+vYVSGNO3tVDq4fscPGJyEcczLZyx7QxjPoyEhDvH3kdbKInnUNh48IzIfHNkMYMQnCxdotcDiqTft4aS5mIJsWprWtmCQ2sY0ly0ZEqeQ62UPJjH/lZKHnwnL+Y4fxYUz8sW+8OxvhiH1LuVUmYF9Tee/E6h3UEos0IWc7L/s20kt6bF4RipV51B0q1cHJaRek2INe1YTKn1xOLwjHQxhXNuMaUUpv+GUQLfc5YQRhL1A8GxeIk/HOuPcfA9bgml1BPU39j2X5GHnpDFDMWNfCmqV6q0LwlLlV4TErm+hMn1JeGp0lsGRK4vZXId0kctZXId3t6lhCr022gMx/qlfgGGcbC+XvYuXMpE+xIm2n8SeYj5kJjBaj7Vf+l+r9Q5uDSModGHxKTdGdY/LA1naFw8E8zjmmWUSphH6jJKAXzvgkeehYjvncv8lMJ4WP9d7O1dRin1w1LW235RaJ8itgLzITExJd9CbBHyFp/hkLvNTsPR3QxmBLoxPb5ffN+flm/xx6N5YcrA8Bff9z8iLJbz4vuBbxvaLJy/HIhnbD+r0L6oEH0wFsXKbsOoWE8xR9HNBfmL6Yh1ZAsfjo/dzsyyMOEiLJaP/pibLUx8sXayeDSm8cw5hTZfjHpnaHYkVnBWp4OKJ5UwHjyv0JqWyagiYmQPwmbZ++HdIkUgr7bfcO5c3kg806knl0MnBb7Mhmcym+PO+T89xw3qwz/TjKbG77M+0DPbUmTOZd0KxyT65f458ZUrOG6Kgo4ScU586qXPiQdh2oOtlBEO3Yww+FIc1SvIXDi7cxQaKQFG6XEcZ4gA3JM57u9XcNx3w/xPqobjvsrmjIf+qNTujxPXqJTszZamOHHuRcPeEewdyd5R7B3N3hd+55+4NqZl71j2jmPvfuzdX5wLEkfI7D2QvQex92D2HsLeQ9l7GHsPZ+8R7D2SvUex92Xs/Qf2vpy9r2Bvnr0T2FvH3lf+Tjr8v1b/hGKO+xw8/wPPIXjeg+cZ2XP4eo57Ep5D8GyF5yg8e+ZynAsK+BiYqv+Vvy/9lTP96fGvqqpKA+TtH76X1YfIhPpgmVDvN59339LTyKYlJJ+W4Hxa/Pmc6TGffE9IRvme4JzQRxpPZq/sMS97aF72kLzssrxWrgyaMkhLk53xo8uXGO9o7/GsYryfe49XL8bjV/UazyPGK+w9nleM19R7PLsYb3Pv8aR164O9x3OI8U73Hq9RjBe/utd4rdJ6ee/xFovxFvQer1aMt6b3eDYx3j6I98UsUOs3XPxZHvDHcb/dPFaYPqTuGtr7svM47tffcsc3d+ZM+WvH1p9iDxw4j9LuE4O+EmcsXzJsHDvszaqq+wzDju6qGzDgj2zm81Bu92RM9y/DVS/efOFA5xHDkz/Evh/VsNdwuLzg7T2P3WJYmVO67eT7VQbOuH6DUvt8/BmDs3PNyLIp2/QTM84+OPXHbsP8E8fuGbRgUYd1Rcu0rd90G96qvTV+yQ1tHauWO08P+azbMOjHuokVb6/Te1cNeWff8W7Dr+t/uXLFkbUdH//40eiGo90G66F/WUt/WqA/tM033PRKt2HLOxlzP9/Zpr/l+5dfm/aPbkPj0lvm37/1bn3/235xzHmy23Cu+/ymkU+u1/803T12014o754JTVP/MU2/46130r/Z2W3QOttuy1Qt7Bj1zm+P1m7rNvQ7MGFMxaw/d1w7d+BRxR3dhqqvStd1ryjvOJzmOHjg9m7D0B/ee+bKVzd2nEx58JGtN3cbHq2a9+/P3lmhv3b9fYc2L+k2FN5x31dDRq3oWHrtjfr97m7D1PSPq85csaHjqz+ty/5lYbeh0zzIsO62tXrf666v59Z0G67+ekDzPcfv6nh3nnrlybndhgUTcqb99M1W/UPP1KfdWtlt+Ev26tdv/nJDxx+On9OVl3Qb/vTC/flG1+36f66rXjOloNtwo/rzfZolK/R3nbhxY5Gh23Dn7t2fnV9/lz672udckg3hhd7vht9wq95w/2NlR9K6Dd99ecXmsdNX6D9adkowje023BC1yLB0/10df6z576efXNVtSNsT3fjpTzfrP/34iv/+5XKgf6dr5LaEqR1txz84unx4t+GJmFj3zZPW6rWqz+9fNbDbsOH1I7dtGuzUz5ow7cFHY7sNT+3ZV+IruUU/5Om0mN8iug3F3r2nFLmr9WnHis81KboNM35+Z/7kjzboLwy1PRZ1rsugnrt+yoqdqzv+c+8my0s/dhnqy2ce/nbGpo7XH8yZ9MB/ugzrU64d9XPklo7aY5rGR77pMryddee0028t6vjp3i8yP/yyyzBk1JHHR4zY0vHF7kEvpHzWZWgsHvNA4b2r9LrMgcX3f9xluN2evGTBwDs6LluxV236oMsw97ZhhRsemNMxZvxPCTH/7DKM2lpUt23cso67d5cf/+9bXYYBe59f8G1Nnj7lNuuCqCNdhm5bxJTo2rv0s7k/fGt8rcuwWLX9g08PO/VH9c89uePlLkPqwP6G9Rfu0H/8zvtnxrzQZdj36JK/H2lr1ieNyXrvg84uQ8vJyq8P/OEOfdxH57c81gH12bmIy7xzQ8cD4/7S/NgzXYainXecOPzxrR25tW/u+OCpLoMlu/+Blz9u7bi57C+zxj7RZfhx3tJvCgau7ui/af5ru/4G6d8/P1wz8Q79B0lPZk1/tMug2Xb7hKc3L9Wff+Xudwc+3GWIrrzs1Kc1bfrRlYUfRe7pMnz18ojyVa9k6p8uuO72qx/sMkw8aBv7r/Q79YUJDw9xPdBluLd5i3XG5+s6ok80P/PpfV2G3SXdU17KWNexqipn3027ugyP/Hvsba3mlR38C4czC3Z2GebMmdX60ZE7OhJ1VTdn7+gy2EbctOKh+Nl6z4PF71Zt7zIk627o7H78jo43piyv/Wt7l+HmZzJvfXjgwo7OD7S+gQB3Pdi4v7uupmPCSEH/2L1dhmvXnKycemJFx8o7r/3lRoDfnHb9TbYrWju8lm9O+wDed+PagzO6Vnd4/3hf4VaAb/9X1eXpI1Z3vFqXO+trgN95N/qG1+9p0xvmf1xmh/z/cF/JMyfSl3bcqvjaMxjwaThYV3n+mzv16c+lKr4FuMrxzz2ffi3oq0vfzPoe8M998/EJL21f0zFw5LTKJKhv5qQp/3nKfkfHoCPFW24Delx+YUTOyhtWdDz8ypUFI4FeztnuY+Xv3tnx7ab8bcd3dxm42/vNrXu4Tb+l9vbjrzzUZXjiqzPPTXj6T/oP28fkfrG3y3Dhy5fuWfCU0LEu/8mh6dBe+Zbvr7vlx6X6rJYhWx6B9rxl6uUPXBF9R8fLFzZq50J7j77csXb/g/M7vnjpjX2Tnu4yXPdM27JfrnR09K849Hr+s12Gh375QZeXt6mjvPTje28+0GWYub72fcdrqzqejXyt6T8HuwxJRzaOPffoIn3bmZ03b3yxy/B3T8ynE99u1F955Wcjag51GWp01Tr1S7d2CF/MX1p7uMvwXtqpz1ZftlafkTLjm21HoT/9veOdt/6+sWN+4rTHVO9Bf0vruiftcJt+zuOpg/56vMvw+PUe50r7Sn3n+cVVDdC/nvjL+rvf+OTmjiXfv9PZAP3v1ozXN7WMXKd/+J3rt9x7usvw6/G3ZmxY2tZR+9SfRkd2dRmefeTErOMvVHWcHVK2f8f3XYZrfrx/ar9dbR05133xJ/cvQP87Hs7+4Z/1HdNvOPtd8wXg19vnNJzq2tgxI2J76j5Nt+GNjywx71/w6t9+bmbb5SBv9m7e9OvZAxs7oi9/f+7zII8ej3009RGnR39PxaqPto0AeXj+3nnpn63XLzl6wbKHh/jXRb+14eRK/cy3Zo//T1K3oW5kafajb9Ton/wy4s7GCd2G+hGbHOMa6vT2tu4T/KRuw9tPHr5l+O0rOn59YX6VFuSr69cLhvkPb+hYdlvkjJTp3YaiB33Zj8S1dXx3W1zUrWXdhgcip96/aqdXf+uusyeGz+k29Nddw/91480dm295dehnC6D8Tc+9V379ev2q9A9V/7J3G2Y2KPZel7NSv+AJxfcJnm7DFdOeiEx47+YOy7alGXcv6za8Gjd9yjNjbusYvf2/gwtWdxveWZOzQP2UV/+jYe2X49u6DYvcf7n2m5du0d9S/MrZa7d2G85sfGfDwJ82dHzQtmvHo7tA/nuvPLX5kT91/KdufUrho92GKP4hY8cL6/VJ11u7Rj3bbUj/+sEX7hy7Un/3sw2Txr7Ubeha9Vbag7bb9deYnHObQd9++9mUz5+dtL5j8D/uefj8h6CP3thYMuW2Fv2xtr/+8bkvuw23HV5gfE5j1v9n0Yaxz3/fbeCyqYWQWvfKHbO/Hz+VzTR0LiBroV900pHqSUNp1XVkDXTJrtHE/9+mwm1zi77rfMFw9dqx3BlqcbT/CJbE8XuV2mGHnvnu5nH/7Fwxa1LyVU/8qqfz3hj6C4ZGzek88NZ7nfxPJ49F3XfZARK6AEO3tEPoHNOwlub3OhvLn3pvV/WVNPQaDH0GQ39OufXhke91vle376+fr/xXBx1GkXIxtLXlz5Z/vNt5ctroO+yj1DQtR8rF0AWXPb/W+m7n4ZXFhROODaJ1PflfLHc7hO5evTpV/W5njvbmb7/PPUFxPoihz2Boob2q+P53Ohfcee3ql//G07TtGHocQ1ds3vrR9Hc6N6146d2S6xJp6AoM/QVD+U+fPXX67c5jY5/ecvnSq2noAlLuDghd8/Gg6297u9Ow782nBr82RBb6TE+h15ByMbT1zbPG0W93Nn9gTr7q+qG0vjwpF0M325/bfOitTnXll/Udj17BqEHK3Yn13bNnXt1bnWd235zx8hVXMGr8gOViaOEjv6zVvNVZe73m/Iu7r6ZpD2LocQxt85y6aufRzn6qH27qaoiloe0Y+guGHn3izsRrjnYuT/nhr/uzznT4Q7fs6iF0BSkXQ6+5oXH4M2923qrfsmfM7DhGDVIuhi448frDZ450XvXo6nuevnosowYpF0PPjHFGJh3pjL9gqCybMIxRg5R7H4QeLGtImPdG56j61/6+8dkExumkXAxt3/rKTxsOd2auvLe+bHGSLPR4T6Env8dyMbQtxbv6+dc7Nzy9Nm1f6QgaehBDt9yP5a4offX71zpr294w1JQ+S/mqHUOfwdB9p67ouPK1zq+eKzhhW5d4wB96vKfQFaRcDC3/4Z7rK17t/Ozd59TH3xrD+hEp9wGkMy+0Lz/UGf3rh8s7D4i0IuVi6Ml45W17XumcM8PsbvtQHnq8p1CelEtyHvFl/3++3Fl76rGdCz+PZ3xFyt2N1HigKfXCS52Ty+Pvzfvr5bLQZ3oKPfkdlouh+7Z/9sXVL3VumBvZtvZjnnEdhv6CoSted4wtebFT3zrR+lzssKn+0C0P9hDajqHPYGjb5fy5RS905lQmlaxu/Q+TSKRcDD1zxc8Vf36+M+rFRcNS/3QVoyQpF0MXTHhvzNPPdd61c8DwXSvGy0K3PNRD6DWk3P/V3peA1dS1f9/VkXJCJXPIHEIZw9HuGPMYCpmnDJmHEDI8ZJ4Jmac8QgghQxzOoRBCCCH0eAwZC5njfL919jrOrnbe9/+9/+v/fdd3fV3Xr7XX/Vv3utd477X3XnsfxoYkTpt+R6fN7JW2YM2wAk1N7N28WCeDXcam3ndb8VqrfV93e2/fCbz3ibEb9pori9XAYD+tVVFGdZd61ZuayBN5kKnvmNW9bET2Wu7bV6O1PN2vezebMryVGfuVsal/NB618oQ2fk+vtPqNuC8zsOsj82DDGBvD2DC32y1jj2uHdq3dvtq0IhL2bl5ssMEuY/2eLrqRcVR7b3zdiw3Xco/jZ7C7j/lQSyF/6SPabn3P9+9lzr2VgY3Ji/U02GVsauk1d9SHtY+KfE2419dFwn7Ni3Uy2N3PRtX2tw38D2qtty+f2HeaA29mg10Da6dzLXBAu2JZg9lbetSUsHfzYlMzmF0DW3Lsg2Z7te0Cbj+dMstRwq4/kAerY2wMY3V1PnUP3KV9u+19vVZZLqdM7N282DCDXQP7M2b+lu3aPT+rfDxm/lFlYtdH5cEGM/YE2GJBhTbO2qp9Yj19WpXgaqdM5L08SD+DVZZv8K38pWPWahvt/LbKd6kznyWM3XAQqllREbrl2k07b36aVvaRxkSeyIN0MhhlpO2I6qkztE887xUUHpc8ZSK/5UGytYp6/yFzpTk7uIIDC106ywxHxRZOKGobLKTV2Lx+xAXu14IZ+fUQq8Gq7l2dQoQbnx9b9koxrksYu+EwVC86V26zTqhn07POiTDuiomRMYfZSe35wj7qMKHznXe9dXZmvDPfMqtMtVbS/sHhgvOPUxPGF+O9FczIr0xVt9VhT2iE8GeVnomrJ/M6eDJ2fTRjH1wZfzlSyO+c3Pr90FK8+oyNMbCWOreX+4WpTS56e9gV4r72DRsljPVrdb3J2oPCxi0Fu/apYzzzMPYrY1Ov7/p46rBwp8P9HX3j+azwY+z6I2wmr23f88URoWyZPirLYbzMnoyNYazuZYGbdEyo82bz7qVlX4tjiAx2GevZo0/fujHCvdanGve2q8gb4zWzy1i/fUvjh58Ung79XCM4pAgvFWPXH2W6GrPuCzTCzcie56+3Mq6kGBvDWKcCsxtdOC2ktnx2YKiuJi8VY+8eNXjTRivStMKPAtu8b9czelODXQNbdday4meE9/lrXg1K56uD1FfM7jF2fqg4vcaeM0K99e4tlu3irRHG2BjGBs+z6X/9rLAteublkZstuF9j7F3GhhSNyvKPFRaOa1sxovZ5sTU8GfuVsVF1ZzddEScEHf3hO3k296dOBrvHDefDJ0+rnhMu/DnsaVpdXt/Ul8wuY22XnO7Q7bwQVEvlsviacd3B2LuMDZiw2D7jvPB3+U1Pl9oZ+5exXxnr02Lu0oUXhHzNVwTYDjauwRm7IQZDstGrA6fjhesuL/b4Ns3PG5KRJxj5OaVnz4vCGH1Yd+f3+bnPM1iNYe24SPVm1SVhWPmuPs3H8Xme+oJZZWxir27JbpeFPX9Hdlhan68bdYxdf4LpNnGfn3hZOGrv2yOuLe+/MMbGMNY24/z3MQnCjRprzo17/U70A36MvcvYkKSopgevCPWjin6urucT0NNg16D7XF+o81XBNVPtV9X+rNgHTozdcBIVevBk38ergt2yk/5Fy18SMyaD2ZOsCw6PdFx/TXB9ZHPp9eXSvJHTmFnGdm/v5z42UVjR4U2x+5u+cGfK2K+M9es/pGZcovDiparY4hJ82RjM2PUasGlsyF0XHDN2DCxUnk8iP8bGMPZL5OXeI64LM4vt+Hxlg3GBZrDL2KE9B67XXheOnWrd8c1O40nLYJexxwuNaulwQ3h5otWJh/P5siL1ObN7ijVVyrSM0zeETIXPH9828cWBjrExjPW7+fc7h5vCcVX5m1Me8w4MY+xdxtqenjhkxE0hftK7qCuj7XiNGPuVsa51J3U6e1PofcryqG+TEnx6GuyeZvW9VTG6ZJKwOTXkdYMnVrxGBruMjR97dunYJGHC7SHWV6vW5q7MYJexrsW3pF5MEsKTC5Re6MQXWWSwy9gw9/z7K9wSelwYNDPgNL+ITX3G7GrZoIvv/HnqLSHds8/bN/v44kDH2BiwEWZ+PR6dunVLSPEPt6quLHDKtpT4FPd64BbqtvlU9eCAToX1eo+q/+qFbPYssD4wFhih1+uvftfrV2qNe/DZM8ICVLJkScljYGvpo0rwdgXAWxTIT2ZkrUR21pZKxlsyHaapfqczV5YvJMmwIBMXZM+brQsZMizEnnGq954xV5rZkPoYwqJFfj3QtLYxPhQF95SlsUWeLA17HqowPBS1tjU+GAW39SzS2CM/hGXtfj0otbY3Piy1Fx95lipVitSPkaiQMcbrp14VixwckBPCosV/PTq1djA+XgV3haUphn5G2L/or8et1sWMj1yLUe5PirMXHv8SH6S3RH+1Mm2DcGuY67faxZf+Hf4yfKZAHRdnrnxf2Jw/ns/HH8Mr+WNiO95axfljW/aotjJQDagB1ObdzN4hZUOpOdAaaAN4A+zViB5Af4BtIBjChgMwig+NGcBsYCGwGFgNrAU2A9uBXcA+9ioCcATQshdPgXPABeAmiXuT/qfKO1mmzMvzKPfuHGU/KVN+/l634cVN9nJo6//Cy6FeQBsz03aJTOTxB+JtgS+YcgxM1g7x9oBNOPION22/UO3EKIHcG8jir8gwmQ/iHdlmFKT1Cec77CDvBFlnwBfoAnQFugHdgR5AT6AXwF436QP0BfpJymeFRvFDvL+kfEw2AHH2AnEkbOkk5fMBNwhyf0n5mGww4kOAFKTN4OWLhHwoZMMk7TccGJGj/Uby9hvF228036MyDe00BscBppnDXwweNma8/DafXy+3+kA3JMI04+r/emTu33+U4R3dPNXFR6g7TLp1uVFROW/NSLYzjb/sa8bLb5Gp1+fIZ8y/k4/Nztz5sHgI5GMhHCfbJrLbE361yaCd/6JN8lY3tMmmnXm2SZ6arC7Jkrqw8v+mTX6bj9OuvPOpL90SkWf/yu5BFz+3skuc7+58nPuhncazV7aAeIxxBiabgPhEIA7pswBbyJJ3mfSk89eoJ52/xvI2MtUbBf7diMi7zCUiRHuGcYFj9gpZkMmGO0ZEP/a1ZOO2j2lIE4Glg3tpcYJ9iRD923Rgxm/8WzAwE5gl8W/GerANfYGDho02vvbOypUaYXrp3W+3aGM2e70th425efhQ9nWE+RIbbgYbYyZI3q032Gmx22QnbrfoCxcAC3/jCxcBi9mrdRJfKFeXSbwukbtFP8v+XPaINpYCy3LYWJ6Hvw0BVuRVl0mmutjuMdhR65LMlbMV/+VddeyNdEU+y/xW1sZtZkqbgoUK29rZF3EoWqx4iZKlSjuWKVvOqXyFiv8e/3/4D/VR5LewzGfarMje39PhLKSDTIc1lQ4rIh3OYjosUXVY+Oqw2tBh3ajDikOHNaYOa0Ud1og6rD50WATqsALRYTWnw8pNh+WaDqsRHVawOixddVgN6koDjgBWKLqyAFYpOrZQQOfFwn4s7MfCfizsx8J+LOzHwn4s7MfCfizsx8J+LOzfhP1Y2I+FHz9pRjbQt4G+DfRt7rP6PLRXrM65edApUtzMZ/wKuDoj2VxpXi+S1CF3zZV/tGver7nh11bY22XN+3Xo0r5lpzbNDce+bdq3JC5v7t2undq3peG4vXeHlr7qTj0Mxy07d1a3btmZUveT+skDc+VXCzO+C9SC7/7Mx3d95ue7Pa35l0yUfJdiQb47sTDflWjHdyMW4bsQi/Ldh8X5rsOSfLdhab7LsAzfXViO7yosz3cTVuRv7rIlYRX2Ri5zV3x5WJ0vEdmbvDWBWny56Aq4AXWAuvzNXraEbAA0JNEds9fXG/NlpYovLT0A9iCQbVtSA834cpO9+cvasBVfenrx5ecfQFv+JnB7oANfkvoAHYFOfHnK3gzuAnQFurF3g/iSlX2cpRd/U7gPwF537Mfc4v+gffa2Adv9/ycw3bBUVqc+ZTcXo0md+eL/jwTxwmIAMJBfP7OLjMH8QmMowLbID+cXHSP5hQd7s2IMe9+cX4SwN3XYC6Ts3RT2Ch97tY5tig/iFyhTfjMS/qfsy4yEjHfmSrec3+URL2CDuteoGeAzrM3oDlS5jfFHLQMMv3dI6qj35sqZZpV5YWrzThskOZ7Mwx68w4xpa0rSVubDvDE/bi857swHR2VeSeLHXtnSq3UfzJWDc8uz58P+6sEb78BI3wns4lcYoZBFsJfAuWwPsJdd9QD7gP3AASAKOGiGWmeaK39YKPg0+R3ymYvTSArFfxMskPcs+t8H+xTBv4Pf5VHdLA/Qfy/ysl/HLA/Qfy9y2lWQOjrLXPnGPOss0SEzcX3Ahk40cAQ4ChwDjgMxwAnjFyEx1LAWIA1Pfwo4DWgBHXCGp8tAurNszcHTxQHngPMA++ZDPP+OxDg+z/358B7M/chI7gf8JVPmd1NUflrlnj6Vef7GKTlAcjxIcuz1b0znHpI8/73pr47Umyt/FkjSEl1EA1zijWN8d45dHY30rz+4/0D/QOPVkYbd1uGv8vjqRL3LXC8BuAJcBa4BicB14AZwE0gCbgG3gTsmO/UHsg+RGpbtv64ZDCLjZRa7ymqgE69WK+lML9qwcrOwnc704k0aL1MyL9Nd4B5wn91FAR4AD4FHJvsN2Y8rDpwY2GbgQHYhMWqA4QPZ/QIl5anDk/y68DOU6TwvU7hMmVIlZep9RixTKi8T+6jIY+Af4AnwFHgGPJcpU4vxuQplsOl+5vc2E7nNNG7zBfASeAW8Bt4Ab4F0WZstJuQ0ymxG/gubLc6KNjO4zXfAe+ADkAl8BD4Bn+VsDpOvp9PZ39s8zm1+4Ta/At+A7+xOGvAD+AnoZW3K1zP0NzZz5jEpd7HFuzP/Og/j/OrXb9ioAOP8cowV05vsjByJnH/dBfDMgzdeWftl5/ncGvirXMGxec8f4x2O0RNGBbC76NK7AtHZ8zWlkVxtJ/M0Bt8QKxoxMxf7xdxcPMMqeMcFxopnc0vO50doBVhz3vac2K8FOK9EaAMUBAoB7Da+LWAH2ANFAAegqLmpbVDGfkP8A8UbQI2G/boj9+uzw3ndLDTN/Eb9+v3KReIP6v0SS33U7TixjXVxpjtqGfyYyafF5W77L3E49S2yUF4ye8JrXIzXuDjCEkBJoBRQGnAEygBlgXKAE1BepsaT8qxxHrcCZWs86deoiT4nX6OAc7lrlHCO1AuWWCgfmiWcF2tUgdeoIsJKQGWgClAVcAaqAdVz1CJggrHfxvwH/WbIJXe/sfdIJf228jzvn/OmWkaeN9XS/XzuWkafxyp/qYXytFnoBbGWNXgtXRDWBGoBtQFXgH0Wqg5QV6aWk/Ks5b/bV4ZcfvXVoAvytXC6kLsW0y6Q+vhyC+UGZWg81vIQ1ee1aICwIeAONAIaA00Albn4RIOlb4pjD0AAPAE10AxobqqlO/vZuP94EhoyETuM9Vf7+GyvPhtN9GM3qsew38LgjsvwLYN4sfZW8aYXc42194sXwyXxpjdxgy/iPAZhS94OrRC2BryANsAfQFugHW8Hlr49qy/gDfgAHYFOQGe5dvgPpmYelZ1kfPGsy0WxrrYX865r0EVTXStdgp+GsAuva9ec5f0PJ6GbsbzIx9gf+S5xH3kx92h0vGQqWziOu0HYnZeth1zZ/nemDp8NvS/93r77ZXFW9+T2eyHsDfQB+gL9AD+gPzAAGGguueM9asxo/8n8FNpugGu2JjFw2deRJS6LZcqSKZPrZdNaJ5KXaRAvkz9C9kG5IcBQYBgwHBgBjARG5V0mt5Z8rRNy+fc2nRJEm6O5zTEIA4CxwDhgPBAITAAmApPysDmJtwOzqUj4vc1QbjOI25yMcAowFZgG/AlMB2YAwcDMvG3+qmfQv7DpfkW0OYvbnI1wjinfRmK3/YeOzLBUNGVknLfFroj9nyhXxiukTtkAD22Wwks4l5dwHsL5siX8D1xM9hL+8iwneAkDr+QuYRJKGLyJlTD4qljCBbyECxEuylXC/9Sp/Cqh8eRuKGHfq2IJS1zNXcKgq6QO38xKWOmaWMLFvIRLEC6VLeF/cFbOXsJfbWh+TSyhRqaEjtdIHb/FQhljtYmXcBkv4XKEIcAKif8b5T9+PBz/+GxLm7pGaXbfMplbHXQtt9XQa6bxn8ntruR2VyEMBVbL2Z1k8qMpv8m3M7+ZMprfzOgvuTnSnt9oleN8JTdhxsvw3Tg3iOvnlc6X3+idILmRmzNNK84Nk+E683igJA+5NMY65qxXzrrkLHvOMuYsT84yEH900Z/nP4Efj8tRH39+I2lcHmnaS2QDuX3ij04CJPZH5kg/WVKGCZK2l8pGStKpuWwID8dL6tGZ6wZwmT+/oTaAH4/j6bx5GQN5u+bkO3D5xN/k0YLHB/4mjbRdc7ZjzjbL2VY52yRne+Rsi5z1z1nPnPXKWQdjfu2Nu4fEe/ZLdlko95st+RcLc+KLwN8tWg1/SURrcLwWWCc5wdb79a0hwzfifjmaJzcl2zB+pZnk33+EKaFhIZ5kujyBDXVchIUy89/+0Zv/t374Jn6PhfJNgf9bf9eiA1u/DwwK6j9g2EQ3twasT4eN6me4MTts9OAxv277pN7CKeqe4dsYkvQNcTyy//jx2RUMmzJuYwl4WyZ9ADtz5U7vKZseYyxgzLDR7PcNJBqGr+oi7aCc6dm106+tobnrECZno47Uxhj2uxkDslsTdZO4PYM7v0O0AZ3AvuO8CdgMbDHPmW9dQ1kG9We/T9Z/ZM7yu9wRy8Kmfgkc+wEtRovHI++ILokdB90R3QE7nnNHdOPsOOSO6KrY8aY7ottlxxF3RPfCjqPviC6eHevuiM9B2XHCHdFlsePkO6KrZMdP7ojPPNlxxh3RxbPjrDviMxJ2bJUsjmF27JDMHw/eFttjq6Q9woBtwF/Adu5t1iWL6cJzpNsB7GRLEnOZ/hw/TG6IiWMgWbRtWNrwvCNy5L0b2APszZU3FnATRw3La/wmSPIO5fWLlOS9j9cp+K54Cb4f8QNcFsFlUYgf5LKhXHYI8cPMAweafmnN6F273zXI2QZnw661X/W8K+p3DqzjaiANPx852n9Sv5H+o4cEDjWmW3JXLI/hzZe74gPPaNg6Yrwde0/0yOx742wfW+dAN7eRY4YMGyh+XNqQRwq3ZbgsvCfmcYzngfR1RItcgdu1uSfaM8wNrnNcoiP9KLZRx5PrgK87DmcOdrVvzNRwi/uesc6NfvWNsZ2CwbXvHzjUyZv/MOB4MeoLC+PZT8mQWnfEQlnZe6L/uJH9A5w6B04YNMx/PHUdw35aduSwwMlObUYPGjZQVFVnIG2R9mPYPJ0wKhsTctRCadt88sCR/tnEURDbdWU/dZhdngh5EZ/+gXAlo53YZ5SHjBY/JKnOYExn9pum4wOHDXRqxX0UM3HMQin+qqyk+OzvRhPTB8XsWps+ambZ2vShs4Wepo/NnW4ibihhHTy/oun0W8HedNyos+m4bycYP26h7DijoihgKFvcdMzOSCyM53FzLlNIZOzv1rKZdS6tOHqBh63NSZ2OfO348zLyNH6AndTLYiyUdTIE4+JjqsP+1n9PmSMY39wTE+7+9WV3Y46kToUiewBAUfVEalN9XM2nkFoPorTnhjqm65PePMVSnmLnCQulo4dnX0mSFzxJDE9yVUyS9Jskn1gSl98m2XISSRzyTFIJSc6f/K0hluTtyd8aYknWaJCk0m+TnEYShaEs6gQcFmrDb3gVssPsAv+M8RnCD1tSZ+KwrB3/hF0xhFEp4rH4Hf6bQrdapN50CpnkSKQ+CqEi1cDH4bCvjZc4KDp4iYWy8hJdXmkv0SUU8xL3cth6iaO2p5e4TaqLl3hDbh6WuLqH4pYppjfARbR3FKHVI0y70xbKUvlcTbWeyms9k/fAbSRwdPa87WVKMoInGcqT/EQSRWPPRV6kXqe1UGJJqt6JUJkhmH6ATH2aSaw8zU2S25CUzhAs+LA3LuaMPzWgIPU8nYXSIkPIR+qtOCrgackLAOWjEMwsniHkz0PbisvzZZNfFKxzyI0/jFBANr1p2nif7J9vSOQDoUTNFr7fy78QNn6aeUM5Pp3HvwqP/WtXmFFjiip/b4e6VXbOVJ26nDFlQf4AHl+hspDsl2HVmP31L2rRYTRlVStK17tVpQf1PtKA+zpSrV8NF9KcBnb8SScf7qVj/c9R49GV6Eb7ZtTGMpWsX9Yix5XX6VWZn1TtoCOleeyij/VnUYuTtWjTizkUXSWA1NP70e0Vjajz7Ea0KbMRLe43h5y/nqIv5ZrQQ/1aKrwuH9nVTqcCPRfTqHKj6Nr0BmR9uSq18j5GWwYLVPNlPzpRdQI9fXWBmk59R58b5aeVnRbR9xEvqdzBfmTVZym5WnSlqVmtKGPvCHLSXKMGmRvon91lqG//FWRV+hnNXe9PYQ79aKnnUApO1lPV8e3J0tKNLnUtShcjxtPUx340YomOSsa1pitDYsk6LYV6zK5OiyfG0U7HNdTiwAMq2e067fDIR/ny66nudIHO1kmjdd4P6eSfdahK01gqOyKdtn7pS/XLNaYZ7y/Ru/llaFpIeRpeaRrdGv2NXGtOoqJNmtMRh/MUW3Iz7Ys7Sy7t1WRDfWjen63on7E1aeP5DVQX68LoG9MoetdaatjlFt3x+ETbbUtQ+4lZNGhzdQq4s5cGTvtCU6K6UfGiz0nXpis1uX2Xds1xp0oVL9PtRZOopy88frkYelegNJW8+oi2uulpcNnhtL5bf4r83pqmz0imCv7HqE7aQnqm9aP0uCs0soE19RGSqNjDO9S9yUN6uHEl3ajgTM7z0uhx9/Z0/lIdsvqnGKX+eZmK63zoQ5ldVCK1F9UqUo9m2w+g2V5m9HFZL9oXNYPKvnhPXn80J9shN2nPg2Ta368ZDe9/lQo4h9PN9dFkufM99Z40g7afnU39VQto0fggOrCkJ425c4pq7hxImdrLtHRmOlU5M4S6XGpJl+42IOeIG3S2/1KyvziJFFUcyL7VRorrEUfx51pQ+0MriIp/oKTm+6ham6f04xbOk6ezqGxoAgVcfUtFPD7S63fBdPh5LF344kyr8oXSmbEeVMv6MClbfqAF9ptor9NUqnVkK7VeeZam1qlNNl1G0bhdITTieTlyu7yGJhf7g9STH1Pmo4WUFrqWHj+bQ+vd1tKCNyOoX78GdPJHIfLaEE1DwkfS2HHNaGmfOrS16HHSPLWmpW6V6XNgI3LN50gFbcyordVQcnnbnVrvCaHA5+Z06nYl+vznThrtNY62FkunZaE7KXrFJ7reuSNdK/CenNbVpY9tp9OhgUPpgUc/8uxjQXMXzqAunapRw0E6GpVsS3W86lCvdhOow9gkauk7mpTWZ6j6x2HkMPgWVc2/mfoofCi6yX16OfEczf9anNqM+JPKVD1Ba4ZVo/MJkbTPwZdCHg+nBXcXkss4H1KEn6ZJ+UPpg2sArg+q0suxETT4bBsalNqU1j6YTduFtdQ89AcVnLeE3NQPaWWjzfQgYAkVP/YcvrwJFW1Yg3oHh1HP4FVka7eSCqcl08jgA3Rf35bcQwpTjxITacCOotT/8km6sDCGbD1P0Y33CmozoSq9OvqJ7lc4SQUc9tDCKrVp0OyJZN2kLhUKLUUdG++hMtvP0oE3+6l3FXsadbY91ZyyiXRd15KFMJusMz5RDc8lNMptPTWKzk82TkUpObYXfVwZR+f3taUOl3bQroZX6NnuBrR3ZSg9aDaUSg58SBOXpNPQxZ0o635D2r9tLz0q6oY1/zay+X6PBrUfTG/yHaNq/q7UrauWWusb0/CvMTTh9AdyXvWI9ga70uAln0hxuSh9q2BJd5+UoaaHw6lb6eXU4Io1dWj2goqcDqe6FY9Qxp5S5O0fQTfO7CClUJh6BV2hil8n0tTFClpYfByd39mZxox+TOmvcPn5R3eKu3eM9gw+QROvXaPr5mXo4LuatGT9GYrdN4nmed2jz33C6HxwJkVm1KYHrzeQ0FtDiQ9HUciFclT9/lHaXrkxrls20L7Oq+hoNwVVqxlNbYOn0738u2jinkI0tcc2KmZfnVKO1aRvT3/Qwvs/aeHpH/Rk4kiy3J1FHsEBNHd0UfoxX0/OHvmp/5C6VL3EPGp/6iXm0wFaPmo0rR7SiNy0vXD56kWuj4rRhZrNqXL/+nQx4Cq5Xj5O2pE/KJz+onwjn1DPB2FUfkxrGmB/g2J6z6GA/m1oRNdUWt/JjHy6NKSyt45R3XdxVGR0P+rj+oTm1tpNZQ7F0rY6DcjqWDi9PAgf9bk8LR/2hKrqJ5GNRTD8ek3yvhJGTjvW0+G/blLtPgUo+mszsrt3mf48nUgb75+hvcVP0aW/ZpLV8N5Uq0txqkpdaIZDBv2dfx45KAfRGvVSmn/6Id37UZ1GVD5KUxfWo3wfflKMdgsNHe5Nf1SPIO+4nlTzi4bu9FxHmRdWU8H2S8mp8U4K79aPHISDFOy+mhKczGjsg3l08eFR0vp9pPb+dmSWfwQtiYqkQ7pE6ojFUNnvhWj1uFjabtmEdJ71yTJlKqW2TKAO1b7R7UvxlPZBTdMGPaSNg5Lp7mk3Cl8bS5O6J9Gwf85Rxr0idKKxilqVaEVdJvSjG6c+0uiV5ymyVh8q1OINOXo0o/5x86najxf0/PYHqjDtEo1ZUZ+sUs+R/s5SGj38MUX9OE+rrM7QtD6BNGLfIboyejN5jJtK5+2G0+dru6na+Ed05OIJOkYd6fGhghR4ohI9/dOPApMXUcGiLjSzhA1NHxxKZtWK0dYpE+nHj9PUtWU63cW5+/XdIrT4RAzFrc0it4iq9G50LIWea0DJEV0pOuIIXUsoRPYLa9KYbvXIpetCWn/1H7rtFEMj+u4hj+qbyK5fAv1Q/kF/Z36nZU1G0eN5LvQiaQ5lRe+m9LfXqVb9i1S7UX9yL9+CSt+Np5lZBej7H8OptmMydY6eQx3WLyHfCglUvUsK6c7fJmXJNVQq4DgNWz2IqvT0I6HTW5phV5gyj9hR1uWPVE9TE3hLaX0S6EFfPxqybCOtrJtOF4sfp/7dN9Lf3TTUcfZ5SvawpQdjvaim4wM6UGIblXdpRT0+3KG7U9bRFl8dec/7Rl0ts+jp5P20sEIDct9XgYasSqEuaXtoVhV3uvR8I3UsGE7r6x6k3XcK0bB8XuR/KINmLNhFC9qtpa/XG1D5lYdp6qw/aN218uS5NYVSWnehvwMb05BXzejn5kfUN6kfTR0STicip1CXT39RjQUVSX2iC/UYbUXlq8+jRq1n08J/ntHTLUnU5rsn6bu+IMfCl+hcj0UU+q0G3Txzjgqfu0b3e+6n1ufm0dzmA6j8vCbkMjmUbPvPp+rtplKwSylqrrWnBVVCKEi1kCLintDT+1MprvFZqpL5kj4PwRhYqSX/7TWo6aqDdGqaksI7plDVBwNp2N8PaENoSYqotpqGXnUm6zfR1GKrE3VYd4kCZg2k6dMqUuGYOrTr4zJy6Pqcyr+zoiNY04yZ3p52lOxIR77upVmPbtOaB/2pWANz2NxKs//aRuPejKJGS6fQrOO7aUSd3tSqai+iem/oBk2irMwuZNajPaWODSZ17B0L5dbKnmwNzNbJNVsEsjcZgte1MnzZwa9jQhC7xRo8u3QGe+vB06nyFPYGRHCFWf80MHzm+8Ow+jk/qGfGP6jXy7Wj4cfFQlq+Yj8cqLUze1fpMNbwW+Mtn07ock5r/PDeJP4jZJcNn/i9prV5sNqw1t/Vcgj71K/W9WGL7ZXanBX8mzYL1+u12ku3qzvPGasR9EOjmr9aH6Odm3jg86yZx4QrLa9PKNLpiHbrw9TYjHqfBQp5NnlGwh1tuRcuw4OKIE4Fz74dc0cbduSbld/7TwKldizyT5E72j+XFCm38zriQc7uvY7f1l6PPqdsc5DFg0O69LmtPWFTu27rFYhTiYmJ5re1FZtVKLF1LOIhIfMuRdzS3i27Y713J8R9LLo2976ljau0fE/Xuoh7joht+ClJ65CyecRhB8ZH/Ni1OUnbrvf5ToM+fRQoYmGjlS2TtN4uK44MSUb8eFSjzDc3tQ9Del3WnEA8YHmLq2tuaoNK3X3ffzPiYaeKl/W8qZ3ftZV9V/apveBW6Y9f3NDeHPH86tqBiKe6upcOvaFdNWPX48qtEV9wb8k5jxva2S0tm+mrIx5StdrfL65rH506dL9CYcS/eNUYtfq69s7Deq2Xf8hEPGbDEPV1rafzw2vNkxFflx6a+CZRG789SOdxCnHb+yV2bEjULqqcGjvjL8SPD+z0rHWitt6cpEr5FiCeMa9lhVfXtMqaJUtfHYV4VPEJf7S+pvUt0ejm3c6Iu9o2bRF+VdtzTnSLqo0Z/6JFQfOr2u9fiqqPsI/WZUyq9pffFe3BTI97s/IjHrJaYaZL0C7/2a3P8rcfYH9h12pOCdoX7ZRhd2+x+MylxWde1tY4Y6vzO4V44s2Ei48vaY/fm1Cj0g7EQ+xreba8pDVP3HqlwlLEM8oMnRRxUes4Zc65XhMQd/UaNsrmovZxg31trvZBXNdyp9PYeK1nUvt1k1sx3iF6+e0L2kqX9Vd710Y8YIDquOqCtk3BbRMmlUDcr+HGDdvPa0MaeTSMN0M87Jivm/K8Vv1l9ckOr95Dv9LEP8ef017fXdK8wC0WP7t8akqctvqPYxFfTyNONzq6tIrT7i1tM8VxN4vP1iyKitW6HnHwG7eKxduMWF86VvtxW7du3/5E3DM8xHf+Wa22SZmNh4ciHjb5S8yHM9pTH5fP3tyZxV0qx/ud0TaxurjnmAfiTp+7zbiq0x713F3DrDrjf7ZJUem0ddQJayYXRTy4reZUN612Y9aNMk5mLH/PNVYNT2uVXu3bZL5+h/hXj3XFT2mH+S/v9DEZ8bDkDkO+ntROm97NruI5xP1qO01OOaF9UeVy4LSDiAc7P4/VxWiPlnKxMduCuG7c4VY7j2tPBRydGrUIcYo8bLb0mPaoJr3yokks7t7yXeBR7T23dvWXDmL680cV6ntE+6Bf1ZCYjoinbnvY2yta2+5GnfBCArM/vP3duoe1977ajlvswuyf+zLZ6ZDW7chrZ9dSiDsNWNeq0EHtgXpz7n3Pz/K/MXzktwPawyM6FH77MQP1mfTH0nv7tFe3Vu9j+YR9wHPuk9eavdryO1wGtriBuM7ec+G23dpS6x5P28U+LaYzr9t9wS7t9QbnZ9c+gHjw7SF9x+7QNioStu7+Zhb3b7Oo93bto+edDuxdwvIvOuifNtu035071N46lfGvZunGbdGWXF5/yZHhLN6p07suG7QuX1/veNuDxWdeG9B0jTbE5fqVNm1YefYs+e68Urt7X8b58+4s/tVpqtsS7e46k4v4Oxv4PvVLztF6jX9ZtVIJFn991sI+SLv6oIOlworFK022VvhpS32r8rlcajriIXM+pI8RAl/2P+u4jcWb1lenzBdqrZ8ZZTsQ8eCzcduvrhKu7Hur+lSZ8QsdzmzdKDwvssIi/gX7MUm7q8lR24S9By8HBe9HXGeW2GvRDmGjzea/SgUiHpzsObv3buHI+gKzVzRm8W7pw6vuE7pu8LNONWPp1z1dNyFKWHdy0lOzS2/QPwX/+dj5kGCxYpry/co3rP8XP6gVLVzt/X1wZG/Edd3m97A8Kmx+2HePS1XGD68/8R78ussIj9HvX6O/HTs03xsjmE/e9deo0yxe8OSFoJPCKKuGo6osRtzpeZ0izU8Jiu59ToV2Z/zDsW4FtMKSrSfrHqmCuOeKGkWH6ATh+eu3sz++gv9ZOWtu6zPCmTX3J/yIQ9z10pXRVc4Kzn/Msym7GnGfczvvWMQKLh7p5x77I25bVxX7KFZYvODiEK+GiAdPGdHgRJzwh2uZ8m2tEc+47txo1Tlhevr7uWn3XyJeotKV4eeFv5r6uZU5gHjI4NdfPC8Iu7rfFJ7NYnypj7qi8cLi8dbpnt0QD/7kW+1FvFC17d6Q6i6Ie34xb3DyonD9/aoiYWaIk4vjm8WXhNKq+5W23nkBf2fWu2Ovy0LIwQv5Ku9HXKdJGFItQah9de37WnMR9/O6Vf9TgjChbfjbE70Z36reqTNXBHev55vP10M89dpxsyVXhWedhtT2Loh4SHGddZdrwuY7+mWdnqXBv5ezH1koUZhGCVuvahFPXFXo+NhEoVDs6Xu69YgHzNsyIilR+F684p6qgYxvW3d+g+uC1YbDkeSNuFfFIQXXXRe6ePintamOeHBCqv7LdcHPPHO1mSXiQwfe6dfjhlBte+rAyo+f43zoYO0ac0PYdyRl0uHTiPs1tx1X4qZwtvLaIXs2Il7i9agqk24K3SyLv88/GXHXA9+9b90UbIrcvn+pK+Kptf95WydJGHHU24xsnwmqXs1WjDSfrlod3d6CXJ8J6j7k9VK7VBWUFFqQfJ4Jx3bcnrdrxjLVvjEd8lPAM6FdZd8RL7P6q/YXfvRTv/yZ8KNQj3ZVp0/TaM4NzE9RzwSzeyleQ88s0nw607ssJT4T7Fa12ewozFZ5fMr3Sp/+TOhc83EpRfB0TfDaeYXI9rnQabL12MH6qSr7F0Oy9LWfC5Xmn6rymJaohtvNfKT3fi7cMHs3eoX5aE3IpiGFKeC5ELjJ98rYrCGa+vHTv+mXPxdmKz5uOXN6purZWaef+gPPBf9BCdWKTw/Q0EXhjf7ac8Fx8VSrccHBmomlqrzQpz8X9n/dPMpZt1SVtn2TgmzThLrtnna8MWOharnLquLkmibM/OB69MXPRZpN4+takk+aoKnvP0KrXag6v7CZEwWkCROm2n3w1y7WKCZ/fKVfniZ0u9z0r9G0UPNIoalAUWlCgbap7o/oT82i0jZP9dfShHxb9a3G0gJN82UrsvTpaYJ7wJTEqTNnqy70+1aWbF8IFtGPJq7wWKiKmdqqCLm+ECaar2vbIXiGakz+t8/03i+EWgP0dzOmL9dct1c91I95IZxwr7Jmz6wATcFFLTP1y18I6RGDVpQOnq/xqLXugf7AC6Hhqp6LUj3nawZ/b4P6s/G78YzVVUHVcdM7J8p4IRTotaDqHmGRxjKqpR3ZvhS63uu+3ksfqPr26WR+cn0plBhVY9He00tUk8ustSWfl4Lr5KAHl34uUHnV+liGAl4K9/cmN52oXq7pVLeHI4W8FOwnnp1jrl2maevhXZ2iXgr9BL1K8WOY5nrZ/Xf0114K0QEh9s89ZmmCFB3f6tNfCtsfFkr1sByu6lXQ/76+8CshpkA593jLnqpul/b81Nd+JZRRVQwsazZZk3Ji9V299ytha/V5Q231kzWb/LdUooBXgof3vMSW+kUqz2Lzv+qXvxK+xp5dM+nnNJX3ZcUN/YFXQlyN92+r6gdqWvZW39BfeyWUf9nk7TH9SM0j64Ff9OmvhN7KWmst1DM1nSce+Vtf+LVQcvix0EFnFqv+6fbtnb72a+HNedel6T8HaSo90abovV8LE1q/1gwV5mg+x/i+0Y95LbxO7Zyxffoc1a3l69H/r4V3K78utZw9XrWhfOXyFPVaUBQqMWjZj6GaTa1CH+ivvRbGvbzgeHr6MtXEuB8v9emvhZ8Ltu5rdHqZqsaXDcXI9o0wtmdMxIo/J6jKfC5ckFzfCPcuBAwLObNQFVd48ku99xvB5mf3cw0Lddc8nZ9SiwLeCC0Kn2l/O3iGZs+slPIU8kbo3ftH6PJpgZrZ5iOS9QfeCNP7lz9XZsYSVaPWI6tR4huh80H9oS1mC1QfQ1o81ae/ERYmdDp/g0arQj/tvaIv/Fa4Maymk+fsGZoH8Z3u62u/FQZZlb50hqaq0os1e6/3fit03BsaFaEfp7LruyhNP+at0ON0+sHxn7ppCuq32FHIW8EsXtl3afAcTYviOx7pD7wVjjg1v2WJK7xtM+xLUeJbYWXvrn5fzH00cZoT+SnjrWD3rH6fFp5zNeZLp3zUF04X8q1Ib+T23VtzYdHTsuSaLnSxG/8+cuYiVWi9WR/13ulC8wt3ktTCItWIdruz9GPShQlB6xwzzQdo1HFf/9YvTxfaPp+Uef3PSarp/6Si/9MFt+3TNpQ0G6PZ8mSSIyWmCwcjr7Z9O3Osyi029bM+PV3oOT/ArGG+0ZrRfv6Z+sIZwr0Cjm32TV+k6T5l3gd97Qwh9VBW7LAZazXFC2b90HtnCL1CL9f7qV2rmtX+igUFZAiXuz7RzaZZqrTL7zH+MoRSExqefqQfpfG/Z2NGURnCqyrP9s8QVmjcb4abUWKG8Hmr1+Rvfwarfvy4902fniHoRtwOyKeYpFnz44SSbN8JA5Sj5iQFL1P1yXz6TV/7nZDe4Megb9rNqrsbbsH/vhP2+9gHTKINqg1dysP/vRPePvzn8dcfS1VVfKtm6Ze/E8aPa5LiSitUPVRN7SnqnbDAzCJ48oz1qmNbqn3RX3snDFmydW+dr/4aSlqUqU9/J7zqtWuzdsYqVfi8xTZk+16o0OvHihHBW1UWzefC/78X6mq3vjqrX6Wa80mj13u/F8bVqjX9udlE1d3y1T7qx7wX+tvMmHgya4ZK1XiVA4W8F2qozVWXzMdpigzs4kBR7wXzcu/rzgpeqWnS6ecr/bX3wvsUb/fp+gWaNfuOKynjvXBO7erTUT9Xc+DxlO/6wh+Ezc59F4ylmZoZ/SIx/z8IRY8dE/roV2i6DtlpQz4fhFOzFleYNWO1qvzn73YU8EFIuFUw7gQFq2Jq90D7fxA67jpUc7MQqml244GCoj4If7tPDBgxY66q28VDH/XXPghu9lrbxuZTVCWiozD/PghRnQ4OHjVjnSrzQJ2iZJspVJpbsl/DL0NU1Ra3hv/PFJp3TBn3zGy2amD06ud670yh58JDx4fpF6pSJygw/jMF3/dnNx7UrdY8PzMmXb88UxhXvfF7a8+NKsWu00/1BzKFln8W1B7Th2oeVrUtTomZQtPhKWMH6dZrHntkFKaMTMGx81zlwhlrVdfbptiT7UehQfjgsf4KP9WUqvmKketHwbpOxatXtWs07QLuv9Z7fxTubMuXb5z5Qs1u337p+jEfBftBFws9025U2ds+K04hH4WQ9AMzz01foFrpcdGCoj4KOhttASv1Vo2mZJsylPhRqNa68vfqM9dpFk45/lyf/lFQDHsTfGx6qMbskNlf7B5EUmkz+lKafzzH0YxizIlOsDfzwLNneFaQuQAK8PUQnmQ/Yc95w7eXIPMDrMCPRHgK3GmJfiBk64AwIBLQss/KcN6wzQSyZCAVSAPOgDsr4TMgcyhjRo5AJYB9FiZOwrtA5gP4AQHAOXDn+QPYzqVM31DTl+QbFLheENJuAsKBSOACdOIl+R6HLAV4ArwGLoK7xHnDb4BCVqKsGdmg3k4IL4NLkPDOkLUDbMH7IrwC7irn2XPS3pAFAwuAEOAauETOs+e36yDTAA7Qj0N4HdwNc9NP1sk9xn6bZaF0tPrtY+w1PyyUc8wqsefY4oYOmDM8ci+HbgbqASrgJoRJkm5uAdlQoASKE4jwFrjbkuaaBlkYEAFEAXfAJZubfumQ2dDysuzlew12/kRxK3g+6WZ6H6kZf3K/10t8cp+IJKWGeJkSdOIJPvMEX1iCw5IEo3kCPU8QprdQbjevUDN7dRNRxEwgC7ByMqO7EN7jo6ZLK9MWlWEVTSOoqzXfJ8OrbAu9eoAn4APch36KpEn8IJsDhABRwANwDyW8DrInwGv+mb5H4FLNs29wYf8d9qf/2vjCYq3/vsQ3vLwQjOnySm+UG3cASDfOZPJfQSxUkO0RNiP11ZkKti2jbHlSp+Cw7FOewAIJgnmTGLcMZDqRes4shfKnZScvU3P14xs2jM1si2rVA1SAF/A3hI/NTbwvZEFACBAG/APhE8moi4AsAUgCUoCn4J5J+CeQWVXAJANKAM/BpUkmkRNkLQBHjNp2CF+AeynpAl/IgoBgYAHwCtxrSflCIIsGNEAc8AbCtxI+AbIM4Av/ulo6hBmS8llB5gLUA1TAO3DvpbMKsqFAABAEfACXyfvuc1lTuw7Pb3Jehr2DSBsORALRwEfofDIX0/TOb9qJ1SmHng5pnwCvgUzgM3tNUdIe7At0lQAXoB7wFdw3Ca+CzA8YCgQA38FlSfggyDYB4UAk8APcT0l9oyFLBpzQH08Q6vkHkBwkY6ZFZeQPBADTADPw5hYmfg5kEUAUkARYgFNYmBxvCv+6XSXYsEKYD5ylhLeFrB7gDF6FMD84K0n+LSAbCgQAQYA1uAIS/WDIwgEX6EciVIKzsZDUEbJkwJXVEWFBcIUk/GvIbKtivAJOQGG2p53zbEOPM2TtAF/AD7ADZ29hcnDB3MFZtxEdXMhChbLU356mBCt5giI8wXEkMI9oReo4HLTa4GnyaMtbmqYrC4fC3BIgDDgOFGFdYyHmGs5zLcNzXbcIuV5CruE46LLd0zRY17XMfqaNQ05pQAb/3GBRZFfMwsTbQOYKeAK+QHFwJSwMHyOesxhuqALfPdYZoyQxn5nEr4UK9tVJHckSHeU/mRrLQkuzbNuhMqqROhmJRhi3BSpyeEdjwuzbCk3bCBU59leJ4d1s6TtVF9MMQBiQH940cQkaqGoB+FIcFP7G6cI1iMIY/YXRXSqgjktR/PlVePERJubPXsdQR9SRJdrGEyVWyd0QrkiUxBKN5omOVcndEL2QKIslusd/ULhkgdzmPpVGny5Doo880dACuc2FIFECEtXX8UQ2BXKb05SW3+epIHXEcoVyeF7dIZ6sYv9ldxj5TsfLzn3VMf5XejaL69Tnv8TbQFxrbAlRsD2WbWqaliNOPEkBnuQ8S2LlWbqjKUkLnqQKT/JWTDJOkktXnqQeT7JmhUJ5sqiVZ6eOphUHK3AoRvZxQAfEAyUxwkvxWcD29yVClgnUg9vIQlganKOEV1SDywLcwbsiLAOurIR3h6w3oAI/CGE5cE4SfiRkIYAn+HUIy4OrIOHDIIsDWoBPQFgRXCUJnwTZF8Crt/jRqcrgqkh4K8hcgHbsOgFhVXDOEl4FmR8wFAgAqoGrLuGDINsE+EA/HGENcC4SPhKyRMAXfDLCmuBqSfhUyBQ1zKg7eBuEtcG5SngHyNyB3uA9EbqBqyPhvSAbCfixBS7CuuDqSfhpkIUBg8BHIKwProGEj4IsCUgBngANwblL+NeQ2bqg/tAvgbARuMYS3gmyFsBItlRB2AScSsL7QhYEBIAPRtgUnIeEXwBZJBAIPhoh23LqKeE1kKUCaUAGoAbXTMJ/gcyxJk6bgAvQHFwLCV8Psu5AEPL3Q9gSXCsJPxSyJcA08KEIW4PzkvCbINMBweDjEbYB94d0/EOWCcxh4x9hW3DtpOO/FsY/sICNf4TtwXWQjn/IegNL2PhH6A3ORzr+IQthYOMfYUdwnaTjH7I4IJSNf4SdwflKxz9kX4B1bPzXNqMu4LpKxz9kLsAmNv4RdgPXXTr+IfMDwsAPRdgDXE8JHwBZKBAOfhPCXuB6S/hwyOKBCPCJCPuA6yvhkyHLAiLBK1zNqB84PwlvA5krEAXeHWF/cAMkvCdkg4Bodh2PcCC4QRI+ELJ1wHHwYQj9wQ2W8BGQJQAa8EkIh4AbKuFTICM3jAG2LEM4DNxwCW8LWT0gji3LEI4AN1LCt4BsKBAABAGjwI2W8MGQhQORQDQwBlyAdPxDlgqkARnAWHDjpOMfMsc6aGPYr4RwPLhACe8CmQ+QAL47wgngJkp4P8jmAInglyCcBC5IwodCdhxIAq9DOBncFAkfD9lrIBl8JsKp4KZJ+CzInOrCv4B3RvgnuOkS3hUyXyAVfG+EM8AFS/hBkC0AnoAPQTgT3CwJvw4yDZDG7jcgnA1ujoRPgCwDeA3+C8K54OZJeKqHdgMywLsgnA9ugdR/QNYdyGT+A+FCcIuk/gOyJcAX5j8QLga3ROo/INMBWcx/IGRvKC6T+g+Wdz3xA9BZCJeDC5H6j/poN0AB3hXhCnArpf4Dst6AFfhBCFeBC5Us+0dCFgLYgF+HcDW4NZJVbBhkcUACkASsBbdOsqxPqc8+mwN9wAFYD26DJH9HyDwBW+TvhXAjuE0S3geyQKYLfhrCzeC2WIgfsjVeuoQ1RBmABCAJ2Ao+THppBBm54/yDPKwQbgPHbkaZk6QckHsCjqwcCLeDD7cwrehZXbpDPg2YAywBdoDfKalrKGTHAR0QD+wCFyHhEyHLBLIARSMz2g1uj4S3gcwVcAc8gb3gIiX18IJsJOCEMgYi3Aduv4SfBlkYUAl8BMID4KIsxHcSfl26Q54BfAEUjc3oIPhDkjxsIHMFnJGHO8LD4KIlvCdkgwAX8CMRHgF3VHIZGQjZOiAMiACOgTtuYbr/FwVZErMB/RSEMRCekOg/gcyqCcYDUAI4CU4jGW9OkLUA2gG+wClwpyVt2BuyYGABEAJoLcTPef+6vwiZBqgH+3EIz4A7a2H4cZaUnVj9txJ/ioWGIAzmL/YMNvw9EyBTz9mlUBZ6X5K/MV5SfDtoK4QWng8b4IKF0Rv4RVnzUiJ9wUCfAJ2Eo9OWlRqarhqLNDR9Xce8ofiNY2NbfEH5HFVoK8AHYJ8Fj5O0hR9kcwB31GUJwnPgzkvHI2THgTggAbgALp5f17I07H2YDMgdmuLcgzwcEV4EecnCxFeCzAvwBO+D8DK4BH5Z3qCGqR67a5iuqZled6SdBrSA3hyEV6BzleutrWnS21kzu14I0kYzm9DTILwGnUTJ+IiH7DXQDnwmwuvgbkjKmwWZkwfKCt4Z4U1wSTnmQDvIA4AgIBi4Bf62ZK6zcRICeTTgy8qB8A74ZEnbx0GWBmQAX4C74O5JykkC5iHgAtQD7oNLkbQ9C30gDwSmAXOABxA+tMh+FyEU8uOADogHHoFPlZQjEbJMIAtQeJrR3+AeS+8yQOYKeAI+wD/gnkjKwdIEQB4KbALCgacgn0nyiIQsEUgGUoHnFuLr+EY+DTIbNcYR4Ai8APdSwleCzAvwAboDr8C9lo5jyOYAS4BQ4A24txbi+1qsLQd34q/j8hvoW/bjctTRM76r6XI0hF92ZhlfHGRJXDyr1jUlmeDDf4XQ+OIgkoxXeVrXzX7BehwFSAEy1OKXidNRkAxJp7CBZAt5PaB7H/Y9BjN6B/59jpOFD+SBwDRgAfABfKYhjTo4SqEcklgWjYnJF4KTmq4cHB5OCj5Ab3aixoDyYydkYAGOo5jTroQGQid7IS8/NPhQcGEoox8umhPhKKwgDwE8kWYkuAB2kgDUGcya108s6x1QPjv21U8sKxEOBZ4UR45FMZQRvgZG4tjFHjILDCscayDrXgzWEWYhDMqHUhaBi0c8FUhEmkyEXxgPqJ8cVCgfmrGf9VtUVGyQmThVH3YX+6CbJ1H52uLo69YUDaIQZ//JlkRNSok9fpUfs4ae2kI8ZiuVf5qKx6xxbbmczdQ9gnjM7sRENxeP2cfj1/Jjdje/RxPxmD1FmsCP2TvB33ka9q7wcJV4zJ51eLYSjxcUwWqb22W/ieOF45NFSZ14WKE0CyZ1SDTCfKTehNAcDa+OxoESvUNs9JRoDkkCS2KOswtCq18/OaEOO6JQWrPfVgvu05GdfKKP8BzicWA/mbtHlssX9oNeClJnglCIysePimbjEJpPgVIKDgoxs1PZzy39wRVYKpBzjimU+Qy/w4HccbzIgv0oy3r2qbaecAio9q57cOCod7it5Cskxh+/yYLjus/vdvETYh80jytkl+G8VY1y60RBJyyHTkforIOdskjv2sg0LY06idDJZDop2fWyuC1HDKfuElvmxg9vSmz5YJQH/cyuH47uzoDdTIynwfnF36EyPicw3Bf/gTnP9bs/yK7r0VTUHVgVDs0+t67rb3Qfe4i6z7CQqFrKVG7jK7E+Pwztqk49oVA+M3d/hN4AbB9lz2W5IObSrbQIklhnLbAAucTlKEEAZNN+8N+ZbiXq70QpvBtl12eIkNE32mabLNnIiCtL1LBs7l6O/5F7ZHziOrHlsKwsl1snTUanBVo5ETqT4BhcHXK3stVPUysn5ijjEziCEHCP3TDh3UQzUnvO0I002VMnnlIoH5uxMc3GKBtzbPywMcD6kvUJa1HWKqx2rLTMujMfU+zFbB1K+g9KOqGxydqvLwD8NNXONUdJLzQRx78L/JeHVe7xr/spP/538PGbhfEbJDN+U3/KjkG1TqtQTmQFYhmn8gpUaiNWYBEqsL62qQLGyRShN1Ug4kHu4didD6fPrriybZR9UDO8FvXVOp1C2co4pq34bz7GI0wCUnncSiVm9g1Lx9tWpswseWY2iLHMQs4olMVYZt31YoauejHTYLjCKJAeOXPuyNuscAeceiyzj3oLw+96mP2qJjJSB59VKKfnzKQL72wV6jpF7GxrY1sxlDAzZRKFDJONAx1yGz4IV3mIeTytQ/RV3AZgZi5xAu48jzRWzViF8rZlKlraSqbl9/Lh0wC5BObPPfS6S0qTc+it5Lr5oXvOMrcTCJLRLWGc0HyCHcLk2i0zwdYhFpfz9KAWm/8f2NpTKfeQPQ6dsLycTguxxZqjxcLcctczWWIvp25LlahbC7oTlLl1v0jqmVOXvVHB2ugxloNm5XLrljDPu3038vaNhu5VmfZ1N8+7fSO47izojs3Rr2ykBMjododskLnYC8u5fkvon7XMfYKIkNEPgWwT1w/gfVUXp9f+6tx9FY90eTnfVp6irh+WWA09c+ummZv6KqduXa67D9fKGU6528zKwlTuLzl0O6jEOrOfwLplk9uVOrPFa3ZXqs64qFBuycf8G/NRzLUwJ8DmMJuDbPawWcBGMxudbKSwkcZ6nfUe6wXWkqw1WK1Y6ZwtxBaczOf4GIQ2JXP71HYWplYIxvI5gj9TNNbGjI/aTKyRr1mZ9I1fuRgp0Xe1RFmBYCACSAS+AE75sWTPnz3ft/xU/BCn7g8yp+8lkhY26uxXizozKxOtqZxbJ1JGx4b7yR7wkwtkTooJFnnPHFu++NyJxXukdW57r2Xs+bcWe/+ZI9FSmYWkjcJM9kTq6Cnq1SuDWSoz4lwUeZfzMmZZADgP6Dazyr0IbSfRDYau18Ps+sf5LBuL8j6WtKvxCjdZYZhl6m3XFMoVZphEzkAAhD4I1ynEJtEhTODHZZuJGW5CoxVulv1EzDJ0z2eatmxSBgFfuK4TOBc+CC14wWrD9ThKXLWC59M9n3gO1iUqlKcdDU7zN7mxoc6GKxtabKiwrmddyJqHVZGViuXIusiF68/kJSiOEuyvlLtbwqzM8lxj78Pw8QG3F9dya8RvPNlKh48OusbVn9HhBnGdI0jfX0YnVUbnQgtRZyLW8Q9dc+uwhUFOnaVc500frFJr5dZxktE5yXX8YOeGjB1PGZ25alEnFm13qFJuHT8Zneu8Ddrgeq+hbW6dYBmdIk1EnXI4yRSyNOn86ieJTsDD7LqRnqLunopEGyrK9JOMvdSWoo5HQ0ynhjL9JKNTiZfRDeWrZSnTTwVy67zlOvswrTdYyfSTjE4Ar891jNnz5WX6SUYnket8YF8Pk+snGZ0dTUUdRTEsUIrmbvNgic66HG3uxsfFDtjqIGMvTMZeYQ9RZ0MJ1LuETD/J6DhxO1Ngo6mMnVQZnedcR4kr2sbOMv2kzK1Ti5dtJcollMjdFk7KvMefH9fVQm+sjK7nb3RTmou6C+yITleX6TeZsjbi9VuI9ugq0ybBMjoXeF+PQF+3KibTXzI6hfiYcsLpLJ+TTH/J6BTjZXsJH1NXrr9kdI5xf7EDOrcKy/SXjcx45+22Cr4vuJrMvJLR2cT9X0OMiw8yPtNTRmcb9xO1oNOsgUz/yOjcE0SdylgWFS0r0z8yOvN5G1zAOSNA5rwRJqNznvfPPbTbCzm/J6NznY+DARgDPjLjIFVGJ4X3aR3Mpdpy86lgbp01XKc7fJ5lZZn+kdGpyOvzGGPthsx485TRacvtrMdYGyrn92R0OvFxcBRjQFtTpn9kdB5zP34E9Vkm48fDZHQOcJ1CSK/PL9M/Mjqv+Xjrh3OSb8PcviS1YN4+uTT3Q8HwQS4yfogK5e2HOnLdQ9AbIOf/fqOr4f12CePwkcw49CyUu56ZvN/KYF6NlhlTfjI6ej6vimBsfCon028yOoX5eJ9oj3LYy/SbjE4an4vs95b32cn0m4yOmrdfONquk8y5LVVGpyUfh+EYh4dkxiEVzq0Txe3sw6XglpIy80pG5yvXaY22XlVKpn9kdE7z/knD3P0sM3/9ZHRsuM7PrvB9cuclGZ3rvGzPUZd7MvUJk9G5xu18RV3+qCrTPzI6Cm7nBHSKyvWPjM4xPnYqw08WlfGVLJZTZwMfO2Hw4bNl/LiTjM53ruOL8ekiM0Y9ZXTmeIqXtqlYHz4vn/vS1s8296XtM/7M4JgDzoGlct9QCbbN+wbWKk/xErVON6JSFUyXxb/W57bZL4sjct5J55fisbgeSJZ5DqSTKe9ufrvAGeOvqcztgtTsOuqQNwrl0QLsio5dmbErLXblxK6E2JUNu1JhVx7sSoJdEbAVPluxsxU4W1GzFTJb8bKVK1uJspUlWymylR9bwbGVGFtZsZUSW/mwlQxbmbCVBls5sJUAO7OzMzU787IzKTszsjMdO3OxMxE7s7AzBfP8zJMzj8w8K/OQzOMxD8Y8EvMwzGMwD8BmNJuhbMaxGcRmBBvhbMSyccJGFBshrMdZD7KeYK2ZysdQB34D5WVtoiWSG81GKOzyvjGx3EPsgQGYmYElc/dAJbvcvcbyY3LDreGmov5FXF0kFs2t7yWj78V18zUTR9zsMjiTOue+8TPSLu/RWrOFqHvFBZ7MJfdV/5Lf6I7gugK8smut3LqRv9F1U4m6iwoQTSogc7PqN7ov+Q219Zhd051kblbJtFVZX1HHDmEJ39w6Nva5dVi7sTqwsrB2YPmydGT85C/ya9JdPJY+lDA8kbTPfiOqe5HsNwU/8zo8wNn5vczzOR+Z8hzms3wjZniUzCwPkNEpxsf0GYzpAJmbgiH2eY/pXS3E54EzoDugtszTZXvTHaFfNxK5vV1IP1DGXuJv7LXjT4uckMdOmdv3GRLdnF6zGJ8Ds6yJYmTmgG2RvMfTDf5oRetGNFfm0YprkWz1VCd+Vig7sA5mncQanTUiawxWOVZIZsyVd3jFpmKDbMDpapW9KXMFv0mYKRZMHfVFoSzERkowBBGALXv9FMLpKYgkAmk8Ry0/Od2Gmzgh42ocHMykj1rF24teYvOUaCwi50mpnkP2k5KT6b6pOvWrQnlbwcrJUrHcDUt2LL9toXGuPk759U2nSGMpujvkHowZzUWdtjWwDKyRWydIRmdQU1GnLi53hxfNrmP4rrpEZx2Ow3n5mrYQ9Zbgkndrzdx6aRK9RHbM9fry516f4AxfupgmtrGMVkVl7tZzW3tcsdR0zV0vZ4mOcVnC2ofVl5WflYXly9IR/744K4Mj8pohcyJqV/Q3k4jncZ8P6isY0MtkBnVA0dyTdx3fZvEnRljdprknYEjRvG8BW/Eyj0GZ58hM/Cj5Mqt1PxXK92asNCz3KF765nwrwki4kRoyWxGSiub9NCyJ5zGZ39D2xqgZJvNE7ctv8vDmT8Wm2uD0JvNErUSxvJ+oPeTzk2C3osyGE/di/FZ+cD6lvcx+E3UqiKPmrHjMDEtuGLStxWz1OHuNktlB0rtY3g/qEniROmAgLPLIrTvtN7rf+aDQYD3bSGZQbPqN7hlfUfciwhjf3Lqa3+ha8e5rnJ+ovMzD65Rish5dHTY7n9KDNQarFCucwQhvxNd838QNB7aLO3ffBBUXn/+8QyZ/mSHiDPgUz37uDuLxh03EHVEpcC++MjtJNhUXS5iYY5pt4vrkITrllm4icj7M0hU31ZA55JwPs8D/L5bGAyw=",100<wasmString.length)&&(Module.wasmBinary=inflateBase64(wasmString),Module.__haswasmBinary__=!0),"undefined"!=typeof __ctx&&void 0!==__ctx.INITIAL_MEMORY&&(Module.INITIAL_MEMORY=__ctx.INITIAL_MEMORY),"undefined"==typeof print&&(print=console.log);var JSHttpGet=null,crypto,fs,os,process,CLUSTER_IP,CLUSTER_DOMAIN,JSHttpGet;function md5(text){return crypto.createHash("md5").update(text).digest("hex")}JSHttpGet="undefined"!=typeof self&&void 0!==self.onmessage?function(path){var r=XMLHttpRequest?new XMLHttpRequest:new ActiveXObject("Microsoft.XMLHTTP");return r.open("GET","https://www.fmz.com"+path,!1),r.send(null),r.responseText}:(crypto=require("crypto"),fs=require("fs"),os=require("os"),process=require("process"),CLUSTER_IP=process.env.CLUSTER_IP||"q.fmz.com",CLUSTER_DOMAIN=process.env.CLUSTER_DOMAIN||"q.fmz.com",function(url){var tmpCache=os.tmpdir()+"/cache",tmpCache=(fs.existsSync(tmpCache)||fs.mkdirSync(tmpCache),tmpCache+"/botvs_kline_"+md5(url="http://"+CLUSTER_IP+url));return fs.existsSync(tmpCache)?fs.readFileSync(tmpCache,"utf-8"):((url=require("sync-request")("GET",url,{headers:{Host:CLUSTER_DOMAIN}}).getBody("utf8"))&&-1!==url.indexOf(",")&&fs.writeFileSync(tmpCache,url,"utf-8"),url)});var moduleOverrides=Object.assign({},Module),arguments_=[],thisProgram="./this.program",quit_=(status,toThrow)=>{throw toThrow},ENVIRONMENT_IS_WEB="object"==typeof window,ENVIRONMENT_IS_WORKER="function"==typeof importScripts,ENVIRONMENT_IS_NODE="object"==typeof process&&"object"==typeof process.versions&&"string"==typeof process.versions.node,scriptDirectory="",read_,readAsync,readBinary,setWindowTitle,fs,nodePath,scriptDirectory,read_,readBinary,readAsync;function locateFile(path){return Module.locateFile?Module.locateFile(path,scriptDirectory):scriptDirectory+path}ENVIRONMENT_IS_NODE?(fs=require("fs"),nodePath=require("path"),scriptDirectory=ENVIRONMENT_IS_WORKER?nodePath.dirname(scriptDirectory)+"/":__dirname+"/",read_=(filename,binary)=>(filename=isFileURI(filename)?new URL(filename):nodePath.normalize(filename),fs.readFileSync(filename,binary?void 0:"utf8")),readBinary=filename=>{filename=read_(filename,!0);return filename=filename.buffer?filename:new Uint8Array(filename)},readAsync=(filename,onload,onerror,binary=!0)=>{filename=isFileURI(filename)?new URL(filename):nodePath.normalize(filename),fs.readFile(filename,binary?void 0:"utf8",(err,data)=>{err?onerror(err):onload(binary?data.buffer:data)})},!Module.thisProgram&&1<process.argv.length&&(thisProgram=process.argv[1].replace(/\\/g,"/")),arguments_=process.argv.slice(2),quit_=(status,toThrow)=>{throw process.exitCode=status,toThrow},Module.inspect=()=>"[Emscripten Module object]"):(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER)&&(ENVIRONMENT_IS_WORKER?scriptDirectory=self.location.href:"undefined"!=typeof document&&document.currentScript&&(scriptDirectory=document.currentScript.src),_scriptDir&&(scriptDirectory=_scriptDir),scriptDirectory=0!==scriptDirectory.indexOf("blob:")?scriptDirectory.substr(0,scriptDirectory.replace(/[?#].*/,"").lastIndexOf("/")+1):"",read_=url=>{var xhr=new XMLHttpRequest;return xhr.open("GET",url,!1),xhr.send(null),xhr.responseText},ENVIRONMENT_IS_WORKER&&(readBinary=url=>{var xhr=new XMLHttpRequest;return xhr.open("GET",url,!1),xhr.responseType="arraybuffer",xhr.send(null),new Uint8Array(xhr.response)}),readAsync=(url,onload,onerror)=>{var xhr=new XMLHttpRequest;xhr.open("GET",url,!0),xhr.responseType="arraybuffer",xhr.onload=()=>{200==xhr.status||0==xhr.status&&xhr.response?onload(xhr.response):onerror()},xhr.onerror=onerror,xhr.send(null)},setWindowTitle=title=>document.title=title);var out=Module.print||console.log.bind(console),err=Module.printErr||console.error.bind(console),wasmBinary,noExitRuntime=(Object.assign(Module,moduleOverrides),moduleOverrides=null,Module.arguments&&(arguments_=Module.arguments),Module.thisProgram&&(thisProgram=Module.thisProgram),Module.quit&&(quit_=Module.quit),Module.wasmBinary&&(wasmBinary=Module.wasmBinary),Module.noExitRuntime||!0),wasmMemory,wasmExports,ABORT=("object"!=typeof WebAssembly&&abort("no native wasm support detected"),!1),EXITSTATUS,HEAP8,HEAPU8,HEAP16,HEAPU16,HEAP32,HEAPU32,HEAPF32,HEAPF64;function assert(condition,text){condition||abort(text)}function updateMemoryViews(){var b=wasmMemory.buffer;Module.HEAP8=HEAP8=new Int8Array(b),Module.HEAP16=HEAP16=new Int16Array(b),Module.HEAP32=HEAP32=new Int32Array(b),Module.HEAPU8=HEAPU8=new Uint8Array(b),Module.HEAPU16=HEAPU16=new Uint16Array(b),Module.HEAPU32=HEAPU32=new Uint32Array(b),Module.HEAPF32=HEAPF32=new Float32Array(b),Module.HEAPF64=HEAPF64=new Float64Array(b)}var INITIAL_MEMORY=Module.INITIAL_MEMORY||314572800,wasmTable,__ATPRERUN__=(assert(5242880<=INITIAL_MEMORY,"INITIAL_MEMORY should be larger than STACK_SIZE, was "+INITIAL_MEMORY+"! (STACK_SIZE=5242880)"),wasmMemory=Module.wasmMemory||new WebAssembly.Memory({initial:INITIAL_MEMORY/65536,maximum:65536}),updateMemoryViews(),INITIAL_MEMORY=wasmMemory.buffer.byteLength,[]),__ATINIT__=[],__ATPOSTRUN__=[],runtimeInitialized=!1;function preRun(){if(Module.preRun)for("function"==typeof Module.preRun&&(Module.preRun=[Module.preRun]);Module.preRun.length;)addOnPreRun(Module.preRun.shift());callRuntimeCallbacks(__ATPRERUN__)}function initRuntime(){runtimeInitialized=!0,Module.noFSInit||FS.init.initialized||FS.init(),FS.ignorePermissions=!1,TTY.init(),callRuntimeCallbacks(__ATINIT__)}function postRun(){if(Module.postRun)for("function"==typeof Module.postRun&&(Module.postRun=[Module.postRun]);Module.postRun.length;)addOnPostRun(Module.postRun.shift());callRuntimeCallbacks(__ATPOSTRUN__)}function addOnPreRun(cb){__ATPRERUN__.unshift(cb)}function addOnInit(cb){__ATINIT__.unshift(cb)}function addOnPostRun(cb){__ATPOSTRUN__.unshift(cb)}var runDependencies=0,runDependencyWatcher=null,dependenciesFulfilled=null;function getUniqueRunDependency(id){return id}function addRunDependency(id){runDependencies++,Module.monitorRunDependencies&&Module.monitorRunDependencies(runDependencies)}function removeRunDependency(id){var callback;runDependencies--,Module.monitorRunDependencies&&Module.monitorRunDependencies(runDependencies),0==runDependencies&&(null!==runDependencyWatcher&&(clearInterval(runDependencyWatcher),runDependencyWatcher=null),dependenciesFulfilled)&&(callback=dependenciesFulfilled,dependenciesFulfilled=null,callback())}function abort(what){Module.onAbort&&Module.onAbort(what),err(what="Aborted("+what+")"),ABORT=!0,EXITSTATUS=1,what+=". Build with -sASSERTIONS for more info.";what=new WebAssembly.RuntimeError(what);throw readyPromiseReject(what),what}var dataURIPrefix="data:application/octet-stream;base64,",wasmBinaryFile,tempDouble,tempI64;function isDataURI(filename){return filename.startsWith(dataURIPrefix)}function isFileURI(filename){return filename.startsWith("file://")}function getBinarySync(file){if(file==wasmBinaryFile&&wasmBinary)return new Uint8Array(wasmBinary);if(readBinary)return readBinary(file);throw"sync fetching of the wasm failed: you can preload it to Module['wasmBinary'] manually, or emcc.py will do that for you when generating HTML (but not JS)"}function instantiateSync(file,info){file=getBinarySync(file),file=new WebAssembly.Module(file);return[new WebAssembly.Instance(file,info),file]}function createWasm(){var info={a:wasmImports};function receiveInstance(instance,module){instance=applySignatureConversions(instance.exports);return wasmTable=(wasmExports=instance).S,addOnInit(wasmExports.O),removeRunDependency("wasm-instantiate"),instance}if(addRunDependency("wasm-instantiate"),Module.instantiateWasm)try{return Module.instantiateWasm(info,receiveInstance)}catch(e){err("Module.instantiateWasm callback failed with error: "+e),readyPromiseReject(e)}return receiveInstance(instantiateSync(wasmBinaryFile,info)[0])}wasmBinaryFile="sandbox_cpp_wasm.wasm",isDataURI(wasmBinaryFile)||(wasmBinaryFile=locateFile(wasmBinaryFile));var callRuntimeCallbacks=callbacks=>{for(;0<callbacks.length;)callbacks.shift()(Module)};function getValue(ptr,type="i8"){switch(type=type.endsWith("*")?"*":type){case"i1":case"i8":return HEAP8[ptr>>>0];case"i16":return HEAP16[ptr>>>1];case"i32":return HEAP32[ptr>>>2];case"i64":abort("to do getValue(i64) use WASM_BIGINT");case"float":return HEAPF32[ptr>>>2];case"double":return HEAPF64[ptr>>>3];case"*":return HEAPU32[ptr>>>2];default:abort("invalid type for getValue: "+type)}}function setValue(ptr,value,type="i8"){switch(type=type.endsWith("*")?"*":type){case"i1":case"i8":HEAP8[ptr>>>0]=value;break;case"i16":HEAP16[ptr>>>1]=value;break;case"i32":HEAP32[ptr>>>2]=value;break;case"i64":abort("to do setValue(i64) use WASM_BIGINT");case"float":HEAPF32[ptr>>>2]=value;break;case"double":HEAPF64[ptr>>>3]=value;break;case"*":HEAPU32[ptr>>>2]=value;break;default:abort("invalid type for setValue: "+type)}}function convertI32PairToI53Checked(lo,hi){return hi+2097152>>>0<4194305-!!lo?(lo>>>0)+4294967296*hi:NaN}var UTF8Decoder="undefined"!=typeof TextDecoder?new TextDecoder("utf8"):void 0,UTF8ArrayToString=(heapOrArray,idx,maxBytesToRead)=>{for(var endIdx=(idx>>>=0)+maxBytesToRead,endPtr=idx;heapOrArray[endPtr]&&!(endIdx<=endPtr);)++endPtr;if(16<endPtr-idx&&heapOrArray.buffer&&UTF8Decoder)return UTF8Decoder.decode(heapOrArray.subarray(idx,endPtr));for(var str="";idx<endPtr;){var u2,u1,u0=heapOrArray[idx++];128&u0?(u1=63&heapOrArray[idx++],192==(224&u0)?str+=String.fromCharCode((31&u0)<<6|u1):(u2=63&heapOrArray[idx++],(u0=224==(240&u0)?(15&u0)<<12|u1<<6|u2:(7&u0)<<18|u1<<12|u2<<6|63&heapOrArray[idx++])<65536?str+=String.fromCharCode(u0):(u1=u0-65536,str+=String.fromCharCode(55296|u1>>10,56320|1023&u1)))):str+=String.fromCharCode(u0)}return str},UTF8ToString=(ptr,maxBytesToRead)=>(ptr>>>=0)?UTF8ArrayToString(HEAPU8,ptr,maxBytesToRead):"";function ___assert_fail(condition,filename,line,func){filename>>>=0,func>>>=0,abort(`Assertion failed: ${UTF8ToString(condition>>>=0)}, at: `+[filename?UTF8ToString(filename):"unknown filename",line,func?UTF8ToString(func):"unknown function"])}function ExceptionInfo(excPtr){this.excPtr=excPtr,this.ptr=excPtr-24,this.set_type=function(type){HEAPU32[this.ptr+4>>>2]=type},this.get_type=function(){return HEAPU32[this.ptr+4>>>2]},this.set_destructor=function(destructor){HEAPU32[this.ptr+8>>>2]=destructor},this.get_destructor=function(){return HEAPU32[this.ptr+8>>>2]},this.set_caught=function(caught){HEAP8[this.ptr+12>>>0]=caught=caught?1:0},this.get_caught=function(){return 0!=HEAP8[this.ptr+12>>>0]},this.set_rethrown=function(rethrown){HEAP8[this.ptr+13>>>0]=rethrown=rethrown?1:0},this.get_rethrown=function(){return 0!=HEAP8[this.ptr+13>>>0]},this.init=function(type,destructor){this.set_adjusted_ptr(0),this.set_type(type),this.set_destructor(destructor)},this.set_adjusted_ptr=function(adjustedPtr){HEAPU32[this.ptr+16>>>2]=adjustedPtr},this.get_adjusted_ptr=function(){return HEAPU32[this.ptr+16>>>2]},this.get_exception_ptr=function(){var adjusted;return ___cxa_is_pointer_type(this.get_type())?HEAPU32[this.excPtr>>>2]:0!==(adjusted=this.get_adjusted_ptr())?adjusted:this.excPtr}}var exceptionLast=0,uncaughtExceptionCount=0;function ___cxa_throw(ptr,type,destructor){throw type>>>=0,destructor>>>=0,new ExceptionInfo(ptr>>>=0).init(type,destructor),uncaughtExceptionCount++,ptr}var structRegistrations={};function runDestructors(destructors){for(;destructors.length;){var ptr=destructors.pop();destructors.pop()(ptr)}}function simpleReadValueFromPointer(pointer){return this.fromWireType(HEAP32[pointer>>>2])}var awaitingDependencies={},registeredTypes={},typeDependencies={},InternalError=void 0;function throwInternalError(message){throw new InternalError(message)}function whenDependentTypesAreResolved(myTypes,dependentTypes,getTypeConverters){function onComplete(typeConverters){var myTypeConverters=getTypeConverters(typeConverters);myTypeConverters.length!==myTypes.length&&throwInternalError("Mismatched type converter count");for(var i=0;i<myTypes.length;++i)registerType(myTypes[i],myTypeConverters[i])}myTypes.forEach(function(type){typeDependencies[type]=dependentTypes});var typeConverters=new Array(dependentTypes.length),unregisteredTypes=[],registered=0;dependentTypes.forEach((dt,i)=>{registeredTypes.hasOwnProperty(dt)?typeConverters[i]=registeredTypes[dt]:(unregisteredTypes.push(dt),awaitingDependencies.hasOwnProperty(dt)||(awaitingDependencies[dt]=[]),awaitingDependencies[dt].push(()=>{typeConverters[i]=registeredTypes[dt],++registered===unregisteredTypes.length&&onComplete(typeConverters)}))}),0===unregisteredTypes.length&&onComplete(typeConverters)}var __embind_finalize_value_object=function(structType){var reg=structRegistrations[structType>>>=0],rawConstructor=(delete structRegistrations[structType],reg.rawConstructor),rawDestructor=reg.rawDestructor,fieldRecords=reg.fields;whenDependentTypesAreResolved([structType],fieldRecords.map(field=>field.getterReturnType).concat(fieldRecords.map(field=>field.setterArgumentType)),fieldTypes=>{var fields={};return fieldRecords.forEach((field,i)=>{var fieldName=field.fieldName,getterReturnType=fieldTypes[i],getter=field.getter,getterContext=field.getterContext,setterArgumentType=fieldTypes[i+fieldRecords.length],setter=field.setter,setterContext=field.setterContext;fields[fieldName]={read:ptr=>getterReturnType.fromWireType(getter(getterContext,ptr)),write:(ptr,o)=>{var destructors=[];setter(setterContext,ptr,setterArgumentType.toWireType(destructors,o)),runDestructors(destructors)}}}),[{name:reg.name,fromWireType:function(ptr){var i,rv={};for(i in fields)rv[i]=fields[i].read(ptr);return rawDestructor(ptr),rv},toWireType:function(destructors,o){for(var fieldName in fields)if(!(fieldName in o))throw new TypeError(`Missing field: "${fieldName}"`);var ptr=rawConstructor();for(fieldName in fields)fields[fieldName].write(ptr,o[fieldName]);return null!==destructors&&destructors.push(rawDestructor,ptr),ptr},argPackAdvance:8,readValueFromPointer:simpleReadValueFromPointer,destructorFunction:rawDestructor}]})};function __embind_register_bigint(primitiveType,name,size,minRange,maxRange){}function getShiftFromSize(size){switch(size){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError("Unknown type size: "+size)}}function embind_init_charCodes(){for(var codes=new Array(256),i=0;i<256;++i)codes[i]=String.fromCharCode(i);embind_charCodes=codes}var embind_charCodes=void 0;function readLatin1String(ptr){for(var ret="",c=ptr;HEAPU8[c>>>0];)ret+=embind_charCodes[HEAPU8[c++>>>0]];return ret}var BindingError=void 0;function throwBindingError(message){throw new BindingError(message)}function sharedRegisterType(rawType,registeredInstance,options={}){var name=registeredInstance.name;if(rawType||throwBindingError(`type "${name}" must have a positive integer typeid pointer`),registeredTypes.hasOwnProperty(rawType)){if(options.ignoreDuplicateRegistrations)return;throwBindingError(`Cannot register type '${name}' twice`)}registeredTypes[rawType]=registeredInstance,delete typeDependencies[rawType],awaitingDependencies.hasOwnProperty(rawType)&&(options=awaitingDependencies[rawType],delete awaitingDependencies[rawType],options.forEach(cb=>cb()))}function registerType(rawType,registeredInstance,options={}){if(!("argPackAdvance"in registeredInstance))throw new TypeError("registerType registeredInstance requires argPackAdvance");sharedRegisterType(rawType,registeredInstance,options)}function __embind_register_bool(rawType,name,size,trueValue,falseValue){rawType>>>=0,name>>>=0;var shift=getShiftFromSize(size>>>=0);registerType(rawType,{name:name=readLatin1String(name),fromWireType:function(wt){return!!wt},toWireType:function(destructors,o){return o?trueValue:falseValue},argPackAdvance:8,readValueFromPointer:function(pointer){var heap;if(1===size)heap=HEAP8;else if(2===size)heap=HEAP16;else{if(4!==size)throw new TypeError("Unknown boolean type size: "+name);heap=HEAP32}return this.fromWireType(heap[pointer>>>shift])},destructorFunction:null})}function ClassHandle_isAliasOf(other){if(!(this instanceof ClassHandle))return!1;if(!(other instanceof ClassHandle))return!1;for(var leftClass=this.$$.ptrType.registeredClass,left=this.$$.ptr,rightClass=other.$$.ptrType.registeredClass,right=other.$$.ptr;leftClass.baseClass;)left=leftClass.upcast(left),leftClass=leftClass.baseClass;for(;rightClass.baseClass;)right=rightClass.upcast(right),rightClass=rightClass.baseClass;return leftClass===rightClass&&left===right}function shallowCopyInternalPointer(o){return{count:o.count,deleteScheduled:o.deleteScheduled,preservePointerOnDelete:o.preservePointerOnDelete,ptr:o.ptr,ptrType:o.ptrType,smartPtr:o.smartPtr,smartPtrType:o.smartPtrType}}function throwInstanceAlreadyDeleted(obj){throwBindingError(obj.$$.ptrType.registeredClass.name+" instance already deleted")}var finalizationRegistry=!1;function detachFinalizer(handle){}function runDestructor($$){$$.smartPtr?$$.smartPtrType.rawDestructor($$.smartPtr):$$.ptrType.registeredClass.rawDestructor($$.ptr)}function releaseClassHandle($$){--$$.count.value,0===$$.count.value&&runDestructor($$)}function downcastPointer(ptr,ptrClass,desiredClass){return ptrClass===desiredClass?ptr:void 0===desiredClass.baseClass||null===(ptr=downcastPointer(ptr,ptrClass,desiredClass.baseClass))?null:desiredClass.downcast(ptr)}var registeredPointers={};function getInheritedInstanceCount(){return Object.keys(registeredInstances).length}function getLiveInheritedInstances(){var k,rv=[];for(k in registeredInstances)registeredInstances.hasOwnProperty(k)&&rv.push(registeredInstances[k]);return rv}var deletionQueue=[];function flushPendingDeletes(){for(;deletionQueue.length;){var obj=deletionQueue.pop();obj.$$.deleteScheduled=!1,obj.delete()}}var delayFunction=void 0;function setDelayFunction(fn){delayFunction=fn,deletionQueue.length&&delayFunction&&delayFunction(flushPendingDeletes)}function init_embind(){Module.getInheritedInstanceCount=getInheritedInstanceCount,Module.getLiveInheritedInstances=getLiveInheritedInstances,Module.flushPendingDeletes=flushPendingDeletes,Module.setDelayFunction=setDelayFunction}var registeredInstances={};function getBasestPointer(class_,ptr){for(void 0===ptr&&throwBindingError("ptr should not be undefined");class_.baseClass;)ptr=class_.upcast(ptr),class_=class_.baseClass;return ptr}function getInheritedInstance(class_,ptr){return ptr=getBasestPointer(class_,ptr),registeredInstances[ptr]}function makeClassHandle(prototype,record){return record.ptrType&&record.ptr||throwInternalError("makeClassHandle requires ptr and ptrType"),!!record.smartPtrType!=!!record.smartPtr&&throwInternalError("Both smartPtrType and smartPtr must be specified"),record.count={value:1},attachFinalizer(Object.create(prototype,{$$:{value:record}}))}function RegisteredPointer_fromWireType(ptr){var registeredInstance,dp,rawPointer=this.getPointee(ptr);return rawPointer?void 0!==(registeredInstance=getInheritedInstance(this.registeredClass,rawPointer))?0===registeredInstance.$$.count.value?(registeredInstance.$$.ptr=rawPointer,registeredInstance.$$.smartPtr=ptr,registeredInstance.clone()):(registeredInstance=registeredInstance.clone(),this.destructor(ptr),registeredInstance):(registeredInstance=this.registeredClass.getActualType(rawPointer),!(registeredInstance=registeredPointers[registeredInstance])||(registeredInstance=this.isConst?registeredInstance.constPointerType:registeredInstance.pointerType,null===(dp=downcastPointer(rawPointer,this.registeredClass,registeredInstance.registeredClass)))?makeDefaultHandle.call(this):this.isSmartPointer?makeClassHandle(registeredInstance.registeredClass.instancePrototype,{ptrType:registeredInstance,ptr:dp,smartPtrType:this,smartPtr:ptr}):makeClassHandle(registeredInstance.registeredClass.instancePrototype,{ptrType:registeredInstance,ptr:dp})):(this.destructor(ptr),null);function makeDefaultHandle(){return this.isSmartPointer?makeClassHandle(this.registeredClass.instancePrototype,{ptrType:this.pointeeType,ptr:rawPointer,smartPtrType:this,smartPtr:ptr}):makeClassHandle(this.registeredClass.instancePrototype,{ptrType:this,ptr:ptr})}}var attachFinalizer=function(handle){return"undefined"==typeof FinalizationRegistry?(attachFinalizer=handle=>handle,handle):(finalizationRegistry=new FinalizationRegistry(info=>{releaseClassHandle(info.$$)}),detachFinalizer=handle=>finalizationRegistry.unregister(handle),(attachFinalizer=handle=>{var $$=handle.$$;return!!$$.smartPtr&&finalizationRegistry.register(handle,{$$:$$},handle),handle})(handle))};function ClassHandle_clone(){var clone;return this.$$.ptr||throwInstanceAlreadyDeleted(this),this.$$.preservePointerOnDelete?(this.$$.count.value+=1,this):((clone=attachFinalizer(Object.create(Object.getPrototypeOf(this),{$$:{value:shallowCopyInternalPointer(this.$$)}}))).$$.count.value+=1,clone.$$.deleteScheduled=!1,clone)}function ClassHandle_delete(){this.$$.ptr||throwInstanceAlreadyDeleted(this),this.$$.deleteScheduled&&!this.$$.preservePointerOnDelete&&throwBindingError("Object already scheduled for deletion"),detachFinalizer(this),releaseClassHandle(this.$$),this.$$.preservePointerOnDelete||(this.$$.smartPtr=void 0,this.$$.ptr=void 0)}function ClassHandle_isDeleted(){return!this.$$.ptr}function ClassHandle_deleteLater(){return this.$$.ptr||throwInstanceAlreadyDeleted(this),this.$$.deleteScheduled&&!this.$$.preservePointerOnDelete&&throwBindingError("Object already scheduled for deletion"),deletionQueue.push(this),1===deletionQueue.length&&delayFunction&&delayFunction(flushPendingDeletes),this.$$.deleteScheduled=!0,this}function init_ClassHandle(){ClassHandle.prototype.isAliasOf=ClassHandle_isAliasOf,ClassHandle.prototype.clone=ClassHandle_clone,ClassHandle.prototype.delete=ClassHandle_delete,ClassHandle.prototype.isDeleted=ClassHandle_isDeleted,ClassHandle.prototype.deleteLater=ClassHandle_deleteLater}function ClassHandle(){}var char_0=48,char_9=57;function makeLegalFunctionName(name){var f;return void 0===name?"_unknown":(f=(name=name.replace(/[^a-zA-Z0-9_]/g,"$")).charCodeAt(0),char_0<=f&&f<=char_9?"_"+name:name)}function createNamedFunction(name,body){return{[name=makeLegalFunctionName(name)]:function(){return body.apply(this,arguments)}}[name]}function ensureOverloadTable(proto,methodName,humanName){var prevFunc;void 0===proto[methodName].overloadTable&&(prevFunc=proto[methodName],proto[methodName]=function(){return proto[methodName].overloadTable.hasOwnProperty(arguments.length)||throwBindingError(`Function '${humanName}' called with an invalid number of arguments (${arguments.length}) - expects one of (${proto[methodName].overloadTable})!`),proto[methodName].overloadTable[arguments.length].apply(this,arguments)},proto[methodName].overloadTable=[],proto[methodName].overloadTable[prevFunc.argCount]=prevFunc)}function exposePublicSymbol(name,value,numArguments){Module.hasOwnProperty(name)?((void 0===numArguments||void 0!==Module[name].overloadTable&&void 0!==Module[name].overloadTable[numArguments])&&throwBindingError(`Cannot register public name '${name}' twice`),ensureOverloadTable(Module,name,name),Module.hasOwnProperty(numArguments)&&throwBindingError(`Cannot register multiple overloads of a function with the same number of arguments (${numArguments})!`),Module[name].overloadTable[numArguments]=value):(Module[name]=value,void 0!==numArguments&&(Module[name].numArguments=numArguments))}function RegisteredClass(name,constructor,instancePrototype,rawDestructor,baseClass,getActualType,upcast,downcast){this.name=name,this.constructor=constructor,this.instancePrototype=instancePrototype,this.rawDestructor=rawDestructor,this.baseClass=baseClass,this.getActualType=getActualType,this.upcast=upcast,this.downcast=downcast,this.pureVirtualFunctions=[]}function upcastPointer(ptr,ptrClass,desiredClass){for(;ptrClass!==desiredClass;)ptrClass.upcast||throwBindingError(`Expected null or instance of ${desiredClass.name}, got an instance of `+ptrClass.name),ptr=ptrClass.upcast(ptr),ptrClass=ptrClass.baseClass;return ptr}function constNoSmartPtrRawPointerToWireType(destructors,handle){if(null===handle)return this.isReference&&throwBindingError("null is not a valid "+this.name),0;handle.$$||throwBindingError(`Cannot pass "${embindRepr(handle)}" as a `+this.name),handle.$$.ptr||throwBindingError("Cannot pass deleted object as a pointer of type "+this.name);var handleClass=handle.$$.ptrType.registeredClass;return upcastPointer(handle.$$.ptr,handleClass,this.registeredClass)}function genericPointerToWireType(destructors,handle){if(null===handle)return this.isReference&&throwBindingError("null is not a valid "+this.name),this.isSmartPointer?(ptr=this.rawConstructor(),null!==destructors&&destructors.push(this.rawDestructor,ptr),ptr):0;handle.$$||throwBindingError(`Cannot pass "${embindRepr(handle)}" as a `+this.name),handle.$$.ptr||throwBindingError("Cannot pass deleted object as a pointer of type "+this.name),!this.isConst&&handle.$$.ptrType.isConst&&throwBindingError(`Cannot convert argument of type ${(handle.$$.smartPtrType||handle.$$.ptrType).name} to parameter type `+this.name);var clonedHandle,ptr,handleClass=handle.$$.ptrType.registeredClass;if(ptr=upcastPointer(handle.$$.ptr,handleClass,this.registeredClass),this.isSmartPointer)switch(void 0===handle.$$.smartPtr&&throwBindingError("Passing raw pointer to smart pointer is illegal"),this.sharingPolicy){case 0:handle.$$.smartPtrType===this?ptr=handle.$$.smartPtr:throwBindingError(`Cannot convert argument of type ${(handle.$$.smartPtrType||handle.$$.ptrType).name} to parameter type `+this.name);break;case 1:ptr=handle.$$.smartPtr;break;case 2:handle.$$.smartPtrType===this?ptr=handle.$$.smartPtr:(clonedHandle=handle.clone(),ptr=this.rawShare(ptr,Emval.toHandle(function(){clonedHandle.delete()})),null!==destructors&&destructors.push(this.rawDestructor,ptr));break;default:throwBindingError("Unsupporting sharing policy")}return ptr}function nonConstNoSmartPtrRawPointerToWireType(destructors,handle){if(null===handle)return this.isReference&&throwBindingError("null is not a valid "+this.name),0;handle.$$||throwBindingError(`Cannot pass "${embindRepr(handle)}" as a `+this.name),handle.$$.ptr||throwBindingError("Cannot pass deleted object as a pointer of type "+this.name),handle.$$.ptrType.isConst&&throwBindingError(`Cannot convert argument of type ${handle.$$.ptrType.name} to parameter type `+this.name);var handleClass=handle.$$.ptrType.registeredClass;return upcastPointer(handle.$$.ptr,handleClass,this.registeredClass)}function RegisteredPointer_getPointee(ptr){return ptr=this.rawGetPointee?this.rawGetPointee(ptr):ptr}function RegisteredPointer_destructor(ptr){this.rawDestructor&&this.rawDestructor(ptr)}function RegisteredPointer_deleteObject(handle){null!==handle&&handle.delete()}function init_RegisteredPointer(){RegisteredPointer.prototype.getPointee=RegisteredPointer_getPointee,RegisteredPointer.prototype.destructor=RegisteredPointer_destructor,RegisteredPointer.prototype.argPackAdvance=8,RegisteredPointer.prototype.readValueFromPointer=simpleReadValueFromPointer,RegisteredPointer.prototype.deleteObject=RegisteredPointer_deleteObject,RegisteredPointer.prototype.fromWireType=RegisteredPointer_fromWireType}function RegisteredPointer(name,registeredClass,isReference,isConst,isSmartPointer,pointeeType,sharingPolicy,rawGetPointee,rawConstructor,rawShare,rawDestructor){this.name=name,this.registeredClass=registeredClass,this.isReference=isReference,this.isConst=isConst,this.isSmartPointer=isSmartPointer,this.pointeeType=pointeeType,this.sharingPolicy=sharingPolicy,this.rawGetPointee=rawGetPointee,this.rawConstructor=rawConstructor,this.rawShare=rawShare,this.rawDestructor=rawDestructor,isSmartPointer||void 0!==registeredClass.baseClass?this.toWireType=genericPointerToWireType:(this.toWireType=isConst?constNoSmartPtrRawPointerToWireType:nonConstNoSmartPtrRawPointerToWireType,this.destructorFunction=null)}function replacePublicSymbol(name,value,numArguments){Module.hasOwnProperty(name)||throwInternalError("Replacing nonexistant public symbol"),void 0!==Module[name].overloadTable&&void 0!==numArguments?Module[name].overloadTable[numArguments]=value:(Module[name]=value,Module[name].argCount=numArguments)}var dynCallLegacy=(sig,ptr,args)=>{sig=Module["dynCall_"+sig];return args&&args.length?sig.apply(null,[ptr].concat(args)):sig.call(null,ptr)},wasmTableMirror=[],getWasmTableEntry=funcPtr=>{var func=wasmTableMirror[funcPtr];return func||(funcPtr>=wasmTableMirror.length&&(wasmTableMirror.length=funcPtr+1),wasmTableMirror[funcPtr]=func=wasmTable.get(funcPtr)),func},dynCall=(sig,ptr,args)=>sig.includes("j")?dynCallLegacy(sig,ptr,args):getWasmTableEntry(ptr).apply(null,args),getDynCaller=(sig,ptr)=>{var argCache=[];return function(){return argCache.length=0,Object.assign(argCache,arguments),dynCall(sig,ptr,argCache)}};function embind__requireFunction(signature,rawFunction){var fp=(signature=readLatin1String(signature)).includes("j")?getDynCaller(signature,rawFunction):getWasmTableEntry(rawFunction);return"function"!=typeof fp&&throwBindingError(`unknown function pointer with signature ${signature}: `+rawFunction),fp}function extendError(baseErrorType,errorName){var errorClass=createNamedFunction(errorName,function(message){this.name=errorName,this.message=message;message=new Error(message).stack;void 0!==message&&(this.stack=this.toString()+"\n"+message.replace(/^Error(:[^\n]*)?\n/,""))});return errorClass.prototype=Object.create(baseErrorType.prototype),(errorClass.prototype.constructor=errorClass).prototype.toString=function(){return void 0===this.message?this.name:this.name+": "+this.message},errorClass}var UnboundTypeError=void 0;function getTypeName(type){var type=___getTypeName(type),rv=readLatin1String(type);return _free(type),rv}function throwUnboundTypeError(message,types){var unboundTypes=[],seen={};throw types.forEach(function visit(type){seen[type]||registeredTypes[type]||(typeDependencies[type]?typeDependencies[type].forEach(visit):(unboundTypes.push(type),seen[type]=!0))}),new UnboundTypeError(message+": "+unboundTypes.map(getTypeName).join([", "]))}function __embind_register_class(rawType,rawPointerType,rawConstPointerType,baseClassRawType,getActualTypeSignature,getActualType,upcastSignature,upcast,downcastSignature,downcast,name,destructorSignature,rawDestructor){rawType>>>=0,rawPointerType>>>=0,rawConstPointerType>>>=0,baseClassRawType>>>=0,getActualTypeSignature>>>=0,getActualType>>>=0,upcastSignature>>>=0,upcast>>>=0,downcastSignature>>>=0,downcast>>>=0,destructorSignature>>>=0,rawDestructor>>>=0,name=readLatin1String(name>>>=0),getActualType=embind__requireFunction(getActualTypeSignature,getActualType),upcast=upcast&&embind__requireFunction(upcastSignature,upcast),downcast=downcast&&embind__requireFunction(downcastSignature,downcast),rawDestructor=embind__requireFunction(destructorSignature,rawDestructor);var legalFunctionName=makeLegalFunctionName(name);exposePublicSymbol(legalFunctionName,function(){throwUnboundTypeError(`Cannot construct ${name} due to unbound types`,[baseClassRawType])}),whenDependentTypesAreResolved([rawType,rawPointerType,rawConstPointerType],baseClassRawType?[baseClassRawType]:[],function(base){base=base[0],base=baseClassRawType?(baseClass=base.registeredClass).instancePrototype:ClassHandle.prototype;var constructor=createNamedFunction(legalFunctionName,function(){if(Object.getPrototypeOf(this)!==instancePrototype)throw new BindingError("Use 'new' to construct "+name);if(void 0===registeredClass.constructor_body)throw new BindingError(name+" has no accessible constructor");var body=registeredClass.constructor_body[arguments.length];if(void 0===body)throw new BindingError(`Tried to invoke ctor of ${name} with invalid number of parameters (${arguments.length}) - expected (${Object.keys(registeredClass.constructor_body).toString()}) parameters instead!`);return body.apply(this,arguments)}),instancePrototype=Object.create(base,{constructor:{value:constructor}}),registeredClass=(constructor.prototype=instancePrototype,new RegisteredClass(name,constructor,instancePrototype,rawDestructor,baseClass,getActualType,upcast,downcast)),base=(registeredClass.baseClass&&(void 0===registeredClass.baseClass.__derivedClasses&&(registeredClass.baseClass.__derivedClasses=[]),registeredClass.baseClass.__derivedClasses.push(registeredClass)),new RegisteredPointer(name,registeredClass,!0,!1,!1)),baseClass=new RegisteredPointer(name+"*",registeredClass,!1,!1,!1),constPointerConverter=new RegisteredPointer(name+" const*",registeredClass,!1,!0,!1);return registeredPointers[rawType]={pointerType:baseClass,constPointerType:constPointerConverter},replacePublicSymbol(legalFunctionName,constructor),[base,baseClass,constPointerConverter]})}function heap32VectorToArray(count,firstElement){for(var array=[],i=0;i<count;i++)array.push(HEAPU32[firstElement+4*i>>>2]);return array}function newFunc(constructor,argumentList){var dummy;if(constructor instanceof Function)return(dummy=createNamedFunction(constructor.name||"unknownFunctionName",function(){})).prototype=constructor.prototype,dummy=new dummy,(argumentList=constructor.apply(dummy,argumentList))instanceof Object?argumentList:dummy;throw new TypeError(`new_ called with constructor type ${typeof constructor} which is not a function`)}function craftInvokerFunction(humanName,argTypes,classType,cppInvokerFunc,cppTargetFunc,isAsync){for(var argCount=argTypes.length,isClassMethodFunc=(argCount<2&&throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!"),null!==argTypes[1]&&null!==classType),needsDestructorStack=!1,i=1;i<argTypes.length;++i)if(null!==argTypes[i]&&void 0===argTypes[i].destructorFunction){needsDestructorStack=!0;break}for(var returns="void"!==argTypes[0].name,argsList="",argsListWired="",i=0;i<argCount-2;++i)argsList+=(0!==i?", ":"")+"arg"+i,argsListWired+=(0!==i?", ":"")+"arg"+i+"Wired";var invokerFnBody=`
        return function ${makeLegalFunctionName(humanName)}(${argsList}) {
        if (arguments.length !== ${argCount-2}) {
          throwBindingError('function ${humanName} called with ${arguments.length} arguments, expected ${argCount-2} args!');
        }`,dtorStack=(needsDestructorStack&&(invokerFnBody+="var destructors = [];\n"),needsDestructorStack?"destructors":"null"),args1=["throwBindingError","invoker","fn","runDestructors","retType","classParam"],args2=[throwBindingError,cppInvokerFunc,cppTargetFunc,runDestructors,argTypes[0],argTypes[1]];isClassMethodFunc&&(invokerFnBody+="var thisWired = classParam.toWireType("+dtorStack+", this);\n");for(i=0;i<argCount-2;++i)invokerFnBody+="var arg"+i+"Wired = argType"+i+".toWireType("+dtorStack+", arg"+i+"); // "+argTypes[i+2].name+"\n",args1.push("argType"+i),args2.push(argTypes[i+2]);if(invokerFnBody+=(returns||isAsync?"var rv = ":"")+"invoker(fn"+(0<(argsListWired=isClassMethodFunc?"thisWired"+(0<argsListWired.length?", ":"")+argsListWired:argsListWired).length?", ":"")+argsListWired+");\n",needsDestructorStack)invokerFnBody+="runDestructors(destructors);\n";else for(i=isClassMethodFunc?1:2;i<argTypes.length;++i){var paramName=1===i?"thisWired":"arg"+(i-2)+"Wired";null!==argTypes[i].destructorFunction&&(invokerFnBody+=paramName+"_dtor("+paramName+"); // "+argTypes[i].name+"\n",args1.push(paramName+"_dtor"),args2.push(argTypes[i].destructorFunction))}return returns&&(invokerFnBody+="var ret = retType.fromWireType(rv);\nreturn ret;\n"),args1.push(invokerFnBody+="}\n"),newFunc(Function,args1).apply(null,args2)}function __embind_register_class_constructor(rawClassType,argCount,rawArgTypesAddr,invokerSignature,invoker,rawConstructor){rawClassType>>>=0,invokerSignature>>>=0,invoker>>>=0,rawConstructor>>>=0;var rawArgTypes=heap32VectorToArray(argCount,rawArgTypesAddr>>>=0);invoker=embind__requireFunction(invokerSignature,invoker),whenDependentTypesAreResolved([],[rawClassType],function(classType){var humanName="constructor "+(classType=classType[0]).name;if(void 0===classType.registeredClass.constructor_body&&(classType.registeredClass.constructor_body=[]),void 0!==classType.registeredClass.constructor_body[argCount-1])throw new BindingError(`Cannot register multiple constructors with identical number of parameters (${argCount-1}) for class '${classType.name}'! Overload resolution is currently only performed using the parameter count, not actual type info!`);return classType.registeredClass.constructor_body[argCount-1]=()=>{throwUnboundTypeError(`Cannot construct ${classType.name} due to unbound types`,rawArgTypes)},whenDependentTypesAreResolved([],rawArgTypes,function(argTypes){return argTypes.splice(1,0,null),classType.registeredClass.constructor_body[argCount-1]=craftInvokerFunction(humanName,argTypes,null,invoker,rawConstructor),[]}),[]})}function __embind_register_class_function(rawClassType,methodName,argCount,rawArgTypesAddr,invokerSignature,rawInvoker,context,isPureVirtual,isAsync){rawClassType>>>=0,methodName>>>=0,invokerSignature>>>=0,rawInvoker>>>=0,context>>>=0;var rawArgTypes=heap32VectorToArray(argCount,rawArgTypesAddr>>>=0);methodName=readLatin1String(methodName),rawInvoker=embind__requireFunction(invokerSignature,rawInvoker),whenDependentTypesAreResolved([],[rawClassType],function(classType){var humanName=(classType=classType[0]).name+"."+methodName;function unboundTypesHandler(){throwUnboundTypeError(`Cannot call ${humanName} due to unbound types`,rawArgTypes)}methodName.startsWith("@@")&&(methodName=Symbol[methodName.substring(2)]),isPureVirtual&&classType.registeredClass.pureVirtualFunctions.push(methodName);var proto=classType.registeredClass.instancePrototype,method=proto[methodName];return void 0===method||void 0===method.overloadTable&&method.className!==classType.name&&method.argCount===argCount-2?(unboundTypesHandler.argCount=argCount-2,unboundTypesHandler.className=classType.name,proto[methodName]=unboundTypesHandler):(ensureOverloadTable(proto,methodName,humanName),proto[methodName].overloadTable[argCount-2]=unboundTypesHandler),whenDependentTypesAreResolved([],rawArgTypes,function(argTypes){argTypes=craftInvokerFunction(humanName,argTypes,classType,rawInvoker,context,isAsync);return void 0===proto[methodName].overloadTable?(argTypes.argCount=argCount-2,proto[methodName]=argTypes):proto[methodName].overloadTable[argCount-2]=argTypes,[]}),[]})}function handleAllocatorInit(){Object.assign(HandleAllocator.prototype,{get(id){return this.allocated[id]},has(id){return void 0!==this.allocated[id]},allocate(handle){var id=this.freelist.pop()||this.allocated.length;return this.allocated[id]=handle,id},free(id){this.allocated[id]=void 0,this.freelist.push(id)}})}function HandleAllocator(){this.allocated=[void 0],this.freelist=[]}var emval_handles=new HandleAllocator;function __emval_decref(handle){(handle>>>=0)>=emval_handles.reserved&&0==--emval_handles.get(handle).refcount&&emval_handles.free(handle)}function count_emval_handles(){for(var count=0,i=emval_handles.reserved;i<emval_handles.allocated.length;++i)void 0!==emval_handles.allocated[i]&&++count;return count}function init_emval(){emval_handles.allocated.push({value:void 0},{value:null},{value:!0},{value:!1}),emval_handles.reserved=emval_handles.allocated.length,Module.count_emval_handles=count_emval_handles}var Emval={toValue:handle=>(handle||throwBindingError("Cannot use deleted val. handle = "+handle),emval_handles.get(handle).value),toHandle:value=>{switch(value){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:return emval_handles.allocate({refcount:1,value:value})}}};function __embind_register_emval(rawType,name){registerType(rawType>>>=0,{name:name=readLatin1String(name>>>=0),fromWireType:function(handle){var rv=Emval.toValue(handle);return __emval_decref(handle),rv},toWireType:function(destructors,value){return Emval.toHandle(value)},argPackAdvance:8,readValueFromPointer:simpleReadValueFromPointer,destructorFunction:null})}function embindRepr(v){var t;return null===v?"null":"object"==(t=typeof v)||"array"==t||"function"==t?v.toString():""+v}function floatReadValueFromPointer(name,shift){switch(shift){case 2:return function(pointer){return this.fromWireType(HEAPF32[pointer>>>2])};case 3:return function(pointer){return this.fromWireType(HEAPF64[pointer>>>3])};default:throw new TypeError("Unknown float type: "+name)}}function __embind_register_float(rawType,name,size){rawType>>>=0,name>>>=0;size=getShiftFromSize(size>>>=0);registerType(rawType,{name:name=readLatin1String(name),fromWireType:function(value){return value},toWireType:function(destructors,value){return value},argPackAdvance:8,readValueFromPointer:floatReadValueFromPointer(name,size),destructorFunction:null})}function __embind_register_function(name,argCount,rawArgTypesAddr,signature,rawInvoker,fn,isAsync){name>>>=0,signature>>>=0,rawInvoker>>>=0,fn>>>=0;var argTypes=heap32VectorToArray(argCount,rawArgTypesAddr>>>=0);name=readLatin1String(name),rawInvoker=embind__requireFunction(signature,rawInvoker),exposePublicSymbol(name,function(){throwUnboundTypeError(`Cannot call ${name} due to unbound types`,argTypes)},argCount-1),whenDependentTypesAreResolved([],argTypes,function(argTypes){argTypes=[argTypes[0],null].concat(argTypes.slice(1));return replacePublicSymbol(name,craftInvokerFunction(name,argTypes,null,rawInvoker,fn,isAsync),argCount-1),[]})}function integerReadValueFromPointer(name,shift,signed){switch(shift){case 0:return signed?function(pointer){return HEAP8[pointer>>>0]}:function(pointer){return HEAPU8[pointer>>>0]};case 1:return signed?function(pointer){return HEAP16[pointer>>>1]}:function(pointer){return HEAPU16[pointer>>>1]};case 2:return signed?function(pointer){return HEAP32[pointer>>>2]}:function(pointer){return HEAPU32[pointer>>>2]};default:throw new TypeError("Unknown integer type: "+name)}}function __embind_register_integer(primitiveType,name,size,minRange,maxRange){primitiveType>>>=0,size>>>=0,name=readLatin1String(name>>>=0),-1===maxRange&&(maxRange=4294967295);var bitshift,maxRange=getShiftFromSize(size),fromWireType=value=>value,size=(0===minRange&&(bitshift=32-8*size,fromWireType=value=>value<<bitshift>>>bitshift),name.includes("unsigned")),size=size?function(destructors,value){return this.name,value>>>0}:function(destructors,value){return this.name,value};registerType(primitiveType,{name:name,fromWireType:fromWireType,toWireType:size,argPackAdvance:8,readValueFromPointer:integerReadValueFromPointer(name,maxRange,0!==minRange),destructorFunction:null})}function __embind_register_memory_view(rawType,dataTypeIndex,name){rawType>>>=0,name>>>=0;var TA=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array][dataTypeIndex];function decodeMemoryView(handle){var heap=HEAPU32,size=heap[(handle>>=2)>>>0];return new TA(heap.buffer,heap[handle+1>>>0],size)}registerType(rawType,{name:name=readLatin1String(name),fromWireType:decodeMemoryView,argPackAdvance:8,readValueFromPointer:decodeMemoryView},{ignoreDuplicateRegistrations:!0})}var stringToUTF8Array=(str,heap,outIdx,maxBytesToWrite)=>{if(!(0<maxBytesToWrite))return 0;for(var startIdx=outIdx>>>=0,endIdx=outIdx+maxBytesToWrite-1,i=0;i<str.length;++i){var u=str.charCodeAt(i);if((u=55296<=u&&u<=57343?65536+((1023&u)<<10)|1023&str.charCodeAt(++i):u)<=127){if(endIdx<=outIdx)break;heap[outIdx++>>>0]=u}else{if(u<=2047){if(endIdx<=outIdx+1)break;heap[outIdx++>>>0]=192|u>>6}else{if(u<=65535){if(endIdx<=outIdx+2)break;heap[outIdx++>>>0]=224|u>>12}else{if(endIdx<=outIdx+3)break;heap[outIdx++>>>0]=240|u>>18,heap[outIdx++>>>0]=128|u>>12&63}heap[outIdx++>>>0]=128|u>>6&63}heap[outIdx++>>>0]=128|63&u}}return heap[outIdx>>>0]=0,outIdx-startIdx},stringToUTF8=(str,outPtr,maxBytesToWrite)=>stringToUTF8Array(str,HEAPU8,outPtr,maxBytesToWrite),lengthBytesUTF8=str=>{for(var len=0,i=0;i<str.length;++i){var c=str.charCodeAt(i);c<=127?len++:c<=2047?len+=2:55296<=c&&c<=57343?(len+=4,++i):len+=3}return len};function __embind_register_std_string(rawType,name){rawType>>>=0;var stdStringIsUTF8="std::string"===(name=readLatin1String(name>>>=0));registerType(rawType,{name:name,fromWireType:function(value){var length=HEAPU32[value>>>2],payload=value+4;if(stdStringIsUTF8)for(var decodeStartPtr=payload,i=0;i<=length;++i){var stringSegment,str,currentBytePtr=payload+i;i!=length&&0!=HEAPU8[currentBytePtr>>>0]||(stringSegment=UTF8ToString(decodeStartPtr,currentBytePtr-decodeStartPtr),str=void 0===str?stringSegment:str+String.fromCharCode(0)+stringSegment,decodeStartPtr=currentBytePtr+1)}else{for(var a=new Array(length),i=0;i<length;++i)a[i]=String.fromCharCode(HEAPU8[payload+i>>>0]);str=a.join("")}return _free(value),str},toWireType:function(destructors,value){var length,valueIsOfTypeString="string"==typeof(value=value instanceof ArrayBuffer?new Uint8Array(value):value),base=(valueIsOfTypeString||value instanceof Uint8Array||value instanceof Uint8ClampedArray||value instanceof Int8Array||throwBindingError("Cannot pass non-string to std::string"),length=stdStringIsUTF8&&valueIsOfTypeString?lengthBytesUTF8(value):value.length,_malloc(4+length+1)),ptr=base+4;if(HEAPU32[base>>>2]=length,stdStringIsUTF8&&valueIsOfTypeString)stringToUTF8(value,ptr,length+1);else if(valueIsOfTypeString)for(var i=0;i<length;++i){var charCode=value.charCodeAt(i);255<charCode&&(_free(ptr),throwBindingError("String has UTF-16 code units that do not fit in 8 bits")),HEAPU8[ptr+i>>>0]=charCode}else for(i=0;i<length;++i)HEAPU8[ptr+i>>>0]=value[i];return null!==destructors&&destructors.push(_free,base),base},argPackAdvance:8,readValueFromPointer:simpleReadValueFromPointer,destructorFunction:function(ptr){_free(ptr)}})}var UTF16Decoder="undefined"!=typeof TextDecoder?new TextDecoder("utf-16le"):void 0,UTF16ToString=(ptr,maxBytesToRead)=>{for(var endPtr,idx=ptr>>1,maxIdx=idx+maxBytesToRead/2;!(maxIdx<=idx)&&HEAPU16[idx>>>0];)++idx;if(32<(endPtr=idx<<1)-ptr&&UTF16Decoder)return UTF16Decoder.decode(HEAPU8.subarray(ptr>>>0,endPtr>>>0));for(var str="",i=0;!(maxBytesToRead/2<=i);++i){var codeUnit=HEAP16[ptr+2*i>>>1];if(0==codeUnit)break;str+=String.fromCharCode(codeUnit)}return str},stringToUTF16=(str,outPtr,maxBytesToWrite)=>{if((maxBytesToWrite=void 0===maxBytesToWrite?2147483647:maxBytesToWrite)<2)return 0;for(var startPtr=outPtr,numCharsToWrite=(maxBytesToWrite-=2)<2*str.length?maxBytesToWrite/2:str.length,i=0;i<numCharsToWrite;++i){var codeUnit=str.charCodeAt(i);HEAP16[outPtr>>>1]=codeUnit,outPtr+=2}return HEAP16[outPtr>>>1]=0,outPtr-startPtr},lengthBytesUTF16=str=>2*str.length,UTF32ToString=(ptr,maxBytesToRead)=>{for(var i=0,str="";!(maxBytesToRead/4<=i);){var ch,utf32=HEAP32[ptr+4*i>>>2];if(0==utf32)break;++i,65536<=utf32?(ch=utf32-65536,str+=String.fromCharCode(55296|ch>>10,56320|1023&ch)):str+=String.fromCharCode(utf32)}return str},stringToUTF32=(str,outPtr,maxBytesToWrite)=>{if((maxBytesToWrite=void 0===maxBytesToWrite?2147483647:maxBytesToWrite)<4)return 0;for(var startPtr=outPtr>>>=0,endPtr=startPtr+maxBytesToWrite-4,i=0;i<str.length;++i){var codeUnit=str.charCodeAt(i);if(55296<=codeUnit&&codeUnit<=57343&&(codeUnit=65536+((1023&codeUnit)<<10)|1023&str.charCodeAt(++i)),HEAP32[outPtr>>>2]=codeUnit,endPtr<(outPtr+=4)+4)break}return HEAP32[outPtr>>>2]=0,outPtr-startPtr},lengthBytesUTF32=str=>{for(var len=0,i=0;i<str.length;++i){var codeUnit=str.charCodeAt(i);55296<=codeUnit&&codeUnit<=57343&&++i,len+=4}return len},__embind_register_std_wstring=function(rawType,charSize,name){var decodeString,encodeString,getHeap,lengthBytesUTF,shift;rawType>>>=0,charSize>>>=0,name=readLatin1String(name>>>=0),2===charSize?(decodeString=UTF16ToString,encodeString=stringToUTF16,lengthBytesUTF=lengthBytesUTF16,getHeap=()=>HEAPU16,shift=1):4===charSize&&(decodeString=UTF32ToString,encodeString=stringToUTF32,lengthBytesUTF=lengthBytesUTF32,getHeap=()=>HEAPU32,shift=2),registerType(rawType,{name:name,fromWireType:function(value){for(var length=HEAPU32[value>>>2],HEAP=getHeap(),decodeStartPtr=value+4,i=0;i<=length;++i){var stringSegment,str,currentBytePtr=value+4+i*charSize;i!=length&&0!=HEAP[currentBytePtr>>>shift]||(stringSegment=decodeString(decodeStartPtr,currentBytePtr-decodeStartPtr),str=void 0===str?stringSegment:str+String.fromCharCode(0)+stringSegment,decodeStartPtr=currentBytePtr+charSize)}return _free(value),str},toWireType:function(destructors,value){"string"!=typeof value&&throwBindingError("Cannot pass non-string to C++ string type "+name);var length=lengthBytesUTF(value),ptr=_malloc(4+length+charSize);return HEAPU32[ptr>>>2]=length>>shift,encodeString(value,ptr+4,length+charSize),null!==destructors&&destructors.push(_free,ptr),ptr},argPackAdvance:8,readValueFromPointer:simpleReadValueFromPointer,destructorFunction:function(ptr){_free(ptr)}})};function __embind_register_value_object(rawType,name,constructorSignature,rawConstructor,destructorSignature,rawDestructor){constructorSignature>>>=0,rawConstructor>>>=0,destructorSignature>>>=0,rawDestructor>>>=0,structRegistrations[rawType>>>=0]={name:readLatin1String(name>>>=0),rawConstructor:embind__requireFunction(constructorSignature,rawConstructor),rawDestructor:embind__requireFunction(destructorSignature,rawDestructor),fields:[]}}function __embind_register_value_object_field(structType,fieldName,getterReturnType,getterSignature,getter,getterContext,setterArgumentType,setterSignature,setter,setterContext){getterReturnType>>>=0,getterSignature>>>=0,getter>>>=0,getterContext>>>=0,setterArgumentType>>>=0,setterSignature>>>=0,setter>>>=0,setterContext>>>=0,structRegistrations[structType>>>=0].fields.push({fieldName:readLatin1String(fieldName>>>=0),getterReturnType:getterReturnType,getter:embind__requireFunction(getterSignature,getter),getterContext:getterContext,setterArgumentType:setterArgumentType,setter:embind__requireFunction(setterSignature,setter),setterContext:setterContext})}function __embind_register_void(rawType,name){registerType(rawType>>>=0,{isVoid:!0,name:name=readLatin1String(name>>>=0),argPackAdvance:0,fromWireType:function(){},toWireType:function(destructors,o){}})}function __emval_incref(handle){4<(handle>>>=0)&&(emval_handles.get(handle).refcount+=1)}var emval_symbols={};function getStringOrSymbol(address){var symbol=emval_symbols[address];return void 0===symbol?readLatin1String(address):symbol}function __emval_new_cstring(v){return Emval.toHandle(getStringOrSymbol(v>>>=0))}function __emval_new_object(){return Emval.toHandle({})}function __emval_set_property(handle,key,value){key>>>=0,value>>>=0,handle=Emval.toValue(handle>>>=0),key=Emval.toValue(key),value=Emval.toValue(value),handle[key]=value}function requireRegisteredType(rawType,humanName){var impl=registeredTypes[rawType];return void 0===impl&&throwBindingError(humanName+" has unknown type "+getTypeName(rawType)),impl}function __emval_take_value(type,arg){arg>>>=0;type=(type=requireRegisteredType(type>>>=0,"_emval_take_value")).readValueFromPointer(arg);return Emval.toHandle(type)}var isLeapYear=year=>year%4==0&&(year%100!=0||year%400==0),MONTH_DAYS_LEAP_CUMULATIVE=[0,31,60,91,121,152,182,213,244,274,305,335],MONTH_DAYS_REGULAR_CUMULATIVE=[0,31,59,90,120,151,181,212,243,273,304,334],ydayFromDate=date=>(isLeapYear(date.getFullYear())?MONTH_DAYS_LEAP_CUMULATIVE:MONTH_DAYS_REGULAR_CUMULATIVE)[date.getMonth()]+date.getDate()-1;function __localtime_js(time_low,time_high,tmPtr){var time_low=convertI32PairToI53Checked(time_low,time_high),time_high=(tmPtr>>>=0,new Date(1e3*time_low)),time_low=(HEAP32[tmPtr>>>2]=time_high.getSeconds(),HEAP32[tmPtr+4>>>2]=time_high.getMinutes(),HEAP32[tmPtr+8>>>2]=time_high.getHours(),HEAP32[tmPtr+12>>>2]=time_high.getDate(),HEAP32[tmPtr+16>>>2]=time_high.getMonth(),HEAP32[tmPtr+20>>>2]=time_high.getFullYear()-1900,HEAP32[tmPtr+24>>>2]=time_high.getDay(),0|ydayFromDate(time_high)),time_low=(HEAP32[tmPtr+28>>>2]=time_low,HEAP32[tmPtr+36>>>2]=-60*time_high.getTimezoneOffset(),new Date(time_high.getFullYear(),0,1)),summerOffset=new Date(time_high.getFullYear(),6,1).getTimezoneOffset(),time_low=time_low.getTimezoneOffset(),time_high=0|(summerOffset!=time_low&&time_high.getTimezoneOffset()==Math.min(time_low,summerOffset));HEAP32[tmPtr+32>>>2]=time_high}var stringToNewUTF8=str=>{var size=lengthBytesUTF8(str)+1,ret=_malloc(size);return ret&&stringToUTF8(str,ret,size),ret};function __tzset_js(timezone,daylight,tzname){timezone>>>=0,daylight>>>=0,tzname>>>=0;var currentYear=(new Date).getFullYear(),winter=new Date(currentYear,0,1),currentYear=new Date(currentYear,6,1),winterOffset=winter.getTimezoneOffset(),summerOffset=currentYear.getTimezoneOffset(),stdTimezoneOffset=Math.max(winterOffset,summerOffset);function extractZone(date){date=date.toTimeString().match(/\(([A-Za-z ]+)\)$/);return date?date[1]:"GMT"}HEAPU32[timezone>>>2]=60*stdTimezoneOffset,HEAP32[daylight>>>2]=Number(winterOffset!=summerOffset);timezone=extractZone(winter),stdTimezoneOffset=extractZone(currentYear),daylight=stringToNewUTF8(timezone),winter=stringToNewUTF8(stdTimezoneOffset);summerOffset<winterOffset?(HEAPU32[tzname>>>2]=daylight,HEAPU32[tzname+4>>>2]=winter):(HEAPU32[tzname>>>2]=winter,HEAPU32[tzname+4>>>2]=daylight)}var _abort=()=>{abort("")};function _emscripten_date_now(){return Date.now()}function _emscripten_memcpy_big(dest,src,num){return HEAPU8.copyWithin((dest>>>=0)>>>0,(src>>>=0)>>>0,src+(num>>>=0)>>>0)}var getHeapMax=()=>4294901760,growMemory=size=>{size=size-wasmMemory.buffer.byteLength+65535>>>16;try{return wasmMemory.grow(size),updateMemoryViews(),1}catch(e){}};function _emscripten_resize_heap(requestedSize){requestedSize>>>=0;var oldSize=HEAPU8.length,maxHeapSize=getHeapMax();if(!(maxHeapSize<requestedSize))for(var multiple,cutDown=1;cutDown<=4;cutDown*=2){var overGrownHeapSize=oldSize*(1+.2/cutDown),overGrownHeapSize=Math.min(overGrownHeapSize,requestedSize+100663296),overGrownHeapSize=Math.min(maxHeapSize,(overGrownHeapSize=Math.max(requestedSize,overGrownHeapSize))+((multiple=65536)-overGrownHeapSize%multiple)%multiple);if(growMemory(overGrownHeapSize))return!0}return!1}function _emscripten_run_script(ptr){ptr>>>=0,eval(UTF8ToString(ptr))}var ENV={},getExecutableName=()=>thisProgram||"./this.program",getEnvStrings=()=>{if(!getEnvStrings.strings){var env={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:("object"==typeof navigator&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:getExecutableName()};for(x in ENV)void 0===ENV[x]?delete env[x]:env[x]=ENV[x];var x,strings=[];for(x in env)strings.push(x+"="+env[x]);getEnvStrings.strings=strings}return getEnvStrings.strings},stringToAscii=(str,buffer)=>{for(var i=0;i<str.length;++i)HEAP8[buffer++>>>0]=str.charCodeAt(i);HEAP8[buffer>>>0]=0},PATH={isAbs:path=>"/"===path.charAt(0),splitPath:filename=>/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/.exec(filename).slice(1),normalizeArray:(parts,allowAboveRoot)=>{for(var up=0,i=parts.length-1;0<=i;i--){var last=parts[i];"."===last?parts.splice(i,1):".."===last?(parts.splice(i,1),up++):up&&(parts.splice(i,1),up--)}if(allowAboveRoot)for(;up;up--)parts.unshift("..");return parts},normalize:path=>{var isAbsolute=PATH.isAbs(path),trailingSlash="/"===path.substr(-1);return(path=(path=PATH.normalizeArray(path.split("/").filter(p=>!!p),!isAbsolute).join("/"))||isAbsolute?path:".")&&trailingSlash&&(path+="/"),(isAbsolute?"/":"")+path},dirname:path=>{var path=PATH.splitPath(path),root=path[0],path=path[1];return root||path?root+(path=path&&path.substr(0,path.length-1)):"."},basename:path=>{var lastSlash;return"/"===path?"/":-1===(lastSlash=(path=(path=PATH.normalize(path)).replace(/\/$/,"")).lastIndexOf("/"))?path:path.substr(lastSlash+1)},join:function(){var paths=Array.prototype.slice.call(arguments);return PATH.normalize(paths.join("/"))},join2:(l,r)=>PATH.normalize(l+"/"+r)},initRandomFill=()=>{if("object"==typeof crypto&&"function"==typeof crypto.getRandomValues)return view=>crypto.getRandomValues(view);if(ENVIRONMENT_IS_NODE)try{var randomBytes,crypto_module=require("crypto");return crypto_module.randomFillSync?view=>crypto_module.randomFillSync(view):(randomBytes=crypto_module.randomBytes,view=>(view.set(randomBytes(view.byteLength)),view))}catch(e){}abort("initRandomDevice")},randomFill=view=>(randomFill=initRandomFill())(view),PATH_FS={resolve:function(){for(var resolvedPath="",resolvedAbsolute=!1,i=arguments.length-1;-1<=i&&!resolvedAbsolute;i--){var path=0<=i?arguments[i]:FS.cwd();if("string"!=typeof path)throw new TypeError("Arguments to path.resolve must be strings");if(!path)return"";resolvedPath=path+"/"+resolvedPath,resolvedAbsolute=PATH.isAbs(path)}return(resolvedAbsolute?"/":"")+(resolvedPath=PATH.normalizeArray(resolvedPath.split("/").filter(p=>!!p),!resolvedAbsolute).join("/"))||"."},relative:(from,to)=>{function trim(arr){for(var start=0;start<arr.length&&""===arr[start];start++);for(var end=arr.length-1;0<=end&&""===arr[end];end--);return end<start?[]:arr.slice(start,end-start+1)}from=PATH_FS.resolve(from).substr(1),to=PATH_FS.resolve(to).substr(1);for(var fromParts=trim(from.split("/")),toParts=trim(to.split("/")),length=Math.min(fromParts.length,toParts.length),samePartsLength=length,i=0;i<length;i++)if(fromParts[i]!==toParts[i]){samePartsLength=i;break}for(var outputParts=[],i=samePartsLength;i<fromParts.length;i++)outputParts.push("..");return(outputParts=outputParts.concat(toParts.slice(samePartsLength))).join("/")}},FS_stdin_getChar_buffer=[];function intArrayFromString(stringy,dontAddNull,length){length=0<length?length:lengthBytesUTF8(stringy)+1,length=new Array(length),stringy=stringToUTF8Array(stringy,length,0,length.length);return dontAddNull&&(length.length=stringy),length}var FS_stdin_getChar=()=>{if(!FS_stdin_getChar_buffer.length){var result=null;if(ENVIRONMENT_IS_NODE){var buf=Buffer.alloc(256),bytesRead=0,fd=process.stdin.fd;try{bytesRead=fs.readSync(fd,buf,0,256,-1)}catch(e){if(!e.toString().includes("EOF"))throw e;bytesRead=0}result=0<bytesRead?buf.slice(0,bytesRead).toString("utf-8"):null}else"undefined"!=typeof window&&"function"==typeof window.prompt?null!==(result=window.prompt("Input: "))&&(result+="\n"):"function"==typeof readline&&null!==(result=readline())&&(result+="\n");if(!result)return null;FS_stdin_getChar_buffer=intArrayFromString(result,!0)}return FS_stdin_getChar_buffer.shift()},TTY={ttys:[],init:function(){},shutdown:function(){},register:function(dev,ops){TTY.ttys[dev]={input:[],output:[],ops:ops},FS.registerDevice(dev,TTY.stream_ops)},stream_ops:{open:function(stream){var tty=TTY.ttys[stream.node.rdev];if(!tty)throw new FS.ErrnoError(43);stream.tty=tty,stream.seekable=!1},close:function(stream){stream.tty.ops.fsync(stream.tty)},fsync:function(stream){stream.tty.ops.fsync(stream.tty)},read:function(stream,buffer,offset,length,pos){if(!stream.tty||!stream.tty.ops.get_char)throw new FS.ErrnoError(60);for(var result,bytesRead=0,i=0;i<length;i++){try{result=stream.tty.ops.get_char(stream.tty)}catch(e){throw new FS.ErrnoError(29)}if(void 0===result&&0===bytesRead)throw new FS.ErrnoError(6);if(null==result)break;bytesRead++,buffer[offset+i]=result}return bytesRead&&(stream.node.timestamp=Date.now()),bytesRead},write:function(stream,buffer,offset,length,pos){if(!stream.tty||!stream.tty.ops.put_char)throw new FS.ErrnoError(60);try{for(var i=0;i<length;i++)stream.tty.ops.put_char(stream.tty,buffer[offset+i])}catch(e){throw new FS.ErrnoError(29)}return length&&(stream.node.timestamp=Date.now()),i}},default_tty_ops:{get_char:function(tty){return FS_stdin_getChar()},put_char:function(tty,val){null===val||10===val?(out(UTF8ArrayToString(tty.output,0)),tty.output=[]):0!=val&&tty.output.push(val)},fsync:function(tty){tty.output&&0<tty.output.length&&(out(UTF8ArrayToString(tty.output,0)),tty.output=[])},ioctl_tcgets:function(tty){return{c_iflag:25856,c_oflag:5,c_cflag:191,c_lflag:35387,c_cc:[3,28,127,21,4,0,1,0,17,19,26,0,18,15,23,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}},ioctl_tcsets:function(tty,optional_actions,data){return 0},ioctl_tiocgwinsz:function(tty){return[24,80]}},default_tty1_ops:{put_char:function(tty,val){null===val||10===val?(err(UTF8ArrayToString(tty.output,0)),tty.output=[]):0!=val&&tty.output.push(val)},fsync:function(tty){tty.output&&0<tty.output.length&&(err(UTF8ArrayToString(tty.output,0)),tty.output=[])}}},mmapAlloc=size=>{abort()},MEMFS={ops_table:null,mount(mount){return MEMFS.createNode(null,"/",16895,0)},createNode(parent,name,mode,dev){if(FS.isBlkdev(mode)||FS.isFIFO(mode))throw new FS.ErrnoError(63);MEMFS.ops_table||(MEMFS.ops_table={dir:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr,lookup:MEMFS.node_ops.lookup,mknod:MEMFS.node_ops.mknod,rename:MEMFS.node_ops.rename,unlink:MEMFS.node_ops.unlink,rmdir:MEMFS.node_ops.rmdir,readdir:MEMFS.node_ops.readdir,symlink:MEMFS.node_ops.symlink},stream:{llseek:MEMFS.stream_ops.llseek}},file:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr},stream:{llseek:MEMFS.stream_ops.llseek,read:MEMFS.stream_ops.read,write:MEMFS.stream_ops.write,allocate:MEMFS.stream_ops.allocate,mmap:MEMFS.stream_ops.mmap,msync:MEMFS.stream_ops.msync}},link:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr,readlink:MEMFS.node_ops.readlink},stream:{}},chrdev:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr},stream:FS.chrdev_stream_ops}});mode=FS.createNode(parent,name,mode,dev);return FS.isDir(mode.mode)?(mode.node_ops=MEMFS.ops_table.dir.node,mode.stream_ops=MEMFS.ops_table.dir.stream,mode.contents={}):FS.isFile(mode.mode)?(mode.node_ops=MEMFS.ops_table.file.node,mode.stream_ops=MEMFS.ops_table.file.stream,mode.usedBytes=0,mode.contents=null):FS.isLink(mode.mode)?(mode.node_ops=MEMFS.ops_table.link.node,mode.stream_ops=MEMFS.ops_table.link.stream):FS.isChrdev(mode.mode)&&(mode.node_ops=MEMFS.ops_table.chrdev.node,mode.stream_ops=MEMFS.ops_table.chrdev.stream),mode.timestamp=Date.now(),parent&&(parent.contents[name]=mode,parent.timestamp=mode.timestamp),mode},getFileDataAsTypedArray(node){return node.contents?node.contents.subarray?node.contents.subarray(0,node.usedBytes):new Uint8Array(node.contents):new Uint8Array(0)},expandFileStorage(node,newCapacity){var prevCapacity=node.contents?node.contents.length:0;newCapacity<=prevCapacity||(newCapacity=Math.max(newCapacity,prevCapacity*(prevCapacity<1048576?2:1.125)>>>0),0!=prevCapacity&&(newCapacity=Math.max(newCapacity,256)),prevCapacity=node.contents,node.contents=new Uint8Array(newCapacity),0<node.usedBytes&&node.contents.set(prevCapacity.subarray(0,node.usedBytes),0))},resizeFileStorage(node,newSize){var oldContents;node.usedBytes!=newSize&&(0==newSize?(node.contents=null,node.usedBytes=0):(oldContents=node.contents,node.contents=new Uint8Array(newSize),oldContents&&node.contents.set(oldContents.subarray(0,Math.min(newSize,node.usedBytes))),node.usedBytes=newSize))},node_ops:{getattr(node){var attr={};return attr.dev=FS.isChrdev(node.mode)?node.id:1,attr.ino=node.id,attr.mode=node.mode,attr.nlink=1,attr.uid=0,attr.gid=0,attr.rdev=node.rdev,FS.isDir(node.mode)?attr.size=4096:FS.isFile(node.mode)?attr.size=node.usedBytes:FS.isLink(node.mode)?attr.size=node.link.length:attr.size=0,attr.atime=new Date(node.timestamp),attr.mtime=new Date(node.timestamp),attr.ctime=new Date(node.timestamp),attr.blksize=4096,attr.blocks=Math.ceil(attr.size/attr.blksize),attr},setattr(node,attr){void 0!==attr.mode&&(node.mode=attr.mode),void 0!==attr.timestamp&&(node.timestamp=attr.timestamp),void 0!==attr.size&&MEMFS.resizeFileStorage(node,attr.size)},lookup(parent,name){throw FS.genericErrors[44]},mknod(parent,name,mode,dev){return MEMFS.createNode(parent,name,mode,dev)},rename(old_node,new_dir,new_name){if(FS.isDir(old_node.mode)){var new_node;try{new_node=FS.lookupNode(new_dir,new_name)}catch(e){}if(new_node)for(var i in new_node.contents)throw new FS.ErrnoError(55)}delete old_node.parent.contents[old_node.name],old_node.parent.timestamp=Date.now(),old_node.name=new_name,new_dir.contents[new_name]=old_node,new_dir.timestamp=old_node.parent.timestamp,old_node.parent=new_dir},unlink(parent,name){delete parent.contents[name],parent.timestamp=Date.now()},rmdir(parent,name){for(var i in FS.lookupNode(parent,name).contents)throw new FS.ErrnoError(55);delete parent.contents[name],parent.timestamp=Date.now()},readdir(node){var key,entries=[".",".."];for(key in node.contents)node.contents.hasOwnProperty(key)&&entries.push(key);return entries},symlink(parent,newname,oldpath){parent=MEMFS.createNode(parent,newname,41471,0);return parent.link=oldpath,parent},readlink(node){if(FS.isLink(node.mode))return node.link;throw new FS.ErrnoError(28)}},stream_ops:{read(stream,buffer,offset,length,position){var contents=stream.node.contents;if(position>=stream.node.usedBytes)return 0;var size=Math.min(stream.node.usedBytes-position,length);if(8<size&&contents.subarray)buffer.set(contents.subarray(position,position+size),offset);else for(var i=0;i<size;i++)buffer[offset+i]=contents[position+i];return size},write(stream,buffer,offset,length,position,canOwn){if(buffer.buffer===HEAP8.buffer&&(canOwn=!1),!length)return 0;var node=stream.node;if(node.timestamp=Date.now(),buffer.subarray&&(!node.contents||node.contents.subarray)){if(canOwn)return node.contents=buffer.subarray(offset,offset+length),node.usedBytes=length;if(0===node.usedBytes&&0===position)return node.contents=buffer.slice(offset,offset+length),node.usedBytes=length;if(position+length<=node.usedBytes)return node.contents.set(buffer.subarray(offset,offset+length),position),length}if(MEMFS.expandFileStorage(node,position+length),node.contents.subarray&&buffer.subarray)node.contents.set(buffer.subarray(offset,offset+length),position);else for(var i=0;i<length;i++)node.contents[position+i]=buffer[offset+i];return node.usedBytes=Math.max(node.usedBytes,position+length),length},llseek(stream,offset,whence){if(1===whence?offset+=stream.position:2===whence&&FS.isFile(stream.node.mode)&&(offset+=stream.node.usedBytes),offset<0)throw new FS.ErrnoError(28);return offset},allocate(stream,offset,length){MEMFS.expandFileStorage(stream.node,offset+length),stream.node.usedBytes=Math.max(stream.node.usedBytes,offset+length)},mmap(stream,length,position,prot,flags){if(!FS.isFile(stream.node.mode))throw new FS.ErrnoError(43);var ptr,allocated,stream=stream.node.contents;if(2&flags||stream.buffer!==HEAP8.buffer){if((0<position||position+length<stream.length)&&(stream=stream.subarray?stream.subarray(position,position+length):Array.prototype.slice.call(stream,position,position+length)),allocated=!0,!(ptr=mmapAlloc(length)))throw new FS.ErrnoError(48);HEAP8.set(stream,ptr>>>0)}else allocated=!1,ptr=stream.byteOffset;return{ptr:ptr,allocated:allocated}},msync(stream,buffer,offset,length,mmapFlags){return MEMFS.stream_ops.write(stream,buffer,0,length,offset,!1),0}}},asyncLoad=(url,onload,onerror,noRunDep)=>{var dep=noRunDep?"":getUniqueRunDependency("al "+url);readAsync(url,arrayBuffer=>{assert(arrayBuffer,`Loading data file "${url}" failed (no arrayBuffer).`),onload(new Uint8Array(arrayBuffer)),dep&&removeRunDependency(dep)},event=>{if(!onerror)throw`Loading data file "${url}" failed.`;onerror()}),dep&&addRunDependency(dep)},preloadPlugins=Module.preloadPlugins||[];function FS_handledByPreloadPlugin(byteArray,fullname,finish,onerror){"undefined"!=typeof Browser&&Browser.init();var handled=!1;return preloadPlugins.forEach(function(plugin){handled||plugin.canHandle(fullname)&&(plugin.handle(byteArray,fullname,finish,onerror),handled=!0)}),handled}function FS_createPreloadedFile(parent,name,url,canRead,canWrite,onload,onerror,dontCreateFile,canOwn,preFinish){var fullname=name?PATH_FS.resolve(PATH.join2(parent,name)):parent,dep=getUniqueRunDependency("cp "+fullname);function processData(byteArray){function finish(byteArray){preFinish&&preFinish(),dontCreateFile||FS.createDataFile(parent,name,byteArray,canRead,canWrite,canOwn),onload&&onload(),removeRunDependency(dep)}FS_handledByPreloadPlugin(byteArray,fullname,finish,()=>{onerror&&onerror(),removeRunDependency(dep)})||finish(byteArray)}addRunDependency(dep),"string"==typeof url?asyncLoad(url,byteArray=>processData(byteArray),onerror):processData(url)}function FS_modeStringToFlags(str){var flags={r:0,"r+":2,w:577,"w+":578,a:1089,"a+":1090}[str];if(void 0===flags)throw new Error("Unknown file open mode: "+str);return flags}function FS_getMode(canRead,canWrite){var mode=0;return canRead&&(mode|=365),canWrite&&(mode|=146),mode}var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:!1,ignorePermissions:!0,ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,lookupPath:(path,opts={})=>{if(!(path=PATH_FS.resolve(path)))return{path:"",node:null};if(8<(opts=Object.assign({follow_mount:!0,recurse_count:0},opts)).recurse_count)throw new FS.ErrnoError(32);for(var parts=path.split("/").filter(p=>!!p),current=FS.root,current_path="/",i=0;i<parts.length;i++){var islast=i===parts.length-1;if(islast&&opts.parent)break;if(current=FS.lookupNode(current,parts[i]),current_path=PATH.join2(current_path,parts[i]),!FS.isMountpoint(current)||islast&&!opts.follow_mount||(current=current.mounted.root),!islast||opts.follow)for(var count=0;FS.isLink(current.mode);){var link=FS.readlink(current_path),current_path=PATH_FS.resolve(PATH.dirname(current_path),link),current=FS.lookupPath(current_path,{recurse_count:opts.recurse_count+1}).node;if(40<count++)throw new FS.ErrnoError(32)}}return{path:current_path,node:current}},getPath:node=>{for(var path,mount;;){if(FS.isRoot(node))return mount=node.mount.mountpoint,path?"/"!==mount[mount.length-1]?mount+"/"+path:mount+path:mount;path=path?node.name+"/"+path:node.name,node=node.parent}},hashName:(parentid,name)=>{for(var hash=0,i=0;i<name.length;i++)hash=(hash<<5)-hash+name.charCodeAt(i)|0;return(parentid+hash>>>0)%FS.nameTable.length},hashAddNode:node=>{var hash=FS.hashName(node.parent.id,node.name);node.name_next=FS.nameTable[hash],FS.nameTable[hash]=node},hashRemoveNode:node=>{var hash=FS.hashName(node.parent.id,node.name);if(FS.nameTable[hash]===node)FS.nameTable[hash]=node.name_next;else for(var current=FS.nameTable[hash];current;){if(current.name_next===node){current.name_next=node.name_next;break}current=current.name_next}},lookupNode:(parent,name)=>{var errCode=FS.mayLookup(parent);if(errCode)throw new FS.ErrnoError(errCode,parent);for(var errCode=FS.hashName(parent.id,name),node=FS.nameTable[errCode];node;node=node.name_next){var nodeName=node.name;if(node.parent.id===parent.id&&nodeName===name)return node}return FS.lookup(parent,name)},createNode:(parent,name,mode,rdev)=>{parent=new FS.FSNode(parent,name,mode,rdev);return FS.hashAddNode(parent),parent},destroyNode:node=>{FS.hashRemoveNode(node)},isRoot:node=>node===node.parent,isMountpoint:node=>!!node.mounted,isFile:mode=>32768==(61440&mode),isDir:mode=>16384==(61440&mode),isLink:mode=>40960==(61440&mode),isChrdev:mode=>8192==(61440&mode),isBlkdev:mode=>24576==(61440&mode),isFIFO:mode=>4096==(61440&mode),isSocket:mode=>49152==(49152&mode),flagsToPermissionString:flag=>{var perms=["r","w","rw"][3&flag];return 512&flag&&(perms+="w"),perms},nodePermissions:(node,perms)=>FS.ignorePermissions||(!perms.includes("r")||292&node.mode)&&(!perms.includes("w")||146&node.mode)&&(!perms.includes("x")||73&node.mode)?0:2,mayLookup:dir=>{var errCode=FS.nodePermissions(dir,"x");return errCode||(dir.node_ops.lookup?0:2)},mayCreate:(dir,name)=>{try{FS.lookupNode(dir,name);return 20}catch(e){}return FS.nodePermissions(dir,"wx")},mayDelete:(dir,name,isdir)=>{var node;try{node=FS.lookupNode(dir,name)}catch(e){return e.errno}name=FS.nodePermissions(dir,"wx");if(name)return name;if(isdir){if(!FS.isDir(node.mode))return 54;if(FS.isRoot(node)||FS.getPath(node)===FS.cwd())return 10}else if(FS.isDir(node.mode))return 31;return 0},mayOpen:(node,flags)=>node?FS.isLink(node.mode)?32:FS.isDir(node.mode)&&("r"!==FS.flagsToPermissionString(flags)||512&flags)?31:FS.nodePermissions(node,FS.flagsToPermissionString(flags)):44,MAX_OPEN_FDS:4096,nextfd:()=>{for(var fd=0;fd<=FS.MAX_OPEN_FDS;fd++)if(!FS.streams[fd])return fd;throw new FS.ErrnoError(33)},getStreamChecked:fd=>{fd=FS.getStream(fd);if(fd)return fd;throw new FS.ErrnoError(8)},getStream:fd=>FS.streams[fd],createStream:(stream,fd=-1)=>(FS.FSStream||(FS.FSStream=function(){this.shared={}},FS.FSStream.prototype={},Object.defineProperties(FS.FSStream.prototype,{object:{get(){return this.node},set(val){this.node=val}},isRead:{get(){return 1!=(2097155&this.flags)}},isWrite:{get(){return 0!=(2097155&this.flags)}},isAppend:{get(){return 1024&this.flags}},flags:{get(){return this.shared.flags},set(val){this.shared.flags=val}},position:{get(){return this.shared.position},set(val){this.shared.position=val}}})),stream=Object.assign(new FS.FSStream,stream),-1==fd&&(fd=FS.nextfd()),stream.fd=fd,FS.streams[fd]=stream),closeStream:fd=>{FS.streams[fd]=null},chrdev_stream_ops:{open:stream=>{var device=FS.getDevice(stream.node.rdev);stream.stream_ops=device.stream_ops,stream.stream_ops.open&&stream.stream_ops.open(stream)},llseek:()=>{throw new FS.ErrnoError(70)}},major:dev=>dev>>8,minor:dev=>255&dev,makedev:(ma,mi)=>ma<<8|mi,registerDevice:(dev,ops)=>{FS.devices[dev]={stream_ops:ops}},getDevice:dev=>FS.devices[dev],getMounts:mount=>{for(var mounts=[],check=[mount];check.length;){var m=check.pop();mounts.push(m),check.push.apply(check,m.mounts)}return mounts},syncfs:(populate,callback)=>{"function"==typeof populate&&(callback=populate,populate=!1),FS.syncFSRequests++,1<FS.syncFSRequests&&err(`warning: ${FS.syncFSRequests} FS.syncfs operations in flight at once, probably just doing extra work`);var mounts=FS.getMounts(FS.root.mount),completed=0;function doCallback(errCode){return FS.syncFSRequests--,callback(errCode)}function done(errCode){if(errCode)return done.errored?void 0:(done.errored=!0,doCallback(errCode));++completed>=mounts.length&&doCallback(null)}mounts.forEach(mount=>{if(!mount.type.syncfs)return done(null);mount.type.syncfs(mount,populate,done)})},mount:(type,opts,mountpoint)=>{var node,root="/"===mountpoint,pseudo=!mountpoint;if(root&&FS.root)throw new FS.ErrnoError(10);if(!root&&!pseudo){pseudo=FS.lookupPath(mountpoint,{follow_mount:!1});if(mountpoint=pseudo.path,FS.isMountpoint(node=pseudo.node))throw new FS.ErrnoError(10);if(!FS.isDir(node.mode))throw new FS.ErrnoError(54)}pseudo={type:type,opts:opts,mountpoint:mountpoint,mounts:[]},opts=type.mount(pseudo);return(opts.mount=pseudo).root=opts,root?FS.root=opts:node&&(node.mounted=pseudo,node.mount)&&node.mount.mounts.push(pseudo),opts},unmount:mountpoint=>{mountpoint=FS.lookupPath(mountpoint,{follow_mount:!1});if(!FS.isMountpoint(mountpoint.node))throw new FS.ErrnoError(28);var mountpoint=mountpoint.node,mount=mountpoint.mounted,mounts=FS.getMounts(mount),mount=(Object.keys(FS.nameTable).forEach(hash=>{for(var current=FS.nameTable[hash];current;){var next=current.name_next;mounts.includes(current.mount)&&FS.destroyNode(current),current=next}}),mountpoint.mounted=null,mountpoint.mount.mounts.indexOf(mount));mountpoint.mount.mounts.splice(mount,1)},lookup:(parent,name)=>parent.node_ops.lookup(parent,name),mknod:(path,mode,dev)=>{var parent=FS.lookupPath(path,{parent:!0}).node,path=PATH.basename(path);if(!path||"."===path||".."===path)throw new FS.ErrnoError(28);var errCode=FS.mayCreate(parent,path);if(errCode)throw new FS.ErrnoError(errCode);if(parent.node_ops.mknod)return parent.node_ops.mknod(parent,path,mode,dev);throw new FS.ErrnoError(63)},create:(path,mode)=>FS.mknod(path,mode=(mode=void 0!==mode?mode:438)&4095|32768,0),mkdir:(path,mode)=>FS.mknod(path,mode=(mode=void 0!==mode?mode:511)&1023|16384,0),mkdirTree:(path,mode)=>{for(var dirs=path.split("/"),d="",i=0;i<dirs.length;++i)if(dirs[i]){d+="/"+dirs[i];try{FS.mkdir(d,mode)}catch(e){if(20!=e.errno)throw e}}},mkdev:(path,mode,dev)=>(void 0===dev&&(dev=mode,mode=438),FS.mknod(path,mode|=8192,dev)),symlink:(oldpath,newpath)=>{if(!PATH_FS.resolve(oldpath))throw new FS.ErrnoError(44);var parent=FS.lookupPath(newpath,{parent:!0}).node;if(!parent)throw new FS.ErrnoError(44);var newpath=PATH.basename(newpath),errCode=FS.mayCreate(parent,newpath);if(errCode)throw new FS.ErrnoError(errCode);if(parent.node_ops.symlink)return parent.node_ops.symlink(parent,newpath,oldpath);throw new FS.ErrnoError(63)},rename:(old_path,new_path)=>{var old_dirname=PATH.dirname(old_path),new_dirname=PATH.dirname(new_path),old_name=PATH.basename(old_path),new_name=PATH.basename(new_path),lookup=FS.lookupPath(old_path,{parent:!0}),lookup=lookup.node,new_dir=FS.lookupPath(new_path,{parent:!0}).node;if(!lookup||!new_dir)throw new FS.ErrnoError(44);if(lookup.mount!==new_dir.mount)throw new FS.ErrnoError(75);var new_node,old_node=FS.lookupNode(lookup,old_name),old_path=PATH_FS.relative(old_path,new_dirname);if("."!==old_path.charAt(0))throw new FS.ErrnoError(28);if("."!==(old_path=PATH_FS.relative(new_path,old_dirname)).charAt(0))throw new FS.ErrnoError(55);try{new_node=FS.lookupNode(new_dir,new_name)}catch(e){}if(old_node!==new_node){new_dirname=FS.isDir(old_node.mode),new_path=FS.mayDelete(lookup,old_name,new_dirname);if(new_path)throw new FS.ErrnoError(new_path);if(new_path=new_node?FS.mayDelete(new_dir,new_name,new_dirname):FS.mayCreate(new_dir,new_name))throw new FS.ErrnoError(new_path);if(!lookup.node_ops.rename)throw new FS.ErrnoError(63);if(FS.isMountpoint(old_node)||new_node&&FS.isMountpoint(new_node))throw new FS.ErrnoError(10);if(new_dir!==lookup&&(new_path=FS.nodePermissions(lookup,"w")))throw new FS.ErrnoError(new_path);FS.hashRemoveNode(old_node);try{lookup.node_ops.rename(old_node,new_dir,new_name)}catch(e){throw e}finally{FS.hashAddNode(old_node)}}},rmdir:path=>{var parent=FS.lookupPath(path,{parent:!0}).node,path=PATH.basename(path),node=FS.lookupNode(parent,path),errCode=FS.mayDelete(parent,path,!0);if(errCode)throw new FS.ErrnoError(errCode);if(!parent.node_ops.rmdir)throw new FS.ErrnoError(63);if(FS.isMountpoint(node))throw new FS.ErrnoError(10);parent.node_ops.rmdir(parent,path),FS.destroyNode(node)},readdir:path=>{path=FS.lookupPath(path,{follow:!0}).node;if(path.node_ops.readdir)return path.node_ops.readdir(path);throw new FS.ErrnoError(54)},unlink:path=>{var parent=FS.lookupPath(path,{parent:!0}).node;if(!parent)throw new FS.ErrnoError(44);var path=PATH.basename(path),node=FS.lookupNode(parent,path),errCode=FS.mayDelete(parent,path,!1);if(errCode)throw new FS.ErrnoError(errCode);if(!parent.node_ops.unlink)throw new FS.ErrnoError(63);if(FS.isMountpoint(node))throw new FS.ErrnoError(10);parent.node_ops.unlink(parent,path),FS.destroyNode(node)},readlink:path=>{path=FS.lookupPath(path).node;if(!path)throw new FS.ErrnoError(44);if(path.node_ops.readlink)return PATH_FS.resolve(FS.getPath(path.parent),path.node_ops.readlink(path));throw new FS.ErrnoError(28)},stat:(path,dontFollow)=>{path=FS.lookupPath(path,{follow:!dontFollow}).node;if(!path)throw new FS.ErrnoError(44);if(path.node_ops.getattr)return path.node_ops.getattr(path);throw new FS.ErrnoError(63)},lstat:path=>FS.stat(path,!0),chmod:(path,mode,dontFollow)=>{if(!(dontFollow="string"==typeof path?FS.lookupPath(path,{follow:!dontFollow}).node:path).node_ops.setattr)throw new FS.ErrnoError(63);dontFollow.node_ops.setattr(dontFollow,{mode:4095&mode|-4096&dontFollow.mode,timestamp:Date.now()})},lchmod:(path,mode)=>{FS.chmod(path,mode,!0)},fchmod:(fd,mode)=>{fd=FS.getStreamChecked(fd);FS.chmod(fd.node,mode)},chown:(path,uid,gid,dontFollow)=>{if(!(dontFollow="string"==typeof path?FS.lookupPath(path,{follow:!dontFollow}).node:path).node_ops.setattr)throw new FS.ErrnoError(63);dontFollow.node_ops.setattr(dontFollow,{timestamp:Date.now()})},lchown:(path,uid,gid)=>{FS.chown(path,uid,gid,!0)},fchown:(fd,uid,gid)=>{fd=FS.getStreamChecked(fd);FS.chown(fd.node,uid,gid)},truncate:(path,len)=>{if(len<0)throw new FS.ErrnoError(28);if(!(path="string"==typeof path?FS.lookupPath(path,{follow:!0}).node:path).node_ops.setattr)throw new FS.ErrnoError(63);if(FS.isDir(path.mode))throw new FS.ErrnoError(31);if(!FS.isFile(path.mode))throw new FS.ErrnoError(28);var errCode=FS.nodePermissions(path,"w");if(errCode)throw new FS.ErrnoError(errCode);path.node_ops.setattr(path,{size:len,timestamp:Date.now()})},ftruncate:(fd,len)=>{fd=FS.getStreamChecked(fd);if(0==(2097155&fd.flags))throw new FS.ErrnoError(28);FS.truncate(fd.node,len)},utime:(path,atime,mtime)=>{path=FS.lookupPath(path,{follow:!0}).node;path.node_ops.setattr(path,{timestamp:Math.max(atime,mtime)})},open:(path,flags,mode)=>{if(""===path)throw new FS.ErrnoError(44);if(mode=void 0===mode?438:mode,mode=64&(flags="string"==typeof flags?FS_modeStringToFlags(flags):flags)?4095&mode|32768:0,"object"==typeof path)node=path;else{path=PATH.normalize(path);try{var node=FS.lookupPath(path,{follow:!(131072&flags)}).node}catch(e){}}var created=!1;if(64&flags)if(node){if(128&flags)throw new FS.ErrnoError(20)}else node=FS.mknod(path,mode,0),created=!0;if(!node)throw new FS.ErrnoError(44);if(FS.isChrdev(node.mode)&&(flags&=-513),65536&flags&&!FS.isDir(node.mode))throw new FS.ErrnoError(54);if(!created){mode=FS.mayOpen(node,flags);if(mode)throw new FS.ErrnoError(mode)}512&flags&&!created&&FS.truncate(node,0),flags&=-131713;mode=FS.createStream({node:node,path:FS.getPath(node),flags:flags,seekable:!0,position:0,stream_ops:node.stream_ops,ungotten:[],error:!1});return mode.stream_ops.open&&mode.stream_ops.open(mode),!Module.logReadFiles||1&flags||(FS.readFiles||(FS.readFiles={}),path in FS.readFiles)||(FS.readFiles[path]=1),mode},close:stream=>{if(FS.isClosed(stream))throw new FS.ErrnoError(8);stream.getdents&&(stream.getdents=null);try{stream.stream_ops.close&&stream.stream_ops.close(stream)}catch(e){throw e}finally{FS.closeStream(stream.fd)}stream.fd=null},isClosed:stream=>null===stream.fd,llseek:(stream,offset,whence)=>{if(FS.isClosed(stream))throw new FS.ErrnoError(8);if(!stream.seekable||!stream.stream_ops.llseek)throw new FS.ErrnoError(70);if(0!=whence&&1!=whence&&2!=whence)throw new FS.ErrnoError(28);return stream.position=stream.stream_ops.llseek(stream,offset,whence),stream.ungotten=[],stream.position},read:(stream,buffer,offset,length,position)=>{if(length<0||position<0)throw new FS.ErrnoError(28);if(FS.isClosed(stream))throw new FS.ErrnoError(8);if(1==(2097155&stream.flags))throw new FS.ErrnoError(8);if(FS.isDir(stream.node.mode))throw new FS.ErrnoError(31);if(!stream.stream_ops.read)throw new FS.ErrnoError(28);var seeking=void 0!==position;if(seeking){if(!stream.seekable)throw new FS.ErrnoError(70)}else position=stream.position;buffer=stream.stream_ops.read(stream,buffer,offset,length,position);return seeking||(stream.position+=buffer),buffer},write:(stream,buffer,offset,length,position,canOwn)=>{if(length<0||position<0)throw new FS.ErrnoError(28);if(FS.isClosed(stream))throw new FS.ErrnoError(8);if(0==(2097155&stream.flags))throw new FS.ErrnoError(8);if(FS.isDir(stream.node.mode))throw new FS.ErrnoError(31);if(!stream.stream_ops.write)throw new FS.ErrnoError(28);stream.seekable&&1024&stream.flags&&FS.llseek(stream,0,2);var seeking=void 0!==position;if(seeking){if(!stream.seekable)throw new FS.ErrnoError(70)}else position=stream.position;buffer=stream.stream_ops.write(stream,buffer,offset,length,position,canOwn);return seeking||(stream.position+=buffer),buffer},allocate:(stream,offset,length)=>{if(FS.isClosed(stream))throw new FS.ErrnoError(8);if(offset<0||length<=0)throw new FS.ErrnoError(28);if(0==(2097155&stream.flags))throw new FS.ErrnoError(8);if(!FS.isFile(stream.node.mode)&&!FS.isDir(stream.node.mode))throw new FS.ErrnoError(43);if(!stream.stream_ops.allocate)throw new FS.ErrnoError(138);stream.stream_ops.allocate(stream,offset,length)},mmap:(stream,length,position,prot,flags)=>{if(0!=(2&prot)&&0==(2&flags)&&2!=(2097155&stream.flags))throw new FS.ErrnoError(2);if(1==(2097155&stream.flags))throw new FS.ErrnoError(2);if(stream.stream_ops.mmap)return stream.stream_ops.mmap(stream,length,position,prot,flags);throw new FS.ErrnoError(43)},msync:(stream,buffer,offset,length,mmapFlags)=>stream.stream_ops.msync?stream.stream_ops.msync(stream,buffer,offset,length,mmapFlags):0,munmap:stream=>0,ioctl:(stream,cmd,arg)=>{if(stream.stream_ops.ioctl)return stream.stream_ops.ioctl(stream,cmd,arg);throw new FS.ErrnoError(59)},readFile:(path,opts={})=>{if(opts.flags=opts.flags||0,opts.encoding=opts.encoding||"binary","utf8"!==opts.encoding&&"binary"!==opts.encoding)throw new Error(`Invalid encoding type "${opts.encoding}"`);var ret,stream=FS.open(path,opts.flags),path=FS.stat(path).size,buf=new Uint8Array(path);return FS.read(stream,buf,0,path,0),"utf8"===opts.encoding?ret=UTF8ArrayToString(buf,0):"binary"===opts.encoding&&(ret=buf),FS.close(stream),ret},writeFile:(path,data,opts={})=>{opts.flags=opts.flags||577;path=FS.open(path,opts.flags,opts.mode);if("string"==typeof data){var buf=new Uint8Array(lengthBytesUTF8(data)+1),actualNumBytes=stringToUTF8Array(data,buf,0,buf.length);FS.write(path,buf,0,actualNumBytes,void 0,opts.canOwn)}else{if(!ArrayBuffer.isView(data))throw new Error("Unsupported data type");FS.write(path,data,0,data.byteLength,void 0,opts.canOwn)}FS.close(path)},cwd:()=>FS.currentPath,chdir:path=>{path=FS.lookupPath(path,{follow:!0});if(null===path.node)throw new FS.ErrnoError(44);if(!FS.isDir(path.node.mode))throw new FS.ErrnoError(54);var errCode=FS.nodePermissions(path.node,"x");if(errCode)throw new FS.ErrnoError(errCode);FS.currentPath=path.path},createDefaultDirectories:()=>{FS.mkdir("/tmp"),FS.mkdir("/home"),FS.mkdir("/home/web_user")},createDefaultDevices:()=>{FS.mkdir("/dev"),FS.registerDevice(FS.makedev(1,3),{read:()=>0,write:(stream,buffer,offset,length,pos)=>length}),FS.mkdev("/dev/null",FS.makedev(1,3)),TTY.register(FS.makedev(5,0),TTY.default_tty_ops),TTY.register(FS.makedev(6,0),TTY.default_tty1_ops),FS.mkdev("/dev/tty",FS.makedev(5,0)),FS.mkdev("/dev/tty1",FS.makedev(6,0));var randomBuffer=new Uint8Array(1024),randomLeft=0,randomByte=()=>(0===randomLeft&&(randomLeft=randomFill(randomBuffer).byteLength),randomBuffer[--randomLeft]);FS.createDevice("/dev","random",randomByte),FS.createDevice("/dev","urandom",randomByte),FS.mkdir("/dev/shm"),FS.mkdir("/dev/shm/tmp")},createSpecialDirectories:()=>{FS.mkdir("/proc");var proc_self=FS.mkdir("/proc/self");FS.mkdir("/proc/self/fd"),FS.mount({mount:()=>{var node=FS.createNode(proc_self,"fd",16895,73);return node.node_ops={lookup:(parent,name)=>{var stream=FS.getStreamChecked(+name),name={parent:null,mount:{mountpoint:"fake"},node_ops:{readlink:()=>stream.path}};return name.parent=name}},node}},{},"/proc/self/fd")},createStandardStreams:()=>{Module.stdin?FS.createDevice("/dev","stdin",Module.stdin):FS.symlink("/dev/tty","/dev/stdin"),Module.stdout?FS.createDevice("/dev","stdout",null,Module.stdout):FS.symlink("/dev/tty","/dev/stdout"),Module.stderr?FS.createDevice("/dev","stderr",null,Module.stderr):FS.symlink("/dev/tty1","/dev/stderr");FS.open("/dev/stdin",0),FS.open("/dev/stdout",1),FS.open("/dev/stderr",1)},ensureErrnoError:()=>{FS.ErrnoError||(FS.ErrnoError=function(errno,node){this.name="ErrnoError",this.node=node,this.setErrno=function(errno){this.errno=errno},this.setErrno(errno),this.message="FS error"},FS.ErrnoError.prototype=new Error,FS.ErrnoError.prototype.constructor=FS.ErrnoError,[44].forEach(code=>{FS.genericErrors[code]=new FS.ErrnoError(code),FS.genericErrors[code].stack="<generic error, no stack>"}))},staticInit:()=>{FS.ensureErrnoError(),FS.nameTable=new Array(4096),FS.mount(MEMFS,{},"/"),FS.createDefaultDirectories(),FS.createDefaultDevices(),FS.createSpecialDirectories(),FS.filesystems={MEMFS:MEMFS}},init:(input,output,error)=>{FS.init.initialized=!0,FS.ensureErrnoError(),Module.stdin=input||Module.stdin,Module.stdout=output||Module.stdout,Module.stderr=error||Module.stderr,FS.createStandardStreams()},quit:()=>{FS.init.initialized=!1;for(var i=0;i<FS.streams.length;i++){var stream=FS.streams[i];stream&&FS.close(stream)}},findObject:(path,dontResolveLastLink)=>{path=FS.analyzePath(path,dontResolveLastLink);return path.exists?path.object:null},analyzePath:(path,dontResolveLastLink)=>{try{path=(lookup=FS.lookupPath(path,{follow:!dontResolveLastLink})).path}catch(e){}var ret={isRoot:!1,exists:!1,error:0,name:null,path:null,object:null,parentExists:!1,parentPath:null,parentObject:null};try{var lookup=FS.lookupPath(path,{parent:!0});ret.parentExists=!0,ret.parentPath=lookup.path,ret.parentObject=lookup.node,ret.name=PATH.basename(path),lookup=FS.lookupPath(path,{follow:!dontResolveLastLink}),ret.exists=!0,ret.path=lookup.path,ret.object=lookup.node,ret.name=lookup.node.name,ret.isRoot="/"===lookup.path}catch(e){ret.error=e.errno}return ret},createPath:(parent,path,canRead,canWrite)=>{parent="string"==typeof parent?parent:FS.getPath(parent);for(var parts=path.split("/").reverse();parts.length;){var part=parts.pop();if(part){var current=PATH.join2(parent,part);try{FS.mkdir(current)}catch(e){}parent=current}}return current},createFile:(parent,name,properties,canRead,canWrite)=>{parent=PATH.join2("string"==typeof parent?parent:FS.getPath(parent),name),name=FS_getMode(canRead,canWrite);return FS.create(parent,name)},createDataFile:(parent,name,data,canRead,canWrite,canOwn)=>{var path=name,name=(parent&&(parent="string"==typeof parent?parent:FS.getPath(parent),path=name?PATH.join2(parent,name):parent),FS_getMode(canRead,canWrite)),parent=FS.create(path,name);if(data){if("string"==typeof data){for(var arr=new Array(data.length),i=0,len=data.length;i<len;++i)arr[i]=data.charCodeAt(i);data=arr}FS.chmod(parent,146|name);canRead=FS.open(parent,577);FS.write(canRead,data,0,data.length,0,canOwn),FS.close(canRead),FS.chmod(parent,name)}return parent},createDevice:(parent,name,input,output)=>{var parent=PATH.join2("string"==typeof parent?parent:FS.getPath(parent),name),name=FS_getMode(!!input,!!output),dev=(FS.createDevice.major||(FS.createDevice.major=64),FS.makedev(FS.createDevice.major++,0));return FS.registerDevice(dev,{open:stream=>{stream.seekable=!1},close:stream=>{output&&output.buffer&&output.buffer.length&&output(10)},read:(stream,buffer,offset,length,pos)=>{for(var result,bytesRead=0,i=0;i<length;i++){try{result=input()}catch(e){throw new FS.ErrnoError(29)}if(void 0===result&&0===bytesRead)throw new FS.ErrnoError(6);if(null==result)break;bytesRead++,buffer[offset+i]=result}return bytesRead&&(stream.node.timestamp=Date.now()),bytesRead},write:(stream,buffer,offset,length,pos)=>{for(var i=0;i<length;i++)try{output(buffer[offset+i])}catch(e){throw new FS.ErrnoError(29)}return length&&(stream.node.timestamp=Date.now()),i}}),FS.mkdev(parent,name,dev)},forceLoadFile:obj=>{if(obj.isDevice||obj.isFolder||obj.link||obj.contents)return!0;if("undefined"!=typeof XMLHttpRequest)throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");if(!read_)throw new Error("Cannot load without read() or XMLHttpRequest.");try{obj.contents=intArrayFromString(read_(obj.url),!0),obj.usedBytes=obj.contents.length}catch(e){throw new FS.ErrnoError(29)}},createLazyFile:(parent,name,url,canRead,canWrite)=>{function LazyUint8Array(){this.lengthKnown=!1,this.chunks=[]}if(LazyUint8Array.prototype.get=function(idx){var chunkOffset;if(!(idx>this.length-1||idx<0))return chunkOffset=idx%this.chunkSize,idx=idx/this.chunkSize|0,this.getter(idx)[chunkOffset]},LazyUint8Array.prototype.setDataGetter=function(getter){this.getter=getter},LazyUint8Array.prototype.cacheLength=function(){var xhr=new XMLHttpRequest;if(xhr.open("HEAD",url,!1),xhr.send(null),!(200<=xhr.status&&xhr.status<300||304===xhr.status))throw new Error("Couldn't load "+url+". Status: "+xhr.status);var header,datalength=Number(xhr.getResponseHeader("Content-length")),hasByteServing=(header=xhr.getResponseHeader("Accept-Ranges"))&&"bytes"===header,xhr=(header=xhr.getResponseHeader("Content-Encoding"))&&"gzip"===header,chunkSize=1048576,lazyArray=(hasByteServing||(chunkSize=datalength),this);lazyArray.setDataGetter(chunkNum=>{var start=chunkNum*chunkSize,end=(chunkNum+1)*chunkSize-1,end=Math.min(end,datalength-1);if(void 0===lazyArray.chunks[chunkNum]&&(lazyArray.chunks[chunkNum]=((from,to)=>{if(to<from)throw new Error("invalid range ("+from+", "+to+") or no bytes requested!");if(datalength-1<to)throw new Error("only "+datalength+" bytes available! programmer error!");var xhr=new XMLHttpRequest;if(xhr.open("GET",url,!1),datalength!==chunkSize&&xhr.setRequestHeader("Range","bytes="+from+"-"+to),xhr.responseType="arraybuffer",xhr.overrideMimeType&&xhr.overrideMimeType("text/plain; charset=x-user-defined"),xhr.send(null),200<=xhr.status&&xhr.status<300||304===xhr.status)return void 0!==xhr.response?new Uint8Array(xhr.response||[]):intArrayFromString(xhr.responseText||"",!0);throw new Error("Couldn't load "+url+". Status: "+xhr.status)})(start,end)),void 0===lazyArray.chunks[chunkNum])throw new Error("doXHR failed!");return lazyArray.chunks[chunkNum]}),!xhr&&datalength||(chunkSize=datalength=1,datalength=this.getter(0).length,chunkSize=datalength,out("LazyFiles on gzip forces download of the whole file when length is accessed")),this._length=datalength,this._chunkSize=chunkSize,this.lengthKnown=!0},"undefined"!=typeof XMLHttpRequest){if(!ENVIRONMENT_IS_WORKER)throw"Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc";var lazyArray=new LazyUint8Array,lazyArray=(Object.defineProperties(lazyArray,{length:{get:function(){return this.lengthKnown||this.cacheLength(),this._length}},chunkSize:{get:function(){return this.lengthKnown||this.cacheLength(),this._chunkSize}}}),{isDevice:!1,contents:lazyArray})}else lazyArray={isDevice:!1,url:url};var node=FS.createFile(parent,name,lazyArray,canRead,canWrite),stream_ops=(lazyArray.contents?node.contents=lazyArray.contents:lazyArray.url&&(node.contents=null,node.url=lazyArray.url),Object.defineProperties(node,{usedBytes:{get:function(){return this.contents.length}}}),{});function writeChunks(stream,buffer,offset,length,position){var contents=stream.node.contents;if(position>=contents.length)return 0;var size=Math.min(contents.length-position,length);if(contents.slice)for(var i=0;i<size;i++)buffer[offset+i]=contents[position+i];else for(i=0;i<size;i++)buffer[offset+i]=contents.get(position+i);return size}return Object.keys(node.stream_ops).forEach(key=>{var fn=node.stream_ops[key];stream_ops[key]=function(){return FS.forceLoadFile(node),fn.apply(null,arguments)}}),stream_ops.read=(stream,buffer,offset,length,position)=>(FS.forceLoadFile(node),writeChunks(stream,buffer,offset,length,position)),stream_ops.mmap=(stream,length,position,prot,flags)=>{FS.forceLoadFile(node);var ptr=mmapAlloc(length);if(ptr)return writeChunks(stream,HEAP8,ptr,length,position),{ptr:ptr,allocated:!0};throw new FS.ErrnoError(48)},node.stream_ops=stream_ops,node}},SYSCALLS={DEFAULT_POLLMASK:5,calculateAt:function(dirfd,path,allowEmpty){if(PATH.isAbs(path))return path;if(dirfd=-100===dirfd?FS.cwd():SYSCALLS.getStreamFromFD(dirfd).path,0!=path.length)return PATH.join2(dirfd,path);if(allowEmpty)return dirfd;throw new FS.ErrnoError(44)},doStat:function(func,path,buf){try{var stat=func(path)}catch(e){if(e&&e.node&&PATH.normalize(path)!==PATH.normalize(FS.getPath(e.node)))return-54;throw e}HEAP32[buf>>>2]=stat.dev,HEAP32[buf+4>>>2]=stat.mode,HEAPU32[buf+8>>>2]=stat.nlink,HEAP32[buf+12>>>2]=stat.uid,HEAP32[buf+16>>>2]=stat.gid,HEAP32[buf+20>>>2]=stat.rdev,tempI64=[stat.size>>>0,(tempDouble=stat.size,1<=+Math.abs(tempDouble)?0<tempDouble?+Math.floor(tempDouble/4294967296)>>>0:~~+Math.ceil((tempDouble-(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[buf+24>>>2]=tempI64[0],HEAP32[buf+28>>>2]=tempI64[1],HEAP32[buf+32>>>2]=4096,HEAP32[buf+36>>>2]=stat.blocks;var func=stat.atime.getTime(),path=stat.mtime.getTime(),ctime=stat.ctime.getTime();return tempI64=[Math.floor(func/1e3)>>>0,(tempDouble=Math.floor(func/1e3),1<=+Math.abs(tempDouble)?0<tempDouble?+Math.floor(tempDouble/4294967296)>>>0:~~+Math.ceil((tempDouble-(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[buf+40>>>2]=tempI64[0],HEAP32[buf+44>>>2]=tempI64[1],HEAPU32[buf+48>>>2]=func%1e3*1e3,tempI64=[Math.floor(path/1e3)>>>0,(tempDouble=Math.floor(path/1e3),1<=+Math.abs(tempDouble)?0<tempDouble?+Math.floor(tempDouble/4294967296)>>>0:~~+Math.ceil((tempDouble-(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[buf+56>>>2]=tempI64[0],HEAP32[buf+60>>>2]=tempI64[1],HEAPU32[buf+64>>>2]=path%1e3*1e3,tempI64=[Math.floor(ctime/1e3)>>>0,(tempDouble=Math.floor(ctime/1e3),1<=+Math.abs(tempDouble)?0<tempDouble?+Math.floor(tempDouble/4294967296)>>>0:~~+Math.ceil((tempDouble-(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[buf+72>>>2]=tempI64[0],HEAP32[buf+76>>>2]=tempI64[1],HEAPU32[buf+80>>>2]=ctime%1e3*1e3,tempI64=[stat.ino>>>0,(tempDouble=stat.ino,1<=+Math.abs(tempDouble)?0<tempDouble?+Math.floor(tempDouble/4294967296)>>>0:~~+Math.ceil((tempDouble-(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[buf+88>>>2]=tempI64[0],HEAP32[buf+92>>>2]=tempI64[1],0},doMsync:function(addr,stream,len,flags,offset){if(!FS.isFile(stream.node.mode))throw new FS.ErrnoError(43);if(2&flags)return 0;addr=HEAPU8.slice(addr,addr+len);FS.msync(stream,addr,offset,len,flags)},varargs:void 0,get(){return SYSCALLS.varargs+=4,HEAP32[SYSCALLS.varargs-4>>>2]},getStr(ptr){return UTF8ToString(ptr)},getStreamFromFD:function(fd){return FS.getStreamChecked(fd)}};function _environ_get(__environ,environ_buf){__environ>>>=0,environ_buf>>>=0;var bufSize=0;return getEnvStrings().forEach(function(string,i){var ptr=environ_buf+bufSize;HEAPU32[__environ+4*i>>>2]=ptr,stringToAscii(string,ptr),bufSize+=string.length+1}),0}function _environ_sizes_get(penviron_count,penviron_buf_size){penviron_count>>>=0,penviron_buf_size>>>=0;var strings=getEnvStrings(),bufSize=(HEAPU32[penviron_count>>>2]=strings.length,0);return strings.forEach(function(string){bufSize+=string.length+1}),HEAPU32[penviron_buf_size>>>2]=bufSize,0}function _fd_close(fd){try{var stream=SYSCALLS.getStreamFromFD(fd);return FS.close(stream),0}catch(e){if(void 0===FS||"ErrnoError"!==e.name)throw e;return e.errno}}var doReadv=(stream,iov,iovcnt,offset)=>{for(var ret=0,i=0;i<iovcnt;i++){var ptr=HEAPU32[iov>>>2],len=HEAPU32[iov+4>>>2],ptr=(iov+=8,FS.read(stream,HEAP8,ptr,len,offset));if(ptr<0)return-1;if(ret+=ptr,ptr<len)break;void 0!==offset&&(offset+=ptr)}return ret};function _fd_read(fd,iov,iovcnt,pnum){iov>>>=0,iovcnt>>>=0,pnum>>>=0;try{var stream=SYSCALLS.getStreamFromFD(fd),num=doReadv(stream,iov,iovcnt);return HEAPU32[pnum>>>2]=num,0}catch(e){if(void 0===FS||"ErrnoError"!==e.name)throw e;return e.errno}}function _fd_seek(fd,offset_low,offset_high,whence,newOffset){var stream,offset_low=convertI32PairToI53Checked(offset_low,offset_high);newOffset>>>=0;try{return isNaN(offset_low)?61:(stream=SYSCALLS.getStreamFromFD(fd),FS.llseek(stream,offset_low,whence),tempI64=[stream.position>>>0,(tempDouble=stream.position,1<=+Math.abs(tempDouble)?0<tempDouble?+Math.floor(tempDouble/4294967296)>>>0:~~+Math.ceil((tempDouble-(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[newOffset>>>2]=tempI64[0],HEAP32[newOffset+4>>>2]=tempI64[1],stream.getdents&&0===offset_low&&0===whence&&(stream.getdents=null),0)}catch(e){if(void 0===FS||"ErrnoError"!==e.name)throw e;return e.errno}}var doWritev=(stream,iov,iovcnt,offset)=>{for(var ret=0,i=0;i<iovcnt;i++){var ptr=HEAPU32[iov>>>2],len=HEAPU32[iov+4>>>2],ptr=(iov+=8,FS.write(stream,HEAP8,ptr,len,offset));if(ptr<0)return-1;ret+=ptr,void 0!==offset&&(offset+=ptr)}return ret};function _fd_write(fd,iov,iovcnt,pnum){iov>>>=0,iovcnt>>>=0,pnum>>>=0;try{var stream=SYSCALLS.getStreamFromFD(fd),num=doWritev(stream,iov,iovcnt);return HEAPU32[pnum>>>2]=num,0}catch(e){if(void 0===FS||"ErrnoError"!==e.name)throw e;return e.errno}}var arraySum=(array,index)=>{for(var sum=0,i=0;i<=index;sum+=array[i++]);return sum},MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31],MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31],addDays=(date,days)=>{for(var newDate=new Date(date.getTime());0<days;){var leap=isLeapYear(newDate.getFullYear()),currentMonth=newDate.getMonth(),leap=(leap?MONTH_DAYS_LEAP:MONTH_DAYS_REGULAR)[currentMonth];if(!(days>leap-newDate.getDate()))return newDate.setDate(newDate.getDate()+days),newDate;days-=leap-newDate.getDate()+1,newDate.setDate(1),currentMonth<11?newDate.setMonth(currentMonth+1):(newDate.setMonth(0),newDate.setFullYear(newDate.getFullYear()+1))}return newDate},writeArrayToMemory=(array,buffer)=>{HEAP8.set(array,buffer>>>0)};function _strftime(s,maxsize,format,tm){s>>>=0,maxsize>>>=0,format>>>=0;var tm_zone=HEAP32[(tm>>>=0)+40>>>2],date={tm_sec:HEAP32[tm>>>2],tm_min:HEAP32[tm+4>>>2],tm_hour:HEAP32[tm+8>>>2],tm_mday:HEAP32[tm+12>>>2],tm_mon:HEAP32[tm+16>>>2],tm_year:HEAP32[tm+20>>>2],tm_wday:HEAP32[tm+24>>>2],tm_yday:HEAP32[tm+28>>>2],tm_isdst:HEAP32[tm+32>>>2],tm_gmtoff:HEAP32[tm+36>>>2],tm_zone:tm_zone?UTF8ToString(tm_zone):""},pattern=UTF8ToString(format),EXPANSION_RULES_1={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(rule in EXPANSION_RULES_1)pattern=pattern.replace(new RegExp(rule,"g"),EXPANSION_RULES_1[rule]);var WEEKDAYS=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],MONTHS=["January","February","March","April","May","June","July","August","September","October","November","December"];function leadingSomething(value,digits,character){for(var str="number"==typeof value?value.toString():value||"";str.length<digits;)str=character[0]+str;return str}function leadingNulls(value,digits){return leadingSomething(value,digits,"0")}function compareByDay(date1,date2){function sgn(value){return value<0?-1:0<value?1:0}var compare;return compare=0===(compare=sgn(date1.getFullYear()-date2.getFullYear()))&&0===(compare=sgn(date1.getMonth()-date2.getMonth()))?sgn(date1.getDate()-date2.getDate()):compare}function getFirstWeekStartDate(janFourth){switch(janFourth.getDay()){case 0:return new Date(janFourth.getFullYear()-1,11,29);case 1:return janFourth;case 2:return new Date(janFourth.getFullYear(),0,3);case 3:return new Date(janFourth.getFullYear(),0,2);case 4:return new Date(janFourth.getFullYear(),0,1);case 5:return new Date(janFourth.getFullYear()-1,11,31);case 6:return new Date(janFourth.getFullYear()-1,11,30)}}function getWeekBasedYear(date){var date=addDays(new Date(date.tm_year+1900,0,1),date.tm_yday),janFourthThisYear=new Date(date.getFullYear(),0,4),janFourthNextYear=new Date(date.getFullYear()+1,0,4),janFourthThisYear=getFirstWeekStartDate(janFourthThisYear),janFourthNextYear=getFirstWeekStartDate(janFourthNextYear);return compareByDay(janFourthThisYear,date)<=0?compareByDay(janFourthNextYear,date)<=0?date.getFullYear()+1:date.getFullYear():date.getFullYear()-1}var rule,EXPANSION_RULES_2={"%a":date=>WEEKDAYS[date.tm_wday].substring(0,3),"%A":date=>WEEKDAYS[date.tm_wday],"%b":date=>MONTHS[date.tm_mon].substring(0,3),"%B":date=>MONTHS[date.tm_mon],"%C":date=>leadingNulls((date.tm_year+1900)/100|0,2),"%d":date=>leadingNulls(date.tm_mday,2),"%e":date=>leadingSomething(date.tm_mday,2," "),"%g":date=>getWeekBasedYear(date).toString().substring(2),"%G":date=>getWeekBasedYear(date),"%H":date=>leadingNulls(date.tm_hour,2),"%I":date=>{date=date.tm_hour;return 0==date?date=12:12<date&&(date-=12),leadingNulls(date,2)},"%j":date=>leadingNulls(date.tm_mday+arraySum(isLeapYear(date.tm_year+1900)?MONTH_DAYS_LEAP:MONTH_DAYS_REGULAR,date.tm_mon-1),3),"%m":date=>leadingNulls(date.tm_mon+1,2),"%M":date=>leadingNulls(date.tm_min,2),"%n":()=>"\n","%p":date=>0<=date.tm_hour&&date.tm_hour<12?"AM":"PM","%S":date=>leadingNulls(date.tm_sec,2),"%t":()=>"\t","%u":date=>date.tm_wday||7,"%U":date=>{date=date.tm_yday+7-date.tm_wday;return leadingNulls(Math.floor(date/7),2)},"%V":date=>{var jan1,val=Math.floor((date.tm_yday+7-(date.tm_wday+6)%7)/7);return(date.tm_wday+371-date.tm_yday-2)%7<=2&&val++,val?53!=val||4==(jan1=(date.tm_wday+371-date.tm_yday)%7)||3==jan1&&isLeapYear(date.tm_year)||(val=1):(val=52,(4==(jan1=(date.tm_wday+7-date.tm_yday-1)%7)||5==jan1&&isLeapYear(date.tm_year%400-1))&&val++),leadingNulls(val,2)},"%w":date=>date.tm_wday,"%W":date=>{date=date.tm_yday+7-(date.tm_wday+6)%7;return leadingNulls(Math.floor(date/7),2)},"%y":date=>(date.tm_year+1900).toString().substring(2),"%Y":date=>date.tm_year+1900,"%z":date=>{var ahead=0<=(date=date.tm_gmtoff),date=Math.abs(date)/60;return(ahead?"+":"-")+String("0000"+(date/60*100+date%60)).slice(-4)},"%Z":date=>date.tm_zone,"%%":()=>"%"},pattern=pattern.replace(/%%/g,"\0\0");for(rule in EXPANSION_RULES_2)pattern.includes(rule)&&(pattern=pattern.replace(new RegExp(rule,"g"),EXPANSION_RULES_2[rule](date)));tm=intArrayFromString(pattern=pattern.replace(/\0\0/g,"%"),!1);return tm.length>maxsize?0:(writeArrayToMemory(tm,s),tm.length-1)}function _strftime_l(s,maxsize,format,tm,loc){return _strftime(s>>>=0,maxsize>>>=0,format>>>=0,tm>>>=0)}function uleb128Encode(n,target){n<128?target.push(n):target.push(n%128|128,n>>7)}function sigToWasmTypes(sig){for(var typeNames={i:"i32",j:"i64",f:"f32",d:"f64",p:"i32"},type={parameters:[],results:"v"==sig[0]?[]:[typeNames[sig[0]]]},i=1;i<sig.length;++i)type.parameters.push(typeNames[sig[i]]);return type}function generateFuncType(sig,target){var sigRet=sig.slice(0,1),sigParam=sig.slice(1),typeCodes={i:127,p:127,j:126,f:125,d:124};target.push(96),uleb128Encode(sigParam.length,target);for(var i=0;i<sigParam.length;++i)target.push(typeCodes[sigParam[i]]);"v"==sigRet?target.push(0):target.push(1,typeCodes[sigRet])}function convertJsFunctionToWasm(func,sig){var bytes;return"function"==typeof WebAssembly.Function?new WebAssembly.Function(sigToWasmTypes(sig),func):(generateFuncType(sig,sig=[1]),uleb128Encode(sig.length,bytes=[0,97,115,109,1,0,0,0,1]),bytes.push.apply(bytes,sig),bytes.push(2,7,1,1,101,1,102,0,0,7,5,1,1,102,0,0),sig=new WebAssembly.Module(new Uint8Array(bytes)),new WebAssembly.Instance(sig,{e:{f:func}}).exports.f)}function updateTableMap(offset,count){if(functionsInTableMap)for(var i=offset;i<offset+count;i++){var item=getWasmTableEntry(i);item&&functionsInTableMap.set(item,i)}}var functionsInTableMap=void 0;function getFunctionAddress(func){return functionsInTableMap||(functionsInTableMap=new WeakMap,updateTableMap(0,wasmTable.length)),functionsInTableMap.get(func)||0}var freeTableIndexes=[];function getEmptyTableSlot(){if(freeTableIndexes.length)return freeTableIndexes.pop();try{wasmTable.grow(1)}catch(err){if(err instanceof RangeError)throw"Unable to grow wasm table. Set ALLOW_TABLE_GROWTH.";throw err}return wasmTable.length-1}var setWasmTableEntry=(idx,func)=>{wasmTable.set(idx,func),wasmTableMirror[idx]=wasmTable.get(idx)};function addFunction(func,sig){var rtn=getFunctionAddress(func);if(rtn)return rtn;rtn=getEmptyTableSlot();try{setWasmTableEntry(rtn,func)}catch(err){if(!(err instanceof TypeError))throw err;sig=convertJsFunctionToWasm(func,sig);setWasmTableEntry(rtn,sig)}return functionsInTableMap.set(func,rtn),rtn}function removeFunction(index){functionsInTableMap.delete(getWasmTableEntry(index)),freeTableIndexes.push(index)}function getCFunc(ident){return Module["_"+ident]}var stringToUTF8OnStack=str=>{var size=lengthBytesUTF8(str)+1,ret=stackAlloc(size);return stringToUTF8(str,ret,size),ret},ccall=function(ident,returnType,argTypes,args,opts){var toC={string:str=>{var ret=0;return ret=null!=str&&0!==str?stringToUTF8OnStack(str):ret},array:arr=>{var ret=stackAlloc(arr.length);return writeArrayToMemory(arr,ret),ret}};var ident=getCFunc(ident),cArgs=[],stack=0;if(args)for(var i=0;i<args.length;i++){var converter=toC[argTypes[i]];converter?(0===stack&&(stack=stackSave()),cArgs[i]=converter(args[i])):cArgs[i]=args[i]}return function(ret){return 0!==stack&&stackRestore(stack),function(ret){return"string"===returnType?UTF8ToString(ret):"boolean"===returnType?Boolean(ret):ret}(ret)}(ident.apply(null,cArgs))},cwrap=function(ident,returnType,argTypes,opts){var numericArgs=!argTypes||argTypes.every(type=>"number"===type||"boolean"===type);return"string"!==returnType&&numericArgs&&!opts?getCFunc(ident):function(){return ccall(ident,returnType,argTypes,arguments,opts)}},InternalError=Module.InternalError=class InternalError extends Error{constructor(message){super(message),this.name="InternalError"}},FSNode=(embind_init_charCodes(),BindingError=Module.BindingError=class BindingError extends Error{constructor(message){super(message),this.name="BindingError"}},init_ClassHandle(),init_embind(),init_RegisteredPointer(),UnboundTypeError=Module.UnboundTypeError=extendError(Error,"UnboundTypeError"),handleAllocatorInit(),init_emval(),function(parent,name,mode,rdev){this.parent=parent=parent||this,this.mount=parent.mount,this.mounted=null,this.id=FS.nextInode++,this.name=name,this.mode=mode,this.node_ops={},this.stream_ops={},this.rdev=rdev}),readMode=365,writeMode=146,wasmImports=(Object.defineProperties(FSNode.prototype,{read:{get:function(){return(this.mode&readMode)===readMode},set:function(val){val?this.mode|=readMode:this.mode&=~readMode}},write:{get:function(){return(this.mode&writeMode)===writeMode},set:function(val){val?this.mode|=writeMode:this.mode&=~writeMode}},isFolder:{get:function(){return FS.isDir(this.mode)}},isDevice:{get:function(){return FS.isChrdev(this.mode)}}}),FS.FSNode=FSNode,FS.createPreloadedFile=FS_createPreloadedFile,FS.staticInit(),{b:___assert_fail,c:___cxa_throw,n:__embind_finalize_value_object,B:__embind_register_bigint,M:__embind_register_bool,p:__embind_register_class,o:__embind_register_class_constructor,f:__embind_register_class_function,L:__embind_register_emval,y:__embind_register_float,d:__embind_register_function,m:__embind_register_integer,j:__embind_register_memory_view,x:__embind_register_std_string,t:__embind_register_std_wstring,l:__embind_register_value_object,e:__embind_register_value_object_field,N:__embind_register_void,i:__emval_decref,k:__emval_incref,r:__emval_new_cstring,u:__emval_new_object,q:__emval_set_property,g:__emval_take_value,A:__localtime_js,F:__tzset_js,s:_abort,w:_emscripten_date_now,K:_emscripten_memcpy_big,E:_emscripten_resize_heap,h:_emscripten_run_script,I:_environ_get,J:_environ_sizes_get,H:_fd_close,D:_fd_read,z:_fd_seek,v:_fd_write,a:wasmMemory,G:_strftime,C:_strftime_l}),asm=createWasm(),___wasm_call_ctors=asm.O,_backtest=Module._backtest=asm.P,_free=Module._free=asm.Q,_malloc=Module._malloc=asm.R,___errno_location=asm.__errno_location,_TA_ForEachFunc=Module._TA_ForEachFunc=asm.T,_TA_GetFuncHandle=Module._TA_GetFuncHandle=asm.U,_TA_GetFuncInfo=Module._TA_GetFuncInfo=asm.V,_TA_GetInputParameterInfo=Module._TA_GetInputParameterInfo=asm.W,_TA_GetOptInputParameterInfo=Module._TA_GetOptInputParameterInfo=asm.X,_TA_GetOutputParameterInfo=Module._TA_GetOutputParameterInfo=asm.Y,_TA_ParamHolderAlloc=Module._TA_ParamHolderAlloc=asm.Z,_TA_ParamHolderFree=Module._TA_ParamHolderFree=asm._,_TA_SetInputParamIntegerPtr=Module._TA_SetInputParamIntegerPtr=asm.$,_TA_SetInputParamRealPtr=Module._TA_SetInputParamRealPtr=asm.aa,_TA_SetInputParamPricePtr=Module._TA_SetInputParamPricePtr=asm.ba,_TA_SetOptInputParamInteger=Module._TA_SetOptInputParamInteger=asm.ca,_TA_SetOptInputParamReal=Module._TA_SetOptInputParamReal=asm.da,_TA_SetOutputParamIntegerPtr=Module._TA_SetOutputParamIntegerPtr=asm.ea,_TA_SetOutputParamRealPtr=Module._TA_SetOutputParamRealPtr=asm.fa,_TA_CallFunc=Module._TA_CallFunc=asm.ga,_TA_Initialize=Module._TA_Initialize=asm.ha,_TA_Shutdown=Module._TA_Shutdown=asm.ia,_TA_SetRetCodeInfo=Module._TA_SetRetCodeInfo=asm.ja,_TA_GetVersionString=Module._TA_GetVersionString=asm.ka,___getTypeName=asm.la,__embind_initialize_bindings=Module.__embind_initialize_bindings=asm.ma,stackSave=asm.na,stackRestore=asm.oa,stackAlloc=asm.pa,___cxa_is_pointer_type=asm.qa,dynCall_viijii=Module.dynCall_viijii=asm.ra,dynCall_jiji=Module.dynCall_jiji=asm.sa,dynCall_iiiiij=Module.dynCall_iiiiij=asm.ta,dynCall_iiiiijj=Module.dynCall_iiiiijj=asm.ua,dynCall_iiiiiijj=Module.dynCall_iiiiiijj=asm.va,calledRun;function applySignatureConversions(exports){var makeWrapper_pp=f=>a0=>f(a0)>>>0,makeWrapper_p=f=>()=>f()>>>0;return(exports=Object.assign({},exports)).malloc=makeWrapper_pp(exports.malloc),exports.__errno_location=makeWrapper_p(exports.__errno_location),exports.__getTypeName=makeWrapper_pp(exports.__getTypeName),exports.stackSave=makeWrapper_p(exports.stackSave),exports.stackAlloc=makeWrapper_pp(exports.stackAlloc),exports}function run(){function doRun(){calledRun||(calledRun=!0,Module.calledRun=!0,ABORT)||(initRuntime(),readyPromiseResolve(Module),Module.onRuntimeInitialized&&Module.onRuntimeInitialized(),postRun())}0<runDependencies||(preRun(),0<runDependencies)||(Module.setStatus?(Module.setStatus("Running..."),setTimeout(function(){setTimeout(function(){Module.setStatus("")},1),doRun()},1)):doRun())}if(Module.ccall=ccall,Module.cwrap=cwrap,Module.addFunction=addFunction,Module.removeFunction=removeFunction,dependenciesFulfilled=function runCaller(){calledRun||run(),calledRun||(dependenciesFulfilled=runCaller)},Module.preInit)for("function"==typeof Module.preInit&&(Module.preInit=[Module.preInit]);0<Module.preInit.length;)Module.preInit.pop()();function evalScope(locals,code){with(locals)eval(code)}function utf8_encode(s){if("undefined"!=typeof TextEncoder)return(new TextEncoder).encode(s);for(var pos=0,len=s.length,at=0,tlen=Math.max(32,len+(len>>1)+7),target=new Uint8Array(tlen>>3<<3);pos<len;){var extra,value=s.charCodeAt(pos++);if(55296<=value&&value<=56319)if(pos<len&&56320==(64512&(extra=s.charCodeAt(pos)))&&(++pos,value=((1023&value)<<10)+(1023&extra)+65536),55296<=value&&value<=56319)continue;if(at+4>target.length&&(tlen=(tlen=(tlen+=8)*(1+pos/s.length*2))>>3<<3,(extra=new Uint8Array(tlen)).set(target),target=extra),0==(4294967168&value))target[at++]=value;else{if(0==(4294965248&value))target[at++]=value>>6&31|192;else{if(0==(4294901760&value))target[at++]=value>>12&15|224;else{if(0!=(4292870144&value))continue;target[at++]=value>>18&7|240,target[at++]=value>>12&63|128}target[at++]=value>>6&63|128}target[at++]=63&value|128}}return target.slice(0,at)}function valuesToString(values,pos,ch){void 0===ch&&(ch=" ");for(var result="",i=pos=void 0===pos?0:pos;i<values.length;i++)pos<i&&(result+=ch),null==values[i]?result+="null":"string"==typeof values[i]?result+=values[i]:"number"==typeof values[i]||"function"==typeof values[i].getFullYear?result+=values[i].toString():void 0!==values[i].cols&&"string"==typeof values[i].type&&"table"==values[i].type?result+="`"+JSON.stringify(values[i])+"`":result+=JSON.stringify(values[i]);return result=0<result.length?utf8_encode(result):result}function Vector2Array(obj){for(var arr=[],arrSize=obj.size(),i=0;i<arrSize;i++)arr.push(obj.get(i));return arr}function toNonExponential(value){var sign,e;return"number"!=typeof value&&(value=parseFloat(value),isNaN(value))?"":(value<0?(sign="-",value=Math.abs(value)):sign="",value<1?(e=parseInt(value.toString().split("e-")[1]))&&(value*=Math.pow(10,e-1),value="0."+new Array(e).join("0")+value.toString().substring(2)):(e=parseInt(value.toString().split("e+")[1]))&&(value=(value/=Math.pow(10,e))+new Array(e+1).join("0")),sign+value)}function initThread(env){function Thread(func,args){this.tid=void 0===func?0:nextId++,this.terminated=!1,this.ts=0,this.te=0,this.ret=null,this.funcs=[],Array.isArray(func)?(this.funcs.push(func),this.funcs=this.funcs.concat(args)):this.funcs.push([func].concat(args)),this.data={},this.messageQueue=[],this.run=function(){pending++;var prevThreadId=currentThreadId,ctx=(currentThreadId=this.tid,this.ts=env.UnixNano()/1e6,{});for(let i=this.funcs.length-1;0<=i;i--){"string"==typeof this.funcs[i][0]&&(this.funcs[i][0]=new Function(this.funcs[i][0]));var ret=this.funcs[i][0].apply(ctx,this.funcs[i].slice(1));0==i&&(this.ret=ret)}this.te=env.UnixNano()/1e6,totalElapsed+=this.te-this.ts,this.terminated=!1,currentThreadId=prevThreadId,pending--},this.id=function(){return this.tid},this.name=function(){return 0==this.tid?"MainThread":"Thread-"+this.tid},this.terminate=function(){this.terminated=!0},this.release=function(){delete threads[this.tid]},this.postMessage=function(msg){this.messageQueue.push(msg)},this.peekMessage=function(){return this.messageQueue.shift()||null},this.join=function(timeout){var now=env.UnixNano()/1e6-totalElapsed;if("number"==typeof timeout)if(0<timeout){if(now+timeout<this.te)return void env.Sleep(timeout);env.Sleep(this.te-now)}else if(timeout<0&&now<this.te)return;return this.release(),{id:this.tid,terminated:this.terminated,elapsed:this.te-this.ts,ret:this.ret}},this.eventLoop=function(){env.LogError("sandbox not support eventLoop")}}let threads={},nextId=1,pending=0,totalElapsed=0,currentThreadId=0;function run_forever(){for(;;)env.Sleep(10)}threads[0]=new Thread,env.threading={Thread:function(f){var thread=new Thread(f,1<arguments.length?Array.prototype.slice.call(arguments,1):[]);return(threads[thread.tid]=thread).run(),thread},getThread:function(tid){return threads[tid]},mainThread:function(){return threads[0]},currentThread:function(){return threads[currentThreadId]},pending:function(){return pending},Lock:function(){let locked=!1;return{acquire:function(){locked&&run_forever(),locked=!0},release:function(){locked=!1}}},Event:function(){return{set:function(){return!0},clear:function(){return!0},isSet:function(){return!1},wait:function(timeout){return!0}}},Condition:function(){let locked=!1;return{wait:function(){return!0},notify:function(){return!0},notifyAll:function(){return!0},acquire:function(){locked&&run_forever(),locked=!0},release:function(){locked=!1}}},Dict:function(){let dict={};return{get:function(key){return dict[key]},set:function(key,value){dict[key]=value}}}},env.__Thread=function(f){var thread=new Thread(f,1<arguments.length?Array.prototype.slice.call(arguments,1):[]);return(threads[thread.tid]=thread).run(),thread.tid},env.__threadPeekMessage=function(timeout=0){var currentThreadId=nextId-1,currentThreadId=threads[currentThreadId];return currentThreadId&&0!=currentThreadId.messageQueue.length?currentThreadId.receiveMessage():null},env.__threadPostMessage=function(threadId,msg){threadId=threads[threadId];threadId&&threadId.sendMessage(msg)},env.__threadJoin=function(threadId,timeout){var thread=threads[threadId];if(thread)return thread.join(timeout);throw"thread #"+threadId.toString()+" not found"},env.__threadTerminate=function(threadId){threadId=threads[threadId];threadId&&(threadId.terminate(),threadId.release())},env.__threadGetData=function(threadId,key){threadId=threads[threadId];return threadId&&threadId.data[key]||null},env.__threadSetData=function(threadId,key,value){threadId=threads[threadId];threadId&&(threadId.data[key]=value)},env.__threadId=function(){return nextId-1},env.__threadPending=function(running=0){return 0}}return run(),Module.talib=function(){function ReadDouble(p,idx){return getValue(p+4*idx,"double")}function ReadInt(p,idx){return getValue(p+4*idx,"i32")}function ReadStr(p,idx){return UTF8ToString(getValue(p+4*idx,"i32"))}function GetArr(arr,attr,isInteger){var ret=[],tmp=0;isInteger=void 0!==isInteger&&isInteger;for(var i=0;i<arr.length;i++)"number"!=typeof(tmp=arr[i])&&(tmp=arr[i][attr]),isInteger?ret.push(parseInt(tmp)):ret.push(tmp);var data=isInteger?new Uint8Array(new Int32Array(ret).buffer):new Uint8Array(new Float64Array(ret).buffer),ret=Module._malloc(data.length);return writeArrayToMemory(data,ret),ret}Module._TA_Initialize();function throwError(errCode){var retCodeInfo;if(0!==errCode)throw retCodeInfo=Module._malloc(8),TA_SetRetCodeInfo(errCode,retCodeInfo),errCode=ReadStr(retCodeInfo,0)+": "+ReadStr(retCodeInfo,1),Module._free(retCodeInfo),current_func+": "+errCode}var obj={help:function(n){return obj["h_"+n]()},list:[]},TA_GetInputParameterInfo=Module._TA_GetInputParameterInfo,TA_GetOptInputParameterInfo=Module._TA_GetOptInputParameterInfo,TA_GetOutputParameterInfo=Module._TA_GetOutputParameterInfo,TA_ParamHolderAlloc=Module._TA_ParamHolderAlloc,TA_ParamHolderFree=Module._TA_ParamHolderFree,TA_SetInputParamRealPtr=Module._TA_SetInputParamRealPtr,TA_SetInputParamIntegerPtr=Module._TA_SetInputParamIntegerPtr,TA_SetInputParamPricePtr=Module._TA_SetInputParamPricePtr,TA_SetOptInputParamReal=Module._TA_SetOptInputParamReal,TA_SetOptInputParamInteger=Module._TA_SetOptInputParamInteger,TA_SetOutputParamIntegerPtr=Module._TA_SetOutputParamIntegerPtr,TA_SetOutputParamRealPtr=Module._TA_SetOutputParamRealPtr,TA_CallFunc=Module._TA_CallFunc,TA_SetRetCodeInfo=Module._TA_SetRetCodeInfo,current_func="obj",funcCallback=addFunction(function(ptr){var name=ReadStr(ptr,0),group=ReadStr(ptr,1),hint=ReadStr(ptr,2),nbInput=(ReadInt(ptr,4),ReadInt(ptr,5));if(!(1<nbInput&&"OBV"!==name)){for(var nbOptInput=ReadInt(ptr,6),nbOutput=ReadInt(ptr,7),funcHandle=ReadInt(ptr,8),pInfo=Module._malloc(4),inputs=[],optInputs=[],outputs=[],i=0;i<nbInput;i++){throwError(TA_GetInputParameterInfo(funcHandle,i,pInfo));ptr=ReadInt(pInfo,0);inputs.push({type:ReadInt(ptr,0),paramName:ReadStr(ptr,1),flags:ReadInt(ptr,2)})}for(i=0;i<nbOptInput;i++){throwError(TA_GetOptInputParameterInfo(funcHandle,i,pInfo));ptr=ReadInt(pInfo,0);optInputs.push({type:ReadInt(ptr,0),paramName:ReadStr(ptr,1),flags:ReadInt(ptr,2),displayName:ReadStr(ptr,3),defaultValue:ReadDouble(ptr,6),hint:ReadStr(ptr,8)})}for(i=0;i<nbOutput;i++){throwError(TA_GetOutputParameterInfo(funcHandle,i,pInfo));ptr=ReadInt(pInfo,0);outputs.push({type:ReadInt(ptr,0),paramName:ReadStr(ptr,1),flags:ReadInt(ptr,2)})}Module._free(pInfo),obj["h_"+name]=function(){for(var args=[],i=0;i<inputs.length;i++){var type=inputs[i].type,flags=inputs[i].flags,paramName=inputs[i].paramName;1===type?args.push(["Array[Real]",paramName]):2===type?args.push(["Array[Integer]",paramName]):0===type&&(type=[],1&flags&&type.push("Open"),2&flags&&type.push("High"),4&flags&&type.push("Low"),8&flags&&type.push("Close"),16&flags&&type.push("Volume"),32&flags&&type.push("OpenInterest"),64&flags&&type.push("Time"),args.push(["Records["+type.join(",")+"]",paramName]))}for(i=0;i<optInputs.length;i++){var optType="NA";0===optInputs[i].type?optType="RealRange":1===optInputs[i].type?optType="RealList":2===optInputs[i].type?optType="IntegerRange":3===optInputs[i].type&&(optType="IntegerList"),args.push([optType,optInputs[i].paramName,optInputs[i].defaultValue])}for(var rets=[],i=0;i<outputs.length;i++){var outType="Real";1===outputs[i].type&&(outType="Integer"),rets.push([outType,outputs[i].paramName])}return[name,args,rets,hint]},obj.list.push(name);for(var needArg=0,i=0;i<inputs.length;i++){var type=inputs[i].type,flags=inputs[i].flags;(1===type||2===type||0===type&&(1&flags&&needArg++,2&flags&&needArg++,4&flags&&needArg++,8&flags&&needArg++,16&flags))&&needArg++}obj[name]=function(records){var info={handle:funcHandle,name:current_func=name,needArg:needArg,hint:hint,group:group,inputs:inputs,optInputs:optInputs,outputs:outputs};if(void 0===records&&throwError(2),0===records.length){if(0===info.outputs.length)return[];for(var outputArr=[],i=0;i<info.outputs.length;i++)outputArr.push([]);return outputArr}var argPos=0,argv=arguments,moveStep="number"==typeof records[0]?1:0,allocatedParams=(1==moveStep&&arguments.length<info.needArg&&throwError(2),Module._malloc(4)),openPrice=(throwError(TA_ParamHolderAlloc(info.handle,allocatedParams)),null),highPrice=null,lowPrice=null,closePrice=null,volume=null,ints=[],paramsPtr=ReadInt(allocatedParams,0);Module._free(allocatedParams);for(var i=0;i<info.inputs.length;i++){var tmp,type=info.inputs[i].type,flags=info.inputs[i].flags;1===type?(closePrice||(closePrice=GetArr(argv[argPos],"Close"),argPos+=moveStep),throwError(TA_SetInputParamRealPtr(paramsPtr,i,closePrice))):2===type?(tmp=GetArr(argv[argPos],"Close",!0),argPos+=moveStep,ints.push(tmp),throwError(TA_SetInputParamIntegerPtr(paramsPtr,i,tmp))):0===type&&(1&flags&&(openPrice||(openPrice=GetArr(argv[argPos],"Open"),argPos+=moveStep)),2&flags&&(highPrice||(highPrice=GetArr(argv[argPos],"High"),argPos+=moveStep)),4&flags&&(lowPrice||(lowPrice=GetArr(argv[argPos],"Low"),argPos+=moveStep)),8&flags&&(closePrice||(closePrice=GetArr(argv[argPos],"Close"),argPos+=moveStep)),16&flags&&(volume||(volume=GetArr(argv[argPos],"Volume"),argPos+=moveStep)),throwError(TA_SetInputParamPricePtr(paramsPtr,i,openPrice,highPrice,lowPrice,closePrice,volume,null)))}for(0==moveStep&&argPos++,i=0;i<info.optInputs.length;i++)switch(v=argPos+i<arguments.length?arguments[i+argPos]:info.optInputs[i].defaultValue,info.optInputs[i].type){case 0:case 1:TA_SetOptInputParamReal(paramsPtr,i,v);break;case 2:case 3:TA_SetOptInputParamInteger(paramsPtr,i,v);break;default:throw"error"}outputArr=[];for(i=0;i<info.outputs.length;i++){var ptr=null;1===info.outputs[i].type?(ptr=Module._malloc(4*records.length),throwError(TA_SetOutputParamIntegerPtr(paramsPtr,i,ptr))):0===info.outputs[i].type&&(ptr=Module._malloc(8*records.length),throwError(TA_SetOutputParamRealPtr(paramsPtr,i,ptr))),outputArr.push(ptr)}var allocatedParams=Module._malloc(4),outNbElement=Module._malloc(4),beg=(TA_CallFunc(paramsPtr,0,records.length-1,allocatedParams,outNbElement),ReadInt(allocatedParams,0)),num=ReadInt(outNbElement,0),ret=(Module._free(allocatedParams),Module._free(outNbElement),[]);for(i=0;i<info.outputs.length;i++){ptr=outputArr[i];ret[i]=[];for(var v,j=0;j<records.length;j++)j<beg||num<=j-beg?ret[i].push(NaN):(1===info.outputs[i].type?v=ReadInt(ptr,j-beg):0===info.outputs[i].type&&(v=ReadDouble(ptr,2*(j-beg))),ret[i].push(v));Module._free(ptr)}for(throwError(TA_ParamHolderFree(paramsPtr)),openPrice&&Module._free(openPrice),highPrice&&Module._free(highPrice),lowPrice&&Module._free(lowPrice),closePrice&&Module._free(closePrice),volume&&Module._free(volume),i=0;i<ints.length;i++)Module._free(ints[i]);return 1===ret.length?ret[0]:ret}}},"vii");if(0!==ccall("TA_ForEachFunc","number",["pointer","number"],[funcCallback,0]))throw"error";return removeFunction(funcCallback),obj},Module.VMain=function(task){for(var exchanges=[],i=0;i<task.Exchanges.length;i++)exchanges[i]=function(eIdx){var self={},idx=eIdx;return self.cache=[],self.ct="",self.period=task.Options.Period,self.currency=Module.js_Exchange_GetCurrency(eIdx),self.maxBarLen=task.Exchanges[idx].MaxBarLen,self.lastRawJSON="",self.GetName=function(){return Module.js_Exchange_GetName(eIdx)},self.SetData=function(pair,detail){return"string"!=typeof detail&&(detail=JSON.stringify(detail)),Module.js_Exchange_SetData(eIdx,pair,detail)},self.GetPeriod=function(){return self.period/1e3},self.GetCurrency=function(){return self.currency},self.GetLabel=function(){return Module.js_Exchange_GetLabel(eIdx)},self.GetUSDCNY=function(){return Module.js_Exchange_GetUSDCNY(eIdx)},self.GetRate=function(){return Module.js_Exchange_GetRate(eIdx)},self.SetRate=function(n){return Module.js_Exchange_SetRate(eIdx,n=void 0===n?1:n)},self.SetCurrency=function(s){Module.js_Exchange_SetCurrency(eIdx,s),self.currency=Module.js_Exchange_GetCurrency(eIdx)},self.SetBase=function(s){return Module.js_Exchange_SetBase(eIdx,s)},self.GetBase=function(){return Module.js_Exchange_GetBase(eIdx)},self.SetTimeout=function(n){},self.IO=function(k,v){return void 0===v&&(v=1),"currency"==k?self.SetCurrency(v):Module.js_Exchange_IO(eIdx,k,v)},self.SetPrecision=function(a,b){Module.js_Exchange_SetPrecision(eIdx,a,b)},self.SetProxy=function(){},self.GetQuoteCurrency=function(){return Module.js_Exchange_GetQuoteCurrency(eIdx)},self.GetBaseCurrency=function(){return Module.js_Exchange_GetBaseCurrency(eIdx)},self.GetDepth=function(symbol){self.lastRawJSON="";var ret=Module.js_Exchange_GetDepth(eIdx,symbol||"");if(!ret)return null;for(var arr=Vector2Array(ret.Orders),d={Asks:[],Bids:[]},i=0;i<arr.length;i++)(i<ret.AsksLen?d.Asks:d.Bids).push(arr[i]);return d},self.GetTickers=function(){self.lastRawJSON="";var ret=Module.js_Exchange_GetTickers(eIdx);return ret?Vector2Array(ret):null},self.GetMarkets=function(){return JSON.parse(Module.js_Exchange_GetMarkets(eIdx))},self.GetTicker=function(symbol){return self.lastRawJSON="",Module.js_Exchange_GetTicker(eIdx,symbol||"")},self.GetData=function(pair,timeout,offset){"number"!=typeof timeout&&(timeout=6e4),"number"!=typeof offset&&(offset=0),self.lastRawJSON="";pair=Module.js_Exchange_GetData(eIdx,pair,timeout,offset);return 0<pair.Data.length?pair.Data=JSON.parse(pair.Data):pair.Data=null,pair},self.GetTrades=function(symbol){self.lastRawJSON="";symbol=Module.js_Exchange_GetTrades(eIdx,symbol||"");return symbol?Vector2Array(symbol):null},self.SetMaxBarLen=function(n){self.maxBarLen=n},self.GetRecords=function(symbol,period,limit){"number"==typeof symbol?(limit=period,period=symbol,symbol=""):void 0===symbol&&(symbol="",period=-1,limit=0),self.lastRawJSON="";symbol=Module.js_Exchange_GetRecords(eIdx,symbol||"",period=void 0!==period&&-1!=period?period:self.period/1e3,limit="number"!=typeof limit?0:limit);if(!symbol)return null;var records=Vector2Array(symbol),symbol=self.currency+"/"+self.ct+"/"+period.toString();if(void 0===self.cache[symbol])records.length>self.maxBarLen&&(records=records.slice(records.length-self.maxBarLen)),self.cache[symbol]=records;else for(var c=self.cache[symbol],preTime=0<c.length?c[c.length-1].Time:0,i=0;i<records.length;i++)records[i].Time==preTime&&0<c.length?c[c.length-1]=records[i]:records[i].Time>preTime&&(c.push(records[i]),preTime=c[c.length-1].Time,c.length>self.maxBarLen)&&c.shift();let bars=self.cache[symbol];return bars=0<limit&&bars.length>limit?bars.slice(bars.length-limit):bars},self.GetAccount=function(){return self.lastRawJSON="ctpAccount",Module.js_Exchange_GetAccount(eIdx)},self.GetRawJSON=function(){return"ctpAccount"!=self.lastRawJSON?self.lastRawJSON:Module.js_Exchange_GetCTPAccountJSON(eIdx)},self.Buy=function(price,amount){return self.lastRawJSON="",Module.js_Exchange_Buy(eIdx,price,amount,valuesToString(Array.prototype.slice.call(arguments),2))},self.Sell=function(price,amount){return self.lastRawJSON="",Module.js_Exchange_Sell(eIdx,price,amount,valuesToString(Array.prototype.slice.call(arguments),2))},self.CreateOrder=function(symbol,side,price,amount){return self.lastRawJSON="",Module.js_Exchange_CreateOrder(eIdx,symbol,side,price,amount,valuesToString(Array.prototype.slice.call(arguments),4))},self.Log=function(orderType,price,amount){Module.js_Exchange_Log(eIdx,orderType,price,2==orderType?0:amount,valuesToString(Array.prototype.slice.call(arguments),2==orderType?2:3))},self.GetOrders=function(symbol){self.lastRawJSON="";symbol=Module.js_Exchange_GetOrders(eIdx,symbol||"");return symbol?Vector2Array(symbol):null},self.GetHistoryOrders=function(symbol,since,limit){"number"==typeof symbol&&(limit=since,since=symbol,symbol=""),self.lastRawJSON="",void 0===limit&&(limit=0);symbol=Module.js_Exchange_GetHistoryOrders(eIdx,symbol||"",(since=void 0===since?0:since).toString(),limit);return symbol?Vector2Array(symbol):null},self.GetAssets=function(){self.lastRawJSON="";var ret=Module.js_Exchange_GetAssets(eIdx);return ret?Vector2Array(ret):null},self.GetOrder=function(orderId){return self.lastRawJSON="",Module.js_Exchange_GetOrder(eIdx,orderId)},self.CancelOrder=function(orderId){return self.lastRawJSON="",Module.js_Exchange_CancelOrder(eIdx,orderId,valuesToString(Array.prototype.slice.call(arguments),1))},self.SetDirection=function(s){return Module.js_Exchange_SetDirection(eIdx,s)},self.SetMarginLevel=function(symbol,marginLevel){var tmp;return"number"==typeof symbol&&(tmp=marginLevel||"",marginLevel=symbol,symbol=tmp),Module.js_Exchange_SetMarginLevel(eIdx,symbol,marginLevel)},self.SetContractType=function(symbol){var r=Module.js_Exchange_SetContractType(eIdx,symbol);return"string"==typeof r?(self.ct=symbol,JSON.parse(r)):null},self.GetContractType=function(){return self.ct},self.GetFundings=function(symbol){self.lastRawJSON="";symbol=Module.js_Exchange_GetFundings(eIdx,symbol||"");return symbol?Vector2Array(symbol):null},self.GetPosition=self.GetPositions=function(symbol){self.lastRawJSON="";symbol=Module.js_Exchange_GetPositions(eIdx,symbol||"");return symbol?Vector2Array(symbol):null},self.Go=function(){var args=Array.prototype.slice.call(arguments),ret=self[args[0]].apply(self,args.slice(1));return{wait:function(){return ret}}},self}(i);function countLines(s){for(var count=1,i=0;i<s.length;i++)"\n"==s[i]&&count++;return count}var k,gApis={kvdb:{}},__realDate=(initThread(gApis),Date),__cRetryDelay=3e3,runtime=(gApis.RDate=__realDate,gApis.Benchmark=Module.js_Benchmark,gApis._T=function(a,b){return"[trans]"+("string"==typeof b?a+"|"+b:a)+"[/trans]"},gApis._D=function(date,fmt){void 0===fmt&&(fmt="yyyy-MM-dd hh:mm:ss"),"number"==typeof date?date=new __realDate(date):void 0===date&&(date=new __realDate(Module.js_UnixNano()/1e6));var y=date.getFullYear(),yy=(y%100).toString();1==yy.length&&(yy="0"+yy);var M=(M="0"+(date.getMonth()+1)).substring(M.length-2),d=(d="0"+date.getDate()).substring(d.length-2),h=(h="0"+date.getHours()).substring(h.length-2),m=(m="0"+date.getMinutes()).substring(m.length-2),date=(date="0"+date.getSeconds()).substring(date.length-2);return fmt.replace("yyyy",y).replace("MM",M).replace("dd",d).replace("hh",h).replace("mm",m).replace("ss",date).replace("yy",yy)},gApis.Unix=function(){return Module.js_Unix()},gApis.UnixNano=function(){return Module.js_UnixNano()},gApis.Sleep=function(n){Module.js_Sleep(n)},gApis.Log=function(){Module.js_Log(valuesToString(Array.prototype.slice.call(arguments)))},gApis.LogError=function(){Module.js_LogError(valuesToString(Array.prototype.slice.call(arguments)))},gApis.LogStatus=function(){Module.js_LogStatus(valuesToString(Array.prototype.slice.call(arguments)))},gApis.LogProfit=function(profit){Module.js_LogProfit(profit,valuesToString(Array.prototype.slice.call(arguments),1))},gApis.LogReset=function(keep){Module.js_LogReset(keep=void 0===keep?0:keep)},gApis.EnableLog=function(flag){Module.js_EnableLog(flag=void 0===flag?!0:flag)},gApis.LogProfitReset=function(keep){Module.js_LogProfitReset(keep=void 0===keep?0:keep)},gApis.Date=function(s){return void 0===s&&(s=Module.js_UnixNano()/1e6),new __realDate(s)},gApis.Date.UTC=__realDate.UTC,gApis.Date.parse=__realDate.parse,gApis.Date.now=function(){return Module.js_UnixNano()/1e6},gApis._Cross=function(arr1,arr2){if(arr1.length!==arr2.length)throw"cross array length not equal";for(var n=0,i=arr1.length-1;0<=i&&"number"==typeof arr1[i]&&"number"==typeof arr2[i];i--)if(arr1[i]<arr2[i]){if(0<n)break;n--}else{if(!(arr1[i]>arr2[i]))break;if(n<0)break;n++}return n},gApis._N=function(v,precision){"number"!=typeof precision&&(precision=4);var v=parseFloat(v.toFixed(Math.max(10,precision+5))),s=toNonExponential(v).split(".");return!(0<=precision&&(s.length<2||s[1].length<=precision))&&((s=v<0)&&(v=-v),precision=Math.pow(10,precision),v=Math.floor(v*precision)/precision,s)&&0!=v?-v:v},gApis._C=function(method){for(var r;!(r=method.apply(this,Array.prototype.slice.call(arguments).slice(1)));)gApis.Sleep(__cRetryDelay);return r},gApis._CDelay=function(n){0<n&&(__cRetryDelay=n)},gApis.GetPid=function(){return 1},gApis.GetOS=function(){return"linux/amd64"},gApis.GetLastError=function(){return Module.js_GetLastError()},gApis.SetErrorFilter=function(s){},gApis.SetChannelData=function(s){},gApis.GetChannelData=function(rid){return""},gApis.MD5=function(s){return Module.js_MD5(s)},gApis.UUID=function(){return Math.random().toString(36).substring(2,15)+Math.random().toString(36).substring(2,15)},gApis.GetCommand=function(){return""},gApis.GetMeta=function(){return""},gApis.Mail=function(){return!0},gApis.Mail_Go=function(){return{wait:function(){return!0}}},gApis.EventLoop=function(){gApis.LogError("sandbox not support EventLoop")},gApis.Dial=function(){gApis.LogError("sandbox not support Dial")},gApis.DBExec=function(){gApis.LogError("sandbox not support DBExec")},gApis.Encode=function(){gApis.LogError("sandbox not support Encode")},gApis.HttpQuery=function(url){return Module.js_HttpQuery(url)},gApis.HttpQuery_Go=function(url){return{wait:function(){return Module.js_HttpQuery(url)}}},gApis.JSONParse=function(s){return JSON.parse(s)},gApis.StrDecode=function(s){gApis.LogError("sandbox not support StrDecode")},gApis.IsVirtual=function(){return!0},gApis.EnableLogLocal=function(){},gApis.LogVacuum=function(){},gApis.Version=function(){return"3.6"},gApis._G=function(k,v){if(void 0===k)return 1;if(null==k)gApis.kvdb={};else{if(k=k.toLowerCase(),void 0===v)return void 0===gApis.kvdb[k]?null:gApis.kvdb[k];null==v?delete gApis.kvdb[k]:gApis.kvdb[k]=v}},gApis.Chart=function(js){var self={update:function(cfg){Module.js_Chart_New(utf8_encode(JSON.stringify(cfg)))},add:function(seriesIdx,d,replaceId){var arr=[];"number"!=typeof seriesIdx?arr=seriesIdx:(arr=[seriesIdx,d],void 0!==replaceId&&arr.push(replaceId)),Module.js_Chart_Add(utf8_encode(JSON.stringify(arr)))},reset:function(reverse){Module.js_Chart_Reset("number"!=typeof reverse?0:reverse)}};return self.update(js),self},gApis.KLineChart=function(options){(options=void 0===options?{}:options).__isCandle=!0;function newPlot(shape){return void 0===shape.overlay&&(shape.overlay=scope.overlay),"shape"!=shape.type&&"bgcolor"!=shape.type&&"barcolor"!=shape.type&&(shape.title&&!scope.runtime.titles[shape.title]||(shape.title="<"+(shape.title||"plot")+"_"+scope.runtime.count.toString()+">"),scope.runtime.count+=1,shape.title)&&(scope.runtime.titles[shape.title]=!0),shape}var scope={chart:gApis.Chart(options),bar:{},overlay:options.overlay||!1,preTime:0,runtime:{plots:[],signals:[],titles:{},count:0}};return scope.register=function(name,args,pfn){var dic={},names=[];args.forEach(function(s,i){Array.isArray(s)?(names.push(s[0]),dic[s[0]]={pos:i,val:s[1]}):(names.push(s),dic[s]={pos:i})}),scope[name]=function(){if(!(scope.bar.Time<scope.preTime)){var argv={};for(k in dic)void 0!==dic[k].val&&(argv[k]=dic[k].val);for(var i=0;i<arguments.length;i++)if(i==arguments.length-1&&"object"==typeof arguments[i])for(var k in arguments[i])void 0!==dic[k]&&(argv[k]=arguments[i][k]);else void 0!==dic[names[i]]&&(argv[names[i]]=arguments[i]);return pfn(argv)}}},scope.begin=function(bar){scope.bar=bar},scope.reset=function(remain){scope.chart.reset(remain),scope.preTime=0},scope.close=function(){var data;scope.bar.Time<scope.preTime||(data={timestamp:scope.bar.Time,open:scope.bar.Open,high:scope.bar.High,low:scope.bar.Low,close:scope.bar.Close,volume:scope.bar.Volume},0<scope.runtime.plots.length&&(data.runtime||(data.runtime={}),data.runtime.plots=scope.runtime.plots),0<scope.runtime.signals.length&&(data.runtime||(data.runtime={}),data.runtime.signals=scope.runtime.signals),scope.preTime==scope.bar.Time?scope.chart.add(0,data,-1):scope.chart.add(0,data),scope.preTime=scope.bar.Time,scope.runtime.plots=[],scope.runtime.signals=[],scope.runtime.titles={},scope.runtime.count=0)},scope.register("plot",[["series",NaN],"title","color","linewidth",["style","line"],"trackprice",["histbase",0],["offset",0],["join",!1],"editable","show_last",["display","all"],"overlay"],function(argv,idx){if(!isNaN(argv.series))return scope.runtime.plots.push(newPlot({series:argv.series,overlay:argv.overlay,title:argv.title,join:argv.join,color:argv.color,histbase:argv.histbase,type:argv.style,lineWidth:argv.linewidth,display:argv.display,offset:argv.offset})),scope.runtime.plots.length-1}),scope.register("barcolor",["color","offset","editable","show_last","title",["display","all"]],function(argv,idx){"string"==typeof argv.color&&"all"==argv.display&&scope.runtime.plots.push({type:"barcolor",title:argv.title,color:argv.color,offset:argv.offset,showLast:argv.show_last,display:argv.display})}),scope.register("plotarrow",["series","title",["colorup","#00ff00"],["colordown","#ff0000"],["offset",0],["minheight",5],["maxheight",100],["editable",!0],"show_last",["display","all"],"overlay"],function(argv){"all"!=argv.display||isNaN(argv.series)||scope.runtime.plots.push(newPlot({series:argv.series,title:argv.title,colorup:argv.colorup,colordown:argv.colordown,offset:argv.offset,minheight:argv.minheight,maxheight:argv.maxheight,showLast:argv.show_last,type:"shape",style:"arrow",display:argv.display,overlay:argv.overlay}))}),scope.register("hline",["price","title","color",["linestyle","dashed"],"linewidth","editable",["display","all"],"overlay"],function(argv){return scope.runtime.plots.push(newPlot({title:argv.title,price:argv.price,overlay:argv.overlay,color:argv.color,type:"hline",lineStyle:argv.linestyle,lineWidth:argv.linewidth,display:argv.display})),scope.runtime.plots.length-1}),scope.register("bgcolor",["color","offset","editable","show_last","title",["display","all"],"overlay"],function(argv){"string"==typeof argv.color&&"all"==argv.display&&scope.runtime.plots.push(newPlot({title:argv.title,overlay:argv.overlay,color:argv.color,type:"bgcolor",showLast:argv.show_last,offset:argv.offset}))}),scope.register("plotchar",["series","title","char",["location","abovebar"],"color","offset","text","textcolor","editable",["size","auto"],"show_last","display","overlay"],function(argv){"absolute"!=argv.location&&!argv.series||"absolute"==argv.location&&isNaN(argv.series)||!argv.char||scope.runtime.plots.push(newPlot({overlay:argv.overlay,type:"shape",style:"char",char:argv.char,series:argv.series,location:argv.location,color:argv.color,offset:argv.offset,size:argv.size,text:argv.text,textColor:argv.textcolor}))}),scope.register("plotshape",["series","title","style",["location","abovebar"],"color","offset","text","textcolor","editable",["size","auto"],"show_last","display","overlay"],function(argv){"absolute"!=argv.location&&!argv.series||"absolute"==argv.location&&isNaN(argv.series)||scope.runtime.plots.push(newPlot({type:"shape",overlay:argv.overlay,title:argv.title,size:argv.size,style:argv.style,series:argv.series,location:argv.location,color:argv.color,offset:argv.offset,text:argv.text,textColor:argv.textcolor}))}),scope.register("plotcandle",["open","high","low","close","title","color","wickcolor","editable","show_last","bordercolor",["display","all"],"overlay"],function(argv){"all"==argv.display&&scope.runtime.plots.push(newPlot({price:argv.high,open:argv.open,high:argv.high,low:argv.low,close:argv.close,title:argv.title,color:argv.color,wickColor:argv.wickcolor,showLast:argv.show_last,borderColor:argv.bordercolor,type:"candle",display:argv.display,overlay:argv.overlay}))}),scope.register("fill",["plot1","plot2","color","title","editable","show_last","fillgaps",["display","all"]],function(argv){var dst;0<=argv.plot1&&0<=argv.plot2&&argv.plot1<scope.runtime.plots.length&&argv.plot2<scope.runtime.plots.length&&"all"==argv.display&&void 0!==(dst=scope.runtime.plots[argv.plot1])&&(void 0===dst.fill&&(dst.fill=[]),dst.fill.push({value:scope.runtime.plots[argv.plot2].series,color:argv.color,showLast:argv.show_last}))}),scope.register("signal",["direction","price","qty","id"],function(argv){var task={id:argv.id||argv.direction,qty:argv.qty,avgPrice:argv.price};"buy"==argv.direction||"long"==argv.direction?task.direction="long":"sell"==argv.direction||"short"==argv.direction?task.direction="short":"closesell"==argv.direction||"closeshort"==argv.direction?(task.direction="close",task.closeDirection="short"):"closebuy"!=argv.direction&&"closelong"!=argv.direction||(task.direction="close",task.closeDirection="long"),(task.direction||task.closeDirection)&&scope.runtime.signals.push(task)}),scope},gApis.$={},gApis.ORDER_STATE_PENDING=0,gApis.ORDER_STATE_CLOSED=1,gApis.ORDER_STATE_CANCELED=2,gApis.ORDER_STATE_UNKNOWN=3,gApis.ORDER_TYPE_BUY=0,gApis.ORDER_TYPE_SELL=1,gApis.ORDER_OFFSET_OPEN=0,gApis.ORDER_OFFSET_CLOSE=1,gApis.PD_LONG=0,gApis.PD_SHORT=1,gApis.PD_LONG_YD=2,gApis.PD_SHORT_YD=3,gApis.LOG_TYPE_BUY=0,gApis.LOG_TYPE_SELL=1,gApis.LOG_TYPE_CANCEL=2,gApis.LOG_TYPE_ERROR=3,gApis.LOG_TYPE_PROFIT=4,gApis.LOG_TYPE_LOG=5,gApis.LOG_TYPE_RESTART=6,gApis.PERIOD_M1=60,gApis.PERIOD_M3=180,gApis.PERIOD_M5=300,gApis.PERIOD_M15=900,gApis.PERIOD_M30=1800,gApis.PERIOD_H1=3600,gApis.PERIOD_H2=7200,gApis.PERIOD_H4=14400,gApis.PERIOD_H6=21600,gApis.PERIOD_H12=43200,gApis.PERIOD_D1=86400,gApis.PERIOD_D3=259200,gApis.PERIOD_W1=604800,gApis.exchanges=exchanges,gApis.exchange=exchanges[0],gApis.talib=Module.talib(),gApis.TA=TAInstance(function(name){Module.js_LogTA(name,valuesToString(Array.prototype.slice.call(arguments),1,","))}),null),tpls=(gApis.__runtime__=function(obj){runtime=obj},task.Code),scope={};for(k in gApis)scope[k]=gApis[k];for(var endPos,rawTxt,mapLinesPos,fullSource="",sourceMapObj=[],i=0;i<tpls.length;i++){var tpl=tpls[i],argsLine="",argDic={},suffix=(tpl[1].forEach(function(pair){argsLine+="var "+pair[0]+" = "+JSON.stringify(pair[1])+";",argDic[pair[0]]=pair[1]}),argsLine+="var __arguments = "+JSON.stringify(argDic)+";","\n;if(typeof(init)==='function')init();"),fileName=tpl[2];if(i==tpls.length-1){if(fileName="__FILE__",void 0!==Module.__ret__){scope.__arguments=argDic,tpl[1].forEach(function(pair){scope[pair[0]]=pair[1]}),Module.__ret__.scope=scope,Module.__ret__.Join=Module.js_Join;continue}suffix+=";;main()\nif(typeof(onexit)==='function'){onexit()}"}sourceMapObj.push({baseLine:countLines(fullSource),codeLine:countLines(tpl[0]),fileName:fileName,mapLines:(fileName=tpl[0],mapLinesPos=rawTxt=endPos=void 0,-1!=(mapLinesPos=fileName.indexOf("//# sourceMappingObj="))?(rawTxt="",rawTxt=-1==(endPos=fileName.indexOf("\n",mapLinesPos+1))?fileName.slice(mapLinesPos+"//# sourceMappingObj=".length):fileName.slice(mapLinesPos+"//# sourceMappingObj=".length,endPos),JSON.parse(rawTxt)):[])}),fullSource+="(function(){"+argsLine+tpl[0]+suffix+"})();\n"}function dumpStack(err){let stacks=[],errMsg="";return void 0===err?err=new Error:(err.stack&&(console.log("\nStacktrace:"),console.log("===================="),console.log(err.stack)),errMsg=err.toString(),stacks.push(errMsg)),-1==errMsg.indexOf("line:")&&err.stack&&err.stack.split("\n").forEach(function(stackLine){var posSearch=stackLine.indexOf("(eval at evalScope ");if(0<posSearch){var pos=stackLine.indexOf("<anonymous>:",posSearch),posSearch=(0<pos&&(e=stackLine.indexOf(")",pos)),stackLine.substring(0,posSearch).split("\n")),stackLine=stackLine.substring(pos+"<anonymous>:".length,e).split(":");if(0<stackLine.length){for(var vLine=parseInt(stackLine[0]),fileName=null,mapLines=[],pIndex=0;pIndex<sourceMapObj.length;pIndex++)if(vLine>=sourceMapObj[pIndex].baseLine&&vLine<sourceMapObj[pIndex].baseLine+sourceMapObj[pIndex].codeLine){fileName=sourceMapObj[pIndex].fileName,mapLines=sourceMapObj[pIndex].mapLines,vLine-=sourceMapObj[pIndex].baseLine-1;break}if(fileName){for(var pItem=0;pItem<mapLines.length;pItem++)if(vLine>=mapLines[pItem][0]&&vLine<=mapLines[pItem][1]){vLine-=mapLines[pItem][2];break}stacks.push(posSearch[posSearch.length-1]+"("+fileName+":"+vLine.toString()+")")}}}}),stacks.join("\n")}Module.__dumpStack__=dumpStack;try{evalScope(scope,fullSource)}catch(err){"EOF"!=err&&Module.js_LogError(utf8_encode(dumpStack(err)))}try{void 0!==task.Step&&task.Step||Module.js_Close(JSON.stringify(runtime))}catch(e){}},Module.VTask=function(task,httpCache,httpGet,callBack,onEnd,retScope){void 0!==retScope&&(Module.__ret__=retScope),void 0!==httpCache&&httpCache||(httpCache={});var retScope=addFunction(function(a,b,c,d){var jsString,a=UTF8ToString(a),a=(void 0!==httpCache[a]?jsString=httpCache[a]:(jsString=httpGet(a),httpCache[a]=jsString),lengthBytesUTF8(jsString)+1),ptr=_malloc(a);return stringToUTF8(jsString,ptr,a+1),setValue(b,ptr,"i32"),setValue(c,a,"i32"),setValue(d,1,"i32"),0},"iiiii"),progressCallback=addFunction(function(st){callBack(JSON.parse(UTF8ToString(st)))},"vi"),dumpStack=addFunction(function(b,c,d){var lengthBytes,ptr,pfn=Module.__dumpStack__;return"function"!=typeof pfn?1:(pfn=pfn(),lengthBytes=lengthBytesUTF8(pfn)+1,ptr=_malloc(lengthBytes),stringToUTF8(pfn,ptr,lengthBytes+1),setValue(b,ptr,"i32"),setValue(c,lengthBytes,"i32"),setValue(d,1,"i32"),0)},"iiii");ccall("backtest","number",["string","string","pointer","pointer"],[JSON.stringify(task),null,retScope,progressCallback,dumpStack]),"function"==typeof onEnd&&onEnd()},moduleArg}})(),fs,os,crypto,httpGet,_session,toUnix,fmtTime,toHTML,pdObj,htmlResult,__m;function md5(text){return crypto.createHash("md5").update(text).digest("hex")}function fetchSync(url){var sab=new SharedArrayBuffer(10256),int32=new Int32Array(sab),url=new(require("worker_threads").Worker)(`
    const { workerData } = require('worker_threads');
    const int32 = new Int32Array(workerData);
    const uint8Array = new Uint8Array(workerData);
    
    function next(dataLen, hasMore) {
        Atomics.store(int32, 2, dataLen);
        Atomics.store(int32, 3, hasMore);
        Atomics.store(int32, 0, 1);
        Atomics.notify(int32, 0);
        // wait for main thread to consume the data
        Atomics.wait(int32, 1, 0);
        Atomics.store(int32, 1, 0);
        Atomics.notify(int32, 1);
    }
    
    function postBuffer(text) {
        if (text.length == 0) {
            next(0, 0);
            return;
        }
        const bufLen = 10240;
        let counter = 0;
        for (let i = 0; i < text.length; i++) {
            uint8Array[16 + counter] = text.charCodeAt(i);
            counter++;
            let hasMore = i == text.length - 1 ? 0 : 1;
            if (counter == bufLen || i == text.length - 1) {
                // notify
                next(counter, hasMore)
                counter = 0;
            }
        }
    }
    
    let url = '${url}';
    let finalData = '';
    require(url.split('://')[0]).get(url, function(response) {
        response.setEncoding('utf8');
        response.on('data', function(data) {
            finalData += data;
        });
        response.on('error', function(err) {
            postBuffer('')
        })
        response.on('end', function() {
            postBuffer(finalData)
        })
    });
    `,{workerData:sab,eval:!0}),uint8Array=new Uint8Array(sab);let str="";for(;;){Atomics.wait(int32,0,0),Atomics.store(int32,0,0);var totalLen=Atomics.load(int32,2),hasMore=Atomics.load(int32,3);for(let i=0;i<totalLen;i++)str+=String.fromCharCode(uint8Array[16+i]);if(Atomics.store(int32,1,1),Atomics.notify(int32,1),0==totalLen||0==hasMore)break}return url.terminate(),str}function notify(msgType,msg){var msg=Buffer.from(msg),h=Buffer.allocUnsafe(8);h.writeUInt32BE(msgType,0),h.writeUInt32BE(msg.length,4),_session.write(Buffer.concat([h,msg]))}"object"==typeof exports&&"object"==typeof module?module.exports=VBacktest:"function"==typeof define&&define.amd&&define([],()=>VBacktest),"undefined"!=typeof self&&void 0!==self.onmessage?self.onmessage=function(event){var event=event.data,task=event[0],httpCache=event[1],lastProgress=0,lastSummary="";VBacktest().VTask(task,httpCache,function(path){var r=XMLHttpRequest?new XMLHttpRequest:new ActiveXObject("Microsoft.XMLHTTP");return r.open("GET",path,!1),r.send(null),r.responseText},function(st){var nowProgress;void 0!==st.TaskStatus&&1==st.TaskStatus&&(st.httpCache=httpCache),1==st.TaskStatus?self.postMessage({ret:st}):(nowProgress=st.Progress.toFixed(1))==lastProgress&&lastSummary===st.statusStr||(lastProgress=nowProgress,lastSummary=st.statusStr,self.postMessage({ret:st}))})}:(fs=require("fs"),os=require("os"),crypto=require("crypto"),httpGet=function(url){var tmpCache=os.tmpdir()+"/cache",tmpCache=(fs.existsSync(tmpCache)||fs.mkdirSync(tmpCache),tmpCache+"/botvs_kline_"+md5(url));return fs.existsSync(tmpCache)?fs.readFileSync(tmpCache,"utf-8"):((url=fetchSync(url))&&-1!==url.indexOf(",")&&fs.writeFileSync(tmpCache,url,"utf-8"),url)},"undefined"!=typeof s?(_session=s,VBacktest().VTask(__cfg__,null,httpGet,function(st){notify(st.TaskStatus,JSON.stringify(st))},function(){try{_session.end()}catch(e){}})):(toUnix=function(s){var n=parseInt(new Date(s).getTime()/1e3);return-1==s.indexOf(" ")&&(n-=28800),n},fmtTime=function(date,fmt){void 0===fmt&&(fmt="yyyy-MM-dd hh:mm:ss");var y=date.getFullYear(),yy=(y%100).toString();1==yy.length&&(yy="0"+yy);var M=(M="0"+(date.getMonth()+1)).substring(M.length-2),d=(d="0"+date.getDate()).substring(d.length-2),h=(h="0"+date.getHours()).substring(h.length-2),m=(m="0"+date.getMinutes()).substring(m.length-2),date=(date="0"+date.getSeconds()).substring(date.length-2);return fmt.replace("yyyy",y).replace("MM",M).replace("dd",d).replace("hh",h).replace("mm",m).replace("ss",date).replace("yy",yy)},toHTML=function(data){var html="<table><tr><td>";for(i in data.columns)html+="<td>"+data.columns[i]+"</td>";html+="</tr>";for(var rows=[],i=0;i<data.rows.length;i++){for(var rowSkip="",row=(5<=i&&i<data.rows.length-5&&(i=data.rows.length-5,rowSkip="<tr><td>...</td>"),"<tr><td>"+data.index[i]+"</td>"),j=0;j<data.columns.length;j++)0<rowSkip.length&&(rowSkip+="<td>...</td>"),row+="<td>"+data.rows[i][j]+"</td>";0<rowSkip.length&&rows.push(rowSkip+"</tr>"),rows.push(row+"</tr>")}return html=(html+=rows.join("")+"</table>")+("<p>"+data.rows.length+" rows x "+data.columns.length+" columns<p>")},pdObj=function(data){var p=this;p.index=data.index,p.columns=data.columns,data.columns.forEach(function(c){p[c]=[]}),data.rows.forEach(function(row){row.forEach(function(f,idx){idx<data.columns.length&&p[data.columns[idx]].push(f)})}),p._toHtml=function(){return toHTML(data)}},__ctx.exports.get_bars=function(symbol,unit,start,end,count){void 0===count&&(count=1e3),"string"==typeof(unit=void 0===unit?"1d":unit)&&(ec=unit[unit.length-1],unit=parseInt(unit.slice(0,unit.length-1)),"d"==ec?unit*=1440:"h"==ec?unit*=60:"s"==ec&&(unit/=60));var key,ec=parseInt((new Date).getTime()/1e3),params=(void 0!==end&&(ec=toUnix(end)),void 0!==start?(ts_from=toUnix(start),void 0===end&&(ec=ts_from+100*unit*(count+10))):void 0===end?(ts_from=0,ts_end=0):ts_from=ec-100*unit*(count+10),{symbol:symbol,resolution:unit,from:ts_from,to:ec,size:count}),arr=[];for(key in params)arr.push(encodeURIComponent(key)+"="+encodeURIComponent(params[key]));for(var data=JSON.parse(httpGet("https://q.fmz.com/data/history?"+arr.join("&"))),rows=[],index=[],i=0;i<data.length;i++)index.push(fmtTime(new Date(1e3*data[i][0]))),rows.push(data[i].slice(1,data[i].length));return new pdObj({index:index,rows:rows,columns:["open","high","low","close","volume"]})},htmlResult=function(s){var s=JSON.parse(s),pnl=[],index=[];return s.Snapshots.forEach(function(ele){var acc=ele[1][0];pnl.push([acc.PnL,100*acc.Utilization]),index.push(fmtTime(new Date(ele[0])))}),columns=["PnL","Utilization(%)"],new pdObj({columns:columns,index:index,rows:pnl})},__m=VBacktest(),void 0===global.talib&&(global.talib=__m.talib(),global.TA=__m.TA,global.plot=function(data,layout){void 0!==data.index&&void 0!==data.columns&&(arr=[],data.columns.forEach(function(c){arr.push({name:c,x:data.index,y:data[c]})}),data=arr),Array.isArray(data)&&0<data.length&&"number"==typeof data[0]&&(obj={x:[],y:data},data.forEach(function(ele,idx){obj.x.push(idx+1)}),data=[obj]),void 0===layout&&(layout={});var arr,obj,timestamp=(new Date).getTime(),timestamp=["<div class='plotly-plot'>","<div id='notebook-plot-"+timestamp+"'></div>","<script>","function plot(){","Plotly.plot('notebook-plot-"+timestamp+"',",JSON.stringify(data),",",JSON.stringify(layout),",",JSON.stringify({displaylogo:!1}),");","}","if(window.Plotly){","plot();","}else{","var head = document.head || document.getElementsByTagName('head')[0];","var s = document.createElement('script');","s.charset='utf-8';","s.src = 'https://www.fmz.com/pkg/plotly-latest.min.js';","s.type = 'text/javascript';","s.async = false;","s.onreadystatechange = s.onload = plot;","head.appendChild(s);","}","<\/script>","</div>"].join("");$$.html(timestamp)}),__ctx.exports.VCtx=function(obj){function periodToMs(s,def){var tmp;return s.length<2||(tmp=parseInt(s.slice(0,s.length-1)),"d"==(s=s[s.length-1])?def=6e4*tmp*60*24:"m"==s?def=6e4*tmp:"h"==s&&(def=36e4*tmp)),def}function dicGet(obj,k,v){return void 0!==obj[k]?obj[k]:v}var k,period=periodToMs(obj.period,36e5),basePeriod=36e5,exchanges=("string"==typeof obj.basePeriod?basePeriod=periodToMs(obj.basePeriod,basePeriod):864e5==period?basePeriod=36e5:36e5==period?basePeriod=18e5:18e5==period?basePeriod=9e5:9e5==period?basePeriod=3e5:3e5==period&&(basePeriod=6e4),[]),feeDef={Huobi:[150,200],OKX:[150,200],Binance:[150,200],Futures_BitMEX:[8,10],Futures_OKX:[30,30],Futures_HuobiDM:[30,30],Futures_CTP:[25,25],Futures_XTP:[30,130]},isCNY=!1,period=(obj.exchanges.forEach(function(e){var arr=e.currency.toUpperCase().split("_"),fee=(1==arr.length&&arr.push(-1!=e.eid.indexOf("CTP")?"CNY":"USD"),[200,200]),v=e.fee,fee=void 0!==v?[1e3*v[0],1e3*v[1]]:feeDef[e.eid]||[200,200];cfg={Balance:dicGet(e,"balance",1e4),BaseCurrency:arr[0],BasePeriod:basePeriod,DepthDeep:5,DepthAmount:20,FaultTolerant:0,PreBarLen:1e3,FeeDenominator:5,FeeMaker:fee[0],FeeTaker:fee[1],FeeMin:dicGet(e,"feeMin",0),Id:e.eid,Label:e.eid,QuoteCurrency:arr[1],SlipPoint:0,Stocks:dicGet(e,"stocks",3)},"Futures_CTP"==e.eid||"Futures_XTP"==e.eid?(cfg.DepthDeep=1,isCNY=!0):"Futures_OKX"!=e.eid&&"Futures_HuobiDM"!=e.eid&&"Bitfinex"!=e.eid&&"Binance"!=e.eid&&("Futures_BitMEX"==e.eid?15!=(v=cfg.BasePeriod/6e4)&&30!=v||(cfg.BasePeriod=3e5):e.eid.indexOf("Futures")),exchanges.push(cfg)}),(options={DataServer:obj.dataServer||(isCNY?"https://q.youquant.com":"https://q.fmz.com"),MaxChartLogs:800,MaxProfitLogs:800,MaxRuntimeLogs:800,NetDelay:200,Period:period,RetFlags:189,UpdatePeriod:5e3}).TimeBegin=toUnix(obj.start),options.TimeEnd=toUnix(obj.end),86400),obj=options.TimeEnd-options.TimeBegin,ctx=(obj/3600<=2?period=60:obj/86400<=2?period=300:obj/86400<30&&(period=3600),options.SnapshotPeriod=1e3*period,options.RetFlags|=256,{});for(k in __m.VTask({Code:[["function main() {}",[],"main"]],Exchanges:exchanges,Options:options,Step:!0},null,httpGet,function(st){},function(){},ctx),ctx.scope)"Date"!=k&&(global[k]=ctx.scope[k]);var realJoin=ctx.Join;return ctx.Join=function(report){var r=realJoin();return report?htmlResult(r):r},ctx}));